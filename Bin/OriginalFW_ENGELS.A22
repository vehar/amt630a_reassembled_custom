;:------------- ;:----------------- AMT630A firmware for 3.5" TFT screen
                ;------------------
.disass         ;disassembled 11/2017 nocash
                ;------------------
                .x51_style_z80   ;want 8031/8051 code in Z80/80x86-style syntax
                ;note: this asm syntax can be assembled using no$x51
                ;------------------
                ;anymem_xxx functions with r3=memtype:
                ;  r3=FEh  load/store MOVX [dpl +(r1)]     8bit addr   ext ram
                ;  r3=FFh  load       MOVC [dptr+(r2:r1)]  16bit addr  code rom
                ;  r3=00h  load/store MOV  [dpl +(r1)]     8bit addr   internal ram
                ;  r3=01h  load/store MOVX [dptr+(r2:r1)]  16bit addr  ext ram
                ;---
                ;49E7h  anymem_read_8bit_a_from_mem_r3r2r1               ;A = [r3r2r1]
                ;4A00h  anymem_read_8bit_a_from_mem_r3r2r1dptr           ;A = [r3r2r1+dptr]
                ;4A2Dh  anymem_add_8bit_a_to_mem_r3r2r1dptr              ;ADD [r3r2r1+dptr],A
                ;4A60h  anymem_store_8bit_a_to_mem_r3r2r1                ;[r3r2r1] = A
                ;4A72h  anymem_store_8bit_a_to_mem_r3r2r1dptr            ;[r3r2r1+dptr] = A
                ;4B11h  anymem_read_16bit_ba_from_mem_r3r2r1             ;B:A = [r3r2r1]
                ;4B3Ch  anymem_read_16bit_ba_from_mem_r3r2r1dptr         ;mov B:A = [r3r2r1+dptr]
                ;4CECh  anymem_read_24bit_r3r2r1_from_mem_r3r2r1         ;r3r2r1 = [r3r2r1]
                ;4D0Ch  anymem_store_24bit_pushed_values_to_mem_r3r2r1   ;[r3r2r1] = [pushedstackparam24bit]
                ;4D5Bh  anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr     ;r3r2r1=[r3r2r1+dptr]
                ;------------------
                ;todo:
                ;  resolve "xxx_" global labels
                ;  resolve "@@_" local labels
                ;  resolve "dptr,00xxh" to "idxXxx"
                ;------------------
                ver07mar2016    equ 1
                ver11sep2017    equ 2
                ;---
                 tech_version equ ver07mar2016  ;\enable ONE of these
                ;tech_version equ ver11sep2017  ;/
                ;---
                patchme equ 0;1                 ;-enable=1 for basic fixes
                ;---
                ;VERSION  'XDD_MT_630A_35D_LD035H3_DX_3KEY_151022_LOGO'
                ;CUSTOMER 'Customer:MT_35D'
                ;DATE     'Time:Mar 07 2016'
                ;---
                ;VERSION  'GK_SK_630A_43D_DX_3KEY_170911'
                ;CUSTOMER 'Customer:SK_43D'
                ;DATE     'Time:Sep 11 2017'
                ;------------------
                flash_version     equ tech_version
                av_detect_version equ tech_version
                av_select_version equ tech_version
                shuffle_version   equ tech_version ;ridiculous changes (code/data moved to other locations)
                slang_version     equ tech_version ;ridiculous changes (gui localization)
                blah_version      equ tech_version ;ridiculous changes (added/removed unused coded)
                lcd_spi_version   equ tech_version  ;<-- aka NONE if newer
                infrared_version  equ tech_version  ;<-- aka NONE if older
                ;------------------
                .if tech_version<ver11sep2017
                  lcd_pin_variant equ 1
                  lcd_rgb_variant equ 1
                  lcd_xres        equ 320  ;\ratio = 4:3          ;XXXlcdSIZE
                  lcd_yres        equ 240  ;/
                .else
                  lcd_pin_variant equ 2
                  lcd_rgb_variant equ 2
                  lcd_xres        equ 480  ;\ratio = 15.88235293:9 (16:9 would be yres=270pix)
                  lcd_yres        equ 272  ;/
                .endif
                ;------------------
                .if lcd_yres*4/3=lcd_xres
                  wide_screen equ 0     ;4:3
                .else
                  wide_screen equ 1     ;16:9
                .endif
                ;------------------
;:------------- ;:----------------- XRAM
                ;------------------
                .ram   ;XRAM (via MOVX opcode)
                org  0
                ;------------------
RAM 0000..0007  defs 8  ;unused
                ;------------------ Settings (from FLASH addr E000h/F000h)
                xram_settings_start:
RAM 0008 (+00h) xram_sett_id_AAh     db 0 ;Settings Start ID (AAh)
RAM 0009 (+01h) xram_sett_curr_power db 0 ;Settings Current Power state (0=off, 1=on) (needed when "xram_sett_power_up" is set to "SAVE", ie. the current/recent state is then SAVEd at this FLASH location)
                .if flash_version<ver11sep2017
RAM 000A (+02h)   xram_sett_cmd_wren   db 0 ;Settings FLASH Erase Timeout1? port FDE4h  ;<-- usually 06h     ;\SPI FLASH ERASE related (timing? timeout? calib? chiptype? spi/i2c?)
RAM 000B (+03h)   xram_sett_cmd_erase  db 0 ;Settings FLASH Erase Timeout2? port FDE4h' ;<-- 20h/D7h/D8h,20h ;/  (usually=20h=FLASH UNLOCK EVERYTHING)
                .else
                  xram_sett_flash_id  db 0
                  xram_sett_lock_some db 0
RAM 000A (+02h)   xram_sett_lock_all  db 0 ;Settings FLASH Erase Timeout1? port FDE4h  ;<-- usually 06h     ;\SPI FLASH ERASE related (timing? timeout? calib? chiptype? spi/i2c?)
RAM 000B (+03h)   xram_sett_cmd_erase db 0 ;Settings FLASH Erase Timeout2? port FDE4h' ;<-- 20h/D7h/D8h,20h ;/  (usually=20h=FLASH UNLOCK EVERYTHING)
                  xram_sett_testburn  db 0  ;XXXXXXXXX (55h or AAh) (or 00h when NOT ERASED)
                .endif
RAM 000C (+04h) xram_sett_input      db 0 ;Settings Input (aka SelSource)
RAM 000D (+05h) xram_sett_detected_v db 0 ;Settings Detected Video ...maybe PAL/NTSC/off? (can be 0..7 for EIGHT byte tables?) (used values are 00h and 03h ?) (and FFh in some cases, when invalid or so?)
RAM 000E (+06h) xram_sett___0Eh      db 0 ;Settings   ... can be 10h or 11h ? (video detect related... and/or overrides SNOW/BLUE?)
RAM 000F (+07h) xram_sett_vcom_ac    db 0 ;Settings VCOM_AC      ;-8bit "ADC" related? aka VCOM analog input ???       ;\not really used/implemented
RAM 0010 (+08h) xram_sett_vcom_dc_hi db 0 ;Settings VCOM_DC.msb  ;\16bit "DAC" (aka PWM output, only lower 8bit used)  ;
RAM 0011 (+09h) xram_sett_vcom_dc_lo db 0 ;Settings VCOM_DC.lsb  ;/                                                    ;/
RAM 0012 (+0Ah) xram_sett_brightness db 0 ;Settings Brightness
RAM 0013 (+0Bh) xram_sett_contrast   db 0 ;Settings Contrast
RAM 0014 (+0Ch) xram_sett_saturation db 0 ;Settings Saturation (aka Mono/Color)
RAM 0015 (+0Dh) xram_sett_tint       db 0 ;Settings Tint (aka Hue)
RAM 0016 (+0Eh) xram_sett___16h      db 0 ;Settings   ... related to flag [iram_misc_flags].1
RAM 0017 (+0Fh) xram_sett_blankcolor db 0 ;Settings Forced Blank Color (via port FFD2h) (default=0=AV video on, alternately 1..6=force blank screen with selected color)
RAM 0018 (+10h) xram_sett_volume     db 0 ;Settings Volume (blah, there are GUI functions for changing this setting, but the setting isn't used elsewhere for actual Volume output) (also, there are no spare pins for that, unless when using one of the PWM pins shared with LCD-SPI, eg. SPI.DATA could be used while SPI.CS is high)
RAM 0019 (+11h) xram_sett_blah1      db 0 ;Settings Blah (00h, checked to be 00h..01h, not used otherwise)
RAM 001A (+12h) xram_sett_language   db 0 ;Settings Language
RAM 001B (+13h) xram_sett_zero_0     db 0 ;Settings Unused (init to 00h)
RAM 001C (+14h) xram_sett_zero_1     db 0 ;Settings Unused (init to 00h)
RAM 001D (+15h) xram_sett_zero_2     db 0 ;Settings Unused (init to 00h)
RAM 001E (+16h) xram_sett_zero_3     db 0 ;Settings Unused (init to 00h)
RAM 001F (+17h) xram_sett_zero_4     db 0 ;Settings Unused (init to 00h)
RAM 0020 (+18h) xram_sett_zero_5     db 0 ;Settings Unused (init to 00h)
RAM 0021 (+19h) xram_sett_zero_6     db 0 ;Settings Unused (init to 00h)
RAM 0022 (+1Ah) xram_sett_zero_7     db 0 ;Settings Unused (init to 00h)
RAM 0023 (+1Bh) xram_sett_zero_8     db 0 ;Settings Unused (init to 00h)
RAM 0024 (+1Ch) xram_sett_zero_9     db 0 ;Settings Unused (init to 00h)
RAM 0025 (+1Dh) xram_sett_mode       db 0 ;Settings Mode     (16:9 or 4:3)
RAM 0026 (+1Eh) xram_sett_rotate     db 0 ;Settings Rotate   (aka xflip?)
                .if blah_version>=ver11sep2017
                  xram_sett_zero_A   db 0 ;Settings Unused (init to 00h)
                .endif
RAM 0027 (+1Fh) xram_sett_req_reset  db 0 ;Settings Reset Request (when being in OSD Reset menu screen, 00h=Normal, 02h=SoftResetRequestedByUser)
RAM 0028 (+20h) xram_sett_ir         db 0 ;Settings InfraRed (blah, there are GUI functions for changing this setting, but the setting isn't used elsewhere for actual IR transfers)
RAM 0029 (+21h) xram_sett_quicklysys db 0 ;Settings Constant (affects behaviour of QuicklySys)
RAM 002A (+22h) xram_sett_blah2      db 0 ;Settings Blah (00h, checked to be 00h..01h, not used otherwise)
RAM 002B (+23h) xram_sett_power_up   db 0 ;Settings Initial Power-Up state (OFF,ON,SAVE) (initial state on supply-voltage-power up: default=ON, or alternately OFF, or, resume OLD state SAVED in FLASH memory)
RAM 002C (+24h) xram_sett_no_signal  db 0 ;Settings NoSignal (BLUE,SNOW,BLACK)   ;used excessively, weird
RAM 002D (+25h) xram_sett___2Dh      db 0 ;Settings   ... Input'b ? (somewhat copy of "xram_sett_input")
RAM 002E (+26h) xram_sett_blah3      db 0 ;Settings Blah (00h, checked to be 00h..04h, not used otherwise)
RAM 002F (+27h) xram_sett_unused1    db 0 ;Settings Unused (FFh)
RAM 0030 (+28h) xram_sett_unused2    db 0 ;Settings Unused (FFh)
RAM 0031 (+29h) xram_sett_unused3    db 0 ;Settings Unused (FFh)
RAM 0032 (+2Ah) xram_sett_unused4    db 0 ;Settings Unused (FFh)
RAM 0033 (+2Bh) xram_sett_unused5    db 0 ;Settings Unused (FFh)
RAM 0034 (+2Ch) xram_sett_unused6    db 0 ;Settings Unused (FFh)
RAM 0035 (+2Dh) xram_sett_unused7    db 0 ;Settings Unused (FFh)
RAM 0036 (+2Eh) xram_sett_keypadtype db 0 ;Settings Keypad Type (eg. 16h=U_3KEY)
                .if blah_version>=ver11sep2017
                  xram_sett_unused8  db 0 ;Settings Unused (FFh)
                .endif
RAM 0037 (+2Fh) xram_sett_id_55h     db 0 ;Settings End ID (55h)
RAM 0038 (+30h) xram_sett_chksum     db 0 ;Settings Xor Checksum
                xram_settings_end:
                xram_settings_size equ $-xram_settings_start
                ;------------------
                .if flash_version>=ver11sep2017
                  xram_curr_lock_some   db 0    ;copy of "xram_sett_lock_some"
                .endif
                ;------------------
RAM 0039h       xram_palntsc_same_counter        db 0       ;... lcd_same_signal_counter
                .if flash_version>=ver11sep2017
                  xram_curr_lock_all    db 0    ;copy of "xram_sett_lock_all"
                .endif
RAM 003Ah       xram_backtoroot_offhold_msb      db 0   ;\decreasing 16bit offhold for NoSignal ... Root & Save Settings
RAM 003Bh       xram_backtoroot_offhold_lsb      db 0   ;/   (THIS IS the annoying timeout that closes the currently menu when not pressing buttons for a few seconds, causing one to get "returned" to the brightness menu every once and when while trying to calibrate some other options like contrast or language)
RAM 003Ch       xram_save_settings_offhold_msb   db 0   ;\increasing 16bit offhold for SaveSettings (reset by keyboard keystrokes)
RAM 003Dh       xram_save_settings_offhold_lsb   db 0   ;/
RAM 003Eh            db 0   ;-unused
RAM 003Fh       xram_min_brightness      db 0       ;\... brightness
RAM 0040h       xram_max_brightness      db 0       ;/
RAM 0041h       xram_blah_zero_0         db 0    ;set to 00h, but not used otherwise
RAM 0042h       xram_min_saturation      db 0       ;\... saturation
RAM 0043h       xram_max_saturation      db 0       ;/
RAM 0044h       xram_keypad_was_read     db 0       ;keyboard (set to 01h upon first keyboard reading?) (can be 02h in newer firmware!?!)
RAM 0045h       xram_keypad_whatever     db 0       ;keyboard key.no? key.repeat.flags?   ... or IR input?
RAM 0046h       xram_keypad_flags_msb    db 0    ;flags?
RAM 0047h       xram_keypad_flags_lsb    db 0    ;flags...shifting offhold bits?
                 ;bit0: backlight (and lcd?) on          (0=off, 1=on)
                 ;bit1: ... unused? except, cleared in init
                 ;bit2: ... set in func_2Ch_FactoryMenu:
                 ;bit3: got secret_key_combo_MenuUDDUU   (0=no, 1=yes, got it)
                 ;bit4: got secret_key_combo_MenuDUUDD   (0=no, 1=yes, got it)
                 ;bit5-15: unused
RAM 0048h       xram_blah_zero_1         db 0    ;set to 00h, but not used otherwise
RAM 0049h       xram_blah_zero_2         db 0    ;set to 00h, but not used otherwise
RAM 004Ah       xram_min_contrast        db 0                 ;\... contrast
RAM 004Bh       xram_max_contrast        db 0                 ;/
RAM 004Ch       xram_blah_zero_3         db 0    ;set to 00h, but not used otherwise
RAM 004Dh       xram_whatever_pwr_input  db 0  ;... power/input related
                 ;00h = trying selected AV1/AV2 (ID_event_18h)
                 ;01h = power OFF  (ID_event_1Ah)
                 ;02h = trying AV2 (ID_event_17h) (also event_1Bh?)
                 ;03h = force  AV2 (ID_event_19h)
                 ;04h =
RAM 004Eh       xram_curr_keypadtype     db 0  ;copy of "xram_sett_keypadtype"
RAM 004Fh       xram_level1key_phase     db 0  ;... key state ?
RAM 0050h       xram_level1key_time_msb  db 0  ;... SAME key time, msb  ;maybe WANT same here (wait stable analog before accepting it)
RAM 0051h       xram_level1key_time_lsb  db 0  ;... SAME key time, lsb
RAM 0052h       xram_level1key_curr_button   db 0 ;curr_button
RAM 0053h       xram_level1key_old_button    db 0 ;old_button
                ;---
RAM 0054h       xram_level2key_phase         db 0   ;... higher key repeat phase index?     ;maybe REFUSE same here (until after a while, do key-repeat when kept held down)
                xram_level2key_base:                    ;\
RAM 0055h       xram_level2key_curr_button   db 0       ;
RAM 0056h       xram_level2key_old_button    db 0       ;
                ;---
RAM 0057h       xram_level3key_phase         db 0      ;... phase
RAM 0058h       xram_level3key_time_A_msb    db 0  ;\
RAM 0059h       xram_level3key_time_A_lsb    db 0  ; related to phase
RAM 005Ah       xram_level3key_time_B_msb    db 0  ;
RAM 005Bh       xram_level3key_time_B_lsb    db 0  ;/
RAM 005Ch       xram_keybuf_2byte_A:    defs 2  ;button, flags?
RAM 005Eh       xram_keybuf_2byte_B:    defs 2  ;button, flags?
RAM 0060h..     xram_keybuf_8byte_A:    defs 8  ;\2x8 bytes
RAM 0068h..     xram_keybuf_8byte_B:    defs 8  ;/
RAM 0070h..     xram_keybuf_7byte_A:    defs 7  ;\2x7 bytes
RAM 0077h..     xram_keybuf_7byte_B:    defs 7  ;/
                ;--- TEMP
RAM 007Eh       xram_tmp__7Eh     db 0   ;temp...
RAM 007Fh       xram_tmp__7Fh     db 0
RAM 0080h       xram_tmp__80h     db 0
RAM 0081h       xram_tmp__81h     db 0
RAM 0082h       xram_tmp__82h     db 0                ;\analog keypad value (TEMP ONLY)
RAM 0083h       xram_tmp__83h     db 0                ;/
RAM 0084h       xram_tmp__84h     db 0
RAM 0085h       xram_tmp__85h     db 0
RAM 0086h       xram_tmp__86h     db 0
RAM 0087h       xram_tmp__87h     db 0
RAM 0088h       xram_tmp__88h     db 0
RAM 0089h       xram_tmp__89h     db 0
RAM 008Ah       xram_tmp__8Ah     db 0
RAM 008Bh       xram_tmp__8Bh     db 0
RAM 008Ch       xram_tmp__8Ch     db 0    ;<-- used only for draw bar
RAM 008Dh       xram_tmp__8Dh     db 0    ;<-- used only for blah
RAM 008Eh       xram_tmp__8Eh     db 0                ;\initialized from "gui_null_Xxx" (that is, always initialized to 5x00h)
RAM 008Fh       xram_tmp__8Fh     db 0                ;
RAM 0090h       xram_tmp__90h     db 0  ;\            ;
RAM 0091h       xram_tmp__91h     db 0  ; temp32bit   ;
RAM 0092h       xram_tmp__92h     db 0  ;             ;/
RAM 0093h       xram_tmp__93h     db 0  ;/
RAM 0094h       xram_tmp__94h     db 0  ;\
RAM 0095h       xram_tmp__95h     db 0  ; temp32bit
RAM 0096h       xram_tmp__96h     db 0  ;            ;\temp16bit (used only in "get_window_addr")
RAM 0097h       xram_tmp__97h     db 0  ;/           ;/
                ;---
RAM 0098h       xram_current_window    db 0  ;-Current Window (0..4) (whereas, 0 works special in some caeses)
RAM 0099h       xram_window_0_size_msb db 0  ;\
RAM 009Ah       xram_window_0_size_lsb db 0  ;
RAM 009Bh       xram_window_1_size_msb db 0  ;
RAM 009Ch       xram_window_1_size_lsb db 0  ;
RAM 009Dh       xram_window_2_size_msb db 0  ;
RAM 009Eh       xram_window_2_size_lsb db 0  ;
RAM 009Fh       xram_window_3_size_msb db 0  ;
RAM 00A0h       xram_window_3_size_lsb db 0  ;
RAM 00A1h       xram_window_4_size_msb db 0  ;
RAM 00A2h       xram_window_4_size_lsb db 0  ;/
                .if flash_version>=ver11sep2017
                  xram_settings_2_addr:      defs 4
                  xram_settings_1_addr:      defs 4
                  xram_flash_chiptype        db 0  ;<-- moved "xram_flash_chiptype" ?
                .endif
RAM 00A3h       xram_tmp_window_addr_msb     db 0  ;window.addr.msb (within clear window function) ;\
RAM 00A4h       xram_tmp_window_addr_lsb     db 0  ;window.addr.lsb (within clear window function) ;
RAM 00A5h       xram_tmp_window_size_msb     db 0  ;window.size.msb (within clear window function) ; ;\blah, stored here, but not used aside from that
RAM 00A6h       xram_tmp_window_size_lsb     db 0  ;window.size.lsb (within clear window function) ; ;/
RAM 00A7h       xram_tmp_window_index_x      db 0  ;window.index.x  (within clear window function) ;
RAM 00A8h       xram_tmp_window_index_y      db 0  ;window.index.y  (within clear window function) ;/
RAM 00A9h       xram_irq_coarse_offhold      db 0      ;... some 250-step offhold in irq handler
RAM 00AAh       xram_old_AV_stat_signal_detect  db 0     ;old lower 4bit of "IO_AV_stat_signal_detect" ;\
RAM 00ABh       xram_irq_artifacts_offhold   db 0      ;... some 20-step offhold in irq handler     ;/
RAM 00ACh       xram_old_AV_stat_detect_2    db 0     ;mode? fixed FFh ?                         ;\
RAM 00ADh       xram_irq_sharpness_offhold   db 0      ;... some 10-step offhold in irq handler  ;/
RAM 00AEh       xram_irq_sensitivity_offhold db 0     ;... some 100-step detect offhold
RAM 00AFh            db 0  ;unused
RAM 00B0h            db 0  ;unused
RAM 00B1h            db 0  ;unused
RAM 00B2h            db 0  ;unused
RAM 00B3h       xram_tmp_osd_char_yy     db 0  ;osd.char.yy   (used only in unused function) ;\
RAM 00B4h       xram_tmp_osd_char_size   db 0  ;osd.char.size (used only in unused function) ;
RAM 00B5h       xram_tmp_osd_char_xsiz   db 0  ;osd.char.xsiz (used only in unused function) ;
RAM 00B6h       xram_tmp_osd_char_ysiz     db 0  ;osd.char.ysiz (used only in unused function) ;/
                ;---
                .if infrared_version>=ver11sep2017
                    xram_XXX__00C7h     db 0  ;00C7h  ;\old key (blah, written to, but never read from)
                    xram_XXX__00C8h     db 0  ;00C8h  ;/
                    xram_XXX__00C9h_msb db 0  ;00C9h  ;\for @@int0_core
                    xram_XXX__00CAh_lsb db 0  ;00CAh  ;/
                .endif
RAM 00B7h       xram_old_item          db 0
RAM 00B8h       xram_current_menu      db 0
RAM 00B9h       xram_current_item      db 0
RAM 00BAh       xram_index_secret_key_combo_MenuUDDUU     db 0       ;other.secret.key.combo.index
RAM 00BBh       xram_av_stat0_same_counter     db 0       ;...another.detect.counter (similar to 0039h)
RAM 00BCh       xram_old_detected_video db 0   ;00h or 03h or FFh
RAM 00BDh       xram_new_detected_video db 0   ;00h or 03h or FFh
                .if shuffle_version<ver11sep2017
RAM 00BEh            db 0   ;unused
RAM 00BFh            db 0   ;unused
                .endif
RAM 00C0h       xram_tmp_unused_index     db 0   ;used in UNUSED function
                .if flash_version<ver11sep2017
RAM 00C1h         xram_flash_chiptype db 0   ;used ... flash erase chip type (for timeouts or so)
                .endif
RAM 00C2h       xram_current_keypad_pin   db 0   ;blah, range 00h..00h (there's only one input pin)
RAM 00C3h       xram_index_secret_key_combo_MenuDUUDD     db 0   ;used   secret.key.combo.index
                ;---
                .if blah_version<ver11sep2017
RAM 00C4h..00FFh   defs 3ch     ;more xram (unused by firmware)
                .else
RAM 00D5h..00FFh   defs 2bh     ;more xram (unused by firmware)
                .endif
RAM 0100h..07FFh defs 00700h  ;more xram (unused by firmware) (total 2Kbyte)
                .errif $-800h
                ;---
RAM 0800h..1FFFh defs 01800h  ;mirror of CODE/SPIFLASH addr 800h..1FFFh (read only) (not so useful... unless it can be bank-switched to FLASH address above 64Kbyte space?)
RAM 2000h..2FFFh defs 01000h  ;unknown (hardware status regs ?)         (read only)
RAM 3000h..FAFFh defs 0cb00h  ;unused (FFh-filled)                      (read only)
                .errif $-0fb00h
                ;------------------
                ;I/O ports at FB00h..FFFFh (via MOVX)...
                ;---
FB00h           IO_OSD_bgmap_addr_lsb     db 0   ;      ;VRAM addr.lsb (xloc) (auto-incrementing on data writes?)
FB01h           IO_OSD_bgmap_data_lsb     db 0   ;
FB02h           IO_OSD_font_addr_lsb      db 0   ;     ;ADDR for manual vram upload? (index*factor?)
FB03h           IO_OSD_font_data_lsb      db 0   ;     ;DATA_MSB for manual vram upload?
FB04h           IO_OSD_font_data_msb      db 0   ;     ;DATA_LSB for manual vram upload?
FB05h           IO_OSD_window_enable_bits db 0   ;flags  (bit0..4=enable window 0..4, used other bits=?)  (bit6:hides windows,TEXT ON/OFF) (bit7:bitmap,BITMAP ON/OFF)
FB06h           IO_OSD_misc_transp_enable db 0   ;   IO_OSD_      ... upper2bit=semitrans.ctrl, other6bit=?
                ;---
FB07h           IO_OSD_window_0_size_x    db 0   ;     ;bit7:NOT R/W
FB08h           IO_OSD_window_0_size_y    db 0   ;     ;bit6-7:NOT R/W
FB09h           IO_OSD_window_0_xyloc_msb db 0   ;     ;bit7:NOT R/W ;msb's of 2x11bit (maybe xyloc?) (and two extra bits)
FB0Ah           IO_OSD_window_0_xloc_lsb  db 0   ;       ;lsb's of 11bit   (maybe xloc?)
FB0Bh           IO_OSD_window_0_yloc_lsb  db 0   ;       ;lsb's of 11bit   (maybe yloc?)
N/A             ;(IO_OSD_window_0_vramaddr_lsb)  <-- NONE SUCH (win0 addr=fixed=00h?)
                ;---
FB0Ch           IO_OSD_bright_transp_level   db 0   ;upper3bit=brightness, lower3bit=transparency, middle2bit=?
FB0Dh           IO_OSD_bgmap_addr_msb        db 0   ;  ;bit1-7:NOT R/W    ;VRAM addr.lsb (xloc) (need manual increment on LSB-carry-outs?)
FB0Eh           IO_OSD_bgmap_data_msb        db 0   ;  ;bit2-7:NOT R/W
FB0Fh           IO_OSD_font_addr_msb         db 0   ;  ;bit4-7:NOT R/W
FB10h           IO_OSD_bgmap_data_attr       db 0   ;  ;bit7:NOT R/W
FB11h           IO_OSD_bitmap_start_lsb      db 0   ;   IO_OSD_      ... ? (always set to 28h)  (num TEXT chars, at 1C0h and up) (remaining chars are BITMAP chars) (msbs in FB70h)
                ;---
FB12h           IO_OSD_window_1_size_x       db 0   ;  ;bit7:NOT R/W
FB13h           IO_OSD_window_1_size_y       db 0   ;  ;bit6-7:NOT R/W
FB14h           IO_OSD_window_1_xyloc_msb    db 0   ;     ;MSBs for xloc,yloc,vramaddr (plus 1bit unknown)
FB15h           IO_OSD_window_1_xloc_lsb     db 0   ;
FB16h           IO_OSD_window_1_yloc_lsb     db 0   ;
FB17h           IO_OSD_window_1_vramaddr_lsb db 0   ;
                ;---
FB18h           IO_OSD_window_2_size_x       db 0   ;  ;bit7:NOT R/W
FB19h           IO_OSD_window_2_size_y       db 0   ;  ;bit6-7:NOT R/W
FB1Ah           IO_OSD_window_2_xyloc_msb    db 0   ;
FB1Bh           IO_OSD_window_2_xloc_lsb     db 0   ;
FB1Ch           IO_OSD_window_2_yloc_lsb     db 0   ;
FB1Dh           IO_OSD_window_2_vramaddr_lsb db 0   ;    ;(MSB is in FB1Ah.bit7)
                ;---
FB1Eh           IO_OSD_window_3_size_x       db 0   ;  ;bit7:NOT R/W
FB1Fh           IO_OSD_window_3_size_y       db 0   ;  ;bit6-7:NOT R/W
FB20h           IO_OSD_window_3_xyloc_msb    db 0   ;
FB21h           IO_OSD_window_3_xloc_lsb     db 0   ;
FB22h           IO_OSD_window_3_yloc_lsb     db 0   ;
FB23h           IO_OSD_window_3_vramaddr_lsb db 0   ;
                ;---
FB24h           IO_OSD_window_4_size_x       db 0   ;  ;bit7:NOT R/W
FB25h           IO_OSD_window_4_size_y       db 0   ;  ;bit6-7:NOT R/W
FB26h           IO_OSD_window_4_xyloc_msb    db 0   ;
FB27h           IO_OSD_window_4_xloc_lsb     db 0   ;
FB28h           IO_OSD_window_4_yloc_lsb     db 0   ;
FB29h           IO_OSD_window_4_vramaddr_lsb db 0   ;
                ;---
FB2Ah                                        db 0   ;  (unused)    ;bit7:NOT R/W
FB2Bh           IO_OSD_window_0_vscale_upper db 0   ;\(3 bytes) (00h- or FFh-filled)  ;<-- vscale each line in for 24line chars ? (FB2Bh.bit0=upper line)
FB2Ch           IO_OSD_window_0_vscale_upmid db 0   ;
FB2Dh           IO_OSD_window_0_vscale_lomid db 0   ;/
FB2Eh           IO_OSD_window_0_vscale_lower db 0   ;-extra for height=32 (unused by firmware)
FB2Fh           IO_OSD_window_0_hscale_left  db 0   ;\(3 bytes) (00h- or FFh-filled)  ;<-- hscale each pix in for 24pix chars ?   (FB2Fh.bit0=left pix)
FB30h           IO_OSD_window_0_hscale_mid   db 0   ;
FB31h           IO_OSD_window_0_hscale_right db 0   ;/
FB32h           IO_OSD_window_0_scale        db 0   ;\   ;<-- ;bit4-7:NOT R/W
FB33h           IO_OSD_window_1_and_2_scale  db 0   ; txt.scale (2x2bit, for lsbs=ScaleX and msbs=ScaleY, per window?)
FB34h           IO_OSD_window_3_and_4_scale  db 0   ;/
FB35h           IO_OSD_bitmap_transp_misc    db 0   ;   fixed (00h)  ;changes to bit3,5 affect window positions (bit3=SOMEpixX, bit5=1pixY) (bit4:bitmap TRANSP color0?)    ;bit6-7:NOT R/W
FB36h..FB55h    IO_OSD_bitmap_colors:  defs 32 ;sixteen words (20h bytes) (used only by an UNUSED function) maybe 16-color bitmap palette?  ;\EVEN ADDRESSES: bit4-7:NOT R/W
N/A             ;IO_OSD_color_0   ;color 0 is fixed? (transparent) (just shows BLUE NO SIGNAL background)                       ;
FB56h           IO_OSD_color_1_msb      db 0   ;fixed (00h)  ;\00h,0Fh red                                                       ;
FB57h           IO_OSD_color_1_lsb      db 0   ;fixed (0Fh)  ;/                                                                  ;
FB58h           IO_OSD_color_2_msb      db 0   ;fixed (00h)  ;\00h,F0h green  ... maybe 4:4:4 RGB colors?                        ;
FB59h           IO_OSD_color_2_lsb      db 0   ;fixed (F0h)  ;/                                                                  ;
FB5Ah           IO_OSD_color_3_msb      db 0   ;fixed (0Fh)  ;\0Fh,00h blue (slightly brighter than BLUE NO SIGNAL background)   ;
FB5Bh           IO_OSD_color_3_lsb      db 0   ;fixed (00h)  ;/                                                                  ;
FB5Ch           IO_OSD_color_4_msb      db 0   ;fixed (00h)  ;\00h,FFh yellow (r+g)                                              ;
FB5Dh           IO_OSD_color_4_lsb      db 0   ;fixed (FFh)  ;/                                                                  ;
FB5Eh           IO_OSD_color_5_msb      db 0   ;fixed (0Fh)  ;\0Fh,F0h cyan (g+b)                                                ;
FB5Fh           IO_OSD_color_5_lsb      db 0   ;fixed (F0h)  ;/                                                                  ;
FB60h           IO_OSD_color_6_msb      db 0   ;fixed (0Fh)  ;\0Fh,FFh white (r+g+b)                                             ;
FB61h           IO_OSD_color_6_lsb      db 0   ;fixed (FFh)  ;/                                                                  ;
N/A             ;IO_OSD_color_7   ;color 7 is fixed? (black)                                                                    ;/
FB62h           IO_OSD_whatever_FB62h   db 0   ;whatever (bit0 cleared by firmware)
FB63h                db 0     ;   (unused)      ;-fully R/W
FB64h                db 0     ;   (unused)      ;-fully R/W
FB65h                db 0     ;   (unused)      ;-fully R/W
FB66h                db 0     ;   (unused)      ;-fully R/W
FB67h                db 0     ;   (unused)      ;-bit7:NOT R/W
FB68h                db 0     ;   (unused)      ;-fully R/W
FB69h                db 0     ;   (unused)      ;-fully R/W
FB6Ah                db 0     ;   (unused)      ;-bit7:NOT R/W
FB6Bh                db 0     ;   (unused)      ;-fully R/W
FB6Ch                db 0     ;   (unused)      ;-fully R/W
FB6Dh                db 0     ;   (unused)      ;-fully R/W
FB6Eh                db 0     ;   (unused)      ;-fully R/W
FB6Fh                db 0     ;   (unused)      ;-fully R/W
FB70h           IO_OSD_bitmap_start_msb db 0   ;fixed (00h) ;num TEXT chars (msbs of FB11h)  ;bit2-7:NOT R/W
FB71h                db 0     ;   (unused)      ;-bit1-7:NOT R/W
FB72h                db 0     ;   (unused)      ;-fully R/W
FB73h                db 0     ;   (unused)      ;-fully R/W
FB74h                db 0     ;   (unused)      ;-fully R/W
FB75h                db 0     ;   (unused)      ;-fully R/W
FB76h           IO_OSD_char_xsiz     db 0     ;\character x/y size in pixels  ;<-- lower5bit (upper3bit=?)  ;bit5-7:NOT R/W
FB77h           IO_OSD_char_ysiz     db 0     ;/(xsiz max 24pix?)             ;<-- lower6bit (upper2bit=?)  ;bit6-7:NOT R/W
FB78h           IO_OSD_xyflip        db 0     ;-(used by unused functions)  bit4:TileXflip, bit5:MapXflip, bit6:TileYflip, bit7:MapYflip, lower4bit=?
FB79h                db 0     ;   (unused)      ;-bit6-7:NOT R/W
FB7Ah                db 0     ;   (unused)      ;-bit6-7:NOT R/W
FB7Bh                db 0     ;   (unused)      ;-bit7:NOT R/W
FB7Ch                db 0     ;   (unused)      ;-bit7:NOT R/W
FB7Dh                db 0     ;   (unused)      ;-bit4-7:NOT R/W
FB7Eh                db 0     ;   (unused)      ;-bit6-7:NOT R/W
FB7Fh                db 0     ;   (unused)      ;-bit6-7:NOT R/W
FB80h                db 0     ;   (unused)      ;-bit6-7:NOT R/W
FB81h                db 0     ;   (unused)      ;-bit7:NOT R/W
FB82h                db 0     ;   (unused)      ;-bit7:NOT R/W
FB83h                db 0     ;   (unused)      ;-bit4-7:NOT R/W
FB84h                db 0     ;   (unused)      ;-bit6-7:NOT R/W
FB85h                db 0     ;   (unused)      ;-bit6-7:NOT R/W
FB86h                db 0     ;   (unused)      ;-bit6-7:NOT R/W
FB87h                db 0     ;   (unused)      ;-bit7:NOT R/W
FB88h                db 0     ;   (unused)      ;-bit7:NOT R/W
FB89h           IO_OSD_screen_position     db 0     ;   fixed (00h)    ;changes affect window positions?  ;bit1=jitters!   ;bit4-7:NOT R/W
                ;---
FB8Ah..FBC5h     defs 3Ch  ;unused (FFh-filled) ;NOT RW        ;FB8Ah..FBFFh: NOT R/W (uh, but FBC6h/FBC7h is written by firmware?)
FBC6h           IO_OSD_bugged_color_lsb db 0    ;\color 4:4:4 ? bugged?
FBC7h           IO_OSD_bugged_color_msb db 0    ;/
FBC8h..FBFFh     defs 38h  ;unused (FFh-filled) ;NOT RW
                .errif $-0fc00h
                ;--- --- --- maybe LCD/VIDEO... and/or... OSD/VIDEO...
FC00h           IO_LCD_color_swap       db 0     ;fixed (05h)   ;bit0,1,2,3: color swap for AV and OSD (maybe LCD databus mode?)  ;upper4bit no visible effect on PAL+PAL60 image
FC01h                                   db 0     ;   (unused)   ;whatever, no effect on PAL picture?
FC02h                                   db 0     ;   (unused)   ;bit0,1,2:kills AV image  ;bit3-7: NOT R/W
FC03h..FC46h                            defs 44h ;   (unused)   ;whatever, <-- no visible effect on PAL+PAL60 picture?
                                                ;FC09h.bit5-7:NOT RW
                                                ;FC0Dh.bit6-7:NOT RW
                                                ;FC0Fh.bit6-7:NOT RW
                                                ;FC11h:NOT RW ;<-- unused (FFh-filled)
                                                ;FC13h.bit4-7:NOT RW  ;-
                                                ;FC19h.bit3-7:NOT RW  ;\
                                                ;FC1Bh.bit3-7:NOT RW  ;
                                                ;FC1Dh.bit3-7:NOT RW  ;
                                                ;FC1Fh.bit3-7:NOT RW  ;
                                                ;FC21h.bit3-7:NOT RW  ;
                                                ;FC23h.bit3-7:NOT RW  ;
                                                ;FC25h.bit3-7:NOT RW  ;
                                                ;FC27h.bit3-7:NOT RW  ;
                                                ;FC29h.bit3-7:NOT RW  ;
                                                ;FC2Bh.bit3-7:NOT RW  ;
                                                ;FC2Dh.bit3-7:NOT RW  ;
                                                ;FC2Fh.bit3-7:NOT RW  ;/
                                                ;FC31h.bit2-7:NOT RW  ;\
                                                ;FC33h.bit2-7:NOT RW  ;/
                                                ;FC44h.bit4-7:NOT RW  ;-
                                                ;FC46h.bit6-7:NOT RW  ;-
FC47h..FC8Fh     defs 49h   ;unused (FFh-filled)      ;NOT R/W
                ;---
FC90h           IO_VIDEO_control                  db 0  ;fixed (02h)   ;on PAL50: bit0=VerticalScale(forceNTSCresolution?), bit5:BLUEinsteadOfRED?, bit7:MinorEffectOnRightScreenEdge ----  on PAL60:bit5=BlueColors, other bits no effect for PAL60
                ;--- below FC91h..FCB6h resembles FCBDh..FCE2h
                ;below FC91h..FCBBh DON'T affect PAL (affect NTSC only, and do also affect PAL60)
FC91h           IO_60HZ_control_lsb               db 0  ;fixed (01h)   ;     ;bit1:MoveWholeImageCa.80pixLEFT, bit3:AV_OFF/BLACK, bit5:AV_WeirdDiagonalStripeStretch(ignoreHsyncOrSo), bit6:ContrastOnPAL60colorError
FC92h           IO_60HZ_control_mid               db 0  ;initially(00h);      <-- bit4 modified later on (alongsides FCBDh)   ;bit0:EdgyDiagonalPAL60colorError, bit3:AV_MOSTLY_BLACK_except_right_edge_and_lowerleft_corner
FC93h           IO_60HZ_control_msb               db 0  ;fixed (00h)   ;/       ;bit2:MoveWholeImageCa.80pixRIGHT, bit3:ContrastOnPAL60colorError
FC94h           IO_60HZ_internal_unused1          db 0  ;   (unused)
FC95h           IO_60HZ_internal_unused2          db 0  ;   (unused)
FC96h           IO_60HZ_ratio_whatever_A_lsb      db 0  ;set to ONE of six fixed values (61h,7Eh,5Bh,5Bh,5Bh,5Bh)  ;\screen ratio? no visible effect when toggling bits here
FC97h           IO_60HZ_ratio_whatever_A_msb      db 0  ;set to ONE of six fixed values (08h,08h,03h,03h,03h,03h)  ;/(ie. 16:9 or 4:3 or DUMMY values?)
FC98h           IO_60HZ_15khz_lsb                 db 0  ;fixed (C8h)   ;\03C8h (968 decimal) ;ca.(hres*3)?        ;PAL60: bit3 fixes missed-PAL60-scanlines (still PAL-color is wrong)
FC99h           IO_60HZ_15khz_msb                 db 0  ;fixed (03h)   ;/
FC9Ah           IO_60HZ_15khz_div2_lsb            db 0  ;fixed (E3h)   ;\01E3h (483 decimal) ;ca.(vres*2)?        ;PAL60: bit2 fixes missed-PAL60-scanlines (still PAL-color is wrong)
FC9Bh           IO_60HZ_15khz_div2_msb            db 0  ;fixed (01h)   ;/               ;or, roughly, 3C8h/2 ?
FC9Ch           IO_60HZ_xloc_av_osd_lsb           db 0  ;fixed (00h)   ;\hpos AV+OSD
FC9Dh           IO_60HZ_xloc_av_osd_msb           db 0  ;fixed (00h)   ;/
FC9Eh           IO_60HZ_xloc_osd_lsb              db 0  ;fixed (44h)   ;\hpos OSD
FC9Fh           IO_60HZ_xloc_osd_msb              db 0  ;fixed (00h)   ;/
FCA0h           IO_60HZ_xloc_av_lsb               db 0  ;fixed (43h)   ;\hpos AV
FCA1h           IO_60HZ_xloc_av_msb               db 0  ;fixed (00h)   ;/
FCA2h           IO_60HZ_xcrop_end_av_lsb          db 0  ;fixed (8Ah)   ;\hcrop.end AV
FCA3h           IO_60HZ_xcrop_end_av_msb          db 0  ;fixed (01h)   ;/
FCA4h           IO_60HZ_yloc_av_osd_lsb           db 0  ;fixed (07h)   ;\vpos AV+OSD
FCA5h           IO_60HZ_yloc_av_osd_msb           db 0  ;fixed (00h)   ;/
FCA6h           IO_60HZ_yloc_osd_lsb              db 0  ;fixed (09h)   ;\vpos OSD
FCA7h           IO_60HZ_yloc_osd_msb              db 0  ;fixed (00h)   ;/
FCA8h           IO_60HZ_ycrop_upper_av_lsb        db 0  ;fixed (10h)   ;\vcrop.upper AV
FCA9h           IO_60HZ_ycrop_upper_av_msb        db 0  ;fixed (00h)   ;/
FCAAh           IO_60HZ_heavy_flimmer_lsb         db 0  ;fixed (10h)   ;\                            bit3,5-7: PAL60 flickersTheWrongColors
FCABh           IO_60HZ_heavy_flimmer_msb         db 0  ;fixed (01h)   ;/                                      PAL60 flickers!!!
FCACh           IO_60HZ_ratio_xloc_av_8bit        db 0  ;set to ONE of six fixed values (10h,10h,1Dh,1Dh,1Dh,1Dh)  ;\     hpos AV (with GARBAGE after scanline.end)
FCADh           IO_60HZ_ratio_whatever_B_lsb      db 0  ;set to ONE of six fixed values (00h,00h,09h,09h,09h,09h)  ;  ;-no visible effect when toggling bits
FCAEh           IO_60HZ_ratio_whatever_B_msb      db 0  ;set to ONE of six fixed values (00h,00h,00h,00h,00h,00h)  ;  ;-no visible effect when toggling bits
FCAFh           IO_60HZ_ratio_ycrop_upper_av_8bit db 0  ;set to ONE of six fixed values (00h,00h,00h,00h,00h,00h)  ;      vcrop.upper AV
FCB0h           IO_60HZ_ratio_ycrop_lower_av_8bit db 0  ;set to ONE of six fixed values (00h,00h,00h,00h,00h,00h)  ;/     vcrop.lower AV
FCB1h           IO_60HZ_internal_unused3          db 0  ;   (unused)  ;bit5-7:NOT RW
FCB2h           IO_60HZ_internal_unused4          db 0  ;   (unused)
FCB3h           IO_60HZ_internal_unused5          db 0  ;   (unused)
FCB4h           IO_60HZ_internal_unused6          db 0  ;   (unused)  ;bit2-7:NOT RW
FCB5h           IO_60HZ_internal_unused7          db 0  ;   (unused)   ;bit7:minimal effect on WrongPAL60colors/ErrorShiftedDOWN or so?
FCB6h           IO_60HZ_boldness_contrast         db 0  ;initially(02h) ;<-- set AFTER other fixed FCxxh values, and later modified elsewhere (set to 00h or 02h) ;bit0-1:ExtraContrastOnPAL60colorError? ;bit2-7 NOT R/W
                ;---
FCB7h           IO_VIDEO_something_1_lsb      db 0     ;   fixed (16h)   ;\no visible effect when toggling bits
FCB8h           IO_VIDEO_something_1_msb      db 0     ;   fixed (01h)   ;/
FCB9h..FCBAh     defs 2     ;unused (FFh-filled)    ;NOT RW
FCBBh           IO_VIDEO_something_2_lsb      db 0     ;   fixed (1Ch)   ;\no visible effect when toggling bits
FCBCh           IO_VIDEO_something_2_msb      db 0     ;   fixed (01h)   ;/
                ;--- above FC91h..FCB6h resembles FCBDh..FCE2h
                ;FCBCh..FCE2h has NO effect on PAL60 (affects PAL50 only)
FCBDh           IO_50HZ_control_lsb               db 0  ;initially(01h);\     <-- bit4 modified later on (alongsides FC92h)   ;bit1:MoveWholeImageCa.80pixLEFT Bit3:AV_BLACK/OFF, bit5:WeirdDiagonalStripyImage(ignoreHsync?), bit6:MoveWholeImageCa.12pixDOWN ;bits: various messes   ;C64: bit6:shows SNOW with downwards rolling VSYNC from C64)
FCBEh           IO_50HZ_control_mid               db 0  ;fixed (00h)   ;        ;bit0:AV_EdgyDiagonalColorError, bit3: AV diagonally messed(ignoredHsync?)    ;C64: bit0:shows SNOW with upwards rolling VSYNC from C64)
FCBFh           IO_50HZ_control_msb               db 0  ;fixed (00h)   ;/       ;bit2:MoveWholeImageCa.160pixLEFT, bit3:MoveWholeImageCa.32pixDOWNandWeakPixels     ;bits: horizontal & vertical AV+OSD picture position (too large: screen freezes/goes white?)
FCC0h           IO_50HZ_internal_unused1          db 0  ;   (unused)
FCC1h           IO_50HZ_internal_unused2          db 0  ;   (unused)
FCC2h           IO_50HZ_ratio_whatever_A_lsb      db 0  ;set to ONE of six fixed values (5Ch,84h,63h,63h,63h,63h)  ;\no visible effect when toggling bits
FCC3h           IO_50HZ_ratio_whatever_A_msb      db 0  ;set to ONE of six fixed values (08h,08h,03h,03h,03h,03h)  ;/
FCC4h           IO_50HZ_15khz_lsb                 db 0  ;fixed (66h)   ;\  ;\0466h (1126 decimal) ;maybe htotal*2?      ;15kHz rate? when wrong: stretch/squeeze AV vertically (with jitter in image)
FCC5h           IO_50HZ_15khz_msb                 db 0  ;fixed (04h)   ;   ;/
FCC6h           IO_50HZ_15khz_div2_lsb            db 0  ;fixed (36h)   ;   ;\0236h (566 decimal)  ;maybe vtotal*2?      ;15kHz rate? when wrong: stretch/squeeze AV vertically (with jitter in image)
FCC7h           IO_50HZ_15khz_div2_msb            db 0  ;fixed (02h)   ;   ;/               ;or, roughly, 466h/2 ?              ;<-- vscale (SNOW+OSD)
FCC8h           IO_50HZ_xloc_av_osd_lsb           db 0  ;fixed (02h)   ;   ;\word?     ;horizontal AV+OSD picture position (too large: screen freezes/goes white?)
FCC9h           IO_50HZ_xloc_av_osd_msb           db 0  ;fixed (00h)   ;   ;/
FCCAh           IO_50HZ_xloc_osd_lsb              db 0  ;fixed (36h)   ;   ;\word? 54  ;horizontal OSD picture position (too large: screen freezes/goes white?)
FCCBh           IO_50HZ_xloc_osd_msb              db 0  ;fixed (00h)   ;   ;/
FCCCh           IO_50HZ_xloc_av_lsb               db 0  ;fixed (43h)   ;   ;\word?     ;horizontal AV picture position
FCCDh           IO_50HZ_xloc_av_msb               db 0  ;fixed (00h)   ;   ;/
FCCEh           IO_50HZ_xcrop_end_av_lsb          db 0  ;fixed (92h)   ;   ;\word?
FCCFh           IO_50HZ_xcrop_end_av_msb          db 0  ;fixed (01h)   ;/  ;/          ;horizontal picture end crop
FCD0h           IO_50HZ_yloc_av_osd_lsb           db 0  ;fixed (08h)   ;\   <-- this one initialized after FCD1h..FCD7h      ;vertical picture position
FCD1h           IO_50HZ_yloc_av_osd_msb           db 0  ;fixed (00h)   ;/              ;nonzero: freeze (repeat current scanline in all lines)
FCD2h           IO_50HZ_yloc_osd_lsb              db 0  ;fixed (09h)   ;\            ;bit1-7 vertical OSD position? (also in bit0 of NEXT byte)
FCD3h           IO_50HZ_yloc_osd_msb              db 0  ;fixed (00h)   ;/         ;-when bit1-7 nonzero: AV screen black? (or maybe AV picture moved offscreen?)
FCD4h           IO_50HZ_ycrop_upper_av_lsb        db 0  ;fixed (0Ch)   ;\            ;AV vertical.picture.start crop coord?
FCD5h           IO_50HZ_ycrop_upper_av_msb        db 0  ;fixed (00h)   ;/         ;-when nonzero: AV screen black? (or maybe AV picture moved offscreen?)
FCD6h           IO_50HZ_heavy_flimmer_lsb         db 0  ;fixed (0Fh)   ;\         ;-flimmers... maybe vblank duration lsb, or interlace?
FCD7h           IO_50HZ_heavy_flimmer_msb         db 0  ;fixed (01h)   ;/         ;-vblank duration (large value causes screen to flicker/blink, getting BLACK during vblank)
FCD8h           IO_50HZ_ratio_xloc_av_8bit        db 0  ;set to ONE of six fixed values (06h,06h,0Ch,0Ch,0Ch,0Ch)  ;\   ;AV horizontal picture position
FCD9h           IO_50HZ_ratio_whatever_B_lsb      db 0  ;set to ONE of six fixed values (00h,00h,06h,06h,06h,06h)  ;-no visible effect when toggling bits
FCDAh           IO_50HZ_ratio_whatever_B_msb      db 0  ;set to ONE of six fixed values (00h,00h,00h,00h,00h,00h)  ;-no visible effect when toggling bits
FCDBh           IO_50HZ_ratio_ycrop_upper_av_8bit db 0  ;set to ONE of six fixed values (00h,00h,00h,00h,00h,00h)  ;    ;AV vertical.picture.start crop coord?
FCDCh           IO_50HZ_ratio_ycrop_lower_av_8bit db 0  ;set to ONE of six fixed values (00h,00h,00h,00h,00h,00h)  ;/   ;AV vertical.picture.end crop coord?
FCDDh           IO_50HZ_internal_unused3          db 0  ;   (unused)  ;bit5-7:NOT RW
FCDEh           IO_50HZ_internal_unused4          db 0  ;   (unused)
FCDFh           IO_50HZ_internal_unused5          db 0  ;   (unused)
FCE0h           IO_50HZ_internal_unused6          db 0  ;   (unused)  ;bit2-7:NOT RW
FCF1h           IO_50HZ_internal_unused7          db 0  ;   (unused)
FCE2h           IO_50HZ_boldness_contrast         db 0  ;initially(02h);<--- modified later, 00h or 02h     ;bit1:AV boldness?   ;bit2-7:NOT RW
                ;---
FCE3h           IO_VIDEO_something_3              db 0  ;fixed (01h) bit1-2: AV v-position
FCE4h           IO_VIDEO_something_4              db 0  ;used !!!!!!!!!!       bit4: AV h-position    (fixed 45h, except also ORed with 40h)
FCE5h                                             db 0  ;   (unused)  ;NOT RW ;STAT (eg. 36h on SNES/PAL)
FCE6h                                             db 0  ;   (unused)  ;NOT RW ;STAT (eg. 02h on SNES/PAL)
FCE7h                                             db 0  ;   (unused)  ;bit2=this is RW!  ;other seven bits:NOT RW
FCE8h                                             db 0  ;   (unused)  ;NOT RW ;STAT ;\without signal INCREASING 0..1xxh
FCE9h                                             db 0  ;   (unused)  ;NOT RW ;STAT ;/with PSX.PAL toggles 11Dh/11Eh, with C64: toggles 11Bh/11Ch, with Spectrum toggles 11Ch/11Dh, with SNES/PAL: toggles 11Ch/11Dh, with SNES/PAL60: toggles 117h/118h(and has BlackWhiteDither... or wrong colors)
FCEAh           IO_VIDEO_something_5              db 0  ;used !!!!!!!!!!   ;NOT RW -- BUT firmware writes to it! (maybe write-only? or bug?) (read: always FFh?)
FCEBh..FCFFh     defs 15h ;   unused (FFh-filled)  ;NOT RW
                .errif $-0fd00h
                ;---
FD00h           IO_PLL_00h                db 0  ;(unused)
FD01h           IO_PLL_01h_cpu            db 0  ;(unused) ;bit0:hangs CPU
FD02h           IO_PLL_02h_zoom           db 0  ;(unused) ;bit0:zoom/wobble?
FD03h           IO_PLL_03h                db 0  ;(unused)
FD04h           IO_PLL_04h                db 0  ;(unused)
FD05h           IO_PLL_05h                db 0  ;(unused)
FD06h           IO_PLL_06h                db 0  ;(unused)
FD07h           IO_PLL_07h                db 0  ;(unused)
FD08h           IO_PLL_08h                db 0  ;(unused)  ;NOT RW (value 00h)
FD09h           IO_PLL_09h                db 0  ;(unused)  ;NOT RW (value 00h)
FD0Ah           IO_PLL_dotclk_multiplier  db 0  ;fixed (2Bh)        15kHz (also SNOW-boldness?)
FD0Bh           IO_PLL_0Bh_used           db 0  ;used !!!!!!!!! (set to 40h twice)   ;bit0:forceNTSCcolor? bit1,3-7:force BLUE/SNOW (no AV), bit2:grayAVwrongXloc   ;C64: bit0/1 temporarily enable C64 image!!!
FD0Ch           IO_PLL_0Ch                db 0  ;(unused)
FD0Dh           IO_PLL_0Dh_cfg            db 0  ;fixed (F0h)        15kHz, upperbits: snow with rolling sync?
FD0Eh           IO_PLL_0Eh_used           db 0  ;used !!!!!!!!! (set to 20h or 2Ch)   ;scanline freeze?
FD0Fh           IO_PLL_dotclk_divider_1   db 0  ;fixed (03h)        15kHz  ... forcefully inserts VSYNCS every once-and-then?
FD10h           IO_PLL_10h_cfg            db 0  ;fixed (twice set to 04h)  ;bit0-7changes: force BLUE/SNOW (maybe video clock? cannot detect picture when changed?)
FD11h           IO_PLL_11h_used           db 0  ;used !!!!!!!!! ;\    ;XXX bit0? hangs CPU?, bit1-2?:OSDcharerror+hang?, bit4:OSD_BG_ONLY(noTEXT), bit5:scanlinefreeze(AV+OSD)
FD12h           IO_PLL_12h_used           db 0  ;used !!!!!!!!! ;        DANGER: hang ADC?
FD13h           IO_PLL_13h_used           db 0  ;used !!!!!!!!! ;/  screen on/off? (00h=off, FFh=on) (toggling single bits has no visible effect though)
FD14h           IO_PLL_dotclk_divider_2   db 0  ;fixed (03h)   similar to FD0Fh
FD15h           IO_PLL_dotclk_divider_3   db 0  ;fixed (02h)   similar to FD0Fh
FD16h           IO_PLL_16h_cfg            db 0  ;fixed (03h)
FD17h           IO_PLL_adc_clk_divider    db 0  ;fixed (18h)    IO_ADC analog related? (upper bits=SLOW) bit7=DANGER
FD18h           IO_PLL_18h_pwm            db 0  ;(unused)     bit7:ForceMaxBacklight-->PWMdimmingOFF
FD19h           IO_PLL_19h_used           db 0  ;used !!!!!!!!! (initially ORed by 81h, later set to 83h) ;bit0:NoSignal(withSmallVsyncRoll), bit6:Darker(AV+OSD), bit7:NoSignal(or occassionally/shortly AV with each scanline shown twice, at half width)
FD1Ah           IO_PLL_1Ah_cfg            db 0  ;fixed (08h)
FD1Bh           IO_PLL_1Bh                db 0  ;(unused)
FD1Ch           IO_PLL_1Ch                db 0  ;(unused)
FD1Dh           IO_PLL_1Dh                db 0  ;(unused)
FD1Eh           IO_PLL_1Eh                db 0  ;(unused)
                ;---
FD1Fh           IO_PWM_enable_flags        db 0  ;-VCOM_DC related  (bit0..3 = PWM0..3 enable?)
FD20h           IO_PWM0_duty_total_lsb     db 0  ;\PWM_0 (backlight)
FD21h           IO_PWM0_duty_total_msb     db 0  ;/
FD22h           IO_PWM1_duty_total_lsb     db 0  ;\PWM_1 (SPI.DTA)
FD23h           IO_PWM1_duty_total_msb     db 0  ;/
FD24h           IO_PWM2_duty_total_lsb     db 0  ;\PWM_2 (SPI.CLK and SPI./RESET)
FD25h           IO_PWM2_duty_total_msb     db 0  ;/
FD26h           IO_PWM3_duty_total_lsb     db 0  ;\PWM_3 (SPI./CS)
FD27h           IO_PWM3_duty_total_msb     db 0  ;/
FD28h           IO_PWM0_duty_high_lsb      db 0  ;\PWM_0 (backlight)
FD29h           IO_PWM0_duty_high_msb      db 0  ;/
FD2Ah           IO_PWM1_duty_high_lsb      db 0  ;\PWM_1 (SPI.DTA)
FD2Bh           IO_PWM1_duty_high_msb      db 0  ;/
FD2Ch           IO_PWM2_duty_high_lsb      db 0  ;\PWM_2 (SPI.CLK and SPI./RESET)
FD2Dh           IO_PWM2_duty_high_msb      db 0  ;/
FD2Eh           IO_PWM3_duty_high_lsb      db 0  ;\PWM_3 (SPI./CS)
FD2Fh           IO_PWM3_duty_high_msb      db 0  ;/
                ;--- below are probably 4bit mode value for each chip.pin...
FD30h           IO_PIN_maybe0                   db 0     ;- (unused)
FD31h           IO_PIN_P06_P07_pwm              db 0     ;- used !!!!!!!   PWM2/PWM3
FD32h // db 11h IO_PIN_P10_P11_spi_flash        db 0     ;\        <-- DANGER maybe SPI flash?
FD33h // db 11h IO_PIN_P12_P13_spi_flash        db 0     ;         <-- DANGER maybe SPI flash?
FD34h // db 11h IO_PIN_P14_P15_lcd              db 0     ;
FD35h // db 11h IO_PIN_P16_P17_lcd              db 0     ;
FD36h // db 11h IO_PIN_P20_P21_lcd              db 0     ; fixed
FD37h // db 11h IO_PIN_P22_GPIO0_lcd            db 0     ;                                      ;bit0:addsDarkBLUEtoTFT, bit4:addsMoreBLUEtoTFT
FD38h // db 11h IO_PIN_GPIO1_GPIO2_lcd          db 0     ; 16 bytes, set to 11h
FD39h // db 11h IO_PIN_GPIO3_GPIO4_lcd          db 0     ;
FD3Ah // db 11h IO_PIN_P23_P24_lcd              db 0     ;    32x4bit (with value 1h)           ;bit4:addsDarkGREENtoTFT
FD3Bh // db 11h IO_PIN_P25_P26_lcd              db 0     ;    aka MODE for LCD pins             ;bit0:addsMoreGREENtoTFT, bit4:addsMANYGREENtoTFT
FD3Ch // db 11h IO_PIN_GPIO5_GPIO6_lcd          db 0     ;    (24xRGB, 4xSYNC, 4xSPI_FLASH)
FD3Dh // db 11h IO_PIN_GPIO7_GPIO8_lcd          db 0     ;
FD3Eh // db 11h IO_PIN_GPIO9_GPIO10_lcd         db 0     ;
FD3Fh // db 11h IO_PIN_P27_P30_lcd              db 0     ;                                      ;bit0:addsDarkREDtoTFT, bit4:addsMoreREDtoTFT
FD40h // db 11h IO_PIN_P31_P32_lcd              db 0     ;     <--dotclk?                       ;bit0:StopDotClk, bit1:HigherDotClk/HIRES, bit2:LowerDotClk/LORES
FD41h // db 11h IO_PIN_P33_P34_lcd              db 0     ;/                                     ;bit0:KillTftUpdating, bit1:MoveWholeImageCa.40pixLEFTandShake+/1pix, bit2:slightlyShaky, bit4:FreezeScanline, bit5:KillTftUpdating
FD42h           IO_PIN_P35_P36_pwm              db 0     ;-used !!!!!!!   PWM0/PWM1             ;bit0-2:ScreenBlack(backlight)
FD43h           IO_PIN_P37_xxx_pwm              db 0     ;-used !!!!!!!   PWM2'/..
FD44h // db 01h IO_PIN_maybe1_01h               db 0     ;\   <-- set to 01h (maybe REMOTE or ADC0 or so)               ;bit0:KillTftUpdating
FD45h // db 00h IO_PIN_maybe2_zero              db 0     ;
FD46h // db 00h IO_PIN_maybe3_zero              db 0     ;
FD47h // db 00h IO_PIN_maybe4_zero              db 0     ; fixed
FD48h // db 00h IO_PIN_maybe5_zero              db 0     ;
FD49h // db 00h IO_PIN_maybe6_zero              db 0     ;
FD4Ah // db 00h IO_PIN_maybe7_zero              db 0     ;
FD4Bh // db 00h IO_PIN_maybe8_zero              db 0     ;/
FD4Ch..FD4Fh                                    defs 4   ;- (unused)
FD50h           IO_whatever_FD50h               db 0     ;- used !!!!!!! (initially 00h, then set to 0Bh)   ;bit5:KillTftUpdating
FD51h..FD5Ah    IO_whatever_zerofilled:         defs 0ah ;- fixed (zerofilled)  maybe a buffer for I2C or REMOTE or so?
FD5Bh..FD5Fh                                    defs 5h  ;- (unused)
FD60h..FDAFh     defs 50h  ;unused (FFh-filled)  ;NOT RW
                ;--- I/O Keyboard analog input...
FDB0h           IO_ADC_ctrl_lsb     db 0    ;\                  ;DANGER:bit1-2  ;bit0:NOT RW (whilst other bits ARE R/W)
FDB1h           IO_ADC_ctrl_msb     db 0    ;/
FDB2h           IO_ADC_config_1     db 0     ;   ...fixed (20h)      ;DANGER:bit1   ;bit6-7:NOT RW
FDB3h                               db 0     ;   (unused)  ;NOT RW (value 00h)
FDB4h           IO_ADC_config_2     db 0     ;   ...fixed (22h)  ;\  ;DANGER:bit7
FDB5h           IO_ADC_config_3     db 0     ;   ...fixed (37h)  ;/  ;DANGER:bit0-1
FDB6h           IO_ADC_config_4     db 0     ;   ...fixed (FFh)  ;\
FDB7h           IO_ADC_config_5     db 0     ;   ...fixed (FFh)  ;/
FDB8h           IO_ADC_status_lsb   db 0            ;\WRITE ZERO (=ack?)   ;NOT RW--asideFromAck'ing
FDB9h           IO_ADC_status_msb   db 0            ;/                     ;NOT RW--asideFromAck'ing
FDBAh                               db 0     ;   (unused)           ;NOT RW (value 00h)
FDBBh                               db 0     ;   (unused)           ;NOT RW (value 00h)
FDBCh           IO_ADC_input_0_lsb  db 0     ;\analog 0 (keypad)    ;NOT RW ;STAT
FDBDh           IO_ADC_input_0_msb  db 0     ;/                     ;NOT RW
FDBEh           IO_ADC_input_1_lsb  db 0     ;\analog 1             ;NOT RW
FDBFh           IO_ADC_input_1_msb  db 0     ;/                     ;NOT RW
FDC0h           IO_ADC_input_2_lsb  db 0     ;\analog 2             ;NOT RW
FDC1h           IO_ADC_input_2_msb  db 0     ;/                     ;NOT RW
FDC2h..FDC7h                        defs 6   ;   (unused)  ;NOT RW (values 00h-filled)
FDC8h           IO_ADC_config_6     db 0     ;   ...fixed (FFh)
FDC9h           IO_ADC_config_7     db 0     ;   ...fixed (0Fh)
FDCAh           IO_ADC_config_8     db 0     ;   ...fixed (00h)
FDCBh                               db 0     ;   (unused)  ;NOT RW (value 00h)
FDCCh           IO_ADC_speed_lsb    db 0     ;   ...fixed (FFh)
FDCDh           IO_ADC_speed_msb    db 0     ;   ...fixed (0Fh) (changing upper bits makes ADC slower)
FDCEh                               db 0     ;   (unused) ;bit7 is R/W !!!, bit0-6: NOT R/W (read-only, contains 1Fh)
FDCFh                               db 0     ;   (unused)                  ;bit4-7: NOT R/W
                ;--- Serial SPI FLASH... (and also SPI FLASH to VRAM DMA?)
FDD0h           IO_SPI_transfer_mode      db 0     ;spi.flash...whatever, set ONE bit? (used: 04h,08h,10h,40h,80h) ;DANGER
                 ;FlashCmd01h = Manual read JEDEC Chip ID (used by newer firmware only)
                 ;FlashCmd02h = Manual read Write-Protect-Status (used by unused function in newer firmware only)
                 ;FlashCmd04h =   idle? for enter/enable read/erase mode (or maybe some sort of "read/check status"?)
                 ;FlashCmd08h =   ERASE flash step 1 & 2 (also for read_mode_step_2 ???)
                 ;FlashCmd10h = Manual read flash-to-cpu
                 ;FlashCmd20h =   (unused)
                 ;FlashCmd40h = DMA read  flash-to-vram
                 ;FlashCmd80h = DMA write ram-to-flash
FDD1h           IO_SPI_wprot_stat_write db 0     ;spi.flash.write.protect.status.write
FDD2h           IO_SPI_manual_data_read db 0     ;spi.flash.data.READ (for MANUAL non-DMA access)  ;NOT RW
FDD3h           IO_SPI_chip_id_read_msb db 0     ;CHIP ID   (used by new firmware)  ;NOT RW (value 00h)
FDD4h           IO_SPI_chip_id_read_mid db 0     ;CHIP ID   (used by new firmware)  ;NOT RW (value 00h)
FDD5h           IO_SPI_chip_id_read_lsb db 0     ;CHIP ID   (used by new firmware)  ;NOT RW (value 00h)
FDD6h           IO_SPI_flash_addr_lsb   db 0     ;spi.flash.addr.lsb  ;\for VRAM upload, this is
FDD7h           IO_SPI_flash_addr_mid   db 0     ;spi.flash.addr.mid  ; SPI FLASH addr, too
FDD8h           IO_SPI_flash_addr_msb   db 0     ;spi.flash.addr.msb  ;/(ie. it's transferring SPI-to-VRAM)
FDD9h           IO_SPI_dma_ram_addr_lsb db 0     ;spi.ram/vram.addr.lsb ;\maybe DMA addr on CPU RAM? and/or VIDEO RAM?
FDDAh           IO_SPI_dma_ram_addr_msb db 0     ;spi.ram/vram.addr.msb ;/
FDDBh           IO_SPI_dma_length_lsb   db 0     ;spi.flash/vram.dma.len.lsb ?   ;\not used for FLASH READ (which is done via MANUAL BYTE loop)
FDDCh           IO_SPI_dma_length_msb   db 0     ;spi.flash/vram.dma.len.msb ?   ;/  (but used for FLASH WRITE, and VRAM UPLOADS)
FDDDh           IO_SPI_ready_flags      db 0     ;spi.flash.ready.flags (corresponding to start.bits in FDD0h)
FDDEh           IO_SPI_kick_stop_reset  db 0     ;spi.flash.80h    ;write 80h to start/stop/reset ?
FDDFh           IO_SPI_status_ready     db 0     ;spi.flash.status  (bit7: 0=busy, 1=ready)  ;NOT RW
FDE0h                                   db 0     ;   (unused) DANGER!
FDE1h..FDE3h                            defs 3   ;   (unused)
FDE4h           IO_SPI_command_write    db 0     ;spi.flash.command
FDE5h..FDE7h                            defs 3h  ;   (unused)
FDE8h..FDEFh     defs 8    ;unused (FFh-filled)   ;NOT RW
                ;---
FDF0h                                      db 0  ;   (unused)
FDF1h           IO_SPI_upper_32k_code_base db 0  ;   (unused) bit0-3:DANGER!
FDF2h..FDFFh     defs 0eh  ;unused (FFh-filled)   ;NOT RW
                .errif $-0fe00h
                ;--- --- --- AV inputs...?
FE00h                                   db 0     ;   (unused)  ;bit4:vertical.boldness, bit5:temporarilyNoSignal, bit7:Force_NTSC_Colors?
FE01h           IO_AV_ctrl_whatever_1   db 0     ;   used !!!!!!!! (bit1 set/cleared, bit4 set)  ;bit0:ForcePALcolors_ButYetPAL60getsWrongYloc, ;bit2:Force_PAL_Color_But_Only_If_FE00h.bit7 is toggled  ;;;(bit0 is similar as FE01h.bit0) (HERE: bit2 has NO effect if FE00h.bit7=x)
FE02h                                   db 0     ;   (unused)
FE03h                                   db 0     ;   (unused)
FE04h           IO_AV_config_FE04h      db 0     ;   fixed (set to 30h)  ;\
FE05h           IO_AV_config_FE05h      db 0     ;   fixed (set to 40h)  ;/
FE06h..FE12h                            defs 0dh ;   (unused)
                                           ;FE0Dh:bit7:Untoggle=BlinksAvWhiteRecalib?,
                                           ;FE0Fh.bit0/1/2=Change=TemporarilyNoSignal,
                                           ;FE0Fh.bit3:ForcePALcolors_ButYetPAL60getsWrongYloc (similar as FE01h.bit0) (HERE: effect is inverse if FE00h.bit7=x --> then forces NTSC colors)
                                           ;FE11h.bit2,4,5,6,7:ShortColorRollThenShowDitheredBlackWhiteAvImage
FE13h           IO_AV_config_FE13h      db 0     ;   fixed (set to 1Eh)
FE14h                                   db 0     ;   (unused)
FE15h           IO_AV_ctrl_sensitivity_0        db 0     ;   used !!!!!!!! (set to 00h=max,05h=med,09h=low, also checked if 05h)  (bit2,3:PixelBoldness)
FE16h..FE25h                                    defs 10h ;   (unused)  ;FE17h.bit1=Boldness, FE17h.bit4,5=BoldnessWithContrast, FE17h.bit6,7=PermanentlyToggleColoredAndDitheredBlackWhiteLines, FE18h.bit1,2=BoldnessAndRightScreenEdge, FE18h.bit6,7=PermanentlyToggleColoredAndDitheredBlackWhiteLines, FE1Dh.bit6=NoSignalOrWeirdColorRoll, FE1Dh.bit7:NOT RW, FE1Eh.bit6=NoSignalOrWeirdColorRoll, FE1Eh.bit7:NOT RW, FE1Fh.bit7:NOT RW, FE20h:NOT RW, FE21h:NOT RW       ;FF20h.6-7: C64/SNOW color  ;XXX why FFxxh? THIS is FExxh!!!
FE26h           IO_AV_stat_detect_0             db 0     ;   used !!!!!!!! ...status    video DETECT ? OFTEN used           ;NOT RW
FE27h           IO_AV_stat_detect_1             db 0     ;   used !!!!!!!! ...status (bit0 tested, used by only ONE opcode) ;NOT RW
FE28h           IO_AV_stat_framerate_flag       db 0     ;   used !!!!!!!! ...status    bit2 = PAL/NTSC and/or 50/60 Hz     ;NOT RW
FE29h                                           db 0     ;   (unused)
FE2Ah           IO_AV_stat_signal_detect        db 0     ;   used !!!!!!!! ...status (bit6 and bit0-3 used)   (bit4:HaveCVBS1, bit6:HaveCVBS3, bit0,1,2,3=ErrorFlag(s))     ;NOT RW
FE2Bh..FE2Fh                                    defs 5   ;   (unused)    ;FE2Dh.bit7:ShortColorRollThenBlackWhiteDither
FE30h..FE4Fh                                    defs 12h ;   (unused)
                                                   ;FE31h.bit7=NoSignal,
                                                   ;FE39h.bit4-7:NOT RW,
                                                   ;FE3Ch.bit5=Boldness,
                                                   ;FE3Ch.bit6=BoldnessAndWashyBackground(SnesLooksAsWashyAsC64),
                                                   ;FE3Ch.bit7:BoldnessBrighterBlack,
                                                   ;FE3Dh.bit6:UltraWashyBlurr,
                                                   ;FE3Dh.bit7=RollingImageAndBlackWhiteDither,
                                                   ;FE3Fh.bit1-7:NOT RW,
                                                   ;FE41h.bit6:TrueSnow?(not the artifical snow effect),
                                                   ;FE41h.bit7:freezeSNOW (stuck BG or WHITE) and/or snow with wandering vblanking bars
                                                     ;C64: FE41h.6-7: vague picture/sync traces?
                                                     ;C64: FF4Ah.7/FF4Bh.7/C64: bluish   ;XXX why FF4xh? THIS is FE4xh!!!
FE42h           IO_AV_secret_control            db 0  ;<-- unused by firmware, but has useful functions...
                                                      ;FE42h.bit0-2 slight horiz.position changes,
                                                      ;FE42h.bit3:blurRightScreenEdge,
                                                      ;FE42h.bit4=NoSignal,
                                                      ;FE42h.bit5=C64 does PERFECTLY SHOW C64 IMAGE !!! (and still switches to SNOW when C64 is OFF)
                                                      ;FE42h.bit6=WrongColor(LightblueInsteadRedInSnesDiagAndPickupWashynessIfC64isPoweredOnOnAV2... or is that S-Video with Chroma from AV2 ???)
FE43h..FE4Fh                                    defs 0dh ;   (unused)
                                                   ;FE43h=Somewhat Lumafactor/Lumaoffset for white-pixels getting brighter, when bit7 changed: white pixels are becoming BLACK
                                                   ;FE44h.bit5=LessBoldness
                                                   ;FE44h.bit6=AllMuchBrighter(including brighter black)
                                                   ;FE44h.bit7=AllVERYMuchBrighter(including brighter black)
                                                   ;FE45h.bit7=MonochromeImage(not dithered), with Washyness if C64 is PoweredOn on AV2)
                                                   ;FE47h.bit7=ReddishMagentaInsteadRed, with Washyness if C64 is PoweredOn on AV2)
                                                   ;FE48h.bit6=BlackWhiteDitheredImage
                                                   ;FE4Bh.bit7:NOT RW
                                                   ;FE4Dh.bit3-7:NOT RW
                                                   ;FE4Eh.bit6: C64: UNTOGGLING FE4Eh.6 does show C64 image for short moment (no effect on SNES image)
                                                   ;FE4Fh.bit7:NOT RW
FE50h..FE53h                                    defs 4   ;   (unused)   ;C64: FE50h.6,7 does show C64 image going on and off (no effect on SNES image)
FE54h           IO_AV_ctrl_whatever_2           db 0     ;   used !!!!!!!! ...initially 00h, bit6 is manipulated later on
FE55h                                           db 0     ;   (unused)   ;bit4:AlmostCompletelyOmitsSomePalScanlines(instead of resampling them from PAL to 240pix-LCD-resolution), bit5:SameAsBit4(but affecting OTHER lines)
FE56h           IO_AV_config_FE56h              db 0     ;   fixed (set to 00h)
FE57h..FE5Fh                                    defs 9   ;   (unused)
FE60h..FE7Fh                                    db 0     ;   (unused)
                                                   ;FE60h.bit1: when changed: ShortlyFlashesOrShortlyNoSignal
                                                   ;FE60h.bit3: SNES: dims white to BluishGray and/or shortly NoSignal
                                                   ;FE60h.bit3: C64: rolling white stripes when C64 ON
FE61h..FE68h                                    defs 8   ;   (unused)
FE69h..FE6Fh     defs 7  ;unused (FFh-filled) ;NOT RW
FE70h..FE7Dh                                    defs 0Eh ;   (unused)
FE7Eh                                           db 0    ;NOT RW (value FFh)
FE7Fh                                           db 0    ;    (unused) (value FFh, but this one is write-able)
                ;---next 80h bytes are many STAT values (counters or levels or so?) (especially active when AV signal present)
FE80h                                           db 0     ;   (unused)  ;FE80h.bit7=ForcesBlackImage
FE81h                                           defs 1   ;unused (FFh-filled)
FE82h                                           db 0     ;   (unused)
FE83h           IO_AV_config_FE83h              db 0     ;   fixed (FEh)
FE84h..FE9Fh                                    defs 1ch ;   (unused)
                                                   ;FE84h..FE89h:NOT RW  ;STAT? (two negative 16bit values, and another 2 bytes?)
                                                   ;FE8Bh.bit7:NOT RW
                                                   ;FE8Ch.NOT RW (value 17h)
                                                   ;FE8Dh.bit3-7:NOT RW
                                                   ;FE8Eh.bit5-7:NOT RW
                                                   ;FE90h..FE9Fh:NOT RW
FEA0h           IO_AV_force_resync              db 0     ;   used !!!!!! (bit0 manually pulsed with SLOW DELAYS)  ;C64: UNTOGGLING bit7: does SHOW C64 image for short moment)
                                        ;FEA0h.bit0 sometimes causes NoSignal, and simetimes FreezesCurrentScanline (THAT affecting BOTH OSD AND AV !!!)
                                        ;FEA0h.bit1 move AV image 1pix UP, and ca.8pix RIGHT
                                        ;FEA0h.bit2-7:NOT RW
FEA1h..FEA9h                                    defs 9   ;   (unused)
                                        ;FEA1h:NOT RW ;STAT (value Fxh)
                                        ;FEA2h.bit3-7:NOT RW
                                        ;FEA3h..FEA9h:NOT RW  (STAT)
FEAAh           IO_AV_stat_sensitivity_msb      db 0     ;   used !!!!!! ;NOT RW ;\16bit status/counter?  (NoSignal:0FFFh, C64:0287h..028Bh=647..651)
FEABh           IO_AV_stat_sensitivity_lsb      db 0     ;   used !!!!!! ;NOT RW ;/
FEACh..FEB4h                                    defs 9   ;   (unused)
                                        ;FEACh..FEB1h:NOT RW  (STAT)
                                        ;FEB2h.bit7:NOT RW
                                        ;FEB3h:NOT RW  (STAT)
                                        ;FEB4h.bit7:THIS looks like S-Video (picks Snes/Luma from AV1, but C64/Chroma from AV2, showing hatchy blue borders at wrong hsync)
FEB5h           IO_AV_config_FEB5h              db 0     ;   fixed (set to 67h)
FEB6h..FEB9h                                    defs 4   ;   (unused)
                                        ;FEB6h.bit5-7:NOT RW
                                        ;FEB7h.bit0: Moves image 1pix LEFT
                                        ;FEB7h.bit1-7:NOT RW
FEBAh           IO_AV_config_FEBAh              db 0     ;   fixed (set to FFh)
FEBBh..FEC8h                                    defs 0eh ;   (unused)
                                        ;FEC5h-FEC7h:NOT RW  (values 00h)
                                        ;FEC8h.bit0:DitheredBlackWhite
                                        ;FEC8h.bit7: move image ca.80pix RIGHT and ca.12pix UP
FEC9h           IO_AV_config_FEC9h              db 0
                                        ;FEC9h.bit1: LessBoldness
                                        ;FEC9h.bit6: DitheredAllGreenImage(GREEN !!!)
FECAh                                           defs 1   ;   (unused)
                                        ;FECAh.bit0: UntogglingShortlyDimsBrightness
                                        ;FECAh.bit1: UntogglingShortlyBlinksWhitePixels
FECBh           IO_AV_ctrl_artifacts            db 0     ;   used !!!!!!!! (set to 00h, 02h, or 06h)
                                        ;FECBh.bit0: NICE: LessPalArtifactsOnSNES
                                        ;FECBh.bit1: Similar as bit0, but with magenta-line at bottom of red-snes-screen
FECCh..FECFh                                    defs 4   ;   (unused)
                                        ;FECEh-FECFh:NOT RW  (reads as DFh,73h with PAL/SNES)
FED0h           IO_AV_stat_detect_2             db 0     ;   used !!!!!!!!! ...status   ;NOT RW
FED1h..FED4h                                    defs 4   ;   (unused)
                                        ;FED1h.bit5,6:UponChanges:ShortlyNoSignal
                                        ;FED1h.bit7: NOT RW
                                        ;FED3h.bit2-7: NOT RW
                                        ;FED4h.bit1: OverBright(andWashyIfC64 is powered on AV2)
FED5h           IO_AV_ctrl_sensitivity_1        db 0     ;   initially B1h, modified/used later
FED6h                                           db 0     ;   (unused)
                                        ;FED6h.bit3: Snowy random Red/Magenta pixels (instead of SNES with Red background) (and if C64 powered on AV2: diagonally striped Red/Magenta) (might be also S-Video, chroma from AV2?)
                                        ;FED6h.bit7: ShortlyNoSignal, then UberOverBrightImage (and Washy if C64 also powered on on AV2)
                                        ;FED6h.bit7.onC64: bit7: does SHOW C64 image (once and then, goes on and off) (this is best result yet)
FED7h           IO_AV_video_on_off              db 0     ;   used !!!!!!!!!  lcd-control/enable or so  ;bit0+1+6+7:disable SNOW (freeze backdrop-color or snow-color, and occassionally also freeze current OSD scanline!)
FED8h           IO_AV_input_select_reg_0        db 0     ;   used !!!!!!!!!  lcd-input select related                        ;C64: bit7=whitish stripes when C64 ON  ;SNES: bit7=ShortlyWhiteStripes...ThenAllWhite (looks as if snow/random generator ends up with all-white pixels)
FED9h           IO_AV_config_FED9h_bits         db 0     ;   used !!!!!!!!!  (bit4-5 cleared, bit6 set)
FEDAh                                           db 0     ;   (unused)
FEDBh           IO_AV_config_FEDBh_bit          db 0     ;   used !!!!!!!!!  (bit7 cleared)
FEDCh           IO_AV_input_select_reg_1        db 0     ;   used !!!!!!!!!  lcd-input select
                                        ;FEDCh.bit4: Toggle=BlueBackdrop(without snow), Untoggle: ShortlyNoSignal(with snow)ThenNormalPicture
                                        ;FEDCh.bit5: NoSignal ;or, if C64 powered on AV2: white picture with blue/rolling hsync/vsync signals?
                                        ;FEDCh.bit6: BlueBackdrop(without snow, except a VERY FEW random/snow pixels in some rolling-screen-half)
                                        ;FEDCh.bit6: Like bit6, but with a little bit more random/now pixels)
                                        ;C64: bit7: minimal SNOW when C64 ON
FEDDh..FEEBh                                    defs 0fh ;   (unused)  ;NOT RW (STAT) (not FFh, except, FEEAh is usually FFh, and FEEBh is OFTEN FFh, but can become EFh when plugging/unplugging AV cable)
FEECh..FEEFh     defs 04h  ;unused (FFh-filled)                        ;NOT RW
                ;---
FEF0h..FEFDh                                    defs 0eh ;   (unused)  ;NOT RW (STAT) (not FFh)
FEFEh..FEFFh     defs 02h  ;unused (FFh-filled)                        ;NOT RW
                ;--- --- ---
FF00h           IO_LCD_config_FF00h      db 0     ;-I/O Init to fixed value (03h)   ;bit0/1:AffectAvColorBrightnessOrSo maybe GammaRampMode/Enable?
FF01h..FF1Fh    IO_LCD_gamma_ramp_red:   defs 1fh ;\RGB gamma ramps (init to increasing values)
FF20h..FF3Eh    IO_LCD_gamma_ramp_green: defs 1fh ; (affects AV video and YCbCr backdrop and "white" snow)
FF3Fh..FF5Dh    IO_LCD_gamma_ramp_blue:  defs 1fh ;/(ALSO affects OSD colors, except BRIGHT one like WHITE/YELLOW/etc)
                ;--- --- ---
                ;registers FF5Eh..FFA3h are unused by old firmware (but
                ;some used for Infrared in new firmware)
                ;none of the FF5Eh..FFA3h registers has any visible effect
                ;when toggling ANY bits in this area (tested with SNES at PAL60)
                ;- - -
FF5Eh           IO_LCD_whatever_FFh_1 db 0  ;=FFh ;\
FF5Fh           IO_LCD_whatever_FFh_2 db 0  ;=FFh ;
FF60h           IO_LCD_whatever_FFh_3 db 0  ;=FFh ;/
                ;- - -
FF61h           IO_IR_config_FF61h    db 0  ;=05h ;\
FF62h           IO_IR_config_FF62h    db 0  ;=3Fh ;
FF63h           IO_IR_config_FF63h    db 0  ;=10h ;
FF64h           IO_IR_config_FF64h    db 0  ;=04h ;  ;<--FF64h.bit3-7:NOT RW
FF65h           IO_IR_config_FF65h    db 0  ;=76h ;
FF66h           IO_IR_config_FF66h    db 0  ;=3Bh ;
FF67h           IO_IR_config_FF67h    db 0  ;=08h ;
FF68h           IO_IR_config_FF68h    db 0  ;=15h ;
FF69h           IO_IR_config_FF69h    db 0  ;=07h ;
FF6Ah           IO_IR_config_FF6Ah    db 0  ;=00h ;
FF6Bh           IO_IR_config_FF6Bh    db 0  ;=00h ;  ;<--NOT RW (but is written!?!)
FF6Ch           IO_IR_config_FF6Ch    db 0  ;=00h ;  ;<--NOT RW (but is written!?!)
FF6Dh           IO_IR_config_FF6Dh    db 0  ;=00h ;  ;<--NOT RW (but is written!?!)
FF6Eh           IO_IR_config_FF6Eh    db 0  ;=00h ;  ;<--NOT RW (but is written!?!)
FF6Fh           IO_IR_config_FF6Fh    db 0  ;=76h ;
FF70h           IO_IR_config_FF70h    db 0  ;=1Ch ;
FF71h           IO_IR_config_FF71h    db 0  ;=08h ;
FF72h           IO_IR_config_FF72h    db 0  ;=F5h ;/
FF73h..FF76h                          defs 4
FF77h           IO_IR_config_FF77h    db 0  ;=59h ;\
FF78h           IO_IR_config_FF78h    db 0  ;=00h ;
FF79h           IO_IR_config_FF79h    db 0  ;=01h ;
FF7Ah           IO_IR_config_FF7Ah    db 0  ;=73h ;
FF7Bh           IO_IR_config_FF7Bh    db 0  ;=FFh ;
FF7Ch           IO_IR_config_FF7Ch    db 0  ;=02h ;
FF7Dh           IO_IR_config_FF7Dh    db 0  ;=0Fh ;/
FF7Eh..FF81h                          defs 4
FF82h           IO_IR_config_FF82h    db 0  ;=01h ;- ;<--FF82h.bit4-7:NOT RW
FF83h           IO_IR_stat_FF83h_used db 0       ;\ ;<--NOT RW
FF84h                                 db 0       ;  ;<--NOT RW
FF85h           IO_IR_stat_FF85h_used db 0       ;  ;<--NOT RW
FF86h                                 db 0       ;  ;<--NOT RW
FF87h                                 db 0       ;/ ;<--NOT RW
FF88h..FF8Bh                          defs 4     ;   (unused by firmware) <-- no visible effect when toggling ANY bits in this area (tested with SNES at PAL60)
FF8Ch                                 db 0       ;  ;<--FF8Ch.bit6-7:NOT RW
FF8Dh..FF91h                          defs 5     ;  ;<--FF8Dh-FF91h:NOT RW
FF92h..FF9Eh                          defs 0Dh   ;  ;<--fully R/W
FF9Fh                                 db 0       ;  ;<--FF9Fh.bit6-7:NOT RW
FFA0h..FFA3h                          defs 4     ;  ;<--fully R/W
                ;---
FFA4h..FFAFh     defs 0ch  ;unused (FFh-filled)  ;NOT RW
                ;---
FFB0h           IO_LCD_snow_enable_and_misc db 0     ;used !!! initially 22h ;backdrop ctrl  ;bit7:snow(0=off, 1=on), bit5: always 1? or bit5: disable picture?    bit0:affects AV picture NTSC? bright?    ;C64: bit5,7=bluish (and bit5: OSD position/yscale depending on C64 on/off?)
FFB1h           IO_LCD_sharpness_or_so      db 0     ;   used !!!    bit0: AV bolder/brighter/smeared pixels  sharpness?  ;bit3:VeryBlurry    ;C64: bit4,6:bluish
FFB2h           IO_LCD_config_FFB2h         db 0     ;   fixed (20h)
FFB3h           IO_LCD_config_FFB3h         db 0     ;   fixed (20h)
FFB4h           IO_LCD_config_FFB4h         db 0     ;   fixed (20h)
FFB5h                                       db 0     ;   (unused by firmware)
FFB6h                                       db 0     ;   (unused by firmware)
FFB7h           IO_LCD_config_FFB7h         db 0     ;   fixed (twice set to 90h)
FFB8h..FFBFh                                defs 8   ;   (unused)    ;FFB8h:bit7:BrighterBlack
FFC0h..FFCAh                                defs 0bh ;   (unused)
FFCBh           IO_LCD_whatever_FFCBh       db 0     ;   ;\ init to 80h/2Ah ;<--- this byte also via init list  ;bit0:DarkerOSD?
FFCCh           IO_LCD_config_FFCCh         db 0     ;   ;  init to 80h            ;bit6:WholeScreenMintgreen? (no AV, no OSD), bit7:BrighterBlack  ;when FFCEh-FFD0h=00,00,00: bit=WholeScreenBlack(insteadMintGreen)
FFCDh           IO_LCD_config_FFCDh         db 0     ;   ;/ init to 2Dh
FFCEh           IO_LCD_backdrop_color_Y     db 0  ;\three-byte-group (Y,Cb,Cr) (all unsigned 8bit)
FFCFh           IO_LCD_backdrop_color_Cb    db 0  ;   for BLUE:       13h,DDh,72h
FFD0h           IO_LCD_backdrop_color_Cr    db 0  ;/  for BLACK/SNOW: 00h,80h,80h
FFD1h                                       db 0     ;   (unused)      ;bit6:BrighterBlack
FFD2h           IO_LCD_forced_blank_color   db 0  ;Forced Blank Color (set to 4Fh..55h depending on Settings, and on display on/off) (4Fh=show AV video (or backdrop/snow), 5xh=force blank screen with fixed color) (does NOT affect OSD, affects only AV+backdrop+snow)  ;for AV:bit0=swapRed/Blue, bit1=mess, bit2=dim?, bit3:AV_OFF/BLACK(OSD only)  ;C64: bit7:bluish on C64
FFD3h           IO_LCD_basic_contrast       db 0  ;Contrast
FFD4h           IO_LCD_basic_brightness     db 0  ;Brightness
FFD5h           IO_LCD_basic_tint           db 0  ;Tint (for NTSC only)
FFD6h           IO_LCD_basic_saturation     db 0  ;Saturation
FFD7h           IO_LCD_config_FFD7h         db 0     ;   fixed (10h)
FFD8h           IO_LCD_whatever_FFD8h       db 0     ;   used !!!!!!!!!!  (bit7 set/cleared) (set for BLUE ?)
FFD9h                                       db 0     ;   (unused)
FFDAh           IO_backdrop_snow_level      db 0     ;   fixed (6Ch)  ;amount of white snow pixels (bit0-3=amount?, bit4-6=width, bit7=?)
FFDBh..FFDCh                                defs 2   ;   (unused)
FFDDh            defs 1    ;unused (FFh-filled) ;NOT RW
FFDEh..FFEAh                                defs 0dh ;   (unused) <-- no visible effect when toggling ANY bits in this area (tested with SNES at PAL60)
FFEBh..FFEFh     defs 5h   ;unused (FFh-filled) ;NOT RW
FFF0h           IO_LCD_config_FFF0h         db 0     ;   fixed (1Ah)                ;\
FFF1h           IO_LCD_config_FFF1h         db 0     ;   fixed (06h)                ; affects AV color decoding
FFF2h           IO_LCD_config_FFF2h         db 0     ;   fixed (D4h)                ; ...
FFF3h           IO_LCD_config_FFF3h         db 0     ;   fixed (D2h)                ;
FFF4h           IO_LCD_config_FFF4h         db 0     ;   fixed (F1h)  ;<-- F1h
FFF5h           IO_LCD_config_FFF5h         db 0     ;   fixed (0Eh)
FFF6h           IO_LCD_config_FFF6h         db 0     ;   fixed (15h)
FFF7h           IO_LCD_config_FFF7h         db 0     ;   fixed (E4h)
FFF8h           IO_LCD_config_FFF8h         db 0     ;   fixed (F6h)
FFF9h           IO_LCD_config_FFF9h         db 0     ;   fixed (F1h)  ;<-- F1h, too
FFFAh           IO_LCD_config_FFFAh         db 0     ;   fixed (1Bh)
FFFBh           IO_LCD_config_FFFBh         db 0     ;   fixed (81h)
                .errif $-0fffch
FFFCh..FFFFh     defs 4h   ;unused (FFh-filled)  ;NOT RW
                .errif $-0000h     ;aka 10000h
                ;------------------
                ;further unknown ports that should exist
                ;  PLL control for 27MHz vs PAL/NTSC clocks
                ;  IR input for REMOTE pin
                ;  I2C bus
                ;  OSD blink/highlight (for THREE windows?)
                ;------------------
                org 0
                ;---Internal RAM...
[00h]            defs 8         ;reserved for CPU registers r0..r7
[08h]           iram_tmp_window_y1        db 0  ;-memorized param for osd_clear_window_attr
[09h]                db 0     ;  unused?
[0Ah]                db 0     ;  unused?
[0Bh]           iram_tmp_window_cy        db 0  ;\ .... for osd_clear_window_attr
[0Ch]           iram_tmp_window_attr      db 0  ;/ attr for osd_clear_window_attr
[0Dh]           iram_tmp_upload_dst       db 0  ;\
[0Eh]           iram_tmp_upload_src_area  db 0  ; params for unused function at 88DEh
[0Fh]           iram_tmp_upload_src_msb   db 0  ;
[10h]           iram_tmp_upload_src_lsb   db 0  ;/
[11h]           iram_med_brightness       db 0  ;\
[12h]           iram_med_contrast         db 0  ; memorized values within "get_min_max_med_for_brightness_contrast_saturation"
[13h]           iram_med_saturation       db 0  ;/
                .if lcd_spi_version<ver11sep2017
[14h]             iram_tmp_lcdspi_dta_msb   db 0  ;\
[15h]             iram_tmp_lcdspi_dta_lsb   db 0  ; params for unused function at AF96h
[16h]             iram_tmp_lcdspi_index     db 0  ;/
                .endif
[17h]           iram_tmp_palette_area     db 0  ;\
[18h]           iram_tmp_palette_msb      db 0  ; params for unused function at A2A2h
[19h]           iram_tmp_palette_lsb      db 0  ;/
[1Ah]           iram_old_AV_framerate     db 0  ;old signal
[1Bh]           iram_timer1_irq_counter   db 0  ;irq counter
[1Ch]           iram_ir_msb_device        db 0  ;\USED by newer version ;(older version: blah, set to FFh in several places)
[1Dh]           iram_ir_lsb_cmd           db 0  ;/
[1Eh]           iram_like_xram_sett___0Eh db 0  ;old (equivalent to ;xram_sett___0Eh)
                .if shuffle_version>=ver11sep2017
[48h]             iram_menu_flags       db 0     ;  used     flags
[49h]             iram_heap_ptr         db 0     ;  used ... somewhat heap/alloc pointer? (initially (1)00h, decreasing to FFh and below?)
                     db 0     ;  unused?
                .endif
                .if av_detect_version<ver11sep2017
[1Fh]             iram_old_AV_stat_detect_0 db 0  ;video detect...
                .else
                     db 0     ;  unused?
                .endif
[20h]           iram_req_event_flags      db 0  ;   irq Nth flags   "RQ_xxx"
[21h]           iram_misc_flags           db 0  ;   irq ... flags
[22h]           iram_tmp_AV_framerate     db 0  ;new signal
[23h]           iram_tmp__23h             db 0  ;  for irq   ...IO_AV_stat_signal_detect(4bit), and msb 8bit from IO_AV_stat_sensitivity_msb
[24h]           iram_tmp__24h             db 0  ;  for irq   ...IO_AV_stat_detect_2(8bit),      and lsb 8bit from IO_AV_stat_sensitivity_lsb
[25h]           iram_tmp_event_code       db 0  ;temp (event_code within mainloop)
[26h]           iram_tmp__26h     db 0     ;           misc/temp
[27h]           iram_tmp__27h     db 0     ;           misc/temp
[28h]           iram_tmp__28h     db 0     ;           misc/temp
[29h]           iram_tmp__29h     db 0     ;           misc/temp
[2Ah]           iram_tmp__2Ah     db 0     ;           misc/temp
[2Bh]           iram_tmp__2Bh     db 0     ;           misc/temp
[2Ch]           iram_tmp__2Ch     db 0     ;           misc/temp
[2Dh]           iram_tmp__2Dh     db 0     ;           misc/temp
[2Eh]           iram_tmp__2Eh     db 0     ;           misc/temp
[2Fh]           iram_tmp__2Fh     db 0     ;           misc/temp
[30h]           iram_tmp__30h     db 0     ;           misc/temp
[31h]           iram_tmp__31h     db 0     ;           misc/temp
[32h]           iram_tmp__32h     db 0     ;           misc/temp
[33h]           iram_tmp__33h     db 0     ;           misc/temp
[34h]           iram_tmp__34h     db 0     ;           misc/temp
[35h]           iram_tmp__35h     db 0     ;           misc/temp
[36h]           iram_tmp__36h     db 0     ;           misc/temp
[37h]           iram_tmp__37h     db 0     ;           draw bar
[38h]           iram_tmp__38h     db 0     ;           misc/temp
[39h]           iram_tmp__39h     db 0     ;           misc/temp
[3Ah]           iram_tmp__3Ah     db 0     ;           misc/temp
[3Bh]           iram_tmp__3Bh     db 0     ;           misc/temp
[3Ch]           iram_tmp__3Ch     db 0     ;           misc/temp
[3Dh]           iram_tmp__3Dh     db 0     ;           misc/temp
[3Eh]           iram_tmp__3Eh     db 0     ;           misc/temp
[3Fh]           iram_tmp__3Fh     db 0     ;           misc/temp
[40h]           iram_tmp__40h     db 0     ;           misc/temp
[41h]           iram_tmp__41h     db 0     ;           misc/temp
[42h]           iram_tmp__42h     db 0     ;           misc/temp
[43h]           iram_tmp__43h     db 0     ;           write flash
[44h]           iram_tmp__44h     db 0     ;           misc/temp
[45h]           iram_tmp__45h     db 0     ;           misc/temp
[46h]           iram_tmp__46h     db 0     ;           misc/temp
[47h]           iram_tmp__47h     db 0     ;           misc/temp
                .if shuffle_version<ver11sep2017
[48h]             iram_menu_flags db 0     ;  used     flags
[49h]             iram_heap_ptr   db 0     ;  used ... somewhat heap/alloc pointer? (initially (1)00h, decreasing to FFh and below?)
                .endif
                iram_stack_bottom:
                     .if shuffle_version>=ver11sep2017
                       defs 2   ;two more free stack bytes in this version
                     .endif
[4Ah..FFh]           defs 100h-4Ah  ;<-- initial stack at 4Ah..7Fh, or 4Ah..FFh or so? (is there RAM at 80h..FFh?) (and heap decreasing at FFh..down)
                iram_heap_top:
                .errif $-100h
                ;---
                ;below "(xxx)" names are P8xCE558 ports (not 8031/8051)
                ;they are apparently having OTHER SPECIAL meanings on the video chip (?)
                ;below internal I/O are used, but unknown what they do
[80h]  p0       SFR_IO_PORT0_DATA       equ 080h    ;bit6: force screen white
[81h]  sp       SFR_CPU_sp              equ 081h
[82h]  dpl      SFR_CPU_dpl             equ 082h  ;\aka 16bit dptr
[83h]  dph      SFR_CPU_dph             equ 083h  ;/
[84h]            ;unused                equ 084h
[85h]            ;unused                equ 085h
[86h]  (adrsl0)  ;unused                equ 086h    ;NOT R/W  ;bit0:DANGER
[87h]  pcon     ;SFR_IO_PCON            equ 087h    ;bit0-1:DANGER(halt/idle?), bit2-3,6-7:R/W, bit4-5:NOT R/W
[88h]  tcon     ;SFR_IO_TCON            equ 088h      ;bit3:NOT R/W
[89h]  tmod     SFR_IO_TMOD             equ 089h
[8Ah]  tl0      SFR_IO_timer0_lsb       equ 08Ah
[8Bh]  tl1      SFR_IO_timer1_lsb       equ 08Bh    ;some NOT R/W (aka updated by HW)
[8Ch]  th0      SFR_IO_timer0_msb       equ 08Ch
[8Dh]  th1      SFR_IO_timer1_msb       equ 08Dh
[8Eh]           SFR_IO_whatever_config  equ 08Eh        ;-lower 3bits set
[8Fh]            ;unused                equ 08Fh    ;bit0:SKIPPED???(maybe forces ADC=ready), bit1-7:NOT R/W
[90h]  p1       ;SFR_IO_PORT1_DATA      equ 090h              ;00
[91h]           SFR_IO_xxx91h           equ 091h    ;bit0-3:NOT R/W   ;-four extra IRQ flags (bit4=ADC?)
[92h]           ;SFR_IO_xram_bank       equ 092h ;upper 8bit of XRAM address (when using 8bit addr via "movx [r0]", eg. allows to access 2K XRAM at 0000h-07FFh, and I/O ports at FB00-FFFFh) (not used by firmware)
[93h]            ;unused                equ 093h     ;NOT R/W ;00
[94h]            ;unused                equ 094h     ;NOT R/W ;00
[95h]            ;unused                equ 095h     ;NOT R/W ;00
[96h]  (adrsl1)  ;unused                equ 096h     ;NOT R/W ;00
[97h]            ;unused                equ 097h     ;NOT R/W ;00
[98h]  s0con    SFR_IO_sio_scon         equ 098h              ;scon
[99h]  s0buf    ;SFR_IO_sio_sbuf        equ 099h     ;NOT R/W ;00 (R) and (W)
[9Ah]            ;unused                equ 09Ah     ;NOT R/W ;00
[9Bh]            ;unused                equ 09Bh     ;NOT R/W ;00
[9Ch]            ;unused                equ 09Ch     ;NOT R/W ;00
[9Dh]            ;unused                equ 09Dh     ;NOT R/W ;00
[9Eh]            ;unused                equ 09Eh     ;NOT R/W ;00
[9Fh]            ;unused                equ 09Fh     ;NOT R/W ;00
[0A0h] p2       ;SFR_IO_PORT2_DATA      equ 0A0h        ;00
[0A1h]           ;unused                equ 0A1h        ;00
[0A2h]           ;unused                equ 0A2h        ;00
[0A3h]           ;unused                equ 0A3h        ;00
[0A4h]           ;unused                equ 0A4h        ;00
[0A5h]           ;unused                equ 0A5h        ;00
[0A6h] (adrsl2)  ;unused                equ 0A6h        ;00
[0A7h]           ;unused                equ 0A7h        ;00
[0A8h] ien0/iec ;SFR_IO_iec             equ 0A8h        ;iec
[0A9h] (cml0)    ;unused                equ 0A9h        ;00
[0AAh] (cml1)    ;unused                equ 0AAh        ;00
[0ABh] (cml2)    ;unused                equ 0ABh        ;00
[0ACh] (ctl0)    ;unused                equ 0ACh        ;00
[0ADh] (ctl1)    ;unused                equ 0ADh        ;00
[0AEh] (ctl2)    ;unused                equ 0AEh        ;00
[0AFh] (ctl3)    ;unused                equ 0AFh        ;00
[0B0h] p3       SFR_IO_PORT3_DATA       equ 0B0h
[0B1h]          SFR_IO_timer3_lsb       equ 0B1h        ;\faster timer (incrementing)
[0B2h]          SFR_IO_timer3_msb       equ 0B2h        ;/
[0B3h]          SFR_IO_timer4_lsb       equ 0B3h        ;\slower timer (4x slower than above)
[0B4h]          SFR_IO_timer4_msb       equ 0B4h        ;/
[0B5h]          ;SFR_IO_timer34_stat    equ 0B5h     ;NOT R/W ;03
[0B6h] (adrsl3) ;SFR_IO_timer34_ctrl    equ 0B6h     ;bit2-7:NOT R/W
[0B7h]           ;unused                equ 0B7h     ;NOT R/W ;00
[0B8h] ip0/ipc  SFR_IO_ipc              equ 0B8h    ;<-- used     ;bit7:NOT R/W
[0B9h]          SFR_IO_watchdog_config1 equ 0B9h     ;NOT R/W ;03 !  ;\  <-- watchdog config 1                ;\
[0BAh]          SFR_IO_watchdog_enable  equ 0BAh     ;NOT R/W ;00    ;   <-- watchdog on/off                  ;
[0BBh]          SFR_IO_watchdog_reload  equ 0BBh     ;NOT R/W ;00    ;   <-- watchdog reload                  ; watchdog ?
[0BCh]          SFR_IO_watchdog_config2 equ 0BCh     ;NOT R/W ;FF !  ;   <-- watchdog config 2                ;
[0BDh]          SFR_IO_watchdog_config3 equ 0BDh     ;NOT R/W ;8F !  ;   <-- watchdog config 3                ;
[0BEh]          SFR_IO_watchdog_unlock  equ 0BEh     ;NOT R/W ;00    ;/  <-- watchdog lock/unlock accesses    ;/
[0BFh]           ;unused                equ 0BFh     ;NOT R/W ;00
[0C0h] (p4)      ;unused                equ 0C0h     ;NOT R/W ;00
[0C1h]           ;unused                equ 0C1h     ;NOT R/W ;00
[0C2h]           ;unused                equ 0C2h     ;NOT R/W ;00
[0C3h]           ;unused                equ 0C3h     ;NOT R/W ;00
[0C4h]           ;unused                equ 0C4h     ;NOT R/W ;00
[0C5h]           ;unused                equ 0C5h     ;NOT R/W ;00
[0C6h] (adrsl4) SFR_IO_memory_system    equ 0C6h  ;DANGER ;spi flash/osd memory system?
[0C7h] (p5)      ;unused                equ 0C7h
[0C8h] (tm2ir)  SFR_IO_baudrate_control equ 0C8h  ;sio/baudrate control? ;aka 8052 timer2_control
[0C9h] (cmh0)    ;unused                equ 0C9h     ;NOT R/W ;00
[0CAh] (cmh1)   SFR_IO_baudrate_lsb     equ 0CAh    ;\   baudrate.lsb    ;aka 8052 timer2_reloadcapture_lsb
[0CBh] (cmh2)   SFR_IO_baudrate_msb     equ 0CBh    ;/   baudrate.msb    ;aka 8052 timer2_reloadcapture_msb
[0CCh] (cth0)    ;unused                equ 0CCh     ;NOT R/W ;Fx  ;(R)?  ;<-- some status? (changes automatically)
[0CDh] (cth1)    ;unused                equ 0CDh     ;NOT R/W ;FF
[0CEh] (cth2)    ;unused                equ 0CEh     ;NOT R/W ;00
[0CFh] (cth3)    ;unused                equ 0CFh     ;NOT R/W ;00
[0D0h] psw      SFR_CPU_psw             equ 0D0h
[0D1h]           ;unused                equ 0D1h     ;NOT R/W ;00
[0D2h]           ;unused                equ 0D2h              ;00
[0D3h]           ;unused                equ 0D3h              ;00
[0D4h]           ;unused                equ 0D4h              ;00
[0D5h]           ;unused                equ 0D5h              ;00
[0D6h] (adrsl5)  ;unused                equ 0D6h     ;NOT R/W ;00
[0D7h] (adcon)   ;unused                equ 0D7h     ;NOT R/W ;00
[0D8h] (s1con)   ;unused                equ 0D8h     ;bit0-2,6:NOT R/W
[0D9h] (s1sta)   ;unused                equ 0D9h     ;NOT R/W ;\
[0DAh] (s1dat)   ;unused                equ 0DAh     ;NOT R/W ;
[0DBh] (s1adr)   ;unused                equ 0DBh     ;NOT R/W ;
[0DCh]           ;unused                equ 0DCh     ;NOT R/W ; 00h-filled
[0DDh]           ;unused                equ 0DDh     ;NOT R/W ;
[0DEh]           ;unused                equ 0DEh     ;NOT R/W ;
[0DFh]           ;unused                equ 0DFh     ;NOT R/W ;/
[0E0h] a/acc    SFR_CPU_a               equ 0E0h
[0E1h]           ;unused                equ 0E1h     ;NOT R/W ;FF
[0E2h]           ;unused                equ 0E2h     ;NOT R/W ;FF
[0E3h]           ;unused                equ 0E3h     ;NOT R/W ;FF
[0E4h]          SFR_IO_IR_data          equ 0E4h     ;NOT R/W ;FF
[0E5h]          SFR_IO_IR_flags         equ 0E5h     ;NOT R/W ;04
[0E6h] (adrsl6)  ;unused                equ 0E6h     ;NOT R/W ;00
[0E7h] (adpss)   ;unused                equ 0E7h     ;NOT R/W ;00
[0E8h] (ien1)   SFR_IO_IEC2             equ 0E8h   ;-four flags  ;bit5-7:NOT R/W
[0E9h]          SFR_IO_PORT0_MODE_A     equ 0E9h  ;-PORT0 special mode  ;bit7,6=PWM   ... bit0,1,2=ADC  ... bit3=REMOTE
[0EAh] (tm2con)  ;unused   1_MODE_A ?   equ 0EAh            ;also mode?
[0EBh] (ctcon)   ;unused   2_MODE_A ?   equ 0EBh            ;also mode?
[0ECh] (tml2)   SFR_IO_PORT3_MODE_A     equ 0ECh  ;-PORT3 special mode  ;bit7,6,5=PWM
[0EDh] (tmh2)   SFR_IO_PORT0_MODE_B     equ 0EDh  ;-PORT0 special mode  ;bit7,6=PWM   ... bit0,1,2=ADC  ... bit3=REMOTE
[0EEh] (ste)     ;unused   1_MODE_B ?   equ 0FEh            ;also mode?
[0EFh] (rte)     ;unused   2_MODE_B ?   equ 0EFh            ;also mode?
[0F0h] b        SFR_CPU_b               equ 0F0h
[0F1h]           ;unused                equ 0F1h     ;NOT R/W ;\
[0F2h]           ;unused                equ 0F2h     ;NOT R/W ; 00h-filled
[0F3h]           ;unused                equ 0F3h     ;NOT R/W ;/
[0F4h]          SFR_IO_PORT3_MODE_B     equ 0F4h  ;-PORT3 special mode  ;bit7,6,5=PWM
[0F5h]           ;unused                equ 0F5h      ;bit1-7:NOT R/W
[0F6h] (adrsl7)  ;unused                equ 0F6h     ;NOT R/W ;\00h-filled
[0F7h] (adrslh)  ;unused                equ 0F7h     ;NOT R/W ;/
[0F8h] (ip1)    SFR_IO_xxxF8h           equ 0F8h   ;-four flags  ;bit5-7:NOT R/W
[0F9h] (pllcon)  ;unused                equ 0F9h     ;NOT R/W ;\
[0FAh] (xramp)   ;unused                equ 0FAh     ;NOT R/W ;
[0FBh] (fmcon)   ;unused                equ 0FBh     ;NOT R/W ;
[0FCh] (pwm0)    ;unused                equ 0FCh     ;NOT R/W ; 00h-filled
[0FDh] (pwm1)    ;unused                equ 0FDh     ;NOT R/W ;
[0FEh] (pwmp)    ;unused                equ 0FEh     ;NOT R/W ;
[0FFh] (t3)      ;unused                equ 0FFh     ;NOT R/W ;/
                ;---and bits...
C8h.2   (cti2)  ;[SFR_IO_baudrate_control].2      ;-sio/baudrate control?
E8h.0   (ect0)  ;[SFR_IO_IEC2].0           ;\
E8h.1   (ect1)  ;[SFR_IO_IEC2].1           ; cleared at init
E8h.2   (ect2)  ;[SFR_IO_IEC2].2           ;
E8h.3   (ect3)  ;[SFR_IO_IEC2].3           ;/
F8h.0   (pct0)  ;[SFR_IO_xxxF8h].0         ;\
F8h.1   (pct1)  ;[SFR_IO_xxxF8h].1 ;<-SET! ; cleared at init (except pct1: set at init)
F8h.2   (pct2)  ;[SFR_IO_xxxF8h].2         ;
F8h.3   (pct3)  ;[SFR_IO_xxxF8h].3         ;/
                ;------------------
                .if tech_version<ver11sep2017
                  miscflg_0       equ 0
                  miscflg_1       equ 1
                  miscflg_1less   equ 1
                  miscflg_2       equ 2
                  miscflg_3       equ 3
                .else
                  miscflg_0       equ 0
                  miscflg_1       equ 1   ;\sometimes so, or so?
                  miscflg_1less   equ 1-1 ;/
                  miscflg_2       equ 2
                  miscflg_av      equ 3   ;<-- new extra flag (for NEW av_detect_version) (replaces BYTE variable "iram_old_AV_stat_detect_0")
                  miscflg_3       equ 3+1
                .endif
                ;------------------
;:------------- ;:----------------- code
                ;------------------
                .rom
                org   0
                .pack_org $
                ;------------------
                ;below vectors are for P8xCE558 (AMT630A is somewhat different)
                ;  addr     prio  name    expl
                ;  0000h    0     RESET   Reset
                ;  0003h    1     X0      External Interrupt 0
                ;  000Bh    4     T0      Timer 0 Overflow
                ;  0013h    7     X1/SEC  External Interrupt 1 or Seconds Interrupt
                ;  001Bh    10    T1      Timer 1 Overflow
                ;  0023h    13    S0      SIO0 (UART/RS232) Send or Receive
                ;  002Bh    2     S1      SIO1 (I2C)
                ;  0033h    5     CT0     External Interrupt 2 with Timer 2 Capture 0 ;P8xCE558 only (not 8031/8051)
                ;  003Bh    8     CT1     External Interrupt 3 with Timer 2 Capture 1 ;P8xCE558 only (not 8031/8051)
                ;  0043h    11    CT2     External Interrupt 4 with Timer 2 Capture 2 ;P8xCE558 only (not 8031/8051)
                ;  004Bh    14    CT3     External Interrupt 5 with Timer 2 Capture 3 ;P8xCE558 only (not 8031/8051)
                ;  0053h    3     ADC     ADC Completion
                ;  005Bh    6     CM0     Timer 2 Compare 0
                ;  0063h    9     CM1     Timer 2 Compare 1
                ;  006Bh    12    CM2     Timer 2 Compare 2
                ;  0073h    15    T2      Timer 2 Overflow
                ;------------------
                ;HARDWARE VECTOR (reset)
                .errif $<>0000h
                warmboot_entry:
0000 02 98 CA    jmp  reset_entrypoint
                ;------------------
                ;HARDWARE VECTOR (external interrupt 0) (infrared REMOTE)
                .errif $<>0003h
0003 02 09 80    jmp  ext_int0_infrared
                ;------------------
                blah_read_and_writeback_bit:
0006 A2 09       mov  c,[iram_misc_flags].miscflg_1less     ;\uh? read/writeback a RAM bit?
0008 92 09       mov  [iram_misc_flags].miscflg_1less,c     ;/
000A 22          ret
                ;------------------
                ;HARDWARE VECTOR (timer 0 overflow)
                .errif $<>000Bh
000B 02 09 61    jmp  timer_0_overflow          ;--> just reload
                ;------------------
                init_SFR_IO_memory_system:   ;spi flash/memory system?   ;in: r7=00h (fixed)
000E EF          mov  a,r7                          ;\
000F 70 03       jnz  a,@@dont_set                  ; set bit7 (when r7=00h) <-- THIS
0011 43 C6 80    or   [SFR_IO_memory_system],80h    ;
                @@dont_set:                         ;/
0014 BF 01 03    jne  r7,01h,@@dont_clear           ;\
0017 53 C6 7F    and  [SFR_IO_memory_system],7Fh    ; clear bit7 (when r7=01h)
                @@dont_clear:                       ;/
001A 22          ret
                ;------------------
                ;HARDWARE VECTOR (external interrupt 1)
(0013) N/A      ;.errif $<>0013h
                ;------------------
                ;HARDWARE VECTOR (timer 1 overflow)
                .errif $<>001Bh
001B 02 03 BF    jmp  timer_1_overflow          ;------------>
                ;------------------
                init_timer_hardware:
001E C2 8C       clr  tr0         ;XXXsfr  ;Timer 0 Run (Stop)
0020 C2 8E       clr  tr1         ;XXXsfr  ;Timer 1 Run (Stop)
0022 75 89 11    mov  [SFR_IO_TMOD],11h ;timer0/1: both 16bit, increment at fCLK/12 ? (27MHz/12 = 2.25MHz?)
0025 75 8C FB    mov  [SFR_IO_timer0_msb],0FBh  ;\FB9Fh aka -461h (-1121)   ;\Timer0  ;ca. 2kHz ?
0028 75 8A 9F    mov  [SFR_IO_timer0_lsb],9Fh   ;/                          ;/
002B 75 8D D8    mov  [SFR_IO_timer1_msb],0D8h  ;\D8EFh aka -2711h (-10001) ;\Timer1  ;ca. 225 Hz ?
002E 75 8B EF    mov  [SFR_IO_timer1_lsb],0EFh  ;/                          ;/
0031 E4          clr  a                         ;\
0032 F5 B1       mov  [SFR_IO_timer3_lsb],a ;\  ; reset two extra 16bit Timers
0034 F5 B2       mov  [SFR_IO_timer3_msb],a ;/  ; (though not used elsewhere)
0036 F5 B3       mov  [SFR_IO_timer4_lsb],a ;\  ;
0038 F5 B4       mov  [SFR_IO_timer4_msb],a ;/  ;/
003A C2 A9       clr  et0         ;XXXsfr  ;Timer 0 Overflow Interrupt (off)
003C D2 AB       set  et1         ;XXXsfr  ;Timer 1 Overflow Interrupt (on)
003E C2 8C       clr  tr0         ;XXXsfr  ;Timer 0 Run (Stop)
0040 D2 8E       set  tr1         ;XXXsfr  ;Timer 1 Run (Run)
0042 22          ret
                ;------------------
                ;HARDWARE VECTOR (rs232 serial port)
(0023) N/A      ;.errif $<>0023h
                ;------------------
                ;HARDWARE VECTOR (timer 2 overflow) (8052)
(002B) N/A      ;.errif $<>002Bh
                ;------------------
                ;HARDWARE VECTOR (?)
(0033) N/A      ;.errif $<>0033h
                ;------------------
                ;HARDWARE VECTOR (?)
(003B) N/A      ;.errif $<>003Bh
                ;------------------
                ;HARDWARE VECTOR ?        ......   ADC analog
                .errif $<>0043h
0043 02 09 3A    jmp  whatever_91h_4_do_stuff_and_ack_reti   ;---->
                ;------------------
                gui_proc_Brightness_apply:
0046 12 76 20    call apply_settings_to_IO_ports
0049 D3          set  c
004A 22          ret
                ;------------------
                ;HARDWARE VECTOR ?
                .errif $<>004Bh
004B 02 09 74    jmp  whatever_91h_5_ack_reti
                ;------------------
                gui_proc_Contrast_apply:
004E 12 76 20    call apply_settings_to_IO_ports
0051 D3          set  c
0052 22          ret
                ;------------------
                ;HARDWARE VECTOR ?
                .errif $<>0053h
0053 02 09 78    jmp  whatever_91h_6_ack_reti
                ;------------------
                gui_proc_Saturation_apply:
0056 12 76 20    call apply_settings_to_IO_ports
0059 D3          set  c
005A 22          ret
                ;------------------
                ;HARDWARE VECTOR ?
                .errif $<>005Bh
005B 02 09 7C    jmp  whatever_91h_7_ack_reti
                ;------------------

                    ;defs 123h       ;<-- source still WORKs when inserted here
                    ;XXX caution: "defs" inserts FFh's in no$x51 (not 00h's !!!)

                ;------------------
                main_init_part_2:      ;init timers
005E 12 BE 96    call watchdog_disable
0061 12 BB 15    call init_lcd_pins_and_force_display_off
0064 12 00 1E    lcall init_timer_hardware
0067 12 BB 2D    call set_baudrate_57600bps
006A 12 BC 68    call watchdog_enable
006D 02 B3 87    jmp  init_ack_irqs
                ;------------------
                irq_handler_subfunction:   ;in: r7=0Bh (flags)
0070 AD 07       mov  r5,r7(0)       ;=0Bh      ;-
0072 90 FE 26    mov  dptr,IO_AV_stat_detect_0  ;\
0075 E0          movx a,[dptr]                  ;
0076 54 02       and  a,02h     ;bit1           ;
0078 C3          clr  c   ;blah                 ;
0079 13          rcr  a   ;blah                 ;
007A 70 03       jnz  a,@@dont_enter_coarse     ;/
007C 02 01 37    jmp  @@enter_coarse_mode       ;---> when bad, goto COARSE mode
                @@dont_enter_coarse:
                ;- - - - - - ARTIFACTS...
007F 90 FE 2A    mov  dptr,IO_AV_stat_signal_detect                          ;\
0082 E0          movx a,[dptr]                                               ;
0083 54 0F       and  a,0Fh                                                  ;
0085 F5 23       mov  [iram_tmp__23h],a  ;copied lsbs of IO_AV_stat_signal_detect ;/
0087 90 FE D0    mov  dptr,IO_AV_stat_detect_2                               ;\
008A E0          movx a,[dptr]                                               ;
008B F5 24       mov  [iram_tmp__24h],a  ;copied byte of IO_AV_stat_detect_2 ;/
                ;- - -
008D 90 00 AA    mov  dptr,xram_old_AV_stat_signal_detect                 ;\
0090 E0          movx a,[dptr]             ;<-- old (initially  FFh)      ;
0091 FF          mov  r7,a            ;<--                                ;
                ;now XOR by copied lsbs of IO_AV_stat_signal_detect       ;
0092 65 23       xor  a,[iram_tmp__23h]    ;<--                           ;
0094 60 08       jz   a,@@artifacts_stable ;--> same (have "stable signal);/
                ;- - -
                ;now APPLY copied lsbs of IO_AV_stat_signal_detect      ;\
0096 E5 23       mov  a,[iram_tmp__23h]                                 ;
0098 F0          movx [dptr],a  ;[xram_old_AV_stat_signal_detect]=a     ;/
0099 E4          clr  a                                                 ;\
009A A3          inc  dptr ;=xram_irq_artifacts_offhold                 ;
009B F0          movx [dptr],a             ;<-- reload offhold          ;/
009C 80 3E       sjmp @@artifacts_done     ;----> and skip artifacts stuff...
                ;---
                @@artifacts_stable:
009E 90 00 AB    mov  dptr,xram_irq_artifacts_offhold   ;\                  ;\
00A1 E0          movx a,[dptr]                          ;                   ;
00A2 C3          clr  c                                 ;                   ;
00A3 94 14       sbc  a,14h                             ;                   ;
00A5 50 35       jnc  @@artifacts_done      ;already 20 ;                   ;
00A7 E0          movx a,[dptr]                          ;                   ;
00A8 04          inc  a                                 ;                   ;
00A9 F0          movx [dptr],a                          ;                   ;
00AA 64 14       xor  a,14h                             ;                   ;
00AC 70 2E       jnz  a,@@artifacts_done    ;notyet 20  ;/                  ;
00AE EF          mov  a,r7        ;<--                  ;\                  ;
00AF 14          dec  a                                 ;                   ;
00B0 60 0F       jz   a,@@artifacts_00h                 ;                   ;
00B2 24 FC       add  a,0FCh                            ;                   ;
00B4 60 19       jz   a,@@artifacts_02h                 ;                   ;
00B6 24 05       add  a,05h                             ;                   ;
00B8 70 22       jnz  a,@@artifacts_done     ;--> uh    ;                   ;
00BA 90 FE CB    mov  dptr,IO_AV_ctrl_artifacts         ;                   ;
00BD 74 06       mov  a,06h                             ;                   ;
00BF 80 04       sjmp @@artifacts_06h                   ;                   ;
                ;---                                    ;                   ;
                @@artifacts_00h:                        ;                   ;
00C1 90 FE CB    mov  dptr,IO_AV_ctrl_artifacts         ;                   ;
00C4 E4          clr  a                                 ;                   ;
                @@artifacts_06h:  ;<-- in: a=06h        ;                   ;
                 ;with dptr=IO_AV_ctrl_artifacts        ;                   ;
00C5 F0          movx [dptr],a    ;=00h, or 06h         ;/                  ;
00C6 90 FE 01    mov  dptr,IO_AV_ctrl_whatever_1        ;\                  ;
00C9 E0          movx a,[dptr]                          ;                   ;
00CA 44 02       or   a,02h     ;set bit1               ;                   ;
00CC F0          movx [dptr],a                          ;/                  ;
00CD 80 0D       sjmp @@artifacts_done                                      ;
                ;---                                                        ;
                @@artifacts_02h:                                            ;
00CF 90 FE 01    mov  dptr,IO_AV_ctrl_whatever_1        ;\                  ;
00D2 E0          movx a,[dptr]                          ;                   ;
00D3 54 FD       and  a,0FDh    ;clr bit1               ;                   ;
00D5 F0          movx [dptr],a                          ;/                  ;
00D6 90 FE CB    mov  dptr,IO_AV_ctrl_artifacts ;\                          ;
00D9 74 02       mov  a,02h                     ;                           ;
00DB F0          movx [dptr],a                  ;/                          ;
                @@artifacts_done:                                           ;/
                ;- - - - - - REALEASE COARSE after offhold...
00DC 90 00 A9    mov  dptr,xram_irq_coarse_offhold                          ;\
00DF E0          movx a,[dptr]                                              ;
00E0 C3          clr  c                                                     ;
00E1 94 FA       sbc  a,0FAh  ;250 decimal                                  ;
00E3 50 0D       jnc  @@coarse_dont_release         ;already 250            ;
00E5 E0          movx a,[dptr]                                              ;
00E6 04          inc  a                             ;raise                  ;
00E7 F0          movx [dptr],a                                              ;
00E8 B4 FA 07    jne  a,0FAh,@@coarse_dont_release  ;notyet 250             ;
00EB 90 FE 54    mov  dptr,IO_AV_ctrl_whatever_2                            ;
00EE E0          movx a,[dptr]                                              ;
00EF 54 BF       and  a,0BFh                     ;<----                     ;
00F1 F0          movx [dptr],a                                              ;
                @@coarse_dont_release:                                      ;/
                ;- - - - - - SHARPNESS...
00F2 90 00 AC    mov  dptr,xram_old_AV_stat_detect_2
00F5 E0          movx a,[dptr]
00F6 65 24       xor  a,[iram_tmp__24h]  ;copied byte of IO_AV_stat_detect_2
00F8 60 08       jz   a,@@sharpness_stable   ;---> same (have "stable" signal)
00FA E5 24       mov  a,[iram_tmp__24h]  ;copied byte of IO_AV_stat_detect_2 ;\apply new
00FC F0          movx [dptr],a    ;[xram_old_AV_stat_detect_2]=a             ;/
00FD E4          clr  a                                 ;\
00FE A3          inc  dptr ;=xram_irq_sharpness_offhold ; reload offhold
00FF F0          movx [dptr],a                          ;/
0100 80 41       sjmp @@sharpness_done
                ;---
                @@sharpness_stable:
0102 90 00 AD    mov  dptr,xram_irq_sharpness_offhold   ;\
0105 E0          movx a,[dptr]                          ;
0106 C3          clr  c                                 ;
0107 94 0A       sbc  a,0Ah                             ; sharpness offhold
0109 50 38       jnc  @@sharpness_done     ;already 0Ah ;
010B E0          movx a,[dptr]                          ;
010C 04          inc  a                    ;raise       ;
010D F0          movx [dptr],a                          ;
010E 64 0A       xor  a,0Ah                             ;
0110 70 31       jnz  a,@@sharpness_done   ;notyet 0Ah  ;/
0112 90 FE D0    mov  dptr,IO_AV_stat_detect_2          ;\
0115 E0          movx a,[dptr]  ;read                   ;
0116 20 E4 0C    jnz  a.4,@@sharpness_clear_bit1        ;
0119 E0          movx a,[dptr]  ;re-read?               ;
011A 20 E2 08    jnz  a.2,@@sharpness_clear_bit1        ;
011D E0          movx a,[dptr]  ;re-read?               ;
011E 20 E5 04    jnz  a.5,@@sharpness_clear_bit1        ;
0121 E0          movx a,[dptr]  ;re-read?               ;
0122 30 E3 09    jz   a.3,@@sharpness_set_bit1 ;--> set ;
                @@sharpness_clear_bit1:                 ;/
0125 90 FF B1    mov  dptr,IO_LCD_sharpness_or_so       ;\
0128 E0          movx a,[dptr]                          ;
0129 54 FD       and  a,0FDh     ;bit1=0                ;
012B F0          movx [dptr],a                          ;/
012C 80 15       sjmp @@sharpness_done
                ;---
                @@sharpness_set_bit1:
012E 90 FF B1    mov  dptr,IO_LCD_sharpness_or_so       ;\
0131 E0          movx a,[dptr]                          ;
0132 44 02       or   a,02h      ;bit1=1                ;
0134 F0          movx [dptr],a                          ;/
0135 80 0C       sjmp @@sharpness_done
                ;--- --- ---
                @@enter_coarse_mode:   ;COARSE (instead of ARTIFACTS/SHARPNESS)
0137 E4          clr  a                                 ;\                  ;\
0138 90 00 A9    mov  dptr,xram_irq_coarse_offhold      ;                   ;
013B F0          movx [dptr],a                          ;/                  ;
013C 90 FE 54    mov  dptr,IO_AV_ctrl_whatever_2        ;\                  ;
013F E0          movx a,[dptr]                          ;                   ;
0140 44 40       or   a,40h                             ;                   ;
0142 F0          movx [dptr],a                          ;/                  ;/
                @@sharpness_done:
                ;- - - - - - SENSITIVITY...
0143 90 FE 26    mov  dptr,IO_AV_stat_detect_0                              ;\
0146 E0          movx a,[dptr]                                              ;
0147 54 02       and  a,02h                                                 ;
0149 C3          clr  c   ;blah                                             ;
014A 13          rcr  a   ;blah                                             ;
014B 70 03       jnz  a,@@sensitivity_do_adjust                             ;
014D 02 01 CF    jmp  @@sensitivity_done  ;skip                             ;
                ;---                                                        ;
                @@sensitivity_do_adjust:                                    ;
0150 90 00 AE    mov  dptr,xram_irq_sensitivity_offhold                     ;
0153 E0          movx a,[dptr]                  ;\                          ;
0154 04          inc  a                         ; detect each 100th time    ;
0155 F0          movx [dptr],a                  ; (or, with 256-step        ;
0156 75 F0 64    mov  b,64h  ;100 decimal       ; wrap, it's actually       ;
0159 84          div  a,b                       ; each 100th,100th,64th)    ;
015A E5 F0       mov  a,b                       ;                           ;
015C 70 71       jnz  a,@@sensitivity_done      ;/                          ;
015E 90 FE AA    mov  dptr,IO_AV_stat_sensitivity_msb          ;\           ;
0161 E0          movx a,[dptr]                                 ;            ;
0162 75 23 00    mov  [iram_tmp__23h],00h ;\blah, overwritten  ; read stat  ;
0165 F5 24       mov  [iram_tmp__24h],a   ;/below              ; sensitivity;
0167 75 24 00    mov  [iram_tmp__24h],00h ;-init 0 (ORed below); (aka signal;
016A F5 23       mov  [iram_tmp__23h],a      ;msb              ; strength   ;
016C A3          inc  dptr ;=IO_AV_stat_sensitivity_lsb        ; or so)     ;
016D E0          movx a,[dptr]                                 ;            ;
016E 42 24       or   [iram_tmp__24h],a      ;lsb              ;/           ;
                ;- - -                                                      ;
0170 ED          mov  a,r5    ;<-- incoming r7=0Bh (flags)  ;\SENSITIVITY   ;
0171 30 E0 26    jz   a.0,@@sensitivity_mode_0              ;/MODE (const)  ;
                ;- - - MODE 1...                                            ;
0174 90 FE 15    mov  dptr,IO_AV_ctrl_sensitivity_0     ;\                  ;
0177 E0          movx a,[dptr]                          ;                   ;
0178 64 05       xor  a,05h                             ;                   ;
017A 70 53       jnz  a,@@sensitivity_done              ;/                  ;
017C 90 FE D5    mov  dptr,IO_AV_ctrl_sensitivity_1     ;\                  ;
017F E0          movx a,[dptr]                          ; check if B5h      ;
0180 64 B5       xor  a,0B5h                            ;                   ;
0182 70 4B       jnz  a,@@sensitivity_done              ;/                  ;
0184 C3          clr  c                                                     ;
0185 E5 24       mov  a,[iram_tmp__24h]  ;lsb   ;\                          ;
0187 94 A0       sbc  a,0A0h                    ; 01A0h (416 decimal)       ;
0189 E5 23       mov  a,[iram_tmp__23h]  ;msb   ;                           ;
018B 94 01       sbc  a,01h                     ;                           ;
018D 50 40       jnc  @@sensitivity_done        ;/                          ;
                  ;TOO SMALL --> change sensitivity?                        ;
                ;with dptr=IO_AV_ctrl_sensitivity_1     ;\                  ;
018F 74 B6       mov  a,0B6h                            ;                   ;
0191 F0          movx [dptr],a                          ;/                  ;
0192 90 FE 15    mov  dptr,IO_AV_ctrl_sensitivity_0     ;\                  ;
0195 74 09       mov  a,09h                             ;                   ;
0197 F0          movx [dptr],a                          ;/                  ;
0198 80 35       sjmp @@sensitivity_done                                    ;
                ;--- MODE 0...                                              ;
                @@sensitivity_mode_0:                                       ;
019A 90 FE 15    mov  dptr,IO_AV_ctrl_sensitivity_0     ;\check if already  ;
019D E0          movx a,[dptr]                          ; ...               ;
019E 70 15       jnz  a,@@sensitivity_is_okay           ;/                  ;
01A0 D3          set  c     ;<--                ;\                          ;
01A1 E5 24       mov  a,[iram_tmp__24h]  ;lsb   ;                           ;
01A3 94 00       sbc  a,00h                     ; 0601h (1537 decimal)      ;
01A5 E5 23       mov  a,[iram_tmp__23h]  ;msb   ;                           ;
01A7 94 06       sbc  a,06h                     ;                           ;
01A9 50 0A       jnc  @@sensitivity_is_okay     ;/                          ;
                   ;TOO SMALL --> change sensitivity?                       ;
                ;with dptr=IO_AV_ctrl_sensitivity_0     ;\                  ;
01AB 74 05       mov  a,05h                             ; CHANGE            ;
01AD F0          movx [dptr],a                          ;/                  ;
01AE 7F C8       mov  r7,0C8h                           ;\                  ;
01B0 7E 00       mov  r6,00h                            ; delay 200 (weird) ;
01B2 12 BB A5    call slow_weird_delay_r6r7             ;/                  ;
                @@sensitivity_is_okay:                                      ;
01B5 90 FE 15    mov  dptr,IO_AV_ctrl_sensitivity_0 ;\                      ;
01B8 E0          movx a,[dptr]                      ; check if 05h          ;
01B9 B4 05 13    jne  a,05h,@@sensitivity_done      ;/                      ;
01BC C3          clr  c                         ;\                          ;
01BD E5 24       mov  a,[iram_tmp__24h]  ;lsb   ;                           ;
01BF 94 FF       sbc  a,0FFh                    ; 0FFFh (4095 decimal)      ;
01C1 E5 23       mov  a,[iram_tmp__23h]  ;msb   ; (max, aka NoSignal)       ;
01C3 94 0F       sbc  a,0Fh                     ;                           ;
01C5 40 08       jc   @@sensitivity_done        ;/                          ;
                   ;NONE AT ALL --> set heavy max sensitivity?              ;
                ;with dptr=IO_AV_ctrl_sensitivity_0     ;\                  ;
01C7 E4          clr  a                                 ; CHANGE            ;
01C8 F0          movx [dptr],a                          ;/                  ;
01C9 7F C8       mov  r7,0C8h                           ;\                  ;
01CB FE          mov  r6,a                              ; delay 200 (weird) ;
01CC 12 BB A5    call slow_weird_delay_r6r7             ;/                  ;
                @@sensitivity_done:                                         ;/
                ;- - - - - - BOLDNESS...
01CF 90 FE 27    mov  dptr,IO_AV_stat_detect_1          ;\  ;<-- used ONLY  ;\
01D2 E0          movx a,[dptr]                          ;        here       ;
01D3 90 FC BD    mov  dptr,IO_50HZ_control_lsb          ;                   ;
01D6 30 E0 11    jz   a.0,@@boldness_this               ;/                  ;
                ;- - -                                                      ;
01D9 E0          movx a,[dptr]   ;[IO_50HZ_control_lsb] ;\                  ;
01DA 44 10       or   a,10h      ;bit4=1                ;                   ;
01DC F0          movx [dptr],a   ;[IO_50HZ_control_lsb] ;/                  ;
01DD 90 FC 92    mov  dptr,IO_60HZ_control_mid          ;\                  ;
01E0 E0          movx a,[dptr]                          ;                   ;
01E1 44 10       or   a,10h      ;bit4=1 ;aka bit12 ??  ;                   ;
01E3 F0          movx [dptr],a                          ;/                  ;
01E4 90 FC B6    mov  dptr,IO_60HZ_boldness_contrast    ;\                  ;
01E7 E4          clr  a          ;num=00h               ;/                  ;
01E8 80 10       sjmp @@boldness_finish                                     ;
                ;---                                                        ;
                @@boldness_this:                                            ;
01EA E0          movx a,[dptr]   ;[IO_50HZ_control_lsb] ;\                  ;
01EB 54 EF       and  a,0EFh     ;bit4=0                ;                   ;
01ED F0          movx [dptr],a   ;[IO_50HZ_control_lsb] ;/                  ;
01EE 90 FC 92    mov  dptr,IO_60HZ_control_mid          ;\                  ;
01F1 E0          movx a,[dptr]                          ;                   ;
01F2 54 EF       and  a,0EFh     ;bit4=0 ;aka bit12 ??  ;                   ;
01F4 F0          movx [dptr],a                          ;/                  ;
01F5 90 FC B6    mov  dptr,IO_60HZ_boldness_contrast    ;\                  ;
01F8 74 02       mov  a,02h      ;num=02h               ;/                  ;
                ;- - -                                                      ;
                @@boldness_finish:                                          ;
                ;with dptr=IO_60HZ_boldness_contrast    ;\                  ;
01FA F0          movx [dptr],a   ;=00h or 02h           ;/                  ;
01FB 90 FC E2    mov  dptr,IO_50HZ_boldness_contrast    ;\                  ;
01FE F0          movx [dptr],a   ;=00h or 02h           ;/                  ;/
01FF 22          ret
                ;------------------
;:------------- ;:----------------- KEYPAD code (analog part)
                ;------------------
                read_analog_input_r7_to_r6r7:  ;in: r7=00h - out: r6r7
                 ;below can use three different analog inputs (r7=0/1/2)
                 ;they seem to work all same (aside from using different bits & ports, eg. bit0/1/2 for input 0/1/2)
                 ;---
0200 74 FF       mov  a,0FFh
0202 90 00 84    mov  dptr,xram_tmp__84h
0205 F0          movx [dptr],a
0206 A3          inc  dptr ;=xram_tmp__85h
0207 F0          movx [dptr],a
0208 EF          mov  a,r7
0209 14          dec  a
020A 60 44       jz   a,@@variant_1       ;(when r7=1)
020C 14          dec  a
020D 60 7B       jz   a,@@variant_2       ;(when r7=2)
020F 24 02       add  a,02h
0211 60 03       jz   a,@@variant_0       ;(when r7=0)
0213 02 02 D0    jmp  @@variant_unknown ;(when r7=3..FFh)
                ;---
                @@variant_0:
0216 43 E9 01    or   [SFR_IO_PORT0_MODE_A],01h ;\analog 0    (keypad)
0219 43 ED 01    or   [SFR_IO_PORT0_MODE_B],01h ;/
021C 90 FD B0    mov  dptr,IO_ADC_ctrl_lsb
021F E0          movx a,[dptr]
0220 54 87       and  a,87h   ;clear bit3-6
0222 44 08       or   a,08h   ;set bit3
0224 F0          movx [dptr],a
0225 A3          inc  dptr ;=IO_ADC_ctrl_msb
0226 E0          movx a,[dptr]
0227 54 0F       and  a,0Fh   ;clear bit12-15
0229 44 20       or   a,20h   ;set bit13
022B F0          movx [dptr],a
                @@wait_lop_0:                           ;\
022C 90 FD B8    mov  dptr,IO_ADC_status_lsb            ;
022F E0          movx a,[dptr]                          ;
0230 30 E2 F9    jz   a.2,@@wait_lop_0                  ;/
0233 90 FD BD    mov  dptr,IO_ADC_input_0_msb     ;analog #0
0236 E0          movx a,[dptr]
0237 FF          mov  r7,a
0238 90 00 84    mov  dptr,xram_tmp__84h
023B E4          clr  a
023C F0          movx [dptr],a
023D A3          inc  dptr ;=xram_tmp__85h
023E EF          mov  a,r7
023F F0          movx [dptr],a
0240 E0          movx a,[dptr]
0241 7F 00       mov  r7,00h
0243 FE          mov  r6,a
0244 90 00 84    mov  dptr,xram_tmp__84h
0247 F0          movx [dptr],a
0248 A3          inc  dptr ;=xram_tmp__85h
0249 EF          mov  a,r7
024A F0          movx [dptr],a
024B 90 FD BC    mov  dptr,IO_ADC_input_0_lsb
024E 80 72       sjmp @@finish
                ;---
                @@variant_1:
0250 43 E9 02    or   [SFR_IO_PORT0_MODE_A],02h ;\analog 1
0253 43 ED 02    or   [SFR_IO_PORT0_MODE_B],02h ;/
0256 90 FD B0    mov  dptr,IO_ADC_ctrl_lsb
0259 E0          movx a,[dptr]
025A 54 87       and  a,87h   ;clear bit3-6
025C 44 10       or   a,10h   ;set bit4
025E F0          movx [dptr],a
025F A3          inc  dptr ;=IO_ADC_ctrl_msb
0260 E0          movx a,[dptr]
0261 54 0F       and  a,0Fh   ;clear bit12-15
0263 44 40       or   a,40h   ;set bit14
0265 F0          movx [dptr],a
                @@wait_lop_1:                           ;\
0266 90 FD B8    mov  dptr,IO_ADC_status_lsb            ;
0269 E0          movx a,[dptr]                          ;
026A 30 E5 F9    jz   a.5,@@wait_lop_1                  ;/
026D 90 FD BF    mov  dptr,IO_ADC_input_1_msb      ;analog #1
0270 E0          movx a,[dptr]
0271 FF          mov  r7,a
0272 90 00 84    mov  dptr,xram_tmp__84h
0275 E4          clr  a
0276 F0          movx [dptr],a
0277 A3          inc  dptr ;=xram_tmp__85h
0278 EF          mov  a,r7
0279 F0          movx [dptr],a
027A E0          movx a,[dptr]
027B 7F 00       mov  r7,00h
027D FE          mov  r6,a
027E 90 00 84    mov  dptr,xram_tmp__84h
0281 F0          movx [dptr],a
0282 A3          inc  dptr ;=xram_tmp__85h
0283 EF          mov  a,r7
0284 F0          movx [dptr],a
0285 90 FD BE    mov  dptr,IO_ADC_input_1_lsb
0288 80 38       sjmp @@finish
                ;---
                @@variant_2:
028A 43 E9 04    or   [SFR_IO_PORT0_MODE_A],04h ;\analog 2
028D 43 ED 04    or   [SFR_IO_PORT0_MODE_B],04h ;/
0290 90 FD B0    mov  dptr,IO_ADC_ctrl_lsb
0293 E0          movx a,[dptr]
0294 54 87       and  a,87h   ;clear bit3-6
0296 44 20       or   a,20h   ;set bit5
0298 F0          movx [dptr],a
0299 A3          inc  dptr ;=IO_ADC_ctrl_msb
029A E0          movx a,[dptr]
029B 54 0F       and  a,0Fh   ;clear bit12-15
029D 44 80       or   a,80h   ;set bit15
029F F0          movx [dptr],a
                @@wait_lop_2:                           ;\
02A0 90 FD B9    mov  dptr,IO_ADC_status_msb            ;
02A3 E0          movx a,[dptr]                          ;
02A4 30 E0 F9    jz   a.0,@@wait_lop_2                  ;/
02A7 90 FD C1    mov  dptr,IO_ADC_input_2_msb
02AA E0          movx a,[dptr]
02AB FF          mov  r7,a                 ;now weird shit...
02AC 90 00 84    mov  dptr,xram_tmp__84h   ;    setting 16bit "0000h+msb"
02AF E4          clr  a                    ;    then
02B0 F0          movx [dptr],a             ;    changing it to "msb*100h" or so?
02B1 A3          inc  dptr ;=xram_tmp__85h
02B2 EF          mov  a,r7
02B3 F0          movx [dptr],a
02B4 E0          movx a,[dptr]
02B5 7F 00       mov  r7,00h
02B7 FE          mov  r6,a
02B8 90 00 84    mov  dptr,xram_tmp__84h
02BB F0          movx [dptr],a
02BC A3          inc  dptr ;=xram_tmp__85h
02BD EF          mov  a,r7
02BE F0          movx [dptr],a
02BF 90 FD C0    mov  dptr,IO_ADC_input_2_lsb
                ;- - - -
                @@finish:
02C2 E0          movx a,[dptr]   ;=IO_ADC_input_#_lsb
02C3 FD          mov  r5,a
02C4 ED          mov  a,r5
02C5 FF          mov  r7,a     ;lsb
02C6 90 00 84    mov  dptr,xram_tmp__84h
02C9 EE          mov  a,r6     ;msb
02CA F0          movx [dptr],a
02CB A3          inc  dptr ;=xram_tmp__85h
02CC EF          mov  a,r7     ;lsb
02CD F0          movx [dptr],a
02CE 80 00       sjmp $+2      ;blah
                ;- - -
                @@variant_unknown:
02D0 90 FD B8    mov  dptr,IO_ADC_status_lsb    ;\
02D3 E4          clr  a                         ;
02D4 F0          movx [dptr],a                  ; status = 0000h
02D5 A3          inc  dptr ;=IO_ADC_status_msb  ;
02D6 F0          movx [dptr],a                  ;/
02D7 90 00 84    mov  dptr,xram_tmp__84h        ;\
02DA E0          movx a,[dptr]                  ;
02DB FE          mov  r6,a      ;msb            ; return r6r7
02DC A3          inc  dptr ;=xram_tmp__85h      ;
02DD E0          movx a,[dptr]                  ;
02DE FF          mov  r7,a      ;lsb            ;/
02DF 22          ret
                ;------------------
                keyboard_read_analog_and_xlat_to_digital:   ;get keyboard
                .if shuffle_version<ver11sep2017
                   @@tmp_byte equ xram_tmp__81h  ;81h
                   @@tmp_word equ xram_tmp__82h  ;82h,83h
                .else
                   @@tmp_byte equ xram_tmp__83h  ;83h
                   @@tmp_word equ xram_tmp__81h  ;81h,82h
                .endif
02E0 E4          clr  a
02E1 90 00 81    mov  dptr,@@tmp_byte                           ;\
02E4 F0          movx [dptr],a                                  ;/
02E5 90 00 C2    mov  dptr,xram_current_keypad_pin              ;\force analog
02E8 E0          movx a,[dptr]                                  ;/channel 0
02E9 90 53 20    mov  dptr,keypad_analog_channel ;<--ptr to 00h ;\
02EC 93          movc a,[a+dptr]   ;00h=analog input 0 (keypad) ; read analog
02ED FF          mov  r7,a                                      ; keypad input
02EE 12 02 00    lcall read_analog_input_r7_to_r6r7             ;/
02F1 EE          mov  a,r6   ;msb           ;\
02F2 C4          swap a                     ;
02F3 F8          mov  r0,a                  ; div 10h
02F4 54 F0       and  a,0F0h ;msb/10h.fract ; hmmm, changes 12bit 0xxxh
02F6 C8          xchg a,r0                  ; to 8bit 00xxh
02F7 68          xor  a,r0   ;msb/10h       ; (but weirdly, still stores
02F8 FE          mov  r6,a   ;new msb       ; it in a 16bit value)
02F9 EF          mov  a,r7   ;lsb           ;
02FA C4          swap a                     ;
02FB 54 0F       and  a,0Fh  ;lsb/10h       ;
02FD 48          or   a,r0   ;msb/10h.fract ;
02FE FF          mov  r7,a   ;new lsb ;lsb  ;/
02FF 90 00 82    mov  dptr,@@tmp_word+0
0302 EE          mov  a,r6
0303 F0          movx [dptr],a
0304 FC          mov  r4,a
0305 A3          inc  dptr ;=@@tmp_word+1
0306 EF          mov  a,r7            ;lsb
0307 F0          movx [dptr],a        ;lsb
0308 FD          mov  r5,a            ;lsb
0309 90 00 C2    mov  dptr,xram_current_keypad_pin
030C E0          movx a,[dptr]
030D 90 53 20    mov  dptr,keypad_analog_channel ;<--ptr to 00h
0310 93          movc a,[a+dptr]
0311 C4          swap a
0312 54 F0       and  a,0F0h
0314 4C          or   a,r4
0315 FE          mov  r6,a            ;msb      ;
0316 ED          mov  a,r5            ;lsb      ;
0317 FF          mov  r7,a            ;lsb      ;/
0318 90 00 82    mov  dptr,@@tmp_word+0         ;\
031B EE          mov  a,r6            ;msb      ;
031C F0          movx [dptr],a                  ; store analog key value
031D A3          inc  dptr ;=@@tmp_word+1       ;
031E EF          mov  a,r7            ;lsb      ;
031F F0          movx [dptr],a                  ;/
0320 90 00 36    mov  dptr,xram_sett_keypadtype
0323 E0          movx a,[dptr]
0324 75 F0 03    mov  b,03h
0327 A4          mul  a,b
0328 24 DB       add  a,typekey_list and 0ffh
032A F5 82       mov  dpl,a
032C E4          clr  a
032D 34 52       adc  a,typekey_list/100h
032F F5 83       mov  dph,a
0331 E4          clr  a
0332 93          movc a,[a+dptr]
0333 FB          mov  r3,a
0334 74 01       mov  a,01h
0336 93          movc a,[a+dptr]
0337 FA          mov  r2,a
0338 74 02       mov  a,02h
033A 93          movc a,[a+dptr]
033B F9          mov  r1,a
033C 90 00 03    mov  dptr,0003h ;idxKeypad_minmax+0 (MIN)              ;\
033F 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr          ;
0342 FD          mov  r5,a                                              ;
0343 C3          clr  c                         ;\                      ;
0344 EF          mov  a,r7 ;lsb (measured)      ;                       ;
0345 9D          sbc  a,r5 ;lsb (measured-min)  ; analog key value      ;
0346 EE          mov  a,r6                      ; refuse "X<MIN"        ;
0347 95 F0       sbc  a,b                       ;                       ;
0349 40 5E       jc   @@no_key                  ;/                      ;/
                ;- - -
034B 90 00 05    mov  dptr,0005h ;idxKeypad_minmax+2 (MAX)              ;\
034E 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr          ;
0351 FF          mov  r7,a                                              ;
0352 D3          set  c          ;<--             ;\                    ;
0353 90 00 83    mov  dptr,@@tmp_word+1           ;                     ;
0356 E0          movx a,[dptr] ;lsb (measured)    ;                     ;
0357 9F          sbc  a,r7 ;lsb (measured-(max+1)); analog key value    ;
0358 90 00 82    mov  dptr,@@tmp_word+0           ; refuse if X>=(MAX+1);
035B E0          movx a,[dptr]                    ;       aka X>MAX     ;
035C 95 F0       sbc  a,b                         ;                     ;
035E 50 49       jnc  @@no_key                    ;/                    ;/
                ;- - -
0360 90 00 36    mov  dptr,xram_sett_keypadtype
0363 E0          movx a,[dptr]
0364 FF          mov  r7,a
0365 90 00 07    mov  dptr,0007h ;idxKeypad_keys (KEYS)
0368 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
036B C0 03       push r3(0)   ;\
036D C0 02       push r2(0)   ; keys
036F C0 01       push r1(0)   ;/
0371 EF          mov  a,r7
0372 75 F0 03    mov  b,03h
0375 A4          mul  a,b
0376 24 DB       add  a,typekey_list and 0ffh
0378 F5 82       mov  dpl,a
037A E4          clr  a
037B 34 52       adc  a,typekey_list/100h
037D F5 83       mov  dph,a
037F E4          clr  a
0380 93          movc a,[a+dptr]
0381 FB          mov  r3,a
0382 74 01       mov  a,01h
0384 93          movc a,[a+dptr]
0385 FA          mov  r2,a
0386 74 02       mov  a,02h
0388 93          movc a,[a+dptr]
0389 F9          mov  r1,a
038A 90 00 0A    mov  dptr,000Ah ;idxKeypad_numkeys (NUMKEYS)
038D 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
0390 FD          mov  r5,a    ;numkeys
0391 90 00 82    mov  dptr,@@tmp_word+0         ;\
0394 E0          movx a,[dptr]                  ;
0395 F5 31       mov  [iram_tmp__31h],a         ; analog key value
0397 A3          inc  dptr ;=@@tmp_word+1       ;
0398 E0          movx a,[dptr]                  ;
0399 F5 32       mov  [iram_tmp__32h],a         ;/
039B D0 01       pop  r1(0)   ;\                ;\
039D D0 02       pop  r2(0)   ; keys            ; convert analog to
039F D0 03       pop  r3(0)   ;/                ; digital key number
03A1 12 06 FC    call search_analog_key_in_list ;/
03A4 90 00 81    mov  dptr,@@tmp_byte
03A7 EF          mov  a,r7        ;keynumber (2,3,4 for 3KEY) (0=none)
03A8 F0          movx [dptr],a    ;keynumber (2,3,4 for 3KEY) (0=none)
                ;- - -
                @@no_key:
03A9 90 00 81    mov  dptr,@@tmp_byte
03AC E0          movx a,[dptr]    ;keynumber (2,3,4 for 3KEY) (0=none)
03AD FF          mov  r7,a        ;keynumber (2,3,4 for 3KEY) (0=none)
03AE 70 0E       jnz  a,@@exit
                ;- - -
03B0 90 00 C2    mov  dptr,xram_current_keypad_pin              ;\
03B3 E0          movx a,[dptr] ;\                               ; raise keypad
03B4 04          inc  a        ; raise                          ; pin for next
03B5 F0          movx [dptr],a ;/                               ; read
03B6 E0          movx a,[dptr]                                  ; (blah, there
03B7 C3          clr  c        ;\don't wrap if below 01h        ; is only one
03B8 94 01       sbc  a,01h    ; (blah, can't happen)           ; pin)
03BA 40 02       jc   @@exit   ;/                               ;
03BC E4          clr  a        ;=00h (wrap to 00h)              ;
03BD F0          movx [dptr],a                                  ;/
                @@exit:
03BE 22          ret      ;out: r7=keynumber (2,3,4 for 3KEY) (0=none)
                ;------------------
;:------------- ;:----------------- TIMER 1
                ;------------------
                timer_1_overflow:
03BF C0 E0       push a
03C1 C0 F0       push b
03C3 C0 83       push dph
03C5 C0 82       push dpl
03C7 C0 D0       push psw
03C9 75 D0 00    mov  psw,00h
03CC C0 00       push r0(0)
03CE C0 01       push r1(0)
03D0 C0 02       push r2(0)
03D2 C0 03       push r3(0)
03D4 C0 04       push r4(0)
03D6 C0 05       push r5(0)
03D8 C0 06       push r6(0)
03DA C0 07       push r7(0)
03DC C2 8E       clr  tr1         ;XXXsfr                                       ;\
03DE 75 8D D8    mov  [SFR_IO_timer1_msb],0D8h  ;\D8EFh aka -2711h (-10001)     ; reload
03E1 75 8B EF    mov  [SFR_IO_timer1_lsb],0EFh  ;/                              ; Timer1 (27MHz/12/10000 = 225Hz = ca. 4.444ms rate)
03E4 D2 8E       set  tr1         ;XXXsfr                                       ;/
03E6 05 1B       inc  [iram_timer1_irq_counter]         ;-counter up
03E8 7F 0B       mov  r7,0Bh    ;flags                  ;\
03EA 12 00 70    lcall irq_handler_subfunction  ;--->   ;/
03ED 90 FC EA    mov  dptr,IO_VIDEO_something_5         ;\
03F0 E4          clr  a                                 ;
03F1 F0          movx [dptr],a                          ;/
                ;- - - - - - -
03F2 E5 1B       mov  a,[iram_timer1_irq_counter]               ;\
03F4 20 E0 04    jnz  a.0,@@not_2nd                             ;
03F7 D2 01       set  [iram_req_event_flags].1  ;RQ_keyboard    ; each 2'nd
03F9 D2 04       set  [iram_req_event_flags].4  ;RQ_source_menu ;
                @@not_2nd:                                      ;/
03FB E5 1B       mov  a,[iram_timer1_irq_counter]                  ;\
03FD 54 03       and  a,03h                                        ;
03FF 70 04       jnz  a,@@not_4th                                  ; each 4'th
0401 D2 02       set  [iram_req_event_flags].2  ;RQ_detected_video ;   ;<-- used TWICE
0403 D2 05       set  [iram_req_event_flags].5  ;RQ_blah_dummy     ;
                @@not_4th:                                         ;/
0405 E5 1B       mov  a,[iram_timer1_irq_counter]                  ;\
0407 75 F0 06    mov  b,06h                                        ;
040A 84          div  a,b                                          ; each 6'th
040B E5 F0       mov  a,b                                          ;
040D 70 02       jnz  a,@@not_6th                                  ;
040F D2 06       set  [iram_req_event_flags].6  ;RQ_signal_or_save ;
                @@not_6th:                                         ;/
0411 E5 1B       mov  a,[iram_timer1_irq_counter]               ;\
0413 75 F0 14    mov  b,14h                                     ;
0416 84          div  a,b                                       ; each 20'th
0417 E5 F0       mov  a,b                                       ;
0419 70 02       jnz  a,@@not_20th                              ;
041B D2 00       set  [iram_req_event_flags].0  ;RQ_            ;
                @@not_20th:                                     ;/
041D E5 1B       mov  a,[iram_timer1_irq_counter]       ;\
041F 54 3F       and  a,3Fh                             ;
0421 70 02       jnz  a,@@not_64th                      ; restart each 64'th
0423 F5 1B       mov  [iram_timer1_irq_counter],a ;=00h ;
                @@not_64th:                             ;/
                ;- - - - - - -
0425 30 02 50    jz   [iram_req_event_flags].2,@@done ;RQ_detected_video ;---> (only each 4'th)
                ;- - - - - - -
0428 90 FE 26    mov  dptr,IO_AV_stat_detect_0          ;\
042B E0          movx a,[dptr]                          ;
042C 54 06       and  a,06h                             ;
042E 64 06       xor  a,06h                             ;
0430 60 07       jz   a,@@signal_present                ; want VALID signal?
0432 90 00 BD    mov  dptr,xram_new_detected_video      ;
0435 E0          movx a,[dptr]                          ;
0436 F4          cpl  a         ;check if FFh=none?     ;
0437 70 3A       jnz  a,@@different    ;---> ;diff      ;
                @@signal_present:                       ;/
0439 90 FE 28    mov  dptr,IO_AV_stat_framerate_flag    ;\
043C E0          movx a,[dptr]                          ;
043D 54 04       and  a,04h  ;bit2 (0=NTSC/60, 1=PAL/50);
043F F5 22       mov  [iram_tmp_AV_framerate],a ;new    ; want SAME signal?
0441 65 1A       xor  a,[iram_old_AV_framerate] ;old    ;
0443 60 05       jz   a,@@signal_same        ;same      ;
0445 85 22 1A    mov  [iram_old_AV_framerate],[iram_tmp_AV_framerate]  ;<-- old=new
0448 80 29       sjmp @@different      ;---> ;diff      ;
                ;---                                    ;
                @@signal_same:                          ;/
044A 90 00 39    mov  dptr,xram_palntsc_same_counter    ;\
044D E0          movx a,[dptr]        ;num.same         ;
044E C3          clr  c                                 ;
044F 94 14       sbc  a,14h                             ; want 20xSAME
0451 50 25       jnc  @@done                   ;already ;
0453 E0          movx a,[dptr]                          ;
0454 04          inc  a    ;[xram_palntsc_same_counter] ;
0455 F0          movx [dptr],a                          ;
0456 B4 14 1F    jne  a,14h,@@done             ;notyet  ;/
                ;- - -               ;NTSC/PAL ;now!
0459 E5 22       mov  a,[iram_tmp_AV_framerate] ;00h/04h;\
045B 24 FC       add  a,0FCh                    ;FCh/00h;
045D 60 09       jz   a,@@apply_zero                    ;
045F 24 04       add  a,04h                     ;00h/---;
0461 70 05       jnz  a,@@apply_zero                    ; apply DETECTED VIDEO
0463 75 22 03    mov  [iram_tmp_AV_framerate],3 ;03h/---; (xlat 00h/04h
0466 80 03       sjmp @@apply_this                      ; to 03h/00h)
                ;---                                    ;
                @@apply_zero:                           ;
0468 75 22 00    mov  [iram_tmp_AV_framerate],0 ;---/00h;
                @@apply_this:                           ;
046B 90 00 BD    mov  dptr,xram_new_detected_video   ;\ ;
046E E5 22       mov  a,[iram_tmp_AV_framerate]      ;  ;  <--00h or 03h here
0470 F0          movx [dptr],a       ;<-- apply      ;/ ;/
0471 80 05       sjmp @@done
                ;---
                @@different:
0473 90 00 39    mov  dptr,xram_palntsc_same_counter    ;\
0476 E4          clr  a                                 ; reset SAME counter
0477 F0          movx [dptr],a                          ;/
                ;- - - - - - -
                @@done:
0478 D0 07       pop  r7(0)
047A D0 06       pop  r6(0)
047C D0 05       pop  r5(0)
047E D0 04       pop  r4(0)
0480 D0 03       pop  r3(0)
0482 D0 02       pop  r2(0)
0484 D0 01       pop  r1(0)
0486 D0 00       pop  r0(0)
0488 D0 D0       pop  psw
048A D0 82       pop  dpl
048C D0 83       pop  dph
048E D0 F0       pop  b
0490 D0 E0       pop  a
0492 32          reti
                ;------------------
;:------------- ;:----------------- LCD code (screen on/off)
                ;------------------
                switch_lcd_screen_on_or_off:     ;out: cy
0493 90 00 0C    mov  dptr,xram_sett_input
0496 E0          movx a,[dptr]
0497 64 02       xor  a,02h
0499 70 23       jnz  a,@@not_AV3
                ;- - -
049B 90 FE D7    mov  dptr,IO_AV_video_on_off                   ;\
049E E0          movx a,[dptr]                                  ; temp clear
049F 54 E7       and  a,0E7h    ;bit3,4=clear                   ;
04A1 F0          movx [dptr],a                                  ;/
04A2 A3          inc  dptr ;=IO_AV_input_select_reg_0           ;\
04A3 E0          movx a,[dptr]                                  ;
                .if av_select_version<ver11sep2017              ;
04A4 54 3F         and  a,3Fh     ;bit6,7=clear                 ; select AV3
                .else                                           ;
                   or   a,80h     ;bit7=set                     ;
                   movx [dptr],a                                ;
                   movx a,[dptr]                                ;
                   and  a,0BFh    ;bit6=clear                   ;
                .endif                                          ;
04A6 F0          movx [dptr],a                                  ;/
04A7 90 FE D7    mov  dptr,IO_AV_video_on_off                   ;\
04AA E0          movx a,[dptr]                                  ; back set
04AB 44 18       or   a,18h     ;bit3,4=set                     ;
04AD F0          movx [dptr],a                                  ;/
04AE 7F 0A       mov  r7,0Ah                                    ;\
04B0 7E 00       mov  r6,00h                                    ; delay 10
04B2 12 BB 5D    call slow_delay_r6r7                           ;/
04B5 90 FE 2A    mov  dptr,IO_AV_stat_signal_detect             ;\
04B8 E0          movx a,[dptr]                                  ; check if OFF
04B9 30 E6 52    jz   a.6,@@off         ;test CVBS3             ;/
04BC D3          set  c
04BD 22          ret
                ;--- --- ---
                @@not_AV3:
04BE 90 FD 13    mov  dptr,IO_PLL_13h_used    ;??               ;\
04C1 E0          movx a,[dptr]                                  ;
04C2 70 03       jnz  a,@@clear_cy      ;\                      ;
04C4 D3          set  c  ;currently off ;                       ; check if
04C5 80 01       sjmp @@this_cy         ;                       ; currently
                ;---                    ;                       ; on/off
                @@clear_cy:             ;                       ;
04C7 C3          clr  c  ;currently on  ;                       ;
                @@this_cy:              ;/                      ;
04C8 40 0C       jc   @@currently_off                           ;/
                ;@@currently_on:
04CA 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
04CD E0          movx a,[dptr]                                  ;
04CE 54 06       and  a,06h                                     ; check if OFF
04D0 64 06       xor  a,06h                                     ;
04D2 70 3A       jnz  a,@@off                                   ;/
04D4 D3          set  c
04D5 22          ret
                ;---
                @@currently_off:
04D6 7F 02       mov  r7,02h   ;FIXED (instead [xram_sett_input])
04D8 12 9C D6    call apply_av_input_r7
04DB 7F 0A       mov  r7,0Ah                                    ;\
04DD 7E 00       mov  r6,00h                                    ; delay 10
04DF 12 BB 5D    call slow_delay_r6r7                           ;/
04E2 90 FE 2A    mov  dptr,IO_AV_stat_signal_detect             ;\
04E5 E0          movx a,[dptr]                                  ; check if OFF
04E6 30 E6 25    jz   a.6,@@off         ;test CVBS3             ;/
04E9 90 00 09    mov  dptr,xram_sett_curr_power                 ;\
04EC E0          movx a,[dptr]                                  ;
04ED B4 01 1C    jne  a,01h,@@stay_off                          ;/
04F0 90 00 0C    mov  dptr,xram_sett_input                      ;\
04F3 E0          movx a,[dptr]                                  ; apply input
04F4 FF          mov  r7,a                                      ;
04F5 12 9C D6    call apply_av_input_r7                         ;/
04F8 7F C8       mov  r7,0C8h                                   ;\
04FA 7E 00       mov  r6,00h                                    ; delay 200
04FC 12 BB 5D    call slow_delay_r6r7                           ;/
04FF 90 00 2C    mov  dptr,xram_sett_no_signal                  ;\
0502 E0          movx a,[dptr]                                  ;
0503 B4 02 06    jne  a,02h,@@not_2_black_cy1                   ; when BLACK,
0506 12 BF 26    call osd_disable_all_windows_and_whatever      ; switch ON
0509 12 A0 F5    call switch_screen_and_backlight_on            ;
                @@not_2_black_cy1:                              ;/
                @@stay_off:
050C D3          set  c
050D 22          ret
                ;--- ---
                @@off:
050E 90 00 2C    mov  dptr,xram_sett_no_signal                  ;\
0511 E0          movx a,[dptr]                                  ; when BLACK,
0512 B4 02 03    jne  a,02h,@@not_2_black_cy0                   ; switch OFF
0515 12 AF 27    call switch_screen_and_backlight_off           ;
                @@not_2_black_cy0:                              ;/
0518 C3          clr  c
0519 22          ret
                ;------------------
;:------------- ;:----------------- KEYPAD code
                ;------------------
                xxx_051Ah:    ;key_phase_02h
                 ;in: [iram_tmp__2Dh] = ...area ;\ptr to button
                 ;in: [iram_tmp__2Eh] = ...msb  ; 01h:xram_keybuf_2byte_A or 01h:xram_keybuf_2byte_B or 01h:007Fh
                 ;in: [iram_tmp__2Fh] = ...lsb  ;/
                 ;in: r3    = ...area ;\
                 ;in: r2    = ...msb  ; 01h:xram_keybuf_7byte_A or 01h:xram_keybuf_7byte_B
                 ;in: r1    = ...lsb  ;/
                 ;- - -
051A 8B 2A       mov  [iram_tmp__2Ah],r3
051C 8A 2B       mov  [iram_tmp__2Bh],r2
051E 89 2C       mov  [iram_tmp__2Ch],r1
0520 C2 08       clr  [iram_misc_flags].miscflg_0
0522 E9          mov  a,r1
0523 4A          or   a,r2
0524 4B          or   a,r3
0525 70 0A       jnz  a,@@have_nonzero_param
0527 E5 2F       mov  a,[iram_tmp__2Fh]  ;msg.addr.lsb
0529 45 2E       or   a,[iram_tmp__2Eh]  ;msg.addr.msb
052B 45 2D       or   a,[iram_tmp__2Dh]  ;msg.addr.area
052D 70 02       jnz  a,@@have_nonzero_param
052F C3          clr  c
0530 22          ret
                ;---
                @@have_nonzero_param:
0531 AB 2A       mov  r3,[iram_tmp__2Ah]
0533 AA 2B       mov  r2,[iram_tmp__2Bh]
0535 A9 2C       mov  r1,[iram_tmp__2Ch]
0537 90 00 06    mov  dptr,0006h ;idx...
053A 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
053D FF          mov  r7,a
053E 90 00 03    mov  dptr,0003h ;idx...
0541 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
0544 6F          xor  a,r7
0545 60 56       jz   a,@@_059Dh
0547 90 00 05    mov  dptr,0005h ;idx...
054A 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
054D 75 F0 02    mov  b,02h
0550 A4          mul  a,b
0551 FF          mov  r7,a
0552 AE F0       mov  r6,b
0554 12 4C EC    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1
0557 E9          mov  a,r1
0558 2F          add  a,r7
0559 F9          mov  r1,a
055A EA          mov  a,r2
055B 3E          adc  a,r6
055C A8 01       mov  r0,r1(0)   ;dst.lsb
055E FC          mov  r4,a       ;dst.msb
055F AD 03       mov  r5,r3(0)   ;dst.area
0561 AB 2D       mov  r3,[iram_tmp__2Dh]  ;msg.addr.area
0563 AA 2E       mov  r2,[iram_tmp__2Eh]  ;msg.addr.msb
0565 A9 2F       mov  r1,[iram_tmp__2Fh]  ;msg.addr.lsb
0567 7E 00       mov  r6,00h  ;\len 2
0569 7F 02       mov  r7,02h  ;/
056B 12 49 C1    call anymem_generic_memcopy
056E AB 2A       mov  r3,[iram_tmp__2Ah]
0570 AA 2B       mov  r2,[iram_tmp__2Bh]
0572 A9 2C       mov  r1,[iram_tmp__2Ch]
0574 90 00 06    mov  dptr,0006h ;idx...
0577 74 01       mov  a,01h
0579 12 4A 2D    call anymem_add_8bit_a_to_mem_r3r2r1dptr
057C 90 00 03    mov  dptr,0003h ;idx...
057F 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
0582 FF          mov  r7,a
0583 90 00 05    mov  dptr,0005h ;idx...
0586 74 01       mov  a,01h
0588 12 4A 2D    call anymem_add_8bit_a_to_mem_r3r2r1dptr
058B B5 07 0D    jne  a,r7(0),@@_059Bh
058E AB 2A       mov  r3,[iram_tmp__2Ah]
0590 AA 2B       mov  r2,[iram_tmp__2Bh]
0592 A9 2C       mov  r1,[iram_tmp__2Ch]
0594 90 00 05    mov  dptr,0005h ;idx...
0597 E4          clr  a
0598 12 4A 72    call anymem_store_8bit_a_to_mem_r3r2r1dptr
                @@_059Bh:
059B D2 08       set  [iram_misc_flags].miscflg_0
                @@_059Dh:
059D A2 08       mov  c,[iram_misc_flags].miscflg_0
059F 22          ret
                ;------------------
                xxx_05A0h:    ;similar to above function (keyboard stuff)
                   ;key_phase_03h
05A0 8B 2D       mov  [iram_tmp__2Dh],r3
05A2 8A 2E       mov  [iram_tmp__2Eh],r2
05A4 89 2F       mov  [iram_tmp__2Fh],r1
05A6 C2 09       clr  [iram_misc_flags].miscflg_1
05A8 E9          mov  a,r1
05A9 4A          or   a,r2
05AA 4B          or   a,r3
05AB 70 0A       jnz  a,@@have_nonzero_param
05AD E5 32       mov  a,[iram_tmp__32h]
05AF 45 31       or   a,[iram_tmp__31h]
05B1 45 30       or   a,[iram_tmp__30h]
05B3 70 02       jnz  a,@@have_nonzero_param
05B5 C3          clr  c
05B6 22          ret
                ;---
                @@have_nonzero_param:
05B7 AB 2D       mov  r3,[iram_tmp__2Dh]
05B9 AA 2E       mov  r2,[iram_tmp__2Eh]
05BB A9 2F       mov  r1,[iram_tmp__2Fh]
05BD 90 00 06    mov  dptr,0006h ;idx...
05C0 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
05C3 60 52       jz   a,@@_0617h
05C5 90 00 04    mov  dptr,0004h ;idx...
05C8 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
05CB 75 F0 02    mov  b,02h
05CE A4          mul  a,b
05CF FF          mov  r7,a
05D0 AE F0       mov  r6,b
05D2 12 4C EC    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1
05D5 E9          mov  a,r1
05D6 2F          add  a,r7
05D7 F9          mov  r1,a      ;msg.addr.lsb ;msg_addr and 0ffh
05D8 EA          mov  a,r2
05D9 3E          adc  a,r6
05DA FA          mov  r2,a      ;msg.addr.msb ;msg_addr/100h
05DB A8 32       mov  r0,[iram_tmp__32h]  ;dst.lsb
05DD AC 31       mov  r4,[iram_tmp__31h]  ;dst.msb
05DF AD 30       mov  r5,[iram_tmp__30h]  ;dst.area
05E1 7E 00       mov  r6,00h  ;\len 2
05E3 7F 02       mov  r7,02h  ;/
05E5 12 49 C1    call anymem_generic_memcopy
05E8 AB 2D       mov  r3,[iram_tmp__2Dh]
05EA AA 2E       mov  r2,[iram_tmp__2Eh]
05EC A9 2F       mov  r1,[iram_tmp__2Fh]
05EE 90 00 06    mov  dptr,0006h ;idx...
05F1 74 FF       mov  a,0FFh
05F3 12 4A 2D    call anymem_add_8bit_a_to_mem_r3r2r1dptr
05F6 90 00 03    mov  dptr,0003h ;idx...
05F9 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
05FC FF          mov  r7,a
05FD 90 00 04    mov  dptr,0004h ;idx...
0600 74 01       mov  a,01h
0602 12 4A 2D    call anymem_add_8bit_a_to_mem_r3r2r1dptr
0605 B5 07 0D    jne  a,r7(0),@@_0615h
0608 AB 2D       mov  r3,[iram_tmp__2Dh]
060A AA 2E       mov  r2,[iram_tmp__2Eh]
060C A9 2F       mov  r1,[iram_tmp__2Fh]
060E 90 00 04    mov  dptr,0004h ;idx...
0611 E4          clr  a
0612 12 4A 72    call anymem_store_8bit_a_to_mem_r3r2r1dptr
                @@_0615h:
0615 D2 09       set  [iram_misc_flags].miscflg_1
                @@_0617h:
0617 A2 09       mov  c,[iram_misc_flags].miscflg_1
0619 22          ret
                ;------------------
;:------------- ;:----------------- AV code (check if signal)
                ;------------------
                check_if_signal:        ;out: cy
061A 90 00 0C    mov  dptr,xram_sett_input              ;\
061D E0          movx a,[dptr]                          ;
061E 64 02       xor  a,02h                             ;
0620 70 40       jnz  a,@@_0662h                        ;/
                ;- - -
0622 90 FD 13    mov  dptr,IO_PLL_13h_used              ;\
0625 E0          movx a,[dptr]                          ;
0626 70 03       jnz  a,@@clear_cy      ;\              ;
0628 D3          set  c  ;currently off ;               ;
0629 80 01       sjmp @@this_cy         ;               ;
                ;---                    ;               ;
                @@clear_cy:             ;               ;
062B C3          clr  c  ;currently on  ;               ;
                @@this_cy:              ;/              ;
062C 40 0C       jc   @@currently_off                   ;/ ;--->
                ;@@currently_on:
062E 90 FE 26    mov  dptr,IO_AV_stat_detect_0          ;\
0631 E0          movx a,[dptr]                          ;
0632 54 06       and  a,06h                             ;
0634 64 06       xor  a,06h                             ;
0636 70 50       jnz  a,@@return_cy_cleared    ;------> ;/
0638 D3          set  c                 ;cy=1 (have signal?)
0639 22          ret
                ;---
                @@currently_off:
063A E4          clr  a    ;FIXED                       ;\
063B FF          mov  r7,a ;(instead [xram_sett_input]) ;
063C 12 9C D6    call apply_av_input_r7                 ;/
063F 7F 0A       mov  r7,0Ah                            ;\
0641 7E 00       mov  r6,00h                            ; delay 10
0643 12 BB 5D    call slow_delay_r6r7                   ;/
0646 90 FE 2A    mov  dptr,IO_AV_stat_signal_detect     ;\
0649 E0          movx a,[dptr]        ;test CVBS3       ;
064A 30 E6 3B    jz   a.6,@@return_cy_cleared  ;------> ;/
064D 7F 1E       mov  r7,1Eh                            ;\
064F 7E 00       mov  r6,00h                            ; delay 30
0651 12 BB 5D    call slow_delay_r6r7                   ;/
0654 90 FE 2A    mov  dptr,IO_AV_stat_signal_detect     ;\
0657 E0          movx a,[dptr]        ;test CVBS3       ;
0658 30 E6 2D    jz   a.6,@@return_cy_cleared  ;------> ;/
065B 7F 02       mov  r7,02h   ;FIXED (instead [xram_sett_input])
065D 12 9C D6    call apply_av_input_r7
0660 D3          set  c                 ;cy=1 (have signal?)
0661 22          ret
                ;--- ---
                @@_0662h:
0662 90 00 0C    mov  dptr,xram_sett_input              ;\
0665 E0          movx a,[dptr]                          ;
0666 FF          mov  r7,a                              ;
0667 12 9C D6    call apply_av_input_r7                 ;/
066A 7F 0A       mov  r7,0Ah                            ;\
066C 7E 00       mov  r6,00h                            ; delay 10
066E 12 BB 5D    call slow_delay_r6r7                   ;/
0671 90 FE 2A    mov  dptr,IO_AV_stat_signal_detect     ;\
0674 E0          movx a,[dptr]        ;test CVBS3       ;
0675 30 E6 10    jz   a.6,@@return_cy_cleared  ;------> ;/
0678 7F 1E       mov  r7,1Eh                            ;\
067A 7E 00       mov  r6,00h                            ; delay 30
067C 12 BB 5D    call slow_delay_r6r7                   ;/
067F 90 FE 2A    mov  dptr,IO_AV_stat_signal_detect     ;\
0682 E0          movx a,[dptr]        ;test CVBS3       ;
0683 30 E6 02    jz   a.6,@@return_cy_cleared  ;------> ;/
0686 D3          set  c                 ;cy=1 (have signal?)
0687 22          ret
                ;---
                @@return_cy_cleared:
0688 C3          clr  c                 ;cy=0 (no signal?)
0689 22          ret
                ;------------------
;:------------- ;:----------------- KEYPAD code ()
                ;------------------
                xxx_068Ah:       ;... get key.number XLATed to key.code
                 ;in: [iram_tmp__28h] = ?
                 ;in: ...
                 ;- - -
068A E4          clr  a
068B F5 26       mov  [iram_tmp__26h],a
068D 78 27       mov  r0,iram_tmp__27h and 0ffh     ;\
068F 7C 00       mov  r4,iram_tmp__27h/100h         ; dst --> [iram_tmp__27h],[iram_tmp__28h]
0691 FD          mov  r5,a             ;area=0      ;/
0692 7B FF       mov  r3,0FFh                   ;\
0694 7A BA       mov  r2,xxx_BAC8h/100h         ;
0696 79 C8       mov  r1,xxx_BAC8h and 0ffh     ;/
0698 FE          mov  r6,a    ;\len 2
0699 7F 02       mov  r7,02h  ;/
069B 12 49 C1    call anymem_generic_memcopy
069E E4          clr  a
069F F5 29       mov  [iram_tmp__29h],a
06A1 12 BF A8    call do_level2key_and_level3key_stuff      ;----------->
06A4 7B 00       mov  r3,00h          ;area     ;\
06A6 7A 00       mov  r2,iram_tmp__27h/100h     ;
06A8 79 27       mov  r1,iram_tmp__27h and 0ffh ;/
06AA 12 BA CA    call xxx_BACAh      ;----------->
06AD E5 27       mov  a,[iram_tmp__27h]
06AF 60 04       jz   a,@@_06B5h
06B1 F5 26       mov  [iram_tmp__26h],a
06B3 80 00       sjmp @@_06B5h    ;blah
                ;---
                @@_06B5h:
06B5 90 00 45    mov  dptr,xram_keypad_whatever         ;\
06B8 E5 28       mov  a,[iram_tmp__28h]                 ;
06BA F0          movx [dptr],a                          ;/
06BB E5 26       mov  a,[iram_tmp__26h]
06BD 60 3A       jz   a,@@_06F9h
06BF 90 00 44    mov  dptr,xram_keypad_was_read         ;\
06C2 74 01       mov  a,01h                             ;
06C4 F0          movx [dptr],a                          ;/
06C5 AF 26       mov  r7,[iram_tmp__26h]                        ;\
06C7 12 07 FB    call keyboard_xlat_digital_to_digital          ; xlat key
06CA 8F 29       mov  [iram_tmp__29h],r7                        ;/
06CC 90 00 09    mov  dptr,xram_sett_curr_power         ;\
06CF E0          movx a,[dptr]                          ;
06D0 B4 01 26    jne  a,01h,@@_06F9h                    ;/
06D3 90 00 46    mov  dptr,xram_keypad_flags_msb        ;\
06D6 E0          movx a,[dptr]                          ;
06D7 C4          swap a         ;bit8-11 to bit4-7      ;
06D8 F8          mov  r0,a                              ; bizarre way to
06D9 54 F0       and  a,0F0h    ;bit8-11 in bit4-7      ; test bit4
06DB C8          xchg a,r0                              ;
06DC A3          inc  dptr ;=xram_keypad_flags_lsb      ;
06DD E0          movx a,[dptr]                          ;
06DE C4          swap a         ;bit4-7 to bit0-3       ;
06DF 54 0F       and  a,0Fh     ;bit4-7 in bit0-3       ;
06E1 48          or   a,r0      ;bit8-11 in bit4-7      ;
06E2 20 E0 14    jnz  a.0,@@_06F9h       ;aka bit4      ;/
06E5 90 00 45    mov  dptr,xram_keypad_whatever                 ;\
06E8 E0          movx a,[dptr]                                  ;
                .if tech_version<ver11sep2017                   ;
06E9 FF            mov  r7,a                                    ;
06EA 64 01         xor  a,01h                                   ;
06EC 60 04         jz   a,@@_06F2h                              ;
06EE EF            mov  a,r7                                    ;
06EF B4 10 07      jne  a,10h,@@_06F9h                          ;
                  @@_06F2h:                                     ;
06F2 AF 29         mov  r7,[iram_tmp__29h]  ;restore r7=key.code;
                .else                                           ;
06ED B4 01 05      jne  a,01h,@@_06F9h                          ;
                .endif                                          ;/
06F4 12 A3 CF    call check_secret_key_combo_MenuDUUDD  ;in/out: r7=key.code
06F7 8F 29       mov  [iram_tmp__29h],r7    ;key.code (unchanged, or 1Fh=secret.key.combo)
                @@_06F9h:
06F9 AF 29       mov  r7,[iram_tmp__29h]    ;key.code (07h,08h,09h for 3KEY) or (1F=secret)
06FB 22          ret
                ;------------------
                search_analog_key_in_list:
                 ;in: r3r2r1    = keys (eg. "typekey_16h_subinfo")
                 ;in: r5        = numkeys
                 ;in: [iram_tmp__31h:32h] = analog key value
                 ;- - -
06FC 8B 2D       mov  [iram_tmp__2Dh],r3  ;keys.area
06FE 8A 2E       mov  [iram_tmp__2Eh],r2  ;keys.msb
0700 89 2F       mov  [iram_tmp__2Fh],r1  ;keys.lsb
0702 8D 30       mov  [iram_tmp__30h],r5  ;numkeys
0704 E4          clr  a
0705 F5 34       mov  [iram_tmp__34h],a   ;key=0 (none yet)
0707 F5 33       mov  [iram_tmp__33h],a   ;index=0
                @@lop:
0709 E5 33       mov  a,[iram_tmp__33h]   ;index        ;\      ;\
070B C3          clr  c                                 ;       ;
070C 95 30       sbc  a,[iram_tmp__30h]   ;numkeys      ;       ;
070E 50 4A       jnc  @@not_found                       ;/      ;
0710 AB 2D       mov  r3,[iram_tmp__2Dh]                        ;
0712 AA 2E       mov  r2,[iram_tmp__2Eh]                        ;
0714 A9 2F       mov  r1,[iram_tmp__2Fh]                        ; check MIN
0716 75 F0 05    mov  b,05h                                     ;
0719 E5 33       mov  a,[iram_tmp__33h]   ;index                ; refuse
071B A4          mul  a,b       ;index*5                        ;  X<(MIN)
071C F5 82       mov  dpl,a        ;\ptr+0 = MIN                ;
071E 85 F0 83    mov  dph,b        ;/                           ;
0721 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr  ;
0724 FF          mov  r7,a                                      ;
0725 C3          clr  c                                         ;
0726 E5 32       mov  a,[iram_tmp__32h]                         ;
0728 9F          sbc  a,r7                                      ;
0729 E5 31       mov  a,[iram_tmp__31h]                         ;
072B 95 F0       sbc  a,b                                       ;
072D 40 27       jc   @@lop_next        ;refuse                 ;/
072F E5 33       mov  a,[iram_tmp__33h]   ;index                ;\
0731 75 F0 05    mov  b,05h                                     ;
0734 A4          mul  a,b       ;index*5                        ;
0735 29          add  a,r1                                      ;
0736 F9          mov  r1,a                                      ; check MAX
0737 EA          mov  a,r2                                      ;
0738 35 F0       adc  a,b                                       ; refuse
073A FA          mov  r2,a                                      ;   X>=(MAX+1)
073B 90 00 02    mov  dptr,0002h ;idx...   ;PTR+2 = MAX         ; aka
073E 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr  ;   X>(MAX)
0741 FF          mov  r7,a                                      ;
0742 D3          set  c            ;<--                         ;
0743 E5 32       mov  a,[iram_tmp__32h]                         ;
0745 9F          sbc  a,r7                                      ;
0746 E5 31       mov  a,[iram_tmp__31h]                         ;
0748 95 F0       sbc  a,b                                       ;
074A 50 0A       jnc  @@lop_next        ;refuse                 ;/
074C 90 00 04    mov  dptr,0004h ;idx...   ;PTR+4 = KEYNUMBER   ;\
074F 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ; FOUND MATCH
0752 F5 34       mov  [iram_tmp__34h],a                         ;/
0754 FF          mov  r7,a             ;<----- okay ;keynumber (2,3,4 for 3KEY)
0755 22          ret
                ;---
                @@lop_next:
0756 05 33       inc  [iram_tmp__33h]     ;index
0758 80 AF       sjmp @@lop
                ;---
                @@not_found:
075A AF 34       mov  r7,[iram_tmp__34h]          ;<---- zero (no match)
075C 22          ret
                ;------------------
                check_event_keyboard:
075D E4          clr  a                                 ;\
075E 90 00 7E    mov  dptr,xram_tmp__7Eh                ;
0761 F0          movx [dptr],a    ;key.code (none)      ;/
0762 30 07 4E    jz   [iram_req_event_flags].7,@@_07B3h         ;-
0765 C2 01       clr  [iram_req_event_flags].1  ;RQ_keyboard    ;-ack
                .if infrared_version<ver11sep2017       ;\
0767 E0            movx a,[dptr]    ;??                 ;
                 .else                                  ;
0763 12 0A BF      call check_infrared   ;---> IR       ; Infrared IR
0766 90 00 85      mov  dptr,xram_tmp__7Eh              ;
0769 EF            mov  a,r7                            ;
076A F0            movx [dptr],a                        ;
                .endif                                  ;
0768 70 49       jnz  a,@@_07B3h                        ;/
                ;- - -
076A 12 06 8A    lcall xxx_068Ah          ;... get key.number XLATed to key.code
076D 90 00 7E    mov  dptr,xram_tmp__7Eh
0770 EF          mov  a,r7        ;key.code
0771 F0          movx [dptr],a
0772 60 3F       jz   a,@@_07B3h
                ;- - -
0774 90 00 46    mov  dptr,xram_keypad_flags_msb
0777 E0          movx a,[dptr]  ;msb (blah)
0778 FE          mov  r6,a      ;msb (blah)
0779 A3          inc  dptr ;=xram_keypad_flags_lsb
077A E0          movx a,[dptr]  ;lsb
077B 78 03       mov  r0,03h  ;shift amount     ;\      ;\
                @@shift_lop:                    ;       ;
077D CE          xchg a,r6                      ;       ;
077E C3          clr  c                         ;       ; weird "mov c,a.3"
077F 13          rcr  a     ;msb                ;       ;
0780 CE          xchg a,r6                      ;       ;
0781 13          rcr  a     ;lsb                ;       ;
0782 D8 F9       djnz r0,@@shift_lop            ;/      ;
0784 30 E0 03    jz   a.0,@@clear_cy                    ;
0787 D3          set  c                                 ;
0788 80 01       sjmp @@this_cy                         ;
                ;---                                    ;
                @@clear_cy:                             ;
078A C3          clr  c                                 ;
                @@this_cy:                              ;/
078B 40 26       jc   @@_07B3h
078D 90 00 44    mov  dptr,xram_keypad_was_read         ;\
0790 E0          movx a,[dptr]                          ;
0791 B4 01 1F    jne  a,01h,@@_07B3h                    ;/
0794 A3          inc  dptr ;=xram_keypad_whatever       ;\
0795 E0          movx a,[dptr]                          ;
                .if tech_version<ver11sep2017           ;
0796 FF            mov  r7,a                            ;
0797 64 01         xor  a,01h                           ;
0799 60 04         jz   a,@@_079Fh                      ;
079B EF            mov  a,r7                            ;
079C B4 10 14      jne  a,10h,@@_07B3h                  ;
                  @@_079Fh:                             ;
                .else                                   ;
0799 B4 01 14      jne  a,01h,@@_07B3h                  ;
                .endif                                  ;/
079F 90 00 09    mov  dptr,xram_sett_curr_power         ;\
07A2 E0          movx a,[dptr]                          ;
07A3 B4 01 0D    jne  a,01h,@@_07B3h                    ;/
07A6 90 00 7E    mov  dptr,xram_tmp__7Eh
07A9 E0          movx a,[dptr]   ;key.code
07AA FF          mov  r7,a       ;key.code
07AB 12 A5 49    call check_secret_key_combo_MenuUDDUU
07AE 90 00 7E    mov  dptr,xram_tmp__7Eh
07B1 EF          mov  a,r7       ;key.code (as above, or 20h = secret)
07B2 F0          movx [dptr],a
                @@_07B3h:
07B3 90 00 7E    mov  dptr,xram_tmp__7Eh                ;\
07B6 E0          movx a,[dptr]                          ;
07B7 FF          mov  r7,a                              ;/
07B8 22          ret
                ;------------------
;:------------- ;:----------------- source menu event
                ;------------------
                check_event_source_menu:
07B9 30 07 3C    jz   [iram_req_event_flags].7,@@return_zero    ;-
07BC C2 04       clr  [iram_req_event_flags].4  ;RQ_source_menu ;-ack
                .if av_detect_version<ver11sep2017
07BE 90 FE 26      mov  dptr,IO_AV_stat_detect_0          ;\
07C1 E0            movx a,[dptr]                          ;
07C2 54 06         and  a,06h                             ;
07C4 65 1F         xor  a,[iram_old_AV_stat_detect_0] ;old;... video detect?
07C6 70 23         jnz  a,@@not_same                      ;/
                .else
07BB 90 FE 26      mov  dptr,IO_AV_stat_detect_0          ;\
07BE E0            movx a,[dptr]                          ;
07BF 54 02         and  a,02h                             ;
07C1 C3            clr  c                                 ;
07C2 13            rcr  a                                 ;
07C3 FF            mov  r7,a                              ;
07C4 A2 0B         mov  c,[iram_misc_flags].miscflg_av    ;
07C6 E4            clr  a                                 ;
07C7 33            rcl  a                                 ;
07C8 6F            xor  a,r7                              ;
07C9 70 21         jnz  a,@@not_same                      ;/
                .endif
                ;- - -
07C8 90 00 BB    mov  dptr,xram_av_stat0_same_counter          ;... offhold?
07CB E0          movx a,[dptr]
07CC C3          clr  c
07CD 94 14       sbc  a,14h
07CF 50 27       jnc  @@return_zero      ;already_more_than_20x_same
07D1 E0          movx a,[dptr]
07D2 04          inc  a       ;[xram_av_stat0_same_counter]       ;... offhold?  ;raise SAME counter
07D3 F0          movx [dptr],a
07D4 E0          movx a,[dptr]
07D5 64 14       xor  a,14h   ;[xram_av_stat0_same_counter]       ;... offhold?
07D7 70 1F       jnz  a,@@return_zero    ;notyet_20x_same
                ;- - -
                .if av_detect_version<ver11sep2017
07D9 E5 1F         mov  a,[iram_old_AV_stat_detect_0]   ;old   ;... video detect?
07DB 90 00 0E      mov  dptr,xram_sett___0Eh
07DE B4 06 05      jne  a,06h,@@_07E6h
                .else
07DC 90 00 11      mov  dptr,xram_sett___0Eh
07DF 30 0B 05      jz   [iram_misc_flags].miscflg_av,@@_07E6h
                .endif
07E1 74 10       mov  a,ID_event_10h
07E3 F0          movx [dptr],a    ;<-- xram_sett___0Eh
07E4 FF          mov  r7,a        ;<-- return 10h (passed on to "handle_event_source_menu")
07E5 22          ret
                ;---
                @@_07E6h:
07E6 74 11       mov  a,ID_event_11h
07E8 F0          movx [dptr],a    ;<-- xram_sett___0Eh
07E9 FF          mov  r7,a        ;<-- return 11h (passed on to "handle_event_source_menu")
07EA 22          ret
                ;---
                @@not_same:
07EB E4          clr  a                                 ;\
07EC 90 00 BB    mov  dptr,xram_av_stat0_same_counter   ; reset SAME counter
07EF F0          movx [dptr],a                          ;/
                .if av_detect_version<ver11sep2017
07F0 90 FE 26      mov  dptr,IO_AV_stat_detect_0        ;\
07F3 E0            movx a,[dptr]                        ;
07F4 54 06         and  a,06h                           ;
07F6 F5 1F         mov  [iram_old_AV_stat_detect_0],a   ;/   ;... video detect?
                .else
07F1 90 FE 26      mov  dptr,IO_AV_stat_detect_0        ;\
07F4 E0            movx a,[dptr]                        ;
07F5 54 02         and  a,02h                           ;
07F7 C3            clr  c                               ;
07F8 13            rcr  a                               ;
07F9 24 FF         add  a,0FFh                          ;
07FB 92 0B         mov  [iram_misc_flags].miscflg_av,c  ;/
                .endif
                @@return_zero:
07F8 7F 00       mov  r7,00h
07FA 22          ret
                ;------------------
;:------------- ;:----------------- KEYPAD code
                ;------------------
                keyboard_xlat_digital_to_digital:   ;xlat keyboard keynumber
07FB E4          clr  a
07FC 90 00 80    mov  dptr,xram_tmp__80h
07FF F0          movx [dptr],a
0800 90 00 7F    mov  dptr,xram_tmp__7Fh
0803 F0          movx [dptr],a  ;index=0
                @@lop:
0804 90 00 7F    mov  dptr,xram_tmp__7Fh
0807 E0          movx a,[dptr]  ;index
0808 FE          mov  r6,a
0809 C3          clr  c
080A 94 09       sbc  a,09h
080C 50 30       jnc  @@lop_done_not_found
080E EE          mov  a,r6
080F 25 E0       add  a,a       ;index*2
0811 24 B1       add  a,(keyboard_xlat_list+1) and 0ffh
0813 F5 82       mov  dpl,a
0815 E4          clr  a
0816 34 BA       adc  a,(keyboard_xlat_list+1)/100h
0818 F5 83       mov  dph,a
081A E4          clr  a
081B 93          movc a,[a+dptr]
081C B5 07 17    jne  a,r7(0),@@lop_next
                ;- - - found...
081F 90 00 7F    mov  dptr,xram_tmp__7Fh
0822 E0          movx a,[dptr]  ;index
0823 25 E0       add  a,a       ;index*2
0825 24 B0       add  a,(keyboard_xlat_list+0) and 0ffh
0827 F5 82       mov  dpl,a
0829 E4          clr  a
082A 34 BA       adc  a,(keyboard_xlat_list+0)/100h
082C F5 83       mov  dph,a
082E E4          clr  a
082F 93          movc a,[a+dptr]
0830 FF          mov  r7,a
0831 90 00 80    mov  dptr,xram_tmp__80h
0834 F0          movx [dptr],a
0835 22          ret
                ;---
                @@lop_next:
0836 90 00 7F    mov  dptr,xram_tmp__7Fh
0839 E0          movx a,[dptr]
083A 04          inc  a
083B F0          movx [dptr],a
083C 80 C6       sjmp @@lop
                ;---
                @@lop_done_not_found:
083E 90 00 80    mov  dptr,xram_tmp__80h
0841 E0          movx a,[dptr]         ;<--------
0842 FF          mov  r7,a
0843 22          ret
                ;------------------
;:------------- ;:----------------- event no signal or save
                ;------------------
                check_event_close_or_save:
0844 30 07 40    jz   [iram_req_event_flags].7,@@return_zero            ;-
0847 C2 06       clr  [iram_req_event_flags].6  ;RQ_signal_or_save      ;-ack
                ;- - -
0849 D3          set  c         ;cy=1
084A 90 00 3B    mov  dptr,xram_backtoroot_offhold_lsb
084D E0          movx a,[dptr]
084E 94 00       sbc  a,00h     ;minus cy (with cy=1)!
0850 90 00 3A    mov  dptr,xram_backtoroot_offhold_msb
0853 E0          movx a,[dptr]
0854 94 00       sbc  a,00h     ;minus cy (with cy from lsb)
0856 40 0E       jc   @@_0866h                         ;--> ALREADY expired
0858 74 FF       mov  a,0FFh  ;msb  ;\aka MINUS ONE             ;\
085A F5 F0       mov  b,a     ;lsb  ;/                          ; decrease
085C 12 4A FB    call add_ab_to_xram_at_dptr  ;[xram_backtoroot_offhold_msb] ;/
085F 45 F0       or   a,b
0861 70 03       jnz  a,@@_0866h                        ;--> NOTYET expired
0863 7F 13       mov  r7,ID_event_13h_close_menu    ;ANNOY ME! close the menu!
0865 22          ret
                ;---
                @@_0866h:
                ;- - -
0866 C3          clr  c                                         ;\
0867 90 00 3D    mov  dptr,xram_save_settings_offhold_lsb       ;
086A E0          movx a,[dptr]                                  ;
086B 94 32       sbc  a,32h                                     ;
086D 90 00 3C    mov  dptr,xram_save_settings_offhold_msb       ;
0870 E0          movx a,[dptr]                                  ;
0871 94 00       sbc  a,00h                                     ;
0873 50 12       jnc  @@return_zero         ;----> ALREADY      ;/
0875 E4          clr  a       ;msb  ;\aka PLUS ONE              ;\
0876 75 F0 01    mov  b,01h   ;lsb  ;/                          ; raise
0879 12 4A FB    call add_ab_to_xram_at_dptr  ;[xram_save_settings_offhold_msb]          ;/
087C FE          mov  r6,a
087D E5 F0       mov  a,b
087F 64 32       xor  a,32h
0881 4E          or   a,r6
0882 70 03       jnz  a,@@return_zero       ;----> NOTYET
0884 7F 14       mov  r7,ID_event_14h_save_settings
0886 22          ret
                ;---
                @@return_zero:
0887 7F 00       mov  r7,ID_event_00h_none
0889 22          ret
                ;------------------
;:------------- ;:----------------- misc code
                ;------------------
                check_event____misc_subfunc:   ;out: r7=00h,17h,18h,19h,1Ah
                .if shuffle_version<ver11sep2017
                   @@misnumber equ 0
                .else
                   @@misnumber equ 2
                .endif
                ID_event_00h_none          equ 0
                ID_event_0Fh_pal_ntsc      equ 0Fh ;-
                ID_event_10h               equ 10h ;\
                ID_event_11h               equ 11h ;/
                ID_event_13h_close_menu    equ 13h ;\
                ID_event_14h_save_settings equ 14h ;/
                ID_event_17h               equ 17h-@@misnumber ;try AV2 ?
                ID_event_18h               equ 18h-@@misnumber ;lost signal -- NOW try resume SELECTED input?
                ID_event_19h               equ 19h-@@misnumber ;force AV2 input ??!!!
                ID_event_1Ah               equ 1Ah-@@misnumber ;want_power_off ;switch OFF
                ID_event_1Bh               equ 1Bh-@@misnumber ;want_screen_on ;switch ON
                ID_event_1Fh_secret        equ 1Fh-@@misnumber
                ID_event_20h_secret        equ 20h-@@misnumber
                ;- - -
088A 12 06 1A    call check_if_signal            ;--------->
088D 50 1D       jnc  @@no_signal
                ;- - - -
                ;@@have_signal:
088F 90 00 09    mov  dptr,xram_sett_curr_power                 ;\
0892 E0          movx a,[dptr]                                  ;
0893 B4 01 0B    jne  a,01h,@@have_signal_but_power_is_off      ;/
                ;@@have_signal_and_power_is_on:
0896 90 00 4D    mov  dptr,xram_whatever_pwr_input
0899 E0          movx a,[dptr]
089A 64 02       xor  a,02h
089C 60 2C       jz   a,@@return_zero
089E 7F 17       mov  r7,ID_event_17h   ;switch on / show source menu ?
08A0 22          ret
                ;---
                @@have_signal_but_power_is_off:
08A1 90 00 4D    mov  dptr,xram_whatever_pwr_input
08A4 E0          movx a,[dptr]
08A5 64 03       xor  a,03h
08A7 60 21       jz   a,@@return_zero
08A9 7F 19       mov  r7,ID_event_19h
08AB 22          ret
                ;--- --- ---
                @@no_signal:
08AC 12 04 93    call switch_lcd_screen_on_or_off        ;--------->
08AF 90 00 09    mov  dptr,xram_sett_curr_power                 ;\
08B2 E0          movx a,[dptr]                                  ;
08B3 B4 01 09    jne  a,01h,@@no_signal_and_power_is_off        ;/
                ;@@no_signal_and_power_is_on:
08B6 90 00 4D    mov  dptr,xram_whatever_pwr_input
08B9 E0          movx a,[dptr]
08BA 60 0E       jz   a,@@return_zero
08BC 7F 18       mov  r7,ID_event_18h    ;off/standby ?
08BE 22          ret
                ;---
                @@no_signal_and_power_is_off:
08BF 90 00 4D    mov  dptr,xram_whatever_pwr_input
08C2 E0          movx a,[dptr]
08C3 64 01       xor  a,01h
08C5 60 03       jz   a,@@return_zero
08C7 7F 1A       mov  r7,ID_event_1Ah        ;OFF ?
08C9 22          ret
                ;---
                @@return_zero:
08CA 7F 00       mov  r7,ID_event_00h_none
08CC 22          ret
                ;------------------
                check_event____misc:    ;out: r7=00h,17h,18h,19h,1Ah,1Bh
08CD E4          clr  a                                 ;\
08CE 90 00 7E    mov  dptr,xram_tmp__7Eh                ; initial return value
08D1 F0          movx [dptr],a                          ;/
08D2 30 07 32    jz   [iram_req_event_flags].7,@@exit   ;-
08D5 90 00 46    mov  dptr,xram_keypad_flags_msb        ;\
08D8 E0          movx a,[dptr]                          ;
08D9 FE          mov  r6,a                              ;
08DA A3          inc  dptr ;=xram_keypad_flags_lsb      ; insane equivalent to
08DB E0          movx a,[dptr]                          ; "mov c,[flags_lsb].3"
08DC 78 03       mov  r0,03h  ;shift amount     ;\      ;
                @@shift_lop:                    ;       ;
08DE CE          xchg a,r6                      ;       ;
08DF C3          clr  c                         ;       ;
08E0 13          rcr  a                         ;       ;
08E1 CE          xchg a,r6                      ;       ;
08E2 13          rcr  a                         ;       ;
08E3 D8 F9       djnz r0,@@shift_lop            ;/      ;
08E5 30 E0 03    jz   a.0,@@clear_cy                    ;
08E8 D3          set  c                                 ;
08E9 80 01       sjmp @@this_cy                         ;
                ;---                                    ;
                @@clear_cy:                             ;
08EB C3          clr  c                                 ;
                @@this_cy:                              ;/
08EC 40 19       jc   @@exit
                ;- - -
08EE C2 00       clr  [iram_req_event_flags].0                  ;-
08F0 90 00 4D    mov  dptr,xram_whatever_pwr_input
08F3 E0          movx a,[dptr]
08F4 B4 04 08    jne  a,04h,@@_08FFh
08F7 90 00 7E    mov  dptr,xram_tmp__7Eh
08FA 74 1B       mov  a,ID_event_1Bh
08FC F0          movx [dptr],a
08FD 80 08       sjmp @@exit
                ;---
                @@_08FFh:
08FF 12 08 8A    lcall check_event____misc_subfunc  ;--------> out: r7=00h,17h,18h,19h,1Ah
0902 90 00 7E    mov  dptr,xram_tmp__7Eh
0905 EF          mov  a,r7
0906 F0          movx [dptr],a
                @@exit:
0907 90 00 7E    mov  dptr,xram_tmp__7Eh                ;\
090A E0          movx a,[dptr]                          ; return value
090B FF          mov  r7,a                              ;/
090C 22          ret
                ;------------------
                check_event_detected_video:
090D 30 07 27    jz   [iram_req_event_flags].7,@@not_requested      ;-copy of [iram_req_event_flags].2
0910 C2 02       clr  [iram_req_event_flags].2  ;RQ_detected_video  ;-ack
0912 90 00 BC    mov  dptr,xram_old_detected_video      ;\
0915 E0          movx a,[dptr]                          ;
0916 FF          mov  r7,a                              ; check if same
0917 90 00 BD    mov  dptr,xram_new_detected_video      ;
091A E0          movx a,[dptr]                          ;
091B FE          mov  r6,a       ;new                   ;
091C 6F          xor  a,r7                              ;
091D 60 18       jz   a,@@same                          ;/
                ;- - -
091F E0          movx a,[dptr]  ;[xram_new_detected_video] ;\
0920 90 00 BC    mov  dptr,xram_old_detected_video         ; apply as new
0923 F0          movx [dptr],a                             ;/
0924 F4          cpl  a     ;check if FFh               ;\check if new is FFh
0925 60 10       jz   a,@@new_is_FFh                    ;/
0927 90 00 0D    mov  dptr,xram_sett_detected_v         ;\
092A EE          mov  a,r6       ;new                   ; apply as valid signal?
092B F0          movx [dptr],a         ;<----           ;/
092C C3          clr  c                                 ;\refuse 06h..FEh
092D 94 06       sbc  a,06h      ;new                   ; (common is 00h or 03h)
092F 50 03       jnc  @@new_is_06h_thru_FEh             ;/
0931 7F 0F       mov  r7,ID_event_0Fh_pal_ntsc   ;<---        ;----- request !
0933 22          ret
                ;---
                @@new_is_06h_thru_FEh:
0934 7F 00       mov  r7,ID_event_00h_none              ;-refuse/invalid
0936 22          ret
                ;---
                @@same:          ;same
                @@new_is_FFh:    ;none
                @@not_requested:
0937 7F 00       mov  r7,ID_event_00h_none              ;-none/same
0939 22          ret
                ;------------------
                whatever_91h_4_do_stuff_and_ack_reti:
093A C0 E0       push a
093C C0 83       push dph
093E C0 82       push dpl
0940 53 91 EF    and  [SFR_IO_xxx91h],0EFh   ;not 10h  ;bit4=0    ;-ack ADC to CPU
0943 90 FD B8    mov  dptr,IO_ADC_status_lsb            ;\
0946 E4          clr  a                                 ;
0947 F0          movx [dptr],a     ;=00h                ; ack ADC to itself?
0948 A3          inc  dptr ;=IO_ADC_status_msb          ;
0949 F0          movx [dptr],a     ;=00h                ;/
094A D0 82       pop  dpl
094C D0 83       pop  dph
094E D0 E0       pop  a
0950 32          reti
                ;------------------
                watchdog_reload:
0951 75 BE 55    mov  [SFR_IO_watchdog_unlock],55h              ;-unlock
0954 75 BB BB    mov  [SFR_IO_watchdog_reload],0BBh             ;\
0957 63 BB FF    xor  [SFR_IO_watchdog_reload],0FFh  ;xor!      ; reload
095A E4          clr  a                                         ;
095B F5 BB       mov  [SFR_IO_watchdog_reload],a                ;/
095D 75 BE AA    mov  [SFR_IO_watchdog_unlock],0AAh             ;-lock
0960 22          ret
                ;------------------
                timer_0_overflow:   ;just reload the timer...
0961 C2 8C       clr  tr0         ;XXXsfr
0963 75 8C FB    mov  [SFR_IO_timer0_msb],0FBh          ;\FB9Fh aka -461h (-1121)       ;\Timer0
0966 75 8A 9F    mov  [SFR_IO_timer0_lsb],9Fh           ;/                              ;/
0969 D2 8C       set  tr0         ;XXXsfr
096B 32          reti
                ;------------------
                dummy_ack_req5:
096C 30 07 02    jz   [iram_req_event_flags].7,@@no_req          ;<-- copy of [iram_req_event_flags].5
096F C2 05       clr  [iram_req_event_flags].5  ;;RQ_blah_dummy  ;<-- ack (if it was set)
                @@no_req:
0971 7F 00       mov  r7,00h            ;return 00h (always)
0973 22          ret
                ;------------------
                whatever_91h_5_ack_reti:
0974 53 91 DF    and  [SFR_IO_xxx91h],0DFh   ;not 20h  ;bit5=0
0977 32          reti
                ;------------------
                whatever_91h_6_ack_reti:
0978 53 91 BF    and  [SFR_IO_xxx91h],0BFh   ;not 40h  ;bit6=0
097B 32          reti
                ;------------------
                whatever_91h_7_ack_reti:
097C 53 91 7F    and  [SFR_IO_xxx91h],7Fh    ;not 80h  ;bit7=0
097F 32          reti
                ;------------------
;:------------- ;:----------------- IR code (infrared handler)
                ;------------------
                ext_int0_infrared:  ;(vector 0003h)
                .if infrared_version<ver11sep2017
0980 32            reti         ;dummy/reti
                .else ;- - - - - - - InfraRed...
                  ;note: this is weirdly reading the "command" and "device"
                  ; at IRQ level, whilst reading the "flags" elsewhere.
                  ;note: xram_sett_ir can be set to OFF,A,B - but it's left
                  ; unused (it's usually "OFF" but IR is handled anyways, and
                  ; the meaning of settings A,B is unknown; maybe it was
                  ; intended for NEC vs RC-5, for different sets of NEC tables,
                  ; or different wiring on mainboard/infrared unit).
                  ;- - -
0985 C0 E0         push a
0987 C0 F0         push b
0989 C0 83         push dph
098B C0 82         push dpl
098D C0 D0         push psw
098F 75 D0 00      mov  psw,00h
0992 C0 00         push r0(0)
0994 C0 01         push r1(0)
0996 C0 02         push r2(0)
0998 C0 03         push r3(0)
099A C0 04         push r4(0)
099C C0 05         push r5(0)
099E C0 06         push r6(0)
09A0 C0 07         push r7(0)
09A2 12 09 C4      call @@int0_core             ;\
09A5 8E 19         mov  [iram_ir_msb_device],r6 ;
09A7 8F 1A         mov  [iram_ir_lsb_cmd],r7    ;/
09A9 D0 07         pop  r7(0)
09AB D0 06         pop  r6(0)
09AD D0 05         pop  r5(0)
09AF D0 04         pop  r4(0)
09B1 D0 03         pop  r3(0)
09B3 D0 02         pop  r2(0)
09B5 D0 01         pop  r1(0)
09B7 D0 00         pop  r0(0)
09B9 D0 D0         pop  psw
09BB D0 82         pop  dpl
09BD D0 83         pop  dph
09BF D0 F0         pop  b
09C1 D0 E0         pop  a
09C3 32            reti
                  ;--- --- --- ------
                  @@int0_core:
                   ;--> http://www.remotecentral.com/cgi-bin/mboard/rc-discrete/thread.cgi?7182
                   ;--> https://www.sbprojects.net/knowledge/ir/nec.php
09C4 90 FF 85      mov  dptr,IO_IR_stat_FF85h_used      ;\
09C7 E0            movx a,[dptr]                        ; get DEVICE msb
09C8 FF            mov  r7,a                            ;/
09C9 90 00 C9      mov  dptr,xram_XXX__00C9h_msb        ;\
09CC E4            clr  a                               ;
09CD F0            movx [dptr],a                        ; word=msb+0000h
09CE A3            inc  dptr ;=xram_XXX__00CAh_lsb      ;
09CF EF            mov  a,r7                            ;
09D0 F0            movx [dptr],a                        ;/
09D1 E0            movx a,[dptr]                        ;\
09D2 7F 00         mov  r7,00h                          ;
09D4 FE            mov  r6,a     ;msb                   ;
09D5 90 00 C9      mov  dptr,xram_XXX__00C9h_msb        ; word=msb*100h
09D8 F0            movx [dptr],a                        ;
09D9 A3            inc  dptr ;=xram_XXX__00CAh_lsb      ;
09DA EF            mov  a,r7     ;lsb                   ;
09DB F0            movx [dptr],a                        ;/
09DC 90 FF 83      mov  dptr,IO_IR_stat_FF83h_used      ;\
09DF E0            movx a,[dptr]                        ; get DEVICE lsb
09E0 FD            mov  r5,a                            ;/
09E1 ED            mov  a,r5                            ;\
09E2 FF            mov  r7,a                            ;
09E3 90 00 C9      mov  dptr,xram_XXX__00C9h_msb        ;
09E6 EE            mov  a,r6                            ; word=msb*100h+lsb
09E7 F0            movx [dptr],a                        ;
09E8 A3            inc  dptr ;=xram_XXX__00CAh_lsb      ;
09E9 EF            mov  a,r7                            ;
09EA F0            movx [dptr],a                        ;/
09EB 90 00 C9      mov  dptr,xram_XXX__00C9h_msb        ;\
09EE E0            movx a,[dptr]                        ;
09EF FE            mov  r6,a       ;msb                 ; get word
09F0 A3            inc  dptr ;=xram_XXX__00CAh_lsb      ;
09F1 E0            movx a,[dptr]                        ;
09F2 FF            mov  r7,a       ;lsb                 ;/
09F3 64 86         xor  a,86h      ;lsb                 ;\
09F5 70 03         jnz  a,@@not_xx86h                   ;
09F7 EE            mov  a,r6       ;msb                 ; accept 6B86h (134.107)
09F8 64 6B         xor  a,6Bh                           ;
                  @@not_xx86h:                          ;
09FA 60 08         jz   a,@@accept                      ;/
09FC E4            clr  a          ;lsb                 ;\
09FD B5 07 11      jne  a,r7(0),@@refuse                ; accept FF00h (0.255)
0A00 EE            mov  a,r6       ;msb                 ;
0A01 B4 FF 0D      jne  a,0FFh,@@refuse                 ;/
                  @@accept:
0A04 AD E4         mov  r5,[SFR_IO_IR_data]             ;-get COMMAND
0A06 EE            mov  a,r6       ;msb                 ;\apply msb (6Bh or FFh)
0A07 F5 19         mov  [iram_ir_msb_device],a          ;/ (aka device.msb)
0A09 ED            mov  a,r5       ;command             ;\apply COMMAND
0A0A F5 1A         mov  [iram_ir_lsb_cmd],a             ;/ (instead of device.lsb)
0A0C 75 E4 FF      mov  [SFR_IO_IR_data],0FFh           ;-ack command...?
0A0F 80 09         sjmp @@finish
                  ;---
                  @@refuse:
0A11 75 E4 FF      mov  [SFR_IO_IR_data],0FFh           ;-ack command...?
0A14 74 FF         mov  a,0FFh
0A16 F5 19         mov  [iram_ir_msb_device],a
0A18 F5 1A         mov  [iram_ir_lsb_cmd],a
                  @@finish:
0A1A AE 19         mov  r6,[iram_ir_msb_device]
0A1C AF 1A         mov  r7,[iram_ir_lsb_cmd]
0A1E 22            ret
                  ;------------------
                  xlat_ir_code_to_keycode:  ;in: r6r7 - out: r7
0A1F E4            clr  a
0A20 90 00 8A      mov  dptr,xram_tmp__83h
0A23 F0            movx [dptr],a  ;keycode (initially 00h=none)
0A24 90 00 89      mov  dptr,xram_tmp__82h
0A27 F0            movx [dptr],a  ;index
                  @@search_lop:
0A28 90 00 89      mov  dptr,xram_tmp__82h                      ;\
0A2B E0            movx a,[dptr]  ;index                        ;
0A2C FD            mov  r5,a      ;index                        ; check if done
0A2D C3            clr  c                                       ;
0A2E 94 0C         sbc  a,num_infrared_code_list_entries        ;
0A30 50 38         jnc  @@search_lop_done                       ;/
0A32 ED            mov  a,r5      ;index                        ;\
0A33 75 F0 03      mov  b,03h                                   ;
0A36 A4            mul  a,b       ;index*3                      ;
0A37 24 D3         add  a,(infrared_code_list+1) and 0ffh       ;
0A39 F5 82         mov  dpl,a                                   ;
0A3B E4            clr  a                                       ; check if match
0A3C 34 AD         adc  a,(infrared_code_list+1)/100h           ;
0A3E F5 83         mov  dph,a                                   ;
0A40 74 01         mov  a,01h       ;<-- +1+1                   ;
0A42 93            movc a,[a+dptr]                              ;
0A43 B5 07 1C      jne  a,r7(0),@@search_lop_next               ;
0A46 E4            clr  a           ;<-- +1+0                   ;
0A47 93            movc a,[a+dptr]                              ;
0A48 B5 06 17      jne  a,r6(0),@@search_lop_next               ;/
                  ;- - - okay, found match...
0A4B 90 00 89      mov  dptr,xram_tmp__82h                      ;\
0A4E E0            movx a,[dptr]  ;index                        ;
0A4F 75 F0 03      mov  b,03h                                   ;
0A52 A4            mul  a,b       ;index*3                      ;
0A53 24 D2         add  a,(infrared_code_list+0) and 0ffh       ;
0A55 F5 82         mov  dpl,a                                   ; apply keycode
0A57 E4            clr  a                                       ;
0A58 34 AD         adc  a,(infrared_code_list+0)/100h           ;
0A5A F5 83         mov  dph,a                                   ;
0A5C E4            clr  a           ;<-- +0+0                   ;
0A5D 93            movc a,[a+dptr]                              ;
0A5E 90 00 8A      mov  dptr,xram_tmp__83h                      ;
0A61 F0            movx [dptr],a  ;keycode                      ;/
                  @@search_lop_next:
0A62 90 00 89      mov  dptr,xram_tmp__82h              ;\
0A65 E0            movx a,[dptr]  ;index                ;
0A66 04            inc  a         ;index+1              ; lop next
0A67 F0            movx [dptr],a  ;index                ;
0A68 80 BE         sjmp @@search_lop                    ;/
                  ;---
                  @@search_lop_done:
0A6A 90 00 8A      mov  dptr,xram_tmp__83h      ;\
0A6D E0            movx a,[dptr]  ;keycode      ; return keycode (00h=none)
0A6E FF            mov  r7,a                    ;/
0A6F 22            ret
                  ;------------------
                  check_IR_flags:   ;in: r6r7 - out: r6r7
                   ;in: r6=[iram_ir_msb_device]
                   ;in: r7=[iram_ir_lsb_cmd]
                   ;- - -
0A70 74 FF         mov  a,0FFh                          ;\
0A72 90 00 89      mov  dptr,xram_tmp__82h              ;
0A75 F0            movx [dptr],a                        ;
0A76 A3            inc  dptr ;=xram_tmp__83h            ;
0A77 F0            movx [dptr],a                        ;/
                  ;- - -
0A78 E5 E5         mov  a,[SFR_IO_IR_flags]             ;\   irq flag or so?
0A7A 30 E0 0B      jz   a.0,@@_0A88h                    ;/
0A7D 74 FF         mov  a,0FFh                          ;\
0A7F 90 00 C7      mov  dptr,xram_XXX__00C7h            ;
0A82 F0            movx [dptr],a                        ;
0A83 A3            inc  dptr ;=xram_XXX__00C8h          ;
0A84 F0            movx [dptr],a                        ;/
0A85 53 E5 FE      and  [SFR_IO_IR_flags],0FEh          ;-   ;<-- ack?
                  @@_0A88h:
                  ;- - -
0A88 EF            mov  a,r7                            ;\
0A89 F4            cpl  a                               ;
0A8A 70 02         jnz  a,@@not_FFh                     ;
0A8C EE            mov  a,r6                            ; check if FFFFh
0A8D F4            cpl  a                               ;
                  @@not_FFh:                            ;
0A8E 60 26         jz   a,@@return_FFFFh  ;--> is FFFFh ;/
                  ;- - -
0A90 74 FF         mov  a,0FFh                          ;\
0A92 F5 19         mov  [iram_ir_msb_device],a          ;
0A94 F5 1A         mov  [iram_ir_lsb_cmd],a             ;/
0A96 E5 E5         mov  a,[SFR_IO_IR_flags]             ;\
0A98 90 00 4C      mov  dptr,xram_keypad_whatever       ;
0A9B 30 E1 05      jz   a.1,@@_0AA3h                    ;
0A9E 74 02         mov  a,02h                           ; maybe repeat flag?
0AA0 F0            movx [dptr],a ;[xram_keypad_whatever];
0AA1 80 03         sjmp @@_0AA6h                        ;
                  ;---                                  ;
                  @@_0AA3h:                             ;
0AA3 74 01         mov  a,01h                           ;
0AA5 F0            movx [dptr],a ;[xram_keypad_whatever];
                  @@_0AA6h:                             ;/
0AA6 90 00 C7      mov  dptr,xram_XXX__00C7h            ;\
0AA9 EE            mov  a,r6                            ;
0AAA F0            movx [dptr],a                        ;
0AAB A3            inc  dptr ;=xram_XXX__00C8h          ;
0AAC EF            mov  a,r7                            ;
0AAD F0            movx [dptr],a                        ;/
0AAE 90 00 89      mov  dptr,xram_tmp__82h              ;\
0AB1 EE            mov  a,r6                            ;
0AB2 F0            movx [dptr],a                        ;
0AB3 A3            inc  dptr ;=xram_tmp__83h            ;
0AB4 EF            mov  a,r7                            ;
0AB5 F0            movx [dptr],a                        ;/
                  ;- - -
                  @@return_FFFFh:
0AB6 90 00 89      mov  dptr,xram_tmp__82h              ;\
0AB9 E0            movx a,[dptr]                        ;
0ABA FE            mov  r6,a                            ;
0ABB A3            inc  dptr ;=xram_tmp__83h            ;
0ABC E0            movx a,[dptr]                        ;
0ABD FF            mov  r7,a                            ;/
0ABE 22            ret
                  ;------------------
                  check_infrared:
0ABF E4            clr  a
0AC0 90 00 86      mov  dptr,xram_tmp__7Fh
0AC3 F0            movx [dptr],a
0AC4 74 FF         mov  a,0FFh                  ;\
0AC6 A3            inc  dptr ;=xram_tmp__80h    ; initial/blah
0AC7 F0            movx [dptr],a                ; (will be overwritten below)
0AC8 A3            inc  dptr ;=xram_tmp__81h    ;
0AC9 F0            movx [dptr],a                ;/
0ACA AF 1A         mov  r7,[iram_ir_lsb_cmd]    ;\
0ACC AE 19         mov  r6,[iram_ir_msb_device] ;
0ACE 12 0A 70      lcall check_IR_flags         ;     ... IR flags
0AD1 90 00 87      mov  dptr,xram_tmp__80h      ;
0AD4 EE            mov  a,r6                    ;
0AD5 F0            movx [dptr],a                ;
0AD6 A3            inc  dptr ;=xram_tmp__81h    ;
0AD7 EF            mov  a,r7                    ;
0AD8 F0            movx [dptr],a                ;/
0AD9 F4            cpl  a                       ;\
0ADA 70 02         jnz  a,@@not_FFh             ;
0ADC EE            mov  a,r6                    ; check if FFFFh
0ADD F4            cpl  a                       ;
                  @@not_FFh:                    ;
0ADE 60 16         jz   a,@@_0AF6h              ;/
                  ;- - -
0AE0 90 00 4B      mov  dptr,xram_keypad_was_read       ;\
0AE3 74 02         mov  a,02h                           ; set to 02h !!! (source of keystroke = infrared ?)
0AE5 F0            movx [dptr],a                        ;/
0AE6 90 00 87      mov  dptr,xram_tmp__80h          ;\  ;\
0AE9 E0            movx a,[dptr]                    ;   ;
0AEA FE            mov  r6,a                        ;   ;
0AEB A3            inc  dptr ;=xram_tmp__81h        ;   ;
0AEC E0            movx a,[dptr]                    ;   ;
0AED FF            mov  r7,a                        ;/  ;
0AEE 12 0A 1F      lcall xlat_ir_code_to_keycode  ;---> ;
0AF1 90 00 86      mov  dptr,xram_tmp__7Fh          ;\  ;
0AF4 EF            mov  a,r7                        ;   ;
0AF5 F0            movx [dptr],a                    ;/  ;/
                  @@_0AF6h:
0AF6 90 00 86      mov  dptr,xram_tmp__7Fh
0AF9 E0            movx a,[dptr]
0AFA FF            mov  r7,a
0AFB 22            ret
                .endif
                ;------------------
;:------------- ;:----------------- GUI data (main font)
                ;------------------
                main_font:
                        ;20h-byte blocks, aka 10h-word blocks, aka 16x16pix ?
                        ;actual font size is 12x16pix (but 12pix is rounded up to 16bit per word)
                        ;1540h bytes (5440 bytes, 2720 words) (AAh*20h=1540h)
                ;- - -
                ;note: AMT630A said to have "Built-in 418-character font ROM"
                ;that would be "1A2h" characters (?)
                ;probably 1A0h chars at 0020h..001BFh, plus 2 extra chars?
                ;and custom user RAM chars at 01C0h and up.
                ;font RAM is said to be "4096x16 bytes" (or rather "bits"?)
                ;- - -
0981 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,00000h ;01C0h " "
0991 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,00000h
09A1 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,060C0h,064C0h,064C0h ;01C1h "0"
09B1 64 C0 60 C0 dw   064C0h,060C0h,060C0h,071C0h,03F80h,01F00h,00000h,00000h
09C1 00 00 06 00 dw   00000h,00600h,00E00h,01E00h,03600h,00600h,00600h,00600h ;01C2h "1"
09D1 06 00 06 00 dw   00600h,00600h,00600h,00600h,01F80h,01F80h,00000h,00000h
09E1 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,060C0h,001C0h,00380h ;01C3h "2"
09F1 07 00 0E 00 dw   00700h,00E00h,01C00h,03800h,07FC0h,07FC0h,00000h,00000h
0A01 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,001C0h,01F80h,01F00h ;01C4h "3"
0A11 03 80 01 C0 dw   00380h,001C0h,000C0h,061C0h,07F80h,03F00h,00000h,00000h
0A21 00 00 07 00 dw   00000h,00700h,00F00h,01F00h,03B00h,07300h,06300h,06300h ;01C5h "4"
0A31 7F C0 7F C0 dw   07FC0h,07FC0h,00300h,00300h,00300h,00300h,00000h,00000h
0A41 00 00 7F C0 dw   00000h,07FC0h,07FC0h,06000h,06000h,07F00h,07F80h,001C0h ;01C6h "5"
0A51 00 C0 00 C0 dw   000C0h,000C0h,060C0h,071C0h,03F80h,01F00h,00000h,00000h
0A61 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,06000h,07F00h,07F80h ;01C7h "6"
0A71 61 C0 60 C0 dw   061C0h,060C0h,060C0h,071C0h,03F80h,01F00h,00000h,00000h
0A81 00 00 7F C0 dw   00000h,07FC0h,07FC0h,001C0h,00380h,00700h,00E00h,00C00h ;01C8h "7"
0A91 0C 00 0C 00 dw   00C00h,00C00h,00C00h,00C00h,00C00h,00C00h,00000h,00000h
0AA1 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,071C0h,03F80h,03F80h ;01C9h "8"
0AB1 71 C0 60 C0 dw   071C0h,060C0h,060C0h,071C0h,07FC0h,03F80h,00000h,00000h
0AC1 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,060C0h,071C0h,03FC0h ;01CAh "9"
0AD1 1F C0 00 C0 dw   01FC0h,000C0h,060C0h,071C0h,03F80h,01F00h,00000h,00000h
0AE1 00 00 04 00 dw   00000h,00400h,00E00h,01F00h,03B80h,071C0h,060C0h,060C0h ;01CBh "A"
0AF1 60 C0 7F C0 dw   060C0h,07FC0h,07FC0h,060C0h,060C0h,060C0h,00000h,00000h
0B01 00 00 7F 00 dw   00000h,07F00h,07F80h,061C0h,060C0h,061C0h,07F80h,07F80h ;01CCh "B"
0B11 61 C0 60 C0 dw   061C0h,060C0h,060C0h,061C0h,07F80h,07F00h,00000h,00000h
0B21 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,06000h,06000h,06000h ;01CDh "C"
0B31 60 00 60 00 dw   06000h,06000h,060C0h,071C0h,03F80h,01F00h,00000h,00000h
0B41 00 00 7F 00 dw   00000h,07F00h,07F80h,031C0h,030C0h,030C0h,030C0h,030C0h ;01CEh "D"
0B51 30 C0 30 C0 dw   030C0h,030C0h,030C0h,031C0h,07F80h,07F00h,00000h,00000h
0B61 00 00 7F C0 dw   00000h,07FC0h,07FC0h,06000h,06000h,06000h,07FC0h,07FC0h ;01CFh "E"
0B71 60 00 60 00 dw   06000h,06000h,06000h,06000h,07FC0h,07FC0h,00000h,00000h
0B81 00 00 7F C0 dw   00000h,07FC0h,07FC0h,06000h,06000h,07FC0h,07FC0h,06000h ;01D0h "F"
0B91 60 00 60 00 dw   06000h,06000h,06000h,06000h,06000h,06000h,00000h,00000h
0BA1 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,060C0h,06000h,06000h ;01D1h "G"
0BB1 63 C0 63 C0 dw   063C0h,063C0h,061C0h,073C0h,03FC0h,01EC0h,00000h,00000h
0BC1 00 00 60 C0 dw   00000h,060C0h,060C0h,060C0h,060C0h,060C0h,07FC0h,07FC0h ;01D2h "H"
0BD1 60 C0 60 C0 dw   060C0h,060C0h,060C0h,060C0h,060C0h,060C0h,00000h,00000h
0BE1 00 00 1F 80 dw   00000h,01F80h,01F80h,00600h,00600h,00600h,00600h,00600h ;01D3h "I"
0BF1 06 00 06 00 dw   00600h,00600h,00600h,00600h,01F80h,01F80h,00000h,00000h
0C01 00 00 0F C0 dw   00000h,00FC0h,00FC0h,00300h,00300h,00300h,00300h,00300h ;01D4h "J"
0C11 03 00 03 00 dw   00300h,00300h,03300h,03300h,03F00h,01E00h,00000h,00000h
0C21 00 00 30 80 dw   00000h,03080h,03180h,03380h,03700h,03E00h,03C00h,03C00h ;01D5h "K"
0C31 3E 00 37 00 dw   03E00h,03700h,03380h,031C0h,030C0h,03040h,00000h,00000h
0C41 00 00 30 00 dw   00000h,03000h,03000h,03000h,03000h,03000h,03000h,03000h ;01D6h "L"
0C51 30 00 30 00 dw   03000h,03000h,03000h,03000h,03FC0h,03FC0h,00000h,00000h
0C61 00 00 60 C0 dw   00000h,060C0h,071C0h,07BC0h,07FC0h,06EC0h,064C0h,060C0h ;01D7h "M"
0C71 60 C0 60 C0 dw   060C0h,060C0h,060C0h,060C0h,060C0h,060C0h,00000h,00000h
0C81 00 00 70 C0 dw   00000h,070C0h,070C0h,078C0h,078C0h,06CC0h,06CC0h,066C0h ;01D8h "N"
0C91 66 C0 63 C0 dw   066C0h,063C0h,063C0h,061C0h,061C0h,060C0h,00000h,00000h
0CA1 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,060C0h,060C0h,060C0h ;01D9h "O"
0CB1 60 C0 60 C0 dw   060C0h,060C0h,060C0h,071C0h,03F80h,01F00h,00000h,00000h
0CC1 00 00 7F 00 dw   00000h,07F00h,07F80h,061C0h,060C0h,060C0h,061C0h,07F80h ;01DAh "P"
0CD1 7F 00 60 00 dw   07F00h,06000h,06000h,06000h,06000h,06000h,00000h,00000h
0CE1 00 00 1E 00 dw   00000h,01E00h,03F00h,07380h,06180h,06180h,06180h,06180h ;01DBh "Q"
0CF1 61 80 67 80 dw   06180h,06780h,06780h,07380h,03FC0h,01EC0h,00000h,00000h
0D01 00 00 7F 00 dw   00000h,07F00h,07F80h,061C0h,060C0h,061C0h,07FC0h,07F80h ;01DCh "R"
0D11 7C 00 6E 00 dw   07C00h,06E00h,06700h,06380h,061C0h,060C0h,00000h,00000h
0D21 00 00 1F 00 dw   00000h,01F00h,03F80h,071C0h,060C0h,07000h,03F00h,01F80h ;01DDh "S"
0D31 01 C0 00 C0 dw   001C0h,000C0h,060C0h,071C0h,03F80h,01F00h,00000h,00000h
0D41 00 00 3F C0 dw   00000h,03FC0h,03FC0h,00600h,00600h,00600h,00600h,00600h ;01DEh "T"
0D51 06 00 06 00 dw   00600h,00600h,00600h,00600h,00600h,00600h,00000h,00000h
0D61 00 00 60 C0 dw   00000h,060C0h,060C0h,060C0h,060C0h,060C0h,060C0h,060C0h ;01DFh "U"
0D71 60 C0 60 C0 dw   060C0h,060C0h,060C0h,071C0h,03F80h,01F00h,00000h,00000h
0D81 00 00 60 C0 dw   00000h,060C0h,060C0h,060C0h,060C0h,060C0h,060C0h,060C0h ;01E0h "V"
0D91 60 C0 71 C0 dw   060C0h,071C0h,03B80h,01F00h,00E00h,00400h,00000h,00000h
0DA1 00 00 60 C0 dw   00000h,060C0h,060C0h,060C0h,060C0h,060C0h,060C0h,060C0h ;01E1h "W"
0DB1 64 C0 6E C0 dw   064C0h,06EC0h,07FC0h,07BC0h,071C0h,060C0h,00000h,00000h
0DC1 00 00 71 C0 dw   00000h,071C0h,071C0h,03B80h,03B80h,01F00h,01F00h,00E00h ;01E2h "X"
0DD1 1F 00 1F 00 dw   01F00h,01F00h,03F80h,03B80h,071C0h,071C0h,00000h,00000h
0DE1 00 00 70 E0 dw   00000h,070E0h,039C0h,01F80h,00F00h,00600h,00600h,00600h ;01E3h "Y"
0DF1 06 00 06 00 dw   00600h,00600h,00600h,00600h,00600h,00600h,00000h,00000h
0E01 00 00 7F C0 dw   00000h,07FC0h,07FC0h,003C0h,00380h,00700h,00700h,00E00h ;01E4h "Z"
0E11 0E 00 1C 00 dw   00E00h,01C00h,01C00h,03800h,07FC0h,07FC0h,00000h,00000h
0E21 00 00 00 00 dw   00000h,00000h,00600h,00000h,03FC0h,030C0h,030C0h,00180h ;01E5h
0E31 03 00 06 00 dw   00300h,00600h,00C00h,01800h,030C0h,03FC0h,00000h,00000h
0E41 00 00 00 00 dw   00000h,00000h,00300h,00600h,01F80h,031C0h,030C0h,03000h ;01E6h
0E51 1C 00 07 80 dw   01C00h,00780h,000C0h,030C0h,038C0h,01F80h,00000h,00000h
0E61 00 00 00 00 dw   00000h,00000h,00180h,00300h,00F80h,019C0h,030C0h,03000h ;01E7h
0E71 30 00 30 00 dw   03000h,03000h,03000h,030C0h,018C0h,00F80h,00000h,00000h
0E81 00 00 00 00 dw   00000h,00000h,00180h,00300h,038F0h,01860h,01C60h,01E60h ;01E8h
0E91 1B 60 19 E0 dw   01B60h,019E0h,018E0h,01860h,01860h,03C60h,00000h,00000h
0EA1 00 00 00 00 dw   00000h,00000h,00000h,00000h,03C00h,01800h,01E00h,01C00h ;01E9h
0EB1 18 00 38 00 dw   01800h,03800h,01800h,01860h,018C0h,03FC0h,00000h,00000h
0EC1 00 00 00 00 dw   00000h,00000h,00600h,00C00h,07F80h,06180h,06180h,00300h ;01EAh
0ED1 06 00 0C 00 dw   00600h,00C00h,01800h,03000h,06180h,07F80h,00000h,00000h
0EE1 00 00 00 00 dw   00000h,00000h,00000h,00000h,03FC0h,018C0h,01800h,01980h ;01EBh
0EF1 1F 80 19 80 dw   01F80h,01980h,01800h,01800h,018C0h,03FC0h,00300h,001C0h
0F01 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00600h,00600h,00F00h ;01ECh
0F11 0D 80 0F 80 dw   00D80h,00F80h,018C0h,018C0h,039E0h,00000h,00000h,00000h
0F21 00 00 00 00 dw   00000h,00000h,00000h,00000h,03FC0h,018C0h,01800h,01800h ;01EDh
0F31 1F 80 18 C0 dw   01F80h,018C0h,018C0h,018C0h,03F80h,00000h,00000h,00000h
0F41 00 00 00 00 dw   00000h,00000h,00000h,00000h,03F80h,018C0h,018C0h,018C0h ;01EEh
0F51 1F 80 18 C0 dw   01F80h,018C0h,018C0h,018C0h,03F80h,00000h,00000h,00000h
0F61 00 00 00 00 dw   00000h,00000h,00000h,00000h,03FC0h,018C0h,01800h,01800h ;01EFh
0F71 18 00 18 00 dw   01800h,01800h,01800h,01800h,03C00h,00000h,00000h,00000h
0F81 00 00 00 00 dw   00000h,00000h,00000h,00000h,01FE0h,00CC0h,00CC0h,00CC0h ;01F0h
0F91 0C C0 0C C0 dw   00CC0h,00CC0h,00CC0h,018C0h,03FE0h,03060h,00000h,00000h
0FA1 00 00 00 00 dw   00000h,00000h,00000h,00000h,03FE0h,01860h,01800h,01980h ;01F1h
0FB1 1F 80 19 80 dw   01F80h,01980h,01860h,01860h,03FE0h,00000h,00000h,00000h
0FC1 00 00 00 00 dw   00000h,00000h,00000h,00000h,01F80h,01CC0h,018C0h,000C0h ;01F2h
0FD1 07 80 00 C0 dw   00780h,000C0h,018C0h,018C0h,00F80h,00000h,00000h,00000h
0FE1 00 00 00 00 dw   00000h,00000h,00000h,00000h,03DE0h,018C0h,018C0h,019C0h ;01F3h
0FF1 1B C0 1E C0 dw   01BC0h,01EC0h,01CC0h,018C0h,03DE0h,00000h,00000h,00000h
1001 00 00 00 00 dw   00000h,00000h,00000h,00D80h,00700h,03DE0h,018C0h,019C0h ;01F4h
1011 1B C0 1E C0 dw   01BC0h,01EC0h,01CC0h,018C0h,03DE0h,00000h,00000h,00000h
1021 00 00 00 00 dw   00000h,00000h,00000h,00000h,03D80h,01BC0h,01B00h,01B00h ;01F5h
1031 1E 00 1B 00 dw   01E00h,01B00h,01B00h,01BC0h,03D80h,00000h,00000h,00000h
1041 00 00 00 00 dw   00000h,00000h,00000h,00000h,01FE0h,00CC0h,00CC0h,00CC0h ;01F6h
1051 0C C0 0C C0 dw   00CC0h,00CC0h,00CC0h,03CC0h,039E0h,00000h,00000h,00000h
1061 00 00 00 00 dw   00000h,00000h,00000h,00000h,070E0h,030C0h,039C0h,039C0h ;01F7h
1071 3F C0 3F C0 dw   03FC0h,03FC0h,036C0h,036C0h,079E0h,00000h,00000h,00000h
1081 00 00 00 00 dw   00000h,00000h,00000h,00000h,03DE0h,018C0h,018C0h,018C0h ;01F8h
1091 1F C0 18 C0 dw   01FC0h,018C0h,018C0h,018C0h,03DE0h,00000h,00000h,00000h
10A1 00 00 00 00 dw   00000h,00000h,00000h,00000h,03FE0h,018C0h,018C0h,018C0h ;01F9h
10B1 18 C0 18 C0 dw   018C0h,018C0h,018C0h,018C0h,03DE0h,00000h,00000h,00000h
10C1 00 00 00 00 dw   00000h,00000h,00000h,00000h,03DE0h,018C0h,01980h,00D80h ;01FAh
10D1 0F 00 07 00 dw   00F00h,00700h,00600h,03600h,01C00h,00000h,00000h,00000h
10E1 00 00 00 00 dw   00000h,00000h,00000h,00000h,03DE0h,018C0h,00D80h,00780h ;01FBh
10F1 03 00 07 00 dw   00300h,00700h,00D80h,018C0h,03DE0h,00000h,00000h,00000h
1101 00 00 00 00 dw   00000h,00000h,00000h,00000h,03DE0h,018C0h,018C0h,018C0h ;01FCh
1111 18 C0 18 C0 dw   018C0h,018C0h,018C0h,018C0h,03FF0h,00030h,00000h,00000h
1121 00 00 00 00 dw   00000h,00000h,00000h,00000h,03DE0h,018C0h,018C0h,018C0h ;01FDh
1131 19 C0 0F C0 dw   019C0h,00FC0h,000C0h,000C0h,001E0h,00000h,00000h,00000h
1141 00 00 00 00 dw   00000h,00000h,00000h,00000h,0F7F0h,06330h,06330h,06330h ;01FEh
1151 63 30 63 30 dw   06330h,06330h,06330h,06330h,0FFF0h,00000h,00000h,00000h
1161 00 00 00 00 dw   00000h,00000h,00000h,00000h,07FF0h,03330h,03330h,03330h ;01FFh
1171 33 30 33 30 dw   03330h,03330h,03330h,03330h,07FF0h,00010h,00000h,00000h
1181 00 00 00 00 dw   00000h,00000h,00000h,00000h,07E00h,06C00h,00C00h,00C00h ;0200h
1191 0F C0 0C 60 dw   00FC0h,00C60h,00C60h,00C60h,01FC0h,00000h,00000h,00000h
11A1 00 00 00 00 dw   00000h,00000h,00000h,00000h,078F0h,03060h,03060h,03060h ;0201h
11B1 3F 60 31 E0 dw   03F60h,031E0h,031E0h,031E0h,07FF0h,00000h,00000h,00000h
11C1 00 00 00 00 dw   00000h,00000h,00000h,00000h,01F00h,01D80h,018C0h,000C0h ;0202h
11D1 07 C0 00 C0 dw   007C0h,000C0h,018C0h,01980h,00F00h,00000h,00000h,00000h
11E1 00 00 00 00 dw   00000h,00000h,00000h,00000h,0F3C0h,06660h,06C30h,06C30h ;0203h
11F1 7C 30 6C 30 dw   07C30h,06C30h,06C30h,06660h,0F3C0h,00000h,00000h,00000h
1201 00 00 00 00 dw   00000h,00000h,00000h,00000h,00FE0h,018C0h,018C0h,018C0h ;0204h
1211 0C C0 07 C0 dw   00CC0h,007C0h,00CC0h,03CC0h,019E0h,00000h,00000h,00000h
1221 00 00 00 00 dw   00000h,00000h,00000h,01B00h,03FC0h,018C0h,01800h,01B00h ;0205h
1231 1F 00 1B 00 dw   01F00h,01B00h,01800h,018C0h,03FC0h,00000h,00000h,00000h
1241 00 00 00 00 dw   00000h,00000h,00000h,00000h,06F60h,036C0h,036C0h,036C0h ;0206h
1251 1F 80 36 C0 dw   01F80h,036C0h,036C0h,036C0h,06F60h,00000h,00000h,00000h
1261 00 00 00 00 dw   00000h,00000h,00000h,00000h,00F00h,01980h,030C0h,030C0h ;0207h
1271 30 C0 30 C0 dw   030C0h,030C0h,030C0h,01980h,00F00h,00000h,00000h,00000h
1281 00 00 00 00 dw   00000h,00000h,00000h,00000h,03F80h,018C0h,018C0h,018C0h ;0208h
1291 1F 80 18 00 dw   01F80h,01800h,01800h,01800h,03C00h,00000h,00000h,00000h
12A1 00 00 00 00 dw   00000h,00000h,00000h,00000h,00FC0h,019C0h,030C0h,030C0h ;0209h
12B1 30 00 30 00 dw   03000h,03000h,030C0h,01980h,00F00h,00000h,00000h,00000h
12C1 00 00 00 00 dw   00000h,00000h,00000h,00000h,03FC0h,036C0h,00600h,00600h ;020Ah
12D1 06 00 06 00 dw   00600h,00600h,00600h,00600h,00F00h,00000h,00000h,00000h
12E1 00 00 00 00 dw   00000h,00000h,00000h,00000h,00F00h,00600h,03FC0h,06660h ;020Bh
12F1 66 60 66 60 dw   06660h,06660h,03FC0h,00600h,00F00h,00000h,00000h,00000h
1301 00 00 00 00 dw   00000h,00000h,00000h,00000h,03C00h,01800h,01800h,01800h ;020Ch
1311 1F 80 18 C0 dw   01F80h,018C0h,018C0h,018C0h,03F80h,00000h,00000h,00000h
1321 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,00000h ;020Dh
1331 00 00 00 00 dw   00000h,00000h,00C00h,00C00h,00000h,00000h,00000h,00000h
1341 00 00 00 00 dw   00000h,00000h,00000h,00000h,00C00h,00C00h,00000h,00000h ;020Eh
1351 00 00 0C 00 dw   00000h,00C00h,00C00h,00000h,00000h,00000h,00000h,00000h
1361 00 00 00 00 dw   00000h,00000h,00000h,03E00h,06300h,06300h,00600h,00C00h ;020Fh
1371 0C 00 00 00 dw   00C00h,00000h,00C00h,00C00h,00000h,00000h,00000h,00000h
1381 00 00 00 00 dw   00000h,00000h,00000h,03000h,07800h,07800h,07800h,03000h ;0210h
1391 30 00 00 00 dw   03000h,00000h,03000h,03000h,00000h,00000h,00000h,00000h
13A1 00 C0 81 C0 dw   000C0h,081C0h,0C350h,06670h,03C60h,0F8C0h,0CDC0h,0CF40h ;0211h
13B1 CF 40 CD C0 dw   0CF40h,0CDC0h,0F8C0h,03C60h,06670h,0C350h,081C0h,000C0h
13C1 0C 00 07 00 dw   00C00h,00700h,03180h,038C0h,01C60h,0C660h,0E660h,02660h ;0212h
13D1 26 60 E6 60 dw   02660h,0E660h,0C660h,01C60h,038C0h,03180h,00700h,00C00h
13E1 0C 00 06 00 dw   00C00h,00600h,00000h,00600h,00600h,00600h,00F00h,00F00h ;0213h
13F1 19 80 1F 80 dw   01980h,01F80h,030C0h,030C0h,079E0h,00000h,00000h,00000h
1401 03 00 06 00 dw   00300h,00600h,00000h,00600h,00600h,00600h,00F00h,00F00h ;0214h
1411 19 80 1F 80 dw   01980h,01F80h,030C0h,030C0h,079E0h,00000h,00000h,00000h
1421 02 00 05 00 dw   00200h,00500h,00880h,00600h,00600h,00600h,00F00h,00F00h ;0215h
1431 19 80 1F 80 dw   01980h,01F80h,030C0h,030C0h,079E0h,00000h,00000h,00000h
1441 0C 80 13 00 dw   00C80h,01300h,00000h,00600h,00600h,00600h,00F00h,00F00h ;0216h
1451 19 80 1F 80 dw   01980h,01F80h,030C0h,030C0h,079E0h,00000h,00000h,00000h
1461 0D 80 0D 80 dw   00D80h,00D80h,00000h,00600h,00600h,00600h,00F00h,00F00h ;0217h
1471 19 80 1F 80 dw   01980h,01F80h,030C0h,030C0h,079E0h,00000h,00000h,00000h
1481 06 00 09 00 dw   00600h,00900h,00600h,00000h,00600h,00600h,00F00h,00F00h ;0218h
1491 19 80 1F 80 dw   01980h,01F80h,030C0h,030C0h,079E0h,00000h,00000h,00000h
14A1 00 00 00 00 dw   00000h,00000h,00000h,00FC0h,01EC0h,01600h,02600h,026C0h ;0219h
14B1 67 C0 7E C0 dw   067C0h,07EC0h,06600h,066C0h,067C0h,00000h,00000h,00000h
14C1 0C 00 06 00 dw   00C00h,00600h,00000h,03FC0h,018C0h,01800h,01980h,01F80h ;021Ah
14D1 19 80 18 00 dw   01980h,01800h,01800h,018C0h,03FC0h,00000h,00000h,00000h
14E1 03 00 06 00 dw   00300h,00600h,00000h,03FC0h,018C0h,01800h,01980h,01F80h ;021Bh
14F1 19 80 18 00 dw   01980h,01800h,01800h,018C0h,03FC0h,00000h,00000h,00000h
1501 06 00 09 00 dw   00600h,00900h,00000h,03FC0h,018C0h,01800h,01980h,01F80h ;021Ch
1511 19 80 18 00 dw   01980h,01800h,01800h,018C0h,03FC0h,00000h,00000h,00000h
1521 19 80 19 80 dw   01980h,01980h,00000h,03FC0h,018C0h,01800h,01980h,01F80h ;021Dh
1531 19 80 18 00 dw   01980h,01800h,01800h,018C0h,03FC0h,00000h,00000h,00000h
1541 0C 00 06 00 dw   00C00h,00600h,00000h,079E0h,030C0h,030C0h,030C0h,030C0h ;021Eh
1551 30 C0 30 C0 dw   030C0h,030C0h,030C0h,030C0h,01F80h,00000h,00000h,00000h
1561 02 00 05 00 dw   00200h,00500h,00000h,079E0h,030C0h,030C0h,030C0h,030C0h ;021Fh
1571 30 C0 30 C0 dw   030C0h,030C0h,030C0h,030C0h,01F80h,00000h,00000h,00000h
1581 03 00 06 00 dw   00300h,00600h,00000h,079E0h,030C0h,030C0h,030C0h,030C0h ;0220h
1591 30 C0 30 C0 dw   030C0h,030C0h,030C0h,030C0h,01F80h,00000h,00000h,00000h
15A1 18 C0 18 C0 dw   018C0h,018C0h,00000h,079E0h,030C0h,030C0h,030C0h,030C0h ;0221h
15B1 30 C0 30 C0 dw   030C0h,030C0h,030C0h,030C0h,01F80h,00000h,00000h,00000h
15C1 03 00 06 00 dw   00300h,00600h,00000h,079E0h,030C0h,01980h,01980h,00F00h ;0222h
15D1 06 00 06 00 dw   00600h,00600h,00600h,00600h,00F00h,00000h,00000h,00000h
15E1 00 00 00 00 dw   00000h,00000h,00000h,03C00h,01800h,01F80h,018C0h,018C0h ;0223h
15F1 18 C0 1F 80 dw   018C0h,01F80h,01800h,01800h,01800h,03C00h,00000h,00000h
1601 00 00 00 00 dw   00000h,00000h,01E00h,03300h,03300h,03300h,03600h,03300h ;0224h
1611 33 00 33 00 dw   03300h,03300h,03300h,03600h,03000h,00000h,00000h,00000h
1621 30 00 18 00 dw   03000h,01800h,00000h,01E00h,00C00h,00C00h,00C00h,00C00h ;0225h
1631 0C 00 0C 00 dw   00C00h,00C00h,00C00h,00C00h,01E00h,00000h,00000h,00000h
1641 0C 00 18 00 dw   00C00h,01800h,00000h,01E00h,00C00h,00C00h,00C00h,00C00h ;0226h
1651 0C 00 0C 00 dw   00C00h,00C00h,00C00h,00C00h,01E00h,00000h,00000h,00000h
1661 0C 00 12 00 dw   00C00h,01200h,00000h,01E00h,00C00h,00C00h,00C00h,00C00h ;0227h
1671 0C 00 0C 00 dw   00C00h,00C00h,00C00h,00C00h,01E00h,00000h,00000h,00000h
1681 66 00 66 00 dw   06600h,06600h,00000h,03C00h,01800h,01800h,01800h,01800h ;0228h
1691 18 00 18 00 dw   01800h,01800h,01800h,01800h,03C00h,00000h,00000h,00000h
16A1 00 00 00 00 dw   00000h,00000h,00000h,03F00h,01980h,018C0h,018C0h,03CC0h ;0229h
16B1 18 C0 18 C0 dw   018C0h,018C0h,018C0h,01980h,03F00h,00000h,00000h,00000h
16C1 32 00 4C 00 dw   03200h,04C00h,00000h,03C00h,01800h,01800h,01800h,01800h ;022Ah
16D1 18 00 18 00 dw   01800h,01800h,01800h,01800h,03C00h,00000h,00000h,00000h
16E1 18 00 0C 00 dw   01800h,00C00h,00000h,01F00h,03180h,060C0h,060C0h,060C0h ;022Bh
16F1 60 C0 60 C0 dw   060C0h,060C0h,060C0h,03180h,01F00h,00000h,00000h,00000h
1701 06 00 0C 00 dw   00600h,00C00h,00000h,01F00h,03180h,060C0h,060C0h,060C0h ;022Ch
1711 60 C0 60 C0 dw   060C0h,060C0h,060C0h,03180h,01F00h,00000h,00000h,00000h
1721 04 00 0A 00 dw   00400h,00A00h,00000h,01F00h,03180h,060C0h,060C0h,060C0h ;022Dh
1731 60 C0 60 C0 dw   060C0h,060C0h,060C0h,03180h,01F00h,00000h,00000h,00000h
1741 0C 80 13 00 dw   00C80h,01300h,00000h,01F00h,03180h,060C0h,060C0h,060C0h ;022Eh
1751 60 C0 60 C0 dw   060C0h,060C0h,060C0h,03180h,01F00h,00000h,00000h,00000h
1761 1B 00 1B 00 dw   01B00h,01B00h,00000h,01F00h,03180h,060C0h,060C0h,060C0h ;022Fh
1771 60 C0 60 C0 dw   060C0h,060C0h,060C0h,03180h,01F00h,00000h,00000h,00000h
1781 00 00 00 00 dw   00000h,00000h,00020h,01F40h,03180h,061C0h,061C0h,062C0h ;0230h
1791 64 C0 68 C0 dw   064C0h,068C0h,070C0h,03180h,05F00h,08000h,00000h,00000h
17A1 00 00 00 00 dw   00000h,00000h,00000h,07000h,03000h,03F00h,03180h,03180h ;0231h
17B1 31 80 31 80 dw   03180h,03180h,03F00h,03000h,03000h,03000h,00000h,00000h
17C1 00 00 09 00 dw   00000h,00900h,00600h,00000h,01F00h,03180h,03180h,01800h ;0232h
17D1 0E 00 03 00 dw   00E00h,00300h,03180h,03180h,01F00h,00000h,00000h,00000h
17E1 00 00 00 00 dw   00000h,00000h,00000h,00000h,0F1E0h,060C0h,060C0h,060C0h ;0233h
17F1 7E C0 62 C0 dw   07EC0h,062C0h,062C0h,062C0h,0FFE0h,00000h,00000h,00000h
1801 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,00000h ;0234h
1811 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,0DB60h,0DB60h
1821 00 00 C0 00 dw   00000h,0C000h,0C000h,0C000h,0C000h,0C000h,0C000h,0C000h ;0235h
1831 C0 00 C0 00 dw   0C000h,0C000h,0C000h,0C000h,0C000h,00000h,0DB60h,0DB60h
1841 00 00 D8 00 dw   00000h,0D800h,0D800h,0D800h,0D800h,0D800h,0D800h,0D800h ;0236h
1851 D8 00 D8 00 dw   0D800h,0D800h,0D800h,0D800h,0D800h,00000h,0DB60h,0DB60h
1861 00 00 DB 00 dw   00000h,0DB00h,0DB00h,0DB00h,0DB00h,0DB00h,0DB00h,0DB00h ;0237h
1871 DB 00 DB 00 dw   0DB00h,0DB00h,0DB00h,0DB00h,0DB00h,00000h,0DB60h,0DB60h
1881 00 00 DB 60 dw   00000h,0DB60h,0DB60h,0DB60h,0DB60h,0DB60h,0DB60h,0DB60h ;0238h
1891 DB 60 DB 60 dw   0DB60h,0DB60h,0DB60h,0DB60h,0DB60h,00000h,0DB60h,0DB60h
18A1 00 00 00 00 dw   00000h,00000h,00000h,01800h,027E0h,04010h,0C3E0h,0C200h ;0239h
18B1 C2 00 C2 00 dw   0C200h,0C200h,0C400h,02800h,01000h,00000h,00000h,00000h
18C1 00 00 00 00 dw   00000h,00000h,00000h,00F80h,019C0h,030C0h,03000h,03000h ;023Ah
18D1 30 00 30 00 dw   03000h,03000h,030C0h,018C0h,00F80h,00200h,00100h,00700h
18E1 0C 80 13 00 dw   00C80h,01300h,00000h,071E0h,030C0h,038C0h,03CC0h,036C0h ;023Bh
18F1 33 C0 31 C0 dw   033C0h,031C0h,030C0h,030C0h,078C0h,00000h,00000h,00000h
1901 00 00 00 00 dw   00000h,00000h,01B00h,00E00h,01E00h,00300h,01F80h,03180h ;023Ch
1911 31 80 31 80 dw   03180h,03180h,03180h,03180h,01F00h,00000h,00000h,00000h
1921 00 00 00 00 dw   00000h,00000h,03800h,01800h,01F00h,01980h,01980h,01980h ;023Dh
1931 19 80 1F 00 dw   01980h,01F00h,01800h,01800h,01800h,03C00h,00000h,00000h
1941 00 00 00 00 dw   00000h,00000h,00000h,00000h,037C0h,06EC0h,06640h,06680h ;023Eh
1951 67 80 66 80 dw   06780h,06680h,06640h,06EC0h,037C0h,00000h,00000h,00000h
1961 11 00 0A 00 dw   01100h,00A00h,00400h,03FC0h,030C0h,030C0h,00180h,00300h ;023Fh
1971 06 00 0C 00 dw   00600h,00C00h,01800h,030C0h,03FC0h,00000h,00000h,00000h
1981 19 80 19 80 dw   01980h,01980h,00000h,079E0h,030C0h,01980h,01980h,00F00h ;0240h
1991 06 00 06 00 dw   00600h,00600h,00600h,00600h,00F00h,00000h,00000h,00000h
19A1 00 00 00 00 dw   00000h,00000h,00000h,06000h,07800h,07E00h,07F80h,07FE0h ;0241h
19B1 7F 80 7E 00 dw   07F80h,07E00h,07800h,06000h,00000h,00000h,00000h,00000h
19C1 00 00 00 00 dw   00000h,00000h,00000h,00060h,001E0h,007E0h,01FE0h,07FE0h ;0242h
19D1 1F E0 07 E0 dw   01FE0h,007E0h,001E0h,00060h,00000h,00000h,00000h,00000h
19E1 00 00 02 00 dw   00000h,00200h,00400h,00F80h,01080h,02100h,01FE0h,01220h ;0243h
19F1 12 20 1F E0 dw   01220h,01FE0h,01000h,01000h,01010h,01FE0h,00000h,00000h
1A01 00 00 02 00 dw   00000h,00200h,07FF0h,00000h,01FC0h,01040h,01FC0h,00000h ;0244h
1A11 7F F0 40 10 dw   07FF0h,04010h,00F80h,00880h,01090h,060F0h,00000h,00000h
1A21 00 00 00 20 dw   00000h,00020h,00020h,07C20h,00420h,00BF0h,02820h,03920h ;0245h
1A31 11 20 19 20 dw   01120h,01920h,02420h,04420h,000A0h,00060h,00000h,00000h
1A41 00 00 21 00 dw   00000h,02100h,02100h,02100h,02130h,021C0h,03D00h,02100h ;0246h
1A51 21 00 21 00 dw   02100h,02100h,02100h,02D10h,03120h,061C0h,00000h,00000h
1A61 00 00 00 00 dw   00000h,00000h,01800h,0E7E0h,0A920h,0FD20h,07360h,0A920h ;0247h
1A71 FB 60 AD A0 dw   0FB60h,0ADA0h,0F920h,0A920h,0FB60h,00000h,00000h,00000h
1A81 00 00 00 00 dw   00000h,00000h,02100h,0F900h,047E0h,06100h,0A7E0h,0FA00h ;0248h
1A91 23 C0 38 40 dw   023C0h,03840h,0E080h,02300h,02080h,00000h,00000h,00000h
1AA1 00 00 00 00 dw   00000h,00000h,09FE0h,04200h,00F80h,00480h,0C480h,05FE0h ;0249h
1AB1 40 00 4F C0 dw   04000h,04FC0h,05840h,06840h,04FC0h,00000h,00000h,00000h
1AC1 00 00 00 00 dw   00000h,00000h,00400h,0FFE0h,00000h,03F80h,00000h,03F80h ;024Ah
1AD1 00 00 3F 80 dw   00000h,03F80h,02080h,02080h,03F80h,00000h,00000h,00000h
1AE1 00 00 00 00 dw   00000h,00000h,03F80h,02080h,02080h,03F80h,00000h,0FFE0h ;024Bh
1AF1 10 00 1F 80 dw   01000h,01F80h,00080h,00080h,00700h,00000h,00000h,00000h
1B01 00 00 00 00 dw   00000h,00000h,02100h,07BE0h,09480h,02FC0h,05040h,04F40h ;024Ch
1B11 49 40 4F 40 dw   04940h,04F40h,04940h,04F40h,040C0h,00000h,00000h,00000h
1B21 00 00 02 00 dw   00000h,00200h,00200h,00200h,03FE0h,02220h,02220h,02220h ;024Dh
1B31 3F E0 22 20 dw   03FE0h,02220h,00200h,00200h,00200h,00200h,00000h,00000h
1B41 00 00 08 00 dw   00000h,00800h,00400h,00000h,07FF0h,01080h,01080h,00880h ;024Eh
1B51 09 00 07 00 dw   00900h,00700h,00600h,00980h,01040h,06030h,00000h,00000h
1B61 00 00 00 00 dw   00000h,00000h,04FE0h,02920h,00BA0h,00920h,0CFE0h,04820h ;024Fh
1B71 4B A0 5A A0 dw   04BA0h,05AA0h,06BA0h,04820h,010E0h,00000h,00000h,00000h
1B81 00 00 21 20 dw   00000h,02120h,027F0h,02120h,07BF0h,02210h,023F0h,03210h ;0250h
1B91 6B F0 20 80 dw   06BF0h,02080h,023F0h,02140h,02220h,02410h,00000h,00000h
1BA1 00 00 01 00 dw   00000h,00100h,00140h,00140h,07FF0h,00100h,00100h,07D00h ;0251h
1BB1 10 80 10 80 dw   01080h,01080h,010C0h,01240h,03C50h,04030h,00000h,00000h
1BC1 00 00 00 00 dw   00000h,00000h,07FC0h,00400h,00400h,00400h,0FFE0h,00A00h ;0252h
1BD1 0A 00 12 00 dw   00A00h,01200h,01220h,02220h,0C3E0h,00000h,00000h,00000h
1BE1 00 00 00 00 dw   00000h,00000h,02100h,03FE0h,02000h,04FC0h,04000h,0CFC0h ;0253h
1BF1 40 00 4F C0 dw   04000h,04FC0h,04840h,04FC0h,04840h,00000h,00000h,00000h
1C01 00 00 00 00 dw   00000h,00000h,01100h,01100h,02FE0h,02100h,06300h,0A580h ;0254h
1C11 29 40 31 20 dw   02940h,03120h,02FC0h,02100h,02100h,00000h,00000h,00000h
1C21 00 00 08 00 dw   00000h,00800h,01FF0h,03000h,07FE0h,05020h,01FE0h,01020h ;0255h
1C31 1F E0 10 00 dw   01FE0h,01000h,03FE0h,04840h,00780h,03DF0h,00000h,00000h
1C41 00 00 08 00 dw   00000h,00800h,01100h,03080h,027F0h,06000h,06820h,02440h ;0256h
1C51 24 40 24 40 dw   02440h,02440h,02280h,02280h,02FF0h,02000h,00000h,00000h
1C61 00 00 02 00 dw   00000h,00200h,00100h,03FF0h,02440h,03FF0h,02440h,027C0h ;0257h
1C71 20 00 27 C0 dw   02000h,027C0h,04280h,04300h,04280h,05C70h,00000h,00000h
1C81 00 00 00 00 dw   00000h,00000h,04FE0h,02900h,00BE0h,0AA20h,06BE0h,02A20h ;0258h
1C91 4B E0 50 80 dw   04BE0h,05080h,0D2C0h,064A0h,04BA0h,00000h,00000h,00000h
1CA1 00 00 00 00 dw   00000h,00000h,00000h,04FE0h,0F200h,007C0h,0F240h,00240h ;0259h
1CB1 FF E0 00 00 dw   0FFE0h,00000h,0F7C0h,09440h,09440h,0F7C0h,00000h,00000h
1CC1 00 00 00 00 dw   00000h,00000h,007C0h,0F440h,09440h,097C0h,0F440h,09440h ;025Ah
1CD1 97 C0 F4 40 dw   097C0h,0F440h,00440h,00840h,031C0h,00000h,00000h,00000h
1CE1 00 00 00 00 dw   00000h,00000h,00000h,00000h,01E00h,00200h,00400h,00F00h ;025Bh
1CF1 10 80 2C 80 dw   01080h,02C80h,01300h,00E00h,00000h,00000h,00000h,00000h
1D01 00 00 00 00 dw   00000h,00000h,00000h,00400h,00800h,00500h,01E00h,00100h ;025Ch
1D11 0F 80 10 00 dw   00F80h,01000h,01000h,00F80h,00000h,00000h,00000h,00000h
1D21 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00380h,00C80h ;025Dh
1D31 00 80 00 80 dw   00080h,00080h,00380h,01C00h,00000h,00000h,00000h,00000h
1D41 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00800h,00400h,00420h ;025Eh
1D51 00 40 00 80 dw   00040h,00080h,01300h,00C00h,00000h,00000h,00000h,00000h
1D61 00 00 00 00 dw   00000h,00000h,00000h,00000h,00800h,00800h,00C00h,00A00h ;025Fh
1D71 09 00 08 00 dw   00900h,00800h,00800h,00800h,00000h,00000h,00000h,00000h
1D81 00 00 00 00 dw   00000h,00000h,00000h,00000h,00E00h,03000h,00E00h,07200h ;0260h
1D91 02 00 04 00 dw   00200h,00400h,00800h,03000h,00000h,00000h,00000h,00000h
1DA1 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00E00h,03200h,00400h ;0261h
1DB1 04 00 0A 00 dw   00400h,00A00h,01100h,06000h,00000h,00000h,00000h,00000h
1DC1 00 00 00 00 dw   00000h,00000h,00E20h,0F440h,05480h,02B00h,01020h,0FE40h ;0262h
1DD1 11 80 38 20 dw   01180h,03820h,05440h,09180h,01600h,00000h,00000h,00000h
1DE1 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,01100h,01080h ;0263h
1DF1 10 40 12 C0 dw   01040h,012C0h,01400h,00C00h,00000h,00000h,00000h,00000h
1E01 00 00 00 00 dw   00000h,00000h,03FC0h,02040h,02040h,02040h,03FC0h,02040h ;0264h
1E11 20 40 20 40 dw   02040h,02040h,02040h,03FC0h,02040h,00000h,00000h,00000h
1E21 00 00 00 00 dw   00000h,00000h,00400h,00440h,0FFE0h,00400h,00E00h,01500h ;0265h
1E31 24 80 44 40 dw   02480h,04440h,0BFA0h,00400h,00400h,00000h,00000h,00000h
1E41 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00800h,00B80h,00C80h ;0266h
1E51 39 00 08 00 dw   03900h,00800h,00800h,00780h,00000h,00000h,00000h,00000h
1E61 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,083E0h ;0267h
1E71 7C 00 00 00 dw   07C00h,00000h,00000h,00000h,00000h,00000h,00000h,00000h
1E81 00 00 00 00 dw   00000h,00000h,00000h,00100h,00900h,00900h,00900h,00900h ;0268h
1E91 01 00 01 00 dw   00100h,00100h,00200h,00400h,00000h,00000h,00000h,00000h
1EA1 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,01480h,00A80h,00100h ;0269h
1EB1 02 00 04 00 dw   00200h,00400h,00800h,00000h,00000h,00000h,00000h,00000h
                main_font_siz equ $-main_font
                ;------------------
;:------------- ;:----------------- GUI data (menues)
                ;------------------
                .macro defdata_menu_stuff
                ;------------------
1EC1 50 6F 77.. txt_PowerOffMenuItem_PowerOff           db 'PowerOffMenuItem_PowerOff',00h
1EDB 4F 73 64.. txt_Osd_PowerOffMenu                    db 'Osd_PowerOffMenu',00h
                ;---
1EEC 50 6F 77.. txt_PowerOnMenuItem_PowerOn             db 'PowerOnMenuItem_PowerOn',00h
1F04 4F 73 64.. txt_Osd_PowerOnMenu                     db 'Osd_PowerOnMenu',00h
                ;---
1F14 52 6F 6F.. txt_RootMenuItem                        db 'RootMenuItem',00h
1F21 4F 73 64.. txt_Osd_RootMenu                        db 'Osd_RootMenu',00h
                ;---
1F2E 53 6F 75.. txt_SourceMenuItem_Source               db 'SourceMenuItem_Source',00h                 ;used 2x
1F44 4F 73 64.. txt_Osd_SourceMenu                      db 'Osd_SourceMenu',00h
                ;---
                .if shuffle_version>=ver11sep2017   ;place here (instead elsewhere)
2186 4F 73 64..   txt_Osd_fMenu                         db 'Osd_fMenu',00h
                .endif
                ;---
1F53 4E 6F 53.. txt_NoSignalMenuItem_NoSignal           db 'NoSignalMenuItem_NoSignal',00h
1F6D 4F 73 64.. txt_Osd_NoSignalMenu                    db 'Osd_NoSignalMenu',00h
                ;---
1F7E 51 75 69.. txt_QuicklyVolumeMenuItem_QuicklyVolume db 'QuicklyVolumeMenuItem_QuicklyVolume',00h
1FA2 4F 73 64.. txt_Osd_QuicklyVolumeMenu               db 'Osd_QuicklyVolumeMenu',00h
                ;---
1FB8 51 75 69.. txt_QuicklyModeMenuItem_QuicklyMode     db 'QuicklyModeMenuItem_QuicklyMode',00h
1FD8 4F 73 64.. txt_Osd_QuicklyModeMenu                 db 'Osd_QuicklyModeMenu',00h
                ;---
1FEC 51 75 69.. txt_QuicklySysMenuItem_QuicklySys       db 'QuicklySysMenuItem_QuicklySys',00h
200A 4F 73 64.. txt_Osd_QuicklySysMenu                  db 'Osd_QuicklySysMenu',00h
                ;---
201D 42 72 69.. txt_BrightnessMenuItem_Brightness       db 'BrightnessMenuItem_Brightness',00h
203B 4F 73 64.. txt_Osd_BrightnessMenu                  db 'Osd_BrightnessMenu',00h
                ;---
204E 43 6F 6E.. txt_ContrastMenuItem_Contrast           db 'ContrastMenuItem_Contrast',00h
2068 4F 73 64.. txt_Osd_ContrastMenu                    db 'Osd_ContrastMenu',00h
                ;---
2079 53 61 74.. txt_SaturationMenuItem_Saturation       db 'SaturationMenuItem_Saturation',00h
2097 4F 73 64.. txt_Osd_SaturationMenu                  db 'Osd_SaturationMenu',00h
                ;---
20AA 54 69 6E.. txt_TintMenuItem_Tint                   db 'TintMenuItem_Tint',00h
20BC 4F 73 64.. txt_Osd_TintMenu                        db 'Osd_TintMenu',00h
                ;---
20C9 4D 6F 64.. txt_ModeMenuItem_Mode                   db 'ModeMenuItem_Mode',00h                     ;used 2x
20DB 4F 73 64.. txt_Osd_SelSourceMenu                   db 'Osd_SelSourceMenu',00h
                ;---
20ED 4F 73 64.. txt_Osd_ModeMenu                        db 'Osd_ModeMenu',00h
                ;---
20FA 48 6F 72.. txt_HorizontalMenuItem_Filp             db 'HorizontalMenuItem_Filp',00h
2112 53 79 73.. txt_SysMenu                             db 'SysMenu',00h
                ;---
211A 4C 61 6E.. txt_LanguageMenuItem_Language           db 'LanguageMenuItem_Language',00h
2134 4F 73 64.. txt_Osd_LanguageMenu                    db 'Osd_LanguageMenu',00h
                ;---
2145 49 52 41.. txt_IRABMenuItem_IRAB                   db 'IRABMenuItem_IRAB',00h
2157 4F 73 64.. txt_Osd_IRABMenu                        db 'Osd_IRABMenu',00h
                ;---
2164 52 65 73.. txt_ResetMenuItem_Reset                 db 'ResetMenuItem_Reset',00h
2178 4F 73 64.. txt_Osd_ResetMenu                       db 'Osd_ResetMenu',00h
                ;---
                .if shuffle_version<ver11sep2017
2186 4F 73 64..   txt_Osd_fMenu                         db 'Osd_fMenu',00h
                .endif
                ;---
2190 46 61 63.. txt_FactoryMenuItem_PIC                 db 'FactoryMenuItem_PIC',00h
21A4 4F 73 64.. txt_Osd_FactoryMenu                     db 'Osd_FactoryMenu',00h
                ;---
21B4 46 61 63.. txt_FactoryPicMenuItem_AC               db 'FactoryPicMenuItem_AC',00h
21CA 46 61 63.. txt_FactoryPicMenuItem_DC               db 'FactoryPicMenuItem_DC',00h
21E0 46 61 63.. txt_FactorySwitchMenuItem_Power         db 'FactorySwitchMenuItem_Power',00h
21FC 46 61 63.. txt_FactoryPicMenuItem_KEYNUM           db 'FactoryPicMenuItem_KEYNUM',00h
2216 46 61 63.. txt_FactoryPicMenuItem_nosignal         db 'FactoryPicMenuItem_nosignal',00h
2232 4F 73 64.. txt_Osd_FactoryPicMenu                  db 'Osd_FactoryPicMenu',00h
                ;---
2245 56 65 72.. txt_VersionMenuItem                     db 'VersionMenuItem',00h
2255 4F 73 64.. txt_Osd_VersionMenu                     db 'Osd_VersionMenu',00h
                ;------------------
                ;keys (as from xlat in "keyboard_xlat_list")
                ;   00h      (none)
                ;   01h      (unused)
                ;   02h      (unused, but exists in xlat list?!) ;\does NOT exist in typekey_NNh_subinfo's
                ;   03h      (unused, but exists in xlat list?!) ;/
                ;   04h      hotkey   QuicklyBrightness ;\
                ;   05h      hotkey   QuicklyContrast   ; not on any keypad
                ;   06h      hotkey   QuicklySaturation ;/
                ; + 07h      minus                      ;\
                ; + 08h      plus                       ; standard 3KEY
                ; + 09h      next_menu/next_item        ;/
                ; + 0Ah      hotkey   QuicklyMode       ;\extended keypads only
                ; + 0Bh      hotkey   QuicklyRotate     ;/
                ;   0Ch      hotkey   QuicklySourceMenu ;-not on any keypad
                ; + 0Dh      hotkey   QuicklySourceMenu ;\extended keypads only
                ; + 0Eh      hotkey   PowerOnOff        ;/
                ;   0Fh..1Eh (unused)
                ;   1Fh      secret.key.combo           ;\key combos
                ;   20h      secret.key.combo           ;/
                ;   21h..FFh (unused)
                ;------------------
                key_quad_PowerOn:
                key_quad_RootMenu:
                key_quad_SourceMenu:
                key_quad_NoSignal:
2265 01 13 09 FF db   01h,ID_func_13h_show_menu         ,09h,0FFh
2269 01 16 0C FF db   01h,ID_func_16h_QuicklySourceMenu ,0Ch,0FFh
226D 01 16 0D FF db   01h,ID_func_16h_QuicklySourceMenu ,0Dh,0FFh
2271 01 20 0A FF db   01h,ID_func_20h_QuicklyMode       ,0Ah,0FFh
2275 01 1B 0E FF db   01h,ID_func_1Bh_PowerOnOff        ,0Eh,0FFh
2279 01 11 0B FF db   01h,ID_func_11h_QuicklyRotate     ,0Bh,0FFh
227D 01 22 04 FF db   01h,ID_func_22h_QuicklyBrightness ,04h,0FFh
2281 01 24 06 FF db   01h,ID_func_24h_QuicklySaturation ,06h,0FFh
2285 01 23 05 FF db   01h,ID_func_23h_QuicklyContrast   ,05h,0FFh
                ;---
                key_quad_PowerOff:
2289 01 00 0C FF db   01h,ID_func_00h_nul               ,0Ch,0FFh
228D 01 00 0D FF db   01h,ID_func_00h_nul               ,0Dh,0FFh
2291 01 1B 0E FF db   01h,ID_func_1Bh_PowerOnOff        ,0Eh,0FFh
                ;---
                key_quad_fMenuSource:
2295 01 2C 09 FF db   01h,ID_func_2Ch_FactoryMenu       ,09h,0FFh ;<--
2299 01 2E 0E FF db   01h,ID_func_2Eh_xxx               ,0Eh,0FFh ;<--  ...Power? display BLUE,SNOW,BLACK (no signal) ?
229D 01 00 07 FF db   01h,ID_func_00h_nul               ,07h,0FFh
22A1 01 00 08 FF db   01h,ID_func_00h_nul               ,08h,0FFh
22A5 01 00 0C FF db   01h,ID_func_00h_nul               ,0Ch,0FFh
22A9 01 00 0D FF db   01h,ID_func_00h_nul               ,0Dh,0FFh
22AD 01 00 0A FF db   01h,ID_func_00h_nul               ,0Ah,0FFh
                ;---
                key_quad_Version:
22B1 03 00 08 FF db   03h,ID_func_00h_nul               ,08h,0FFh
22B5 03 00 07 FF db   03h,ID_func_00h_nul               ,07h,0FFh
22B9 01 02 09 FF db   01h,ID_func_02h_SourceMenu        ,09h,0FFh ;<--
22BD 03 00 0C FF db   03h,ID_func_00h_nul               ,0Ch,0FFh
22C1 01 00 0E FF db   01h,ID_func_00h_nul               ,0Eh,0FFh
22C5 03 00 0A FF db   03h,ID_func_00h_nul               ,0Ah,0FFh
22C9 01 00 0D FF db   01h,ID_func_00h_nul               ,0Dh,0FFh
                ;---
                key_quad_Brightness:
                     ;- - -
                     ;flg func key FF                        ;... ?   ;flg=03h=keyrepeat?
                     ;- - -
22CD 03 0D 08 FF db   03h,ID_func_0Dh_plus              ,08h,0FFh
22D1 03 0E 07 FF db   03h,ID_func_0Eh_minus             ,07h,0FFh
22D5 01 04 09 FF db   01h,ID_func_04h_next_menu         ,09h,0FFh
22D9 01 2D 20 FF db   01h,ID_func_2Dh_fMenuSource       ,ID_event_20h_secret,0FFh  ;\via secret key combos
22DD 01 01 1F FF db   01h,ID_func_01h_Version           ,ID_event_1Fh_secret,0FFh  ;/
22E1 01 00 0C FF db   01h,ID_func_00h_nul               ,0Ch,0FFh ;<-- !!! (not QuicklySourceMenu here)
22E5 01 16 0D FF db   01h,ID_func_16h_QuicklySourceMenu ,0Dh,0FFh
22E9 01 20 0A FF db   01h,ID_func_20h_QuicklyMode       ,0Ah,0FFh
22ED 01 1B 0E FF db   01h,ID_func_1Bh_PowerOnOff        ,0Eh,0FFh
22F1 01 11 0B FF db   01h,ID_func_11h_QuicklyRotate     ,0Bh,0FFh
22F5 01 22 04 FF db   01h,ID_func_22h_QuicklyBrightness ,04h,0FFh
22F9 01 24 06 FF db   01h,ID_func_24h_QuicklySaturation ,06h,0FFh
22FD 01 23 05 FF db   01h,ID_func_23h_QuicklyContrast   ,05h,0FFh
                ;---
                key_quad_Contrast:
                key_quad_Saturation:
                key_quad_Tint:
2301 03 0D 08 FF db   03h,ID_func_0Dh_plus              ,08h,0FFh ;(button +)
2305 03 0E 07 FF db   03h,ID_func_0Eh_minus             ,07h,0FFh ;(button -)
2309 01 04 09 FF db   01h,ID_func_04h_next_menu         ,09h,0FFh
230D 01 16 0C FF db   01h,ID_func_16h_QuicklySourceMenu ,0Ch,0FFh
2311 01 16 0D FF db   01h,ID_func_16h_QuicklySourceMenu ,0Dh,0FFh
2315 01 20 0A FF db   01h,ID_func_20h_QuicklyMode       ,0Ah,0FFh
2319 01 1B 0E FF db   01h,ID_func_1Bh_PowerOnOff        ,0Eh,0FFh
231D 01 11 0B FF db   01h,ID_func_11h_QuicklyRotate     ,0Bh,0FFh
2321 01 22 04 FF db   01h,ID_func_22h_QuicklyBrightness ,04h,0FFh
2325 01 24 06 FF db   01h,ID_func_24h_QuicklySaturation ,06h,0FFh
2329 01 23 05 FF db   01h,ID_func_23h_QuicklyContrast   ,05h,0FFh
                ;---
                key_quad_SelSource:
                key_quad_ModeMenu:
                key_quad_Language:
                key_quad_IR_A_B:
                key_quad_SysMenuXflip:
232D 01 0D 08 FF db   01h,ID_func_0Dh_plus              ,08h,0FFh
2331 01 0E 07 FF db   01h,ID_func_0Eh_minus             ,07h,0FFh
2335 01 04 09 FF db   01h,ID_func_04h_next_menu         ,09h,0FFh
2339 01 16 0C FF db   01h,ID_func_16h_QuicklySourceMenu ,0Ch,0FFh
233D 01 16 0D FF db   01h,ID_func_16h_QuicklySourceMenu ,0Dh,0FFh
2341 01 20 0A FF db   01h,ID_func_20h_QuicklyMode       ,0Ah,0FFh
2345 01 1B 0E FF db   01h,ID_func_1Bh_PowerOnOff        ,0Eh,0FFh
2349 01 11 0B FF db   01h,ID_func_11h_QuicklyRotate     ,0Bh,0FFh
                ;---
                key_quad_Reset:
234D 01 0D 08 FF db   01h,ID_func_0Dh_plus              ,08h,0FFh
2351 01 0E 07 FF db   01h,ID_func_0Eh_minus             ,07h,0FFh
2355 01 19 09 FF db   01h,ID_func_19h_SourceMenu        ,09h,0FFh
2359 01 16 0C FF db   01h,ID_func_16h_QuicklySourceMenu ,0Ch,0FFh
235D 01 16 0D FF db   01h,ID_func_16h_QuicklySourceMenu ,0Dh,0FFh
2361 01 20 0A FF db   01h,ID_func_20h_QuicklyMode       ,0Ah,0FFh
2365 01 1B 0E FF db   01h,ID_func_1Bh_PowerOnOff        ,0Eh,0FFh
2369 01 11 0B FF db   01h,ID_func_11h_QuicklyRotate     ,0Bh,0FFh
                ;---
                key_quad_QuicklyVolume:
236D 03 28 08 FF db   03h,ID_func_28h_volume_plus       ,08h,0FFh
2371 03 29 07 FF db   03h,ID_func_29h_volume_minus      ,07h,0FFh  ;28h/29h = volume keys?  ;func_28h_volume_plus etc.
2375 01 13 09 FF db   01h,ID_func_13h_show_menu         ,09h,0FFh
2379 01 16 0C FF db   01h,ID_func_16h_QuicklySourceMenu ,0Ch,0FFh
237D 01 16 0D FF db   01h,ID_func_16h_QuicklySourceMenu ,0Dh,0FFh
2381 01 20 0A FF db   01h,ID_func_20h_QuicklyMode       ,0Ah,0FFh
2385 01 1B 0E FF db   01h,ID_func_1Bh_PowerOnOff        ,0Eh,0FFh
2389 01 11 0B FF db   01h,ID_func_11h_QuicklyRotate     ,0Bh,0FFh
                ;---
                key_quad_QuicklySys:
238D 01 11 0B FF db   01h,ID_func_11h_QuicklyRotate     ,0Bh,0FFh
2391 01 11 08 FF db   01h,ID_func_11h_QuicklyRotate     ,08h,0FFh
2395 01 11 07 FF db   01h,ID_func_11h_QuicklyRotate     ,07h,0FFh
2399 01 13 09 FF db   01h,ID_func_13h_show_menu         ,09h,0FFh
239D 01 16 0C FF db   01h,ID_func_16h_QuicklySourceMenu ,0Ch,0FFh
23A1 01 16 0D FF db   01h,ID_func_16h_QuicklySourceMenu ,0Dh,0FFh
23A5 01 20 0A FF db   01h,ID_func_20h_QuicklyMode       ,0Ah,0FFh
23A9 01 1B 0E FF db   01h,ID_func_1Bh_PowerOnOff        ,0Eh,0FFh
23AD 01 11 0B FF db   01h,ID_func_11h_QuicklyRotate     ,0Bh,0FFh  ;<-- blah, already defined as so above
                ;---
                key_quad_QuicklyMode:
23B1 01 20 08 FF db   01h,ID_func_20h_QuicklyMode       ,08h,0FFh
23B5 01 20 07 FF db   01h,ID_func_20h_QuicklyMode       ,07h,0FFh
23B9 01 13 09 FF db   01h,ID_func_13h_show_menu         ,09h,0FFh
23BD 01 16 0C FF db   01h,ID_func_16h_QuicklySourceMenu ,0Ch,0FFh
23C1 01 16 0D FF db   01h,ID_func_16h_QuicklySourceMenu ,0Dh,0FFh
23C5 01 20 0A FF db   01h,ID_func_20h_QuicklyMode       ,0Ah,0FFh
23C9 01 1B 0E FF db   01h,ID_func_1Bh_PowerOnOff        ,0Eh,0FFh
23CD 01 11 0B FF db   01h,ID_func_11h_QuicklyRotate     ,0Bh,0FFh
                ;---
                key_quad_FactoryMenu:
23D1 03 00 08 FF db   03h,ID_func_00h_nul               ,08h,0FFh
23D5 03 00 07 FF db   03h,ID_func_00h_nul               ,07h,0FFh
23D9 01 00 0E FF db   01h,ID_func_00h_nul               ,0Eh,0FFh
23DD 01 00 0A FF db   01h,ID_func_00h_nul               ,0Ah,0FFh
23E1 01 00 0C FF db   01h,ID_func_00h_nul               ,0Ch,0FFh
23E5 01 0A 09 FF db   01h,ID_func_0Ah_FactoryPic        ,09h,0FFh
23E9 01 00 0D FF db   01h,ID_func_00h_nul               ,0Dh,0FFh
                ;---
                key_quad_FactoryPic:                     ;used 5x (for all five items)
23ED 03 0D 08 FF db   03h,ID_func_0Dh_plus              ,08h,0FFh
23F1 03 0E 07 FF db   03h,ID_func_0Eh_minus             ,07h,0FFh
23F5 01 07 09 FF db   01h,ID_func_07h_next_item         ,09h,0FFh
                ;------------------
                whatever_unused_tile_numbers:
                ;unused (except by unused functions)
                .if blah_version<ver11sep2017
                  ;16bit words, range 01C0h..024Fh (20x10 words)
                  ;tilenumbers for bitmap? (with 01C0h=blank)?
23F9 01 C0 01 C0   dw   01C0h,01C0h,01C0h,01C0h,01C0h,01C1h,01C2h,01C3h ;\
2409 01 C4 01 C5   dw   01C4h,01C5h,01C6h,01C7h,01C8h,01C9h,01CAh,01CBh ;
2419 01 C0 01 C0   dw   01C0h,01C0h,01C0h,01C0h                         ;/
2421 01 C0 01 C0   dw   01C0h,01C0h,01C0h,01CCh,01CDh,01CEh,01CFh,01D0h ;\
2431 01 D1 01 D2   dw   01D1h,01D2h,01D3h,01D4h,01D5h,01D6h,01D7h,01D8h ;
2441 01 D9 01 C0   dw   01D9h,01C0h,01C0h,01C0h                         ;/
2449 01 C0 01 C0   dw   01C0h,01C0h,01C0h,01DAh,01DBh,01C0h,01DCh,01DDh ;\
2459 01 DE 01 DF   dw   01DEh,01DFh,01E0h,01E1h,01E2h,01E3h,01C0h,01E4h ;
2469 01 E5 01 C0   dw   01E5h,01C0h,01C0h,01C0h                         ;/
2471 01 C0 01 C0   dw   01C0h,01C0h,01C0h,01E6h,01E7h,01E8h,01C0h,01E9h ;\
2481 01 EA 01 EB   dw   01EAh,01EBh,01ECh,01EDh,01C0h,01C0h,01EEh,01EFh ;
2491 01 F0 01 C0   dw   01F0h,01C0h,01C0h,01C0h                         ;/
2499 01 C0 01 C0   dw   01C0h,01C0h,01C0h,01C0h,01F1h,01F2h,01F3h,01F4h ;\
24A9 01 F5 01 F6   dw   01F5h,01F6h,01F7h,01F8h,01F9h,01FAh,01FBh,01FCh ;
24B9 01 C0 01 C0   dw   01C0h,01C0h,01C0h,01C0h                         ;/
24C1 01 C0 01 C0   dw   01C0h,01C0h,01C0h,01C0h,01C0h,01C0h,01FDh,01FEh ;\
24D1 01 FF 02 00   dw   01FFh,0200h,0201h,0202h,0203h,0204h,01C0h,01C0h ;
24E1 01 C0 01 C0   dw   01C0h,01C0h,01C0h,01C0h                         ;/
24E9 01 C0 01 C0   dw   01C0h,01C0h,01C0h,0205h,0206h,0207h,0208h,0209h ;\
24F9 02 0A 02 0B   dw   020Ah,020Bh,01C0h,020Ch,020Dh,020Eh,01C0h,020Fh ;
2509 02 10 02 11   dw   0210h,0211h,0212h,0213h                         ;/
2511 02 14 02 15   dw   0214h,0215h,0216h,0217h,0218h,0219h,021Ah,021Bh ;\
2521 02 1C 02 1D   dw   021Ch,021Dh,021Eh,021Fh,0220h,0221h,0222h,0223h ;
2531 02 24 02 25   dw   0224h,0225h,0226h,0227h                         ;/
2539 02 28 02 29   dw   0228h,0229h,022Ah,022Bh,022Ch,022Dh,022Eh,022Fh ;\
2549 02 30 02 31   dw   0230h,0231h,0232h,0233h,0234h,0235h,0236h,0237h ;
2559 02 38 02 39   dw   0238h,0239h,023Ah,023Bh                         ;/
2561 02 3C 02 3D   dw   023Ch,023Dh,023Eh,023Fh,0240h,0241h,0242h,0243h ;\
2571 02 44 02 45   dw   0244h,0245h,0246h,0247h,0248h,0249h,024Ah,024Bh ;
2581 02 4C 02 4D   dw   024Ch,024Dh,024Eh,024Fh                         ;/
                .else ;- - - - - - - - other unused numbers... (36x6 words)
3302 02 E1 02 E2   dw   02E1h,02E2h,02E3h,02E4h,02E5h,02E6h,02E7h,02E8h ;\
3312 02 E9 02 EA   dw   02E9h,02EAh,02EBh,02ECh,02EDh,02EEh,02EFh,02F0h ;
3322 02 E0 02 F1   dw   02E0h,02F1h,02F2h,02F3h,02F4h,02F5h,02F6h,02F7h ;
3332 02 F8 02 F9   dw   02F8h,02F9h,02FAh,02FBh,02FCh,02FDh,02FEh,02FFh ;
3342 03 00 03 01   dw   0300h,0301h,0302h,0303h                         ;/
334A 03 04 03 05   dw   0304h,0305h,0306h,0307h,0308h,0309h,030Ah,030Bh ;\
335A 03 0C 03 0D   dw   030Ch,030Dh,030Eh,030Fh,0310h,0311h,0312h,0313h ;
336A 02 E0 03 14   dw   02E0h,0314h,0315h,0316h,0317h,0318h,0319h,031Ah ;
337A 03 1B 03 1C   dw   031Bh,031Ch,031Dh,031Eh,031Fh,0320h,0321h,0322h ;
338A 03 23 03 24   dw   0323h,0324h,0325h,0326h                         ;/
3392 03 27 03 28   dw   0327h,0328h,0329h,032Ah,032Bh,032Ch,032Dh,032Eh ;\
33A2 03 2F 03 30   dw   032Fh,0330h,0331h,0332h,0333h,0334h,0335h,0336h ;
33B2 02 E0 03 37   dw   02E0h,0337h,0338h,0339h,033Ah,033Bh,033Ch,033Dh ;
33C2 03 3E 03 3F   dw   033Eh,033Fh,0340h,0341h,0342h,0343h,0344h,0345h ;
33D2 03 46 03 47   dw   0346h,0347h,0348h,0349h                         ;/
                .endif
                ;--- --- --- ------
                ;unused?
2589 00          nop
258A 00          nop
                .if blah_version<ver11sep2017
258B 14            db   14h   ;20 decimal  ;\maybe 20*10 = total 200 words ?
258C 0A            db   0Ah   ;10 decimal  ;/  or maybe whatever cmd/type/flags
                .else
                   db   24h   ;36 decimal
                   db   03h   ;3 decimal
                .endif
258D 00          nop
258E 00          nop
258F FF BF 6D    db   0FFh // dw get_ptr_to_whatever_unused_tile_numbers
2592 00 08       dw   0008h
                ;------------------
                ;unused? (except by unused functions)
                ;below is somewhat useless: getting ptr's to themselves...
                ;(or ptr's to something a few bytes ahead of themselves)
                ;---
                blah_selfptr_1:
2594 00          nop
2595 00          nop
2596 00          nop
2597 00          nop
2598 00          nop
2599 00          nop
259A 00          nop
259B 00          nop
259C FF BF 74    db   0FFh // dw get_self_ptr_to_blah_selfptr_1
259F 00 08       dw   0008h
                ;---
                blah_selfptr_2:
25A1 00          nop
25A2 00          nop
25A3 00          nop
25A4 00          nop
25A5 00          nop
25A6 00          nop
25A7 00          nop
25A8 00          nop
25A9 FF BF 7B    db   0FFh // dw get_self_ptr_to_blah_selfptr_2
25AC 00 08       dw   0008h
                ;---
                blah_selfptr_3:
25AE 00          nop
25AF 00          nop
25B0 00          nop
25B1 00          nop
25B2 00          nop
25B3 00          nop
25B4 00          nop
25B5 00          nop
25B6 FF BF 82    db   0FFh // dw get_self_ptr_to_blah_selfptr_3
25B9 00 08       dw   0008h
                ;---
                blah_selfptr_4:
25BB 00          nop
25BC 00          nop
25BD 00          nop
25BE 00          nop
25BF 00          nop
25C0 00          nop
25C1 00          nop
25C2 00          nop
25C3 FF BF 89    db   0FFh // dw get_self_ptr_to_blah_selfptr_4
25C6 00 08       dw   0008h
                ;---
                .endm ;defdata_menu_stuff
                ;------------------
                .if lcd_xres=320  ;for 320x240...
                  xloc_0010h equ 0010h
                  xloc_0030h equ 0030h
                  xloc_0038h equ 0038h
                  xloc_0044h equ 0044h  ;=68 decimal =260-192 ;NEW:A8h=168=364-192
                  xloc_009Ah equ 009Ah
                  xloc_00D0h equ 00D0h  ;=208 decimal  (320-96-16)  ;NEW: 0190h=400=(480-80) ??
                  yloc_0015h equ 0015h
                  yloc_0086h equ 0086h
                  yloc_00D0h equ 00D0h  ;=208 decimal =240-32 ;NEW:E8h=232=272-40 ?
                  yloc_00E0h equ 00E0h
                .else             ;for 480x272...
                  xloc_0010h equ 007Bh
                  xloc_0030h equ 0098h
                  xloc_0038h equ 009Ch
                  xloc_0044h equ 00A8h
                  xloc_009Ah equ 00A4h
                  xloc_00D0h equ 0190h
                  yloc_0015h equ 0018h
                  yloc_0086h equ 0084h
                  yloc_00D0h equ 00E8h
                  yloc_00E0h equ 00F8h
                .endif
                ;------------------
                .macro defdata_gui_menu_PowerOff
                gui_item_PowerOff:
25C8 FF 1E C1    db   0FFh // dw txt_PowerOffMenuItem_PowerOff
25CB 00 ..       db   0,0,0,0,0
25D0 00 00 00    db   000h // dw 0000h ;(clear)
25D3 00 00 00    db   000h // dw 0000h
25D6 00 00 00    db   000h // dw 0000h ;(name)
25D9 00 00 00    db   000h // dw 0000h ;(show)
25DC 00 00 00    db   000h // dw 0000h ;(change)
25DF FF A9 3C    db   0FFh // dw gui_proc_PowerOff_apply
25E2 FF 22 89    db   0FFh // dw key_quad_PowerOff
25E5 03          db   03h        ;num quad entries
25E6 00 40       dw   0040h
                ;---
                gui_menu_PowerOff:
25E8 FF 1E DB    db   0FFh // dw txt_Osd_PowerOffMenu
25EB 00 00       dw   0000h
25ED 00 00       dw   0000h
25EF 00          nop
25F0 00          nop
25F1 00          nop
25F2 00          nop
25F3 00          nop
25F4 02          db   MenuID_02h_Root
25F5 00          db   MenuID_00h_PowerOff
25F6 02          db   MenuID_02h_Root
25F7 00 00 00    db   000h // dw 0000h ;(gui_call)
25FA 00 00 00    db   000h // dw 0000h
25FD 00 00 00    db   000h // dw 0000h
2600 00 00 00    db   000h // dw 0000h
2603 FF 25 C8    db   0FFh // dw gui_item_PowerOff
2606 01          db   01h
2607 00 00 00    db   000h // dw 0000h
260A 00 00       dw   0000h
260C 00 01       dw   0001h  ;(!)
                .endm
                ;------------------
                .macro defdata_gui_menu_PowerOn
                gui_item_PowerOn:
260E FF 1E EC    db   0FFh // dw txt_PowerOnMenuItem_PowerOn
2611 00 ..       db   0,0,0,0,0
2616 00 00 00    db   000h // dw 0000h ;(clear)
2619 00 00 00    db   000h // dw 0000h
261C 00 00 00    db   000h // dw 0000h ;(name)
261F FF A7 40    db   0FFh // dw gui_data_PowerOn_show   ;show AV1/AV2
2622 00 00 00    db   000h // dw 0000h ;(change)
2625 FF BD 8E    db   0FFh // dw gui_proc_Power_On_apply
2628 FF 22 65    db   0FFh // dw key_quad_PowerOn
262B 09          db   09h        ;num quad entries
262C 00 40       dw   0040h
                ;---
                gui_menu_PowerOn:
262E FF 1F 04    db   0FFh // dw txt_Osd_PowerOnMenu
2631 00 D0       dw   xloc_00D0h
2633 00 15       dw   yloc_0015h
2635 08          db   08h       ;8x12pix = 96pix
2636 01          db   01h
2637 00          nop
2638 00          nop
2639 02          db   02h
263A 02          db   MenuID_02h_Root
263B 01          db   MenuID_01h_PowerOn
263C 02          db   MenuID_02h_Root
263D FF A9 8A    db   0FFh // dw gui_call_PowerOn
2640 00 00 00    db   000h // dw 0000h
2643 00 00 00    db   000h // dw 0000h
2646 00 00 00    db   000h // dw 0000h
2649 FF 26 0E    db   0FFh // dw gui_item_PowerOn
264C 01          db   01h
264D 00 00 00    db   000h // dw 0000h
2650 00 64       dw   0064h
2652 00 06       dw   0006h
                .endm
                ;------------------
                .macro defdata_gui_menu_RootMenu
                gui_item_RootMenu:
2654 FF 1F 14    db   0FFh // dw txt_RootMenuItem
2657 00 ..       db   0,0,0,0,0
265C 00 00 00    db   000h // dw 0000h ;(clear)
265F 00 00 00    db   000h // dw 0000h
2662 00 00 00    db   000h // dw 0000h ;(name)
2665 00 00 00    db   000h // dw 0000h ;(show)
2668 00 00 00    db   000h // dw 0000h ;(change)
266B 00 00 00    db   000h // dw 0000h ;(apply)
266E FF 22 65    db   0FFh // dw key_quad_RootMenu
2671 09          db   09h        ;num quad entries
2672 00 40       dw   0040h
                ;---
                gui_menu_RootMenu:
2674 FF 1F 21    db   0FFh // dw txt_Osd_RootMenu
2677 00 00       dw   0000h
2679 00 00       dw   0000h
267B 00          nop
267C 00          nop
267D 00          nop
267E 00          nop
267F 00          nop
2680 02          db   MenuID_02h_Root
2681 02          db   MenuID_02h_Root
2682 02          db   MenuID_02h_Root
2683 00 00 00    db   000h // dw 0000h ;(gui_call)
2686 00 00 00    db   000h // dw 0000h
2689 00 00 00    db   000h // dw 0000h
268C 00 00 00    db   000h // dw 0000h
268F FF 26 54    db   0FFh // dw gui_item_RootMenu
2692 01          db   01h
2693 00 00 00    db   000h // dw 0000h
2696 00 00       dw   0000h
2698 00 01       dw   0001h  ;(!)
                .endm
                ;------------------
                .macro defdata_gui_menu_SourceMenu
                gui_item_SourceMenu:
269A FF 1F 2E    db   0FFh // dw txt_SourceMenuItem_Source
269D 00 ..       db   0,0,0,0,0
26A2 00 00 00    db   000h // dw 0000h ;(clear)
26A5 00 00 00    db   000h // dw 0000h
26A8 00 00 00    db   000h // dw 0000h ;(name)
26AB FF A7 94    db   0FFh // dw gui_data_SourceMenu_show
26AE FF B7 98    db   0FFh // dw gui_proc_SourceMenu_change
26B1 FF A0 13    db   0FFh // dw gui_proc_SourceMenu_apply
26B4 FF 22 65    db   0FFh // dw key_quad_SourceMenu
26B7 09          db   09h        ;num quad entries
26B8 00 40       dw   0040h
                ;---
                gui_menu_SourceMenu:
26BA FF 1F 44    db   0FFh // dw txt_Osd_SourceMenu
26BD 00 D0       dw   xloc_00D0h
26BF 00 15       dw   yloc_0015h
26C1 08          db   08h
26C2 01          db   01h
26C3 00          nop
26C4 00          nop
26C5 02          db   02h
26C6 02          db   MenuID_02h_Root
26C7 10          db   MenuID_10h_SourceMenu
26C8 02          db   MenuID_02h_Root
26C9 FF A9 D8    db   0FFh // dw gui_call_SourceMenu
26CC 00 00 00    db   000h // dw 0000h
26CF 00 00 00    db   000h // dw 0000h
26D2 00 00 00    db   000h // dw 0000h
26D5 FF 26 9A    db   0FFh // dw gui_item_SourceMenu
26D8 01          db   01h
26D9 00 00 00    db   000h // dw 0000h
26DC 00 64       dw   0064h
26DE 00 06       dw   0006h
                .endm
                ;------------------
                .macro defdata_gui_menu_NoSignal
                gui_item_NoSignal:   ;this is shown in BLUE screen mode only. BUG: text is uber-large... with last 1-2 characters offscreen
26E0 FF 1F 53    db   0FFh // dw txt_NoSignalMenuItem_NoSignal
26E3 00 ..       db   0,0,0,0,0
26E8 00 00 00    db   000h // dw 0000h ;(clear)
26EB 00 00 00    db   000h // dw 0000h
26EE FF 9D BC    db   0FFh // dw gui_data_NoSignal_name
26F1 00 00 00    db   000h // dw 0000h ;(show)
26F4 00 00 00    db   000h // dw 0000h ;(change)
26F7 00 00 00    db   000h // dw 0000h ;(apply)
26FA FF 22 65    db   0FFh // dw key_quad_NoSignal
26FD 09          db   09h        ;num quad entries
26FE 00 40       dw   0040h
                ;---
                gui_menu_NoSignal:
2700 FF 1F 6D    db   0FFh // dw txt_Osd_NoSignalMenu   ;idxMenuDebugTxt
2703 00 9A       dw   xloc_009Ah
2705 00 86       dw   yloc_0086h
2707 09          db   09h
2708 01          db   01h
2709 00          nop
270A 00          nop
270B 01          db   01h
270C 02          db   MenuID_02h_Root
270D 20          db   MenuID_20h_NoSignal
270E 02          db   MenuID_02h_Root
270F FF B7 56    db   0FFh // dw gui_call_NoSignal
2712 00 00 00    db   000h // dw 0000h
2715 00 00 00    db   000h // dw 0000h
2718 00 00 00    db   000h // dw 0000h
271B FF 26 E0    db   0FFh // dw gui_item_NoSignal
271E 01          db   01h
271F 00 00 00    db   000h // dw 0000h
2722 00 00       dw   0000h
2724 00 06       dw   0006h
                .endm
                ;------------------
                .macro defdata_gui_menu_QuicklyVolume
                gui_item_QuicklyVolume:
2726 FF 1F 7E    db   0FFh // dw txt_QuicklyVolumeMenuItem_QuicklyVolume
2729 00 ..       db   0,0,0,0,0
272E FF BE 2D    db   0FFh // dw gui_proc_QuicklyVolume_clear
2731 00 00 00    db   000h // dw 0000h
2734 00 00 00    db   000h // dw 0000h ;(name)
2737 FF AE E4    db   0FFh // dw gui_data_QuicklyVolume_show
273A FF B3 FE    db   0FFh // dw gui_proc_QuicklyVolume_change
273D FF BF D3    db   0FFh // dw gui_proc_QuicklyVolume_apply ;dummy/ret
2740 FF 23 6D    db   0FFh // dw key_quad_QuicklyVolume
2743 08          db   08h
2744 00 40       dw   0040h
                ;---
                gui_menu_QuicklyVolume:
2746 FF 1F A2    db   0FFh // dw txt_Osd_QuicklyVolumeMenu
2749 00 38       dw   xloc_0038h
274B 00 E0       dw   yloc_00E0h
274D 12          db   12h
274E 01          db   01h
274F 00          nop
2750 00          nop
2751 00          nop
2752 02          db   MenuID_02h_Root
2753 13          db   MenuID_13h_QuicklyVolume
2754 02          db   MenuID_02h_Root
2755 FF B0 35    db   0FFh // dw gui_call_QuicklyVolume
2758 00 00 00    db   000h // dw 0000h
275B 00 00 00    db   000h // dw 0000h
275E 00 00 00    db   000h // dw 0000h
2761 FF 27 26    db   0FFh // dw gui_item_QuicklyVolume
2764 01          db   01h
2765 00 00 00    db   000h // dw 0000h
2768 00 64       dw   0064h
276A 00 06       dw   0006h
                .endm
                ;------------------
                .macro defdata_gui_menu_QuicklyMode
                gui_item_QuicklyMode:  ;aka Mode
276C FF 1F B8    db   0FFh // dw txt_QuicklyModeMenuItem_QuicklyMode
276F 00 ..       db   0,0,0,0,0
2774 FF BD EC    db   0FFh // dw gui_proc_QuicklyMode_clear
2777 00 00 00    db   000h // dw 0000h
277A FF B2 84    db   0FFh // dw gui_data_QuicklyMode_name
277D FF B2 79    db   0FFh // dw gui_data_QuicklyMode_show
2780 FF BC 41    db   0FFh // dw gui_proc_QuicklyMode_change
2783 FF BE AA    db   0FFh // dw gui_proc_QuicklyMode_apply
2786 FF 23 B1    db   0FFh // dw key_quad_QuicklyMode
2789 08          db   08h
278A 00 40       dw   0040h
                ;---
                gui_menu_QuicklyMode:
278C FF 1F D8    db   0FFh // dw txt_Osd_QuicklyModeMenu
278F 00 44       dw   xloc_0044h
2791 00 D0       dw   yloc_00D0h
2793 10          db   10h
2794 02          db   02h
2795 00          nop
2796 00          nop
2797 00          nop
2798 02          db   MenuID_02h_Root
2799 14          db   MenuID_14h_QuicklyMode
279A 02          db   MenuID_02h_Root
279B FF B0 00    db   0FFh // dw gui_call_QuicklyMode
279E 00 00 00    db   000h // dw 0000h
27A1 00 00 00    db   000h // dw 0000h
27A4 00 00 00    db   000h // dw 0000h
27A7 FF 27 6C    db   0FFh // dw gui_item_QuicklyMode
27AA 01          db   01h
27AB 00 00 00    db   000h // dw 0000h
27AE 00 64       dw   0064h
27B0 00 06       dw   0006h
                .endm
                ;------------------
                .macro defdata_gui_menu_QuicklySys
                gui_item_QuicklySys:   ;aka Rotate
27B2 FF 1F EC    db   0FFh // dw txt_QuicklySysMenuItem_QuicklySys
27B5 00 ..       db   0,0,0,0,0
27BA FF BE 06    db   0FFh // dw gui_proc_QuicklySysRotate_clear
27BD 00 00 00    db   000h // dw 0000h
27C0 FF B2 AE    db   0FFh // dw gui_data_QuicklySysRotate_name
27C3 FF B2 A3    db   0FFh // dw gui_data_QuicklySysRotate_show
27C6 FF BC 8C    db   0FFh // dw gui_proc_QuicklySysRotate_change
27C9 FF BF B3    db   0FFh // dw gui_proc_QuicklySysRotate_apply ;dummy/ret
27CC FF 23 8D    db   0FFh // dw key_quad_QuicklySys
27CF 09          db   09h
27D0 00 40       dw   0040h
                ;---
                gui_menu_QuicklySys:
27D2 FF 20 0A    db   0FFh // dw txt_Osd_QuicklySysMenu
27D5 00 44       dw   xloc_0044h
27D7 00 D0       dw   yloc_00D0h
27D9 10          db   10h
27DA 02          db   02h
27DB 00          nop
27DC 00          nop
27DD 00          nop
27DE 02          db   MenuID_02h_Root
27DF 15          db   MenuID_15h_QuicklyRotate  ;aka Sys
27E0 02          db   MenuID_02h_Root
27E1 FF AC 2C    db   0FFh // dw gui_call_QuicklySys
27E4 00 00 00    db   000h // dw 0000h
27E7 00 00 00    db   000h // dw 0000h
27EA 00 00 00    db   000h // dw 0000h
27ED FF 27 B2    db   0FFh // dw gui_item_QuicklySys
27F0 01          db   01h
27F1 00 00 00    db   000h // dw 0000h
27F4 00 64       dw   0064h
27F6 00 06       dw   0006h
                .endm
                ;------------------
                .macro defdata_gui_menu_Brightness
                gui_item_Brightness:
27F8 FF 20 1D    db   0FFh // dw txt_BrightnessMenuItem_Brightness ;00h-02h ;idxItemTxtName
27FB 00 00       db   0,0                                          ;03h-04h ;idxItem_03h        zero/unused
27FD 00 00 00    db   0,0,0                                        ;05h-07h ;idxItem_05h        zero/used (but always zero) proc?
2800 FF BD B8    db   0FFh // dw gui_proc_Brightness_clear         ;08h-0Ah ;idxItemProcClear
2803 00 00 00    db   000h // dw 0000h                             ;0Bh-0Dh ;idxItem_0Bh        zero/used (but always zero) bitmap?
2806 FF 82 89    db   0FFh // dw gui_data_Brightness_name          ;0Eh-10h ;idxItemDataName
2809 FF 82 7E    db   0FFh // dw gui_data_Brightness_show          ;11h-13h ;idxItemDataShow
280C FF B8 5D    db   0FFh // dw gui_proc_Brightness_change        ;14h-16h ;idxItemProcChange
280F FF 00 46    db   0FFh // dw gui_proc_Brightness_apply         ;17h-19h ;idxItemProcApply
2812 FF 22 CD    db   0FFh // dw key_quad_Brightness               ;1Ah-1Ch ;idxItemKeys
2815 0D          db   0Dh          ;num quad entries               ;1Dh     ;idxItemNumKeys
2816 00 40       dw   0040h                                        ;1Eh-1Fh ;idxItemEndFlags
                ;---
                gui_menu_Brightness:
2818 FF 20 3B    db   0FFh // dw txt_Osd_BrightnessMenu          ;00h-02h ;idxMenuDebugTxt (unused)
281B 00 44       dw   xloc_0044h ;=68=260-192 ;NEW:A8h=168=364-192 ;window.x      ;03h-04h ;idxMenuWindowX   ;\2x16bit
281D 00 D0       dw   yloc_00D0h ;=208=240-32 ;NEW:E8h=232=?       ;window.y      ;05h-06h ;idxMenuWindowY   ;/
281F 10          db   10h   ;16x12pix=192pix      ;window.cx     ;07h     ;idxMenuWindowCx  ;\2x8bit
2820 02          db   02h                         ;window.cy     ;08h     ;idxMenuWindowCy  ;/
2821 00          nop        ;\attr ALWAYS 0,0 !!! ;win.attr.lsb  ;09h     ;idxMenuWinAttrL  ;\2x8bit
2822 00          nop        ;/                    ;win.attr.msb  ;0Ah     ;idxMenuWinAttrH  ;/
2823 00          nop                              ;window.no     ;0Bh     ;idxMenuWindowNo  ;-window(0..4)
2824 02          db   MenuID_02h_Root             ;prev.menu     ;0Ch     ;idxMenuPrevMenu  ;\
2825 03          db   MenuID_03h_Brightness       ;curr.menu     ;0Dh     ;idxMenuCurrMenu  ;
2826 04          db   MenuID_04h_Contrast         ;next.menu     ;0Eh     ;idxMenuNextMenu  ;/
2827 FF AF CB    db   0FFh // dw gui_call_Brightness             ;0Fh-11h ;idxMenu___0Fh   ;proc
282A 00 00 00    db   000h // dw 0000h                           ;12h-14h ;idxMenu___12h   ;proc
282D 00 00 00    db   000h // dw 0000h                           ;15h-17h ;idxMenu___15h   ;data.
2830 00 00 00    db   000h // dw 0000h                           ;18h-1Ah ;idxMenu___18h   ;data.show.txt (see "gui_xtra_Xxx", used only for FactoryMenu(customer string) and Version(version string))
2833 FF 27 F8    db   0FFh // dw gui_item_Brightness             ;1Bh-1Dh ;idxMenuPtrItem
2836 01          db   01h                         ;num.items     ;1Eh     ;idxMenuNumItems
2837 00 00 00    db   000h // dw 0000h            ;unused        ;1Fh     ;idxMenuUnused   ;unused (always 00,00,00)
283A 00 64       dw   0064h            ;checked if 0000h ?       ;22h-23h ;idxMenu___22h
283C 00 06       dw   0006h            ;flags                    ;24h-25h ;idxMenu___24h
                .endm
                ;------------------
                .macro defdata_gui_menu_Contrast
                gui_item_Contrast:
283E FF 20 4E    db   0FFh // dw txt_ContrastMenuItem_Contrast
2841 00 ..       db   0,0,0,0,0
2846 FF BE 52    db   0FFh // dw gui_proc_Contrast_clear
2849 00 00 00    db   000h // dw 0000h
284C FF 8A 55    db   0FFh // dw gui_data_Contrast_name
284F FF 8A 4A    db   0FFh // dw gui_data_Contrast_show
2852 FF B8 7D    db   0FFh // dw gui_proc_Contrast_change
2855 FF 00 4E    db   0FFh // dw gui_proc_Contrast_apply
2858 FF 23 01    db   0FFh // dw key_quad_Contrast
285B 0B          db   0Bh
285C 00 40       dw   0040h
                ;---
                gui_menu_Contrast:
285E FF 20 68    db   0FFh // dw txt_Osd_ContrastMenu
2861 00 00       dw   0000h
2863 00 00       dw   0000h
2865 00          nop
2866 00          nop
2867 00          nop
2868 00          nop
2869 00          nop
286A 03          db   MenuID_03h_Brightness
286B 04          db   MenuID_04h_Contrast
286C 05          db   MenuID_05h_Saturation
286D FF B6 6F    db   0FFh // dw gui_call_Contrast
2870 00 00 00    db   000h // dw 0000h
2873 00 00 00    db   000h // dw 0000h
2876 00 00 00    db   000h // dw 0000h
2879 FF 28 3E    db   0FFh // dw gui_item_Contrast
287C 01          db   01h
287D 00 00 00    db   000h // dw 0000h
2880 00 64       dw   0064h
2882 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_Saturation
                gui_item_Saturation:
2884 FF 20 79    db   0FFh // dw txt_SaturationMenuItem_Saturation
2887 00 ..       db   0,0,0,0,0
288C FF BE 5E    db   0FFh // dw gui_proc_Saturation_clear
288F 00 00 00    db   000h // dw 0000h
2892 FF 84 F2    db   0FFh // dw gui_data_Saturation_name
2895 FF 84 E7    db   0FFh // dw gui_data_Saturation_show
2898 FF B8 9D    db   0FFh // dw gui_proc_Saturation_change
289B FF 00 56    db   0FFh // dw gui_proc_Saturation_apply
289E FF 23 01    db   0FFh // dw key_quad_Saturation
28A1 0B          db   0Bh
28A2 00 40       dw   0040h
                ;---
                gui_menu_Saturation:
28A4 FF 20 97    db   0FFh // dw txt_Osd_SaturationMenu
28A7 00 00       dw   0000h
28A9 00 00       dw   0000h
28AB 00          nop
28AC 00          nop
28AD 00          nop
28AE 00          nop
28AF 00          nop
28B0 04          db   MenuID_04h_Contrast
28B1 05          db   MenuID_05h_Saturation
28B2 06          db   MenuID_06h_Tint
28B3 FF B7 77    db   0FFh // dw gui_call_Saturation
28B6 00 00 00    db   000h // dw 0000h
28B9 00 00 00    db   000h // dw 0000h
28BC 00 00 00    db   000h // dw 0000h
28BF FF 28 84    db   0FFh // dw gui_item_Saturation
28C2 01          db   01h
28C3 00 00 00    db   000h // dw 0000h
28C6 00 64       dw   0064h
28C8 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_Tint
                gui_item_Tint:
28CA FF 20 AA    db   0FFh // dw txt_TintMenuItem_Tint
28CD 00 ..       db   0,0,0,0,0
28D2 FF BE 6A    db   0FFh // dw gui_proc_Tint_clear
28D5 00 00 00    db   000h // dw 0000h
28D8 FF 95 EC    db   0FFh // dw gui_data_Tint_name
28DB FF 95 E1    db   0FFh // dw gui_data_Tint_show
28DE FF B8 BD    db   0FFh // dw gui_proc_Tint_change
28E1 FF BF AE    db   0FFh // dw gui_proc_Tint_apply
28E4 FF 23 01    db   0FFh // dw key_quad_Tint
28E7 0B          db   0Bh
28E8 00 40       dw   0040h
                ;---
                gui_menu_Tint:    ;aka Hue
28EA FF 20 BC    db   0FFh // dw txt_Osd_TintMenu
28ED 00 00       dw   0000h
28EF 00 00       dw   0000h
28F1 00          nop
28F2 00          nop
28F3 00          nop
28F4 00          nop
28F5 00          nop
28F6 05          db   MenuID_05h_Saturation
28F7 06          db   MenuID_06h_Tint
28F8 07          db   MenuID_07h_SelSource
28F9 FF B1 5D    db   0FFh // dw gui_call_Tint
28FC 00 00 00    db   000h // dw 0000h
28FF 00 00 00    db   000h // dw 0000h
2902 00 00 00    db   000h // dw 0000h
2905 FF 28 CA    db   0FFh // dw gui_item_Tint
2908 01          db   01h
2909 00 00 00    db   000h // dw 0000h
290C 00 64       dw   0064h
290E 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_SelSource
                gui_item_SelSource:  ;aka Input
2910 FF 20 C9    db   0FFh // dw txt_ModeMenuItem_Mode
2913 00 ..       db   0,0,0,0,0
2918 FF BE 20    db   0FFh // dw gui_proc_SelSource_clear
291B 00 00 00    db   000h // dw 0000h
291E FF A2 2E    db   0FFh // dw gui_data_SelSource_name   ;aka Input
2921 FF A2 23    db   0FFh // dw gui_data_SelSource_show   ;aka Input
2924 FF B7 FB    db   0FFh // dw gui_proc_SelSource_change ;aka Input
2927 FF A0 84    db   0FFh // dw gui_proc_SelSource_apply
292A FF 23 2D    db   0FFh // dw key_quad_SelSource
292D 08          db   08h
292E 00 40       dw   0040h
                ;---
                gui_menu_SelSource:
2930 FF 20 DB    db   0FFh // dw txt_Osd_SelSourceMenu
2933 00 00       dw   0000h
2935 00 00       dw   0000h
2937 00          nop
2938 00          nop
2939 00          nop
293A 00          nop
293B 00          nop
293C 06          db   MenuID_06h_Tint
293D 07          db   MenuID_07h_SelSource
293E 0D          db   MenuID_0Dh_Language
293F FF B7 DA    db   0FFh // dw gui_call_SelSource
2942 00 00 00    db   000h // dw 0000h
2945 00 00 00    db   000h // dw 0000h
2948 00 00 00    db   000h // dw 0000h
294B FF 29 10    db   0FFh // dw gui_item_SelSource
294E 01          db   01h
294F 00 00 00    db   000h // dw 0000h
2952 00 64       dw   0064h
2954 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_ModeMenu
                gui_item_ModeMenu:      ;aka ModeDupe
2956 FF 20 C9    db   0FFh // dw txt_ModeMenuItem_Mode
2959 00 ..       db   0,0,0,0,0
295E FF BD DF    db   0FFh // dw gui_proc_ModeMenu_clear
2961 00 00 00    db   000h // dw 0000h
2964 FF 92 D0    db   0FFh // dw gui_data_ModeMenu_name
2967 FF 92 C5    db   0FFh // dw gui_data_ModeMenu_show
296A FF BA E4    db   0FFh // dw gui_proc_ModeMenu_change
296D FF BE A0    db   0FFh // dw gui_proc_ModeMenu_apply
2970 FF 23 2D    db   0FFh // dw key_quad_ModeMenu
2973 08          db   08h
2974 00 40       dw   0040h
                ;---
                gui_menu_ModeMenu:
2976 FF 20 ED    db   0FFh // dw txt_Osd_ModeMenu
2979 00 00       dw   0000h
297B 00 00       dw   0000h
297D 00          nop
297E 00          nop
297F 00          nop
2980 00          nop
2981 00          nop
2982 0D          db   MenuID_0Dh_Language
2983 09          db   MenuID_09h_ModeMenu
2984 0A          db   MenuID_0Ah_SysMenuXflip
2985 FF B7 35    db   0FFh // dw gui_call_ModeMenu
2988 00 00 00    db   000h // dw 0000h
298B 00 00 00    db   000h // dw 0000h
298E 00 00 00    db   000h // dw 0000h
2991 FF 29 56    db   0FFh // dw gui_item_ModeMenu
2994 01          db   01h
2995 00 00 00    db   000h // dw 0000h
2998 00 64       dw   0064h
299A 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_SysMenuXflip
                gui_item_SysMenuXflip:   ;aka "Rotate" oops?
299C FF 20 FA    db   0FFh // dw txt_HorizontalMenuItem_Filp
299F 00 ..       db   0,0,0,0,0
29A4 FF BE 13    db   0FFh // dw gui_proc_SysMenuXflip_clear
29A7 00 00 00    db   000h // dw 0000h
29AA FF 9A 59    db   0FFh // dw gui_data_SysMenuXflip_name
29AD FF 9A 4E    db   0FFh // dw gui_data_SysMenuXflip_show
29B0 FF BB 8D    db   0FFh // dw gui_proc_SysMenuXflip_change
29B3 FF BF B8    db   0FFh // dw gui_proc_SysMenuXflip_apply ;dummy/ret
29B6 FF 23 2D    db   0FFh // dw key_quad_SysMenuXflip
29B9 08          db   08h
29BA 00 40       dw   0040h
                ;---
                gui_menu_SysMenuXflip:
29BC FF 21 12    db   0FFh // dw txt_SysMenu
29BF 00 00       dw   0000h
29C1 00 00       dw   0000h
29C3 00          nop
29C4 00          nop
29C5 00          nop
29C6 00          nop
29C7 00          nop
29C8 09          db   MenuID_09h_ModeMenu
29C9 0A          db   MenuID_0Ah_SysMenuXflip
29CA 0E          db   MenuID_0Eh_IR_A_B
29CB FF B7 B9    db   0FFh // dw gui_call_SysMenuXflip
29CE 00 00 00    db   000h // dw 0000h
29D1 00 00 00    db   000h // dw 0000h
29D4 00 00 00    db   000h // dw 0000h
29D7 FF 29 9C    db   0FFh // dw gui_item_SysMenuXflip
29DA 01          db   01h
29DB 00 00 00    db   000h // dw 0000h
29DE 00 64       dw   0064h
29E0 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_Language
                gui_item_Language:
29E2 FF 21 1A    db   0FFh // dw txt_LanguageMenuItem_Language
29E5 00 ..       db   0,0,0,0,0
29EA FF BD D2    db   0FFh // dw gui_proc_Language_clear
29ED 00 00 00    db   000h // dw 0000h
29F0 FF 71 49    db   0FFh // dw gui_data_Language_name
29F3 00 00 00    db   000h // dw 0000h ;(show)
29F6 FF B0 CD    db   0FFh // dw gui_proc_Language_change
29F9 FF A5 A3    db   0FFh // dw gui_proc_Language_apply
29FC FF 23 2D    db   0FFh // dw key_quad_Language
29FF 08          db   08h
2A00 00 40       dw   0040h
                ;---
                gui_menu_Language:
2A02 FF 21 34    db   0FFh // dw txt_Osd_LanguageMenu
2A05 00 00       dw   0000h
2A07 00 00       dw   0000h
2A09 00          nop
2A0A 00          nop
2A0B 00          nop
2A0C 00          nop
2A0D 00          nop
2A0E 07          db   MenuID_07h_SelSource
2A0F 0D          db   MenuID_0Dh_Language
2A10 09          db   MenuID_09h_ModeMenu
2A11 FF B7 14    db   0FFh // dw gui_call_Language
2A14 00 00 00    db   000h // dw 0000h
2A17 00 00 00    db   000h // dw 0000h
2A1A 00 00 00    db   000h // dw 0000h
2A1D FF 29 E2    db   0FFh // dw gui_item_Language
2A20 01          db   01h
2A21 00 00 00    db   000h // dw 0000h
2A24 00 64       dw   0064h
2A26 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_IR_A_B
                gui_item_IR_A_B:
2A28 FF 21 45    db   0FFh // dw txt_IRABMenuItem_IRAB
2A2B 00 ..       db   0,0,0,0,0
2A30 FF BD C5    db   0FFh // dw gui_proc_IR_A_B_clear
2A33 00 00 00    db   000h // dw 0000h
2A36 FF A1 C3    db   0FFh // dw gui_data_IR_A_B_name
2A39 FF A1 B8    db   0FFh // dw gui_data_IR_A_B_show
2A3C FF B2 3C    db   0FFh // dw gui_proc_IR_A_B_change
2A3F FF BF D1    db   0FFh // dw gui_proc_IR_A_B_apply ;dummy/ret
2A42 FF 23 2D    db   0FFh // dw key_quad_IR_A_B
2A45 08          db   08h
2A46 00 40       dw   0040h
                ;---
                gui_menu_IR_A_B:
2A48 FF 21 57    db   0FFh // dw txt_Osd_IRABMenu
2A4B 00 00       dw   0000h
2A4D 00 00       dw   0000h
2A4F 00          nop
2A50 00          nop
2A51 00          nop
2A52 00          nop
2A53 00          nop
2A54 0A          db   MenuID_0Ah_SysMenuXflip
2A55 0E          db   MenuID_0Eh_IR_A_B
2A56 0F          db   MenuID_0Fh_Reset
2A57 FF B6 F3    db   0FFh // dw gui_call_IR_A_B
2A5A 00 00 00    db   000h // dw 0000h
2A5D 00 00 00    db   000h // dw 0000h
2A60 00 00 00    db   000h // dw 0000h
2A63 FF 2A 28    db   0FFh // dw gui_item_IR_A_B
2A66 01          db   01h
2A67 00 00 00    db   000h // dw 0000h
2A6A 00 64       dw   0064h
2A6C 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_Reset
                gui_item_Reset:
2A6E FF 21 64    db   0FFh // dw txt_ResetMenuItem_Reset
2A71 00 ..       db   0,0,0,0,0
2A76 FF BD F9    db   0FFh // dw gui_proc_Reset_clear
2A79 00 00 00    db   000h // dw 0000h
2A7C FF 9B D5    db   0FFh // dw gui_data_Reset_name
2A7F FF 9B CA    db   0FFh // dw gui_data_Reset_show  ;(dummy, show nothing)
2A82 FF BC AD    db   0FFh // dw gui_proc_Reset_change
2A85 FF B0 FE    db   0FFh // dw gui_proc_Reset_apply
2A88 FF 23 4D    db   0FFh // dw key_quad_Reset
2A8B 08          db   08h
2A8C 00 40       dw   0040h
                ;---
                gui_menu_Reset:
2A8E FF 21 78    db   0FFh // dw txt_Osd_ResetMenu
2A91 00 00       dw   0000h
2A93 00 00       dw   0000h
2A95 00          nop
2A96 00          nop
2A97 00          nop
2A98 00          nop
2A99 00          nop
2A9A 0A          db   MenuID_0Ah_SysMenuXflip     ;prev/uh? (should be IR_A_B)
2A9B 0F          db   MenuID_0Fh_Reset
2A9C 02          db   MenuID_02h_Root             ;next/leave?
2A9D FF B4 25    db   0FFh // dw gui_call_Reset
2AA0 00 00 00    db   000h // dw 0000h
2AA3 00 00 00    db   000h // dw 0000h
2AA6 00 00 00    db   000h // dw 0000h
2AA9 FF 2A 6E    db   0FFh // dw gui_item_Reset
2AAC 01          db   01h
2AAD 00 00 00    db   000h // dw 0000h
2AB0 00 64       dw   0064h
2AB2 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_fMenuSource
                gui_item_fMenuSource:
2AB4 FF 1F 2E    db   0FFh // dw txt_SourceMenuItem_Source
2AB7 00 ..       db   0,0,0,0,0
2ABC 00 00 00    db   000h // dw 0000h ;(clear)
2ABF 00 00 00    db   000h // dw 0000h
2AC2 00 00 00    db   000h // dw 0000h ;(name)
2AC5 FF 6A 1C    db   0FFh // dw gui_data_fMenuSource_show
2AC8 FF B7 98    db   0FFh // dw gui_proc_fMenuSource_change
2ACB FF A0 13    db   0FFh // dw gui_proc_fMenuSource_apply
2ACE FF 22 95    db   0FFh // dw key_quad_fMenuSource
2AD1 07          db   07h
2AD2 00 40       dw   0040h
                ;---
                gui_menu_fMenuSource:
2AD4 FF 21 86    db   0FFh // dw txt_Osd_fMenu
2AD7 00 30       dw   xloc_0030h
2AD9 00 20       dw   0020h
2ADB 03          db   03h
2ADC 01          db   01h
2ADD 00          nop
2ADE 00          nop
2ADF 01          db   01h
2AE0 02          db   MenuID_02h_Root
2AE1 12          db   MenuID_12h_fMenuSource
2AE2 02          db   MenuID_02h_Root
2AE3 FF B6 90    db   0FFh // dw gui_call_fMenuSource
2AE6 00 00 00    db   000h // dw 0000h
2AE9 00 00 00    db   000h // dw 0000h
2AEC 00 00 00    db   000h // dw 0000h
2AEF FF 2A B4    db   0FFh // dw gui_item_fMenuSource
2AF2 01          db   01h
2AF3 00 00 00    db   000h // dw 0000h
2AF6 00 00       dw   0000h
2AF8 00 06       dw   0006h
                .endm
                ;------------------
                .macro defdata_gui_menu_FactoryMenu
                gui_item_FactoryMenu:   ;aka Time, VCOM, POWER, KEY, etc.
2AFA FF 21 90    db   0FFh // dw txt_FactoryMenuItem_PIC
2AFD 00 ..       db   0,0,0,0,0
2B02 00 00 00    db   000h // dw 0000h ;(clear)
2B05 00 00 00    db   000h // dw 0000h
2B08 FF 6A D8    db   0FFh // dw gui_data_FactoryMenu_name  ;aka Time, VCOM, POWER, KEY, etc.
2B0B FF 6A 96    db   0FFh // dw gui_data_FactoryMenu_show  ;aka Time, VCOM, POWER, KEY, etc.
2B0E 00 00 00    db   000h // dw 0000h ;(change)
2B11 00 00 00    db   000h // dw 0000h ;(apply)
2B14 FF 23 D1    db   0FFh // dw key_quad_FactoryMenu
2B17 07          db   07h
2B18 00 40       dw   0040h
                ;---
                gui_menu_FactoryMenu:
2B1A FF 21 A4    db   0FFh // dw txt_Osd_FactoryMenu
2B1D 00 30       dw   xloc_0030h
2B1F 00 20       dw   0020h
2B21 13          db   13h
2B22 09          db   09h
2B23 00          nop
2B24 00          nop
2B25 01          db   01h
2B26 02          db   MenuID_02h_Root
2B27 23          db   MenuID_23h_FactoryMenu
2B28 24          db   MenuID_24h_FactoryPic
2B29 FF B6 B1    db   0FFh // dw gui_call_FactoryMenu
2B2C 00 00 00    db   000h // dw 0000h
2B2F 00 00 00    db   000h // dw 0000h
2B32 FF 6B 2C    db   0FFh // dw gui_xtra_FactoryMenu_get_txt_CUSTOMER
2B35 FF 2A FA    db   0FFh // dw gui_item_FactoryMenu
2B38 01          db   01h
2B39 00 00 00    db   000h // dw 0000h
2B3C 00 00       dw   0000h
2B3E 00 06       dw   0006h
                .endm
                ;------------------
                .macro defdata_gui_menu_FactoryPic
                gui_items_FactoryPic:
                ;- - - gui_item_FactoryPic(1st)
2B40 FF 21 B4    db   0FFh // dw txt_FactoryPicMenuItem_AC
2B43 00 ..       db   0,0,0,0,0
2B48 00 00 00    db   000h // dw 0000h ;(clear)
2B4B 00 00 00    db   000h // dw 0000h
2B4E FF 8D 6A    db   0FFh // dw gui_data_FactoryPic_VCOM_AC_name
2B51 FF 8D 5F    db   0FFh // dw gui_data_FactoryPic_VCOM_AC_show
2B54 FF A6 53    db   0FFh // dw gui_proc_FactoryPic_VCOM_AC_change
2B57 FF BF CD    db   0FFh // dw gui_proc_FactoryPic_VCOM_AC_apply ;(dummy/ret)
2B5A FF 23 ED    db   0FFh // dw key_quad_FactoryPic
2B5D 03          db   03h
2B5E 00 40       dw   0040h
                ;- - - gui_item_FactoryPic(2nd)
2B60 FF 21 CA    db   0FFh // dw txt_FactoryPicMenuItem_DC
2B63 00 ..       db   0,0,0,0,0
2B68 00 00 00    db   000h // dw 0000h ;(clear)
2B6B 00 00 00    db   000h // dw 0000h
2B6E FF 8D 8C    db   0FFh // dw gui_data_FactoryPic_VCOM_DC_name
2B71 FF 8D 81    db   0FFh // dw gui_data_FactoryPic_VCOM_DC_show
2B74 FF BF CF    db   0FFh // dw gui_proc_FactoryPic_VCOM_DC_change ;(dummy: set cy, ret)
2B77 FF 9A E4    db   0FFh // dw gui_proc_FactoryPic_VCOM_DC_apply
2B7A FF 23 ED    db   0FFh // dw key_quad_FactoryPic
2B7D 03          db   03h
2B7E 00 40       dw   0040h
                ;- - - gui_item_FactoryPic(3rd)
2B80 FF 21 E0    db   0FFh // dw txt_FactorySwitchMenuItem_Power
2B83 00 ..       db   0,0,0,0,0
2B88 00 00 00    db   000h // dw 0000h ;(clear)
2B8B 00 00 00    db   000h // dw 0000h
2B8E FF 8D B1    db   0FFh // dw gui_data_FactoryPic_POWER_name
2B91 FF 8D A6    db   0FFh // dw gui_data_FactoryPic_POWER_show
2B94 FF B1 E5    db   0FFh // dw gui_proc_FactoryPic_POWER_change
2B97 00 00 00    db   000h // dw 0000h ;(apply)
2B9A FF 23 ED    db   0FFh // dw key_quad_FactoryPic
2B9D 03          db   03h
2B9E 00 40       dw   0040h
                ;- - - gui_item_FactoryPic(4th)
2BA0 FF 21 FC    db   0FFh // dw txt_FactoryPicMenuItem_KEYNUM
2BA3 00 ..       db   0,0,0,0,0
2BA8 00 00 00    db   000h // dw 0000h ;(clear)
2BAB 00 00 00    db   000h // dw 0000h
2BAE FF 8D D6    db   0FFh // dw gui_data_FactoryPic_KEY_name
2BB1 FF 8D CB    db   0FFh // dw gui_data_FactoryPic_KEY_show
2BB4 FF B3 AF    db   0FFh // dw gui_proc_FactoryPic_KEY_change
2BB7 00 00 00    db   000h // dw 0000h ;(apply)
2BBA FF 23 ED    db   0FFh // dw key_quad_FactoryPic
2BBD 03          db   03h
2BBE 00 40       dw   0040h
                ;- - - gui_item_FactoryPic(5th)
2BC0 FF 22 16    db   0FFh // dw txt_FactoryPicMenuItem_nosignal
2BC3 00 ..       db   0,0,0,0,0
2BC8 00 00 00    db   000h // dw 0000h ;(clear)
2BCB 00 00 00    db   000h // dw 0000h
2BCE FF 8D FB    db   0FFh // dw gui_data_FactoryPic_NOSIGNAL_name
2BD1 FF 8D F0    db   0FFh // dw gui_data_FactoryPic_NOSIGNAL_show
2BD4 FF B0 9C    db   0FFh // dw gui_proc_FactoryPic_NOSIGNAL_change
2BD7 00 00 00    db   000h // dw 0000h ;(apply)
2BDA FF 23 ED    db   0FFh // dw key_quad_FactoryPic
2BDD 03          db   03h
2BDE 00 40       dw   0040h
                ;---
                gui_menu_FactoryPic:
2BE0 FF 22 32    db   0FFh // dw txt_Osd_FactoryPicMenu
2BE3 00 00       dw   0000h
2BE5 00 00       dw   0000h
2BE7 00          nop
2BE8 00          nop
2BE9 00          nop
2BEA 00          nop
2BEB 01          db   01h
2BEC 23          db   MenuID_23h_FactoryMenu
2BED 24          db   MenuID_24h_FactoryPic
2BEE 02          db   MenuID_02h_Root
2BEF FF B6 D2    db   0FFh // dw gui_call_FactoryPic
2BF2 00 00 00    db   000h // dw 0000h
2BF5 00 00 00    db   000h // dw 0000h
2BF8 00 00 00    db   000h // dw 0000h
2BFB FF 2B 40    db   0FFh // dw gui_items_FactoryPic  ;<--- to FIRST item (of FIVE items)
2BFE 05          db   05h    ;<-- five! ;num items   ;<-- ;idxMenuNumItems
2BFF 00 00 00    db   000h // dw 0000h
2C02 00 00       dw   0000h
2C04 00 02       dw   0002h
                .endm
                ;------------------
                .macro defdata_gui_menu_Version
                gui_item_Version:
2C06 FF 22 45    db   0FFh // dw txt_VersionMenuItem
2C09 00 ..       db   0,0,0,0,0
2C0E 00 00 00    db   000h // dw 0000h ;(clear)
2C11 00 00 00    db   000h // dw 0000h
2C14 00 00 00    db   000h // dw 0000h ;(name)
2C17 00 00 00    db   000h // dw 0000h ;(show)
2C1A 00 00 00    db   000h // dw 0000h ;(change)
2C1D 00 00 00    db   000h // dw 0000h ;(apply)
2C20 FF 22 B1    db   0FFh // dw key_quad_Version
2C23 07          db   07h
2C24 00 40       dw   0040h
                ;---
                gui_menu_Version:
2C26 FF 22 55    db   0FFh // dw txt_Osd_VersionMenu
2C29 00 10       dw   xloc_0010h
2C2B 00 18       dw   0018h
2C2D 18          db   18h
2C2E 03          db   03h
2C2F 00          nop
2C30 00          nop
2C31 01          db   01h
2C32 02          db   MenuID_02h_Root
2C33 21          db   MenuID_21h_Version
2C34 02          db   MenuID_02h_Root
2C35 FF B8 1C    db   0FFh // dw gui_call_Version
2C38 00 00 00    db   000h // dw 0000h
2C3B 00 00 00    db   000h // dw 0000h
2C3E FF AE 31    db   0FFh // dw gui_xtra_Version_version_string
2C41 FF 2C 06    db   0FFh // dw gui_item_Version
2C44 01          db   01h
2C45 00 00 00    db   000h // dw 0000h
2C48 00 00       dw   0000h
2C4A 00 06       dw   0006h
                .endm
                ;------------------
                .macro defdata_gui_menu_list
                gui_menu_list:          ;used about 104x  ;SICK!
                .if shuffle_version<ver11sep2017
                   @@misnumber equ 0
                .else
                   @@misnumber equ 2
                .endif
2C4C FF 25 E8    db   0FFh // dw gui_menu_PowerOff      // MenuID_00h_PowerOff      equ 00h
2C4F FF 26 2E    db   0FFh // dw gui_menu_PowerOn       // MenuID_01h_PowerOn       equ 01h
2C52 FF 26 74    db   0FFh // dw gui_menu_RootMenu      // MenuID_02h_Root          equ 02h
2C55 FF 28 18    db   0FFh // dw gui_menu_Brightness    // MenuID_03h_Brightness    equ 03h
2C58 FF 28 5E    db   0FFh // dw gui_menu_Contrast      // MenuID_04h_Contrast      equ 04h
2C5B FF 28 A4    db   0FFh // dw gui_menu_Saturation    // MenuID_05h_Saturation    equ 05h
2C5E FF 28 EA    db   0FFh // dw gui_menu_Tint          // MenuID_06h_Tint          equ 06h
2C61 FF 29 30    db   0FFh // dw gui_menu_SelSource     // MenuID_07h_SelSource     equ 07h
2C64 FF 2A 02    db   0FFh // dw gui_menu_Language      // MenuID_0Dh_Language      equ 0Dh
2C67 FF 29 76    db   0FFh // dw gui_menu_ModeMenu      // MenuID_09h_ModeMenu      equ 09h
2C6A FF 29 BC    db   0FFh // dw gui_menu_SysMenuXflip  // MenuID_0Ah_SysMenuXflip  equ 0Ah
2C6D FF 2A 48    db   0FFh // dw gui_menu_IR_A_B        // MenuID_0Eh_IR_A_B        equ 0Eh
2C70 FF 2A 8E    db   0FFh // dw gui_menu_Reset         // MenuID_0Fh_Reset         equ 0Fh
2C73 FF 26 BA    db   0FFh // dw gui_menu_SourceMenu    // MenuID_10h_SourceMenu    equ 10h
                .if shuffle_version>=ver11sep2017
2C85 FF 2A D4      db 0FFh // dw gui_menu_fMenuSource   // MenuID_12h_fMenuSource   equ 12h
                .endif
2C76 FF 27 8C    db   0FFh // dw gui_menu_QuicklyMode   // MenuID_14h_QuicklyMode   equ 14h
2C79 FF 27 D2    db   0FFh // dw gui_menu_QuicklySys    // MenuID_15h_QuicklyRotate equ 15h ;aka Sys
2C7C FF 27 46    db   0FFh // dw gui_menu_QuicklyVolume // MenuID_13h_QuicklyVolume equ 13h
2C7F FF 2C 26    db   0FFh // dw gui_menu_Version       // MenuID_21h_Version       equ 21h-@@misnumber
2C82 FF 27 00    db   0FFh // dw gui_menu_NoSignal      // MenuID_20h_NoSignal      equ 20h-@@misnumber
                .if shuffle_version<ver11sep2017
2C85 FF 2A D4      db 0FFh // dw gui_menu_fMenuSource   // MenuID_12h_fMenuSource   equ 12h
                .endif
2C88 FF 2B 1A    db   0FFh // dw gui_menu_FactoryMenu   // MenuID_23h_FactoryMenu   equ 23h-@@misnumber
2C8B FF 2B E0    db   0FFh // dw gui_menu_FactoryPic    // MenuID_24h_FactoryPic    equ 24h-@@misnumber
                gui_menu_list_num_entries equ ($-gui_menu_list)/3
                                                           MenuID_25h_INVALID_or_so equ 25h-@@misnumber ;?
                                                           MenuID_25h_MAX_or_so     equ 25h-@@misnumber ;?
                .endm ;defdata_gui_menu_list
                ;------------------
                .if shuffle_version<ver11sep2017
                  defdata_menu_stuff                    ;-
                  defdata_gui_menu_PowerOff             ;\
                  defdata_gui_menu_PowerOn              ;
                  defdata_gui_menu_RootMenu             ;
                  defdata_gui_menu_SourceMenu           ;
                  defdata_gui_menu_NoSignal             ;
                  defdata_gui_menu_QuicklyVolume        ;
                  defdata_gui_menu_QuicklyMode          ;
                  defdata_gui_menu_QuicklySys           ;
                  defdata_gui_menu_Brightness           ;
                  defdata_gui_menu_Contrast             ;
                  defdata_gui_menu_Saturation           ;
                  defdata_gui_menu_Tint                 ;
                  defdata_gui_menu_SelSource            ;
                  defdata_gui_menu_ModeMenu             ;
                  defdata_gui_menu_SysMenuXflip         ;
                  defdata_gui_menu_Language             ;
                  defdata_gui_menu_IR_A_B               ;
                  defdata_gui_menu_Reset                ;
                  defdata_gui_menu_fMenuSource          ;
                  defdata_gui_menu_FactoryMenu          ;
                  defdata_gui_menu_FactoryPic           ;
                  defdata_gui_menu_Version              ;/
                  defdata_gui_menu_list                 ;-
                .endif
                ;------------------
;:------------- ;:----------------- GUI code (func_xxh's)
                ;------------------
                ID_func_00h_nul                equ 0   ;(used somehow, but has no function assigned)
                ;---
                ID_func_01h_Version            equ 01h
                ID_func_02h_SourceMenu         equ 02h
                ID_nonfunc_03h_XXXXX           equ 03h ;(used somehow, but has no function assigned)
                ID_func_04h_next_menu          equ 04h
                ID_func_05h_prev_menu          equ 05h
                ID_func_06h_prev_item          equ 06h
                ID_func_07h_next_item          equ 07h
                ID_func_0Ah_FactoryPic         equ 0Ah
                ID_func_0Bh_xxx_NoSignal       equ 0Bh ; ... Root & Save Settings
                ID_func_0Ch_save_settings      equ 0Ch
                ID_func_0Dh_plus               equ 0Dh
                ID_func_0Eh_minus              equ 0Eh
                ID_func_11h_QuicklyRotate      equ 11h
                ID_func_12h_xxx                equ 12h
                ID_func_13h_show_menu          equ 13h
                ID_func_15h_FactoryMenu        equ 15h
                ID_func_16h_QuicklySourceMenu  equ 16h
                ID_func_19h_SourceMenu         equ 19h
                ID_func_1Ah_InitialPowerUpInit equ 1Ah
                ID_func_1Bh_PowerOnOff         equ 1Bh
                ID_func_1Dh_PowerOff           equ 1Dh
                ID_func_1Eh_xxx                equ 1Eh
                ID_func_20h_QuicklyMode        equ 20h
                ID_func_21h_xxx                equ 21h
                ID_func_22h_QuicklyBrightness  equ 22h
                ID_func_23h_QuicklyContrast    equ 23h
                ID_func_24h_QuicklySaturation  equ 24h
                ID_func_28h_volume_plus        equ 28h
                ID_func_29h_volume_minus       equ 29h
                .if shuffle_version<ver11sep2017
                 ID_func_2Ch_FactoryMenu       equ 2Ch
                 ID_func_2Dh_fMenuSource       equ 2Dh
                 ID_func_2Eh_xxx               equ 2Eh
                 ID_func_2Fh_xxx               equ 2Fh
                 ID_func_30h_xxx               equ 30h
                 ID_func_31h_xxx               equ 31h
                 ID_func_32h_screen_on         equ 32h
                .else
                 ID_func_2Ch_FactoryMenu       equ 2Ch-2
                 ID_func_2Dh_fMenuSource       equ 2Dh-2
                 ID_func_2Eh_xxx               equ 2Eh-2
                 ID_func_2Fh_xxx               equ 2Fh-2
                 ID_func_30h_xxx               equ 30h-2
                 ID_func_31h_xxx               equ 31h-2
                 ID_func_32h_screen_on         equ 32h-2
                .endif
                ;------------------
                execute_func_r7:         ;in: r7=ID_func_XXh
2C8E 8F 27       mov  [iram_tmp__27h],r7  ;<-- ID_func_XXh      ;-
2C90 D2 07       set  [iram_req_event_flags].7                  ;-mark "busy"
                ;- - - - - --------
                resume_execute_func_if_any:   ;<---- return to here (from below jumplist)
2C92 20 07 03    jnz  [iram_req_event_flags].7,@@keep_busy ;\
2C95 02 3A 42    jmp  func_not_busy_return_cy_set          ; check if "busy"
                ;---                                       ;
                @@keep_busy:                               ;/
2C98 C2 07       clr  [iram_req_event_flags].7             ;-ack/clear "busy"
2C9A E5 27       mov  a,[iram_tmp__27h]   ;<-- ID_func_XXh ;\
2C9C 12 4D 8B    call jump_via_id_jumplist_at_retadr       ; jumplist at retadr
                ;- - - -                                   ;/
2C9F 3A 17 01    dw   func_01h_Version            // db ID_func_01h_Version     ;(via a secret.key.combo)
2CA2 3A 1D 02    dw   func_02h_SourceMenu         // db ID_func_02h_SourceMenu
2CA5 2F B2 04    dw   func_04h_next_menu          // db ID_func_04h_next_menu           ;\next/prev menu
2CA8 2F B2 05    dw   func_05h_prev_menu          // db ID_func_05h_prev_menu           ;/
2CAB 2F AA 06    dw   func_06h_prev_item          // db ID_func_06h_prev_item           ;\next/prev item
2CAE 2F AA 07    dw   func_07h_next_item          // db ID_func_07h_next_item           ;/
2CB1 30 3C 0A    dw   func_0Ah_FactoryPic         // db ID_func_0Ah_FactoryPic
2CB4 30 10 0B    dw   func_0Bh_xxx_NoSignal       // db ID_func_0Bh_xxx_NoSignal       ; ... Root & Save Settings
2CB7 30 0D 0C    dw   func_0Ch_save_settings      // db ID_func_0Ch_save_settings
2CBA 2F 71 0D    dw   func_0Dh_plus               // db ID_func_0Dh_plus                ;\MAIN +/- buttons
2CBD 2F 71 0E    dw   func_0Eh_minus              // db ID_func_0Eh_minus               ;/
2CC0 31 6E 11    dw   func_11h_QuicklyRotate      // db ID_func_11h_QuicklyRotate       ;hotkey?
2CC3 32 55 12    dw   func_12h_xxx                // db ID_func_12h_xxx                 ;...injump
2CC6 2F C4 13    dw   func_13h_show_menu          // db ID_func_13h_show_menu           ;...injump brightness?
2CC9 30 84 15    dw   func_15h_FactoryMenu        // db ID_func_15h_FactoryMenu
2CCC 32 5C 16    dw   func_16h_QuicklySourceMenu  // db ID_func_16h_QuicklySourceMenu
2CCF 33 68 19    dw   func_19h_SourceMenu         // db ID_func_19h_SourceMenu
2CD2 2D 0C 1A    dw   func_1Ah_InitialPowerUpInit // db ID_func_1Ah_InitialPowerUpInit  ;for VCC power up (coldboot init before mainloop) (not after standby with BLACK screen)
2CD5 2D 38 1B    dw   func_1Bh_PowerOnOff         // db ID_func_1Bh_PowerOnOff          ;Power On/Off
2CD8 2E 01 1D    dw   func_1Dh_PowerOff           // db ID_func_1Dh_PowerOff
2CDB 3A 3A 1E    dw   func_1Eh_xxx                // db ID_func_1Eh_xxx                 ;....switch lcd off
2CDE 33 8B 20    dw   func_20h_QuicklyMode        // db ID_func_20h_QuicklyMode
2CE1 34 72 21    dw   func_21h_xxx                // db ID_func_21h_xxx                 ;...injump  menu_INVALID?
2CE4 34 79 22    dw   func_22h_QuicklyBrightness  // db ID_func_22h_QuicklyBrightness
2CE7 36 38 23    dw   func_23h_QuicklyContrast    // db ID_func_23h_QuicklyContrast
2CEA 37 F7 24    dw   func_24h_QuicklySaturation  // db ID_func_24h_QuicklySaturation
2CED 2E 76 28    dw   func_28h_volume_plus        // db ID_func_28h_volume_plus         ;\volume +/-
2CF0 2E 76 29    dw   func_29h_volume_minus       // db ID_func_29h_volume_minus        ;/
2CF3 30 1B 2C    dw   func_2Ch_FactoryMenu        // db ID_func_2Ch_FactoryMenu
2CF6 30 15 2D    dw   func_2Dh_fMenuSource        // db ID_func_2Dh_fMenuSource
2CF9 30 C2 2E    dw   func_2Eh_xxx                // db ID_func_2Eh_xxx  ;...display BLUE,SNOW,BLACK (no signal) ?
2CFC 3A 34 2F    dw   func_2Fh_xxx                // db ID_func_2Fh_xxx  ;...NoSignal ...to root
2CFF 3A 0D 30    dw   func_30h_xxx                // db ID_func_30h_xxx  ;...PWM0
2D02 39 E6 31    dw   func_31h_xxx                // db ID_func_31h_xxx  ;...switch on
2D05 3A 12 32    dw   func_32h_screen_on          // db ID_func_32h_screen_on
N/A             ;N/A ;func_00h_nul                ;...(ID 00h USED, but not defined, so it will be handled as invalid/nop, see below)
2D08 00 00 3A 40 dw   0000h,func_XXh_invalid            ;out: cy=0
                ;------------------
                func_1Ah_InitialPowerUpInit:
2D0C 90 00 2B    mov  dptr,xram_sett_power_up ;(OFF,ON,SAVE)
2D0F E0          movx a,[dptr]
2D10 FF          mov  r7,a
2D11 B4 01 07    jne  a,01h,@@not_1_on
2D14 E4          clr  a   ;will be TOGGLED to 1=ON      ;\
2D15 90 00 09    mov  dptr,xram_sett_curr_power         ; ON (default)
2D18 F0          movx [dptr],a                          ;/
2D19 80 1D       sjmp @@_2D38h
                ;---
                @@not_1_on:
2D1B EF          mov  a,r7
2D1C 70 02       jnz  a,@@not_0_off
2D1E 80 13       sjmp @@_2D33h   ;in: a=00h             ;--> OFF
                ;---
                @@not_0_off:
2D20 EF          mov  a,r7
2D21 B4 02 14    jne  a,02h,@@not_2_save
2D24 90 00 09    mov  dptr,xram_sett_curr_power         ;\
2D27 E0          movx a,[dptr]                          ; SAVE (resume/toggle?)
2D28 FF          mov  r7,a                              ;
2D29 B4 01 04    jne  a,01h,@@_2D30h                    ;/
2D2C E4          clr  a   ;will be TOGGLED to 1=ON
2D2D F0          movx [dptr],a
2D2E 80 08       sjmp @@_2D38h
                ;---
                @@_2D30h:
2D30 EF          mov  a,r7
2D31 70 05       jnz  a,@@_2D38h
                @@_2D33h:  ;in: a=00h
2D33 90 00 09    mov  dptr,xram_sett_curr_power
2D36 04          inc  a    ;=01h ;will be TOGGLED to 0=OFF
2D37 F0          movx [dptr],a
                @@not_2_save:
                @@_2D38h:
                ;- - -
                ;note: above has set "xram_sett_curr_power" to OPPOSITE of
                ;desired state, and below will TOGGLE it to actual desired state
                ;- - - - - --------
                func_1Bh_PowerOnOff:
2D38 90 00 4D    mov  dptr,xram_whatever_pwr_input      ;\
2D3B E0          movx a,[dptr]                          ; toggle
2D3C B4 03 05    jne  a,03h,@@toggle_on_off             ;/
2D3F 30 0B 09    jz   [iram_misc_flags].miscflg_3,@@power_off   ;-off
2D42 80 13       sjmp @@power_on                        ;-on
                ;---
                @@toggle_on_off:
2D44 90 00 09    mov  dptr,xram_sett_curr_power
2D47 E0          movx a,[dptr]
2D48 B4 01 0C    jne  a,01h,@@power_on
                @@power_off:
2D4B E4          clr  a    ;MenuID_00h_PowerOff         ;\
2D4C FF          mov  r7,a                              ;   POWER OFF
2D4D 12 BC 9D    call select_menu_r7                    ;/
2D50 E4          clr  a                                 ;\
2D51 90 00 09    mov  dptr,xram_sett_curr_power         ; mark off
2D54 F0          movx [dptr],a                          ;/
2D55 80 0B       sjmp @@cont
                ;---
                @@power_on:
2D57 7F 01       mov  r7,MenuID_01h_PowerOn             ;\  POWER ON
2D59 12 BC 9D    call select_menu_r7                    ;/
2D5C 90 00 09    mov  dptr,xram_sett_curr_power         ;\
2D5F 74 01       mov  a,01h                             ; mark on
2D61 F0          movx [dptr],a                          ;/
                @@cont:
                ;- - - - -
2D62 90 00 B8    mov  dptr,xram_current_menu                        ;\
2D65 E0          movx a,[dptr]                                      ;
2D66 75 F0 03    mov  b,03h                                         ;
2D69 A4          mul  a,b                                           ;
2D6A 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
2D6C F5 82       mov  dpl,a                                         ; apply
2D6E E4          clr  a                                             ; proc
2D6F 34 2C       adc  a,gui_menu_list/100h                          ; exists
2D71 F5 83       mov  dph,a                                         ;
2D73 E4          clr  a                                             ;
2D74 93          movc a,[a+dptr]                                    ;
2D75 FB          mov  r3,a                                          ;
2D76 74 01       mov  a,01h                                         ;
2D78 93          movc a,[a+dptr]                                    ;
2D79 FA          mov  r2,a                                          ;
2D7A 74 02       mov  a,02h                                         ;
2D7C 93          movc a,[a+dptr]                                    ;
2D7D F9          mov  r1,a                                          ;
2D7E 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
2D81 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2D84 90 00 B9    mov  dptr,xram_current_item                        ;
2D87 E0          movx a,[dptr]                                      ;
2D88 75 F0 20    mov  b,20h                                         ;
2D8B A4          mul  a,b                                           ;
2D8C FF          mov  r7,a                                          ;
2D8D AE F0       mov  r6,b                                          ;
2D8F 29          add  a,r1                                          ;
2D90 F9          mov  r1,a                                          ;
2D91 EA          mov  a,r2                                          ;
2D92 3E          adc  a,r6                                          ;
2D93 FA          mov  r2,a                                          ;
2D94 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
2D97 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2D9A EA          mov  a,r2                                          ;
2D9B 49          or   a,r1                                          ;
2D9C 4B          or   a,r3                                          ;
2D9D 60 31       jz   a,@@no_apply_proc                             ;/
                ;- - -
2D9F 90 00 B8    mov  dptr,xram_current_menu                        ;\
2DA2 E0          movx a,[dptr]                                      ;
2DA3 75 F0 03    mov  b,03h                                         ;
2DA6 A4          mul  a,b                                           ;
2DA7 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
2DA9 F5 82       mov  dpl,a                                         ; apply
2DAB E4          clr  a                                             ; proc
2DAC 34 2C       adc  a,gui_menu_list/100h                          ;
2DAE F5 83       mov  dph,a                                         ;
2DB0 E4          clr  a                                             ;
2DB1 93          movc a,[a+dptr]                                    ;
2DB2 FB          mov  r3,a                                          ;
2DB3 74 01       mov  a,01h                                         ;
2DB5 93          movc a,[a+dptr]                                    ;
2DB6 FA          mov  r2,a                                          ;
2DB7 74 02       mov  a,02h                                         ;
2DB9 93          movc a,[a+dptr]                                    ;
2DBA F9          mov  r1,a                                          ;
2DBB 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
2DBE 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2DC1 E9          mov  a,r1                                          ;
2DC2 2F          add  a,r7                                          ;
2DC3 F9          mov  r1,a                                          ;
2DC4 EA          mov  a,r2                                          ;
2DC5 3E          adc  a,r6                                          ;
2DC6 FA          mov  r2,a                                          ;
2DC7 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
2DCA 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2DCD 12 4D B1    call jmp_r2r1  ;----->                             ;/
                @@no_apply_proc:
2DD0 90 00 B8    mov  dptr,xram_current_menu
2DD3 E0          movx a,[dptr]
2DD4 75 F0 03    mov  b,03h
2DD7 A4          mul  a,b
2DD8 24 4C       add  a,gui_menu_list and 0ffh
2DDA F5 82       mov  dpl,a
2DDC E4          clr  a
2DDD 34 2C       adc  a,gui_menu_list/100h
2DDF F5 83       mov  dph,a
2DE1 E4          clr  a
2DE2 93          movc a,[a+dptr]
2DE3 FB          mov  r3,a
2DE4 74 01       mov  a,01h
2DE6 93          movc a,[a+dptr]
2DE7 FA          mov  r2,a
2DE8 74 02       mov  a,02h
2DEA 93          movc a,[a+dptr]
2DEB F9          mov  r1,a
2DEC 90 00 0B    mov  dptr,000Bh ;idxMenuWindowNo
2DEF 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
2DF2 FF          mov  r7,a
2DF3 12 BF 96    call set_current_window_to_r7
2DF6 7F 01       mov  r7,01h ;txt.scale (1=normal)      ;\apply scale
2DF8 12 8E 0C    call osd_set_text_scale_r7             ;/
2DFB 12 62 18    call do_draw_menu_window               ;-draw
2DFE 02 2C 92    ljmp resume_execute_func_if_any        ;-
                ;------------------
                func_1Dh_PowerOff:
2E01 E4          clr  a    ;MenuID_00h_PowerOff         ;\
2E02 FF          mov  r7,a                              ;
2E03 12 BC 9D    call select_menu_r7                    ;/
2E06 90 00 B8    mov  dptr,xram_current_menu                        ;\
2E09 E0          movx a,[dptr]                                      ;
2E0A 75 F0 03    mov  b,03h                                         ;
2E0D A4          mul  a,b                                           ;
2E0E 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
2E10 F5 82       mov  dpl,a                                         ; apply
2E12 E4          clr  a                                             ; proc
2E13 34 2C       adc  a,gui_menu_list/100h                          ; exists
2E15 F5 83       mov  dph,a                                         ;
2E17 E4          clr  a                                             ;
2E18 93          movc a,[a+dptr]                                    ;
2E19 FB          mov  r3,a                                          ;
2E1A 74 01       mov  a,01h                                         ;
2E1C 93          movc a,[a+dptr]                                    ;
2E1D FA          mov  r2,a                                          ;
2E1E 74 02       mov  a,02h                                         ;
2E20 93          movc a,[a+dptr]                                    ;
2E21 F9          mov  r1,a                                          ;
2E22 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
2E25 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2E28 90 00 B9    mov  dptr,xram_current_item                        ;
2E2B E0          movx a,[dptr]                                      ;
2E2C 75 F0 20    mov  b,20h                                         ;
2E2F A4          mul  a,b                                           ;
2E30 FF          mov  r7,a                                          ;
2E31 AE F0       mov  r6,b                                          ;
2E33 29          add  a,r1                                          ;
2E34 F9          mov  r1,a                                          ;
2E35 EA          mov  a,r2                                          ;
2E36 3E          adc  a,r6                                          ;
2E37 FA          mov  r2,a                                          ;
2E38 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
2E3B 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2E3E EA          mov  a,r2                                          ;
2E3F 49          or   a,r1                                          ;
2E40 4B          or   a,r3                                          ;
2E41 60 31       jz   a,@@no_apply_proc                             ;/
                ;- - -
2E43 90 00 B8    mov  dptr,xram_current_menu                        ;\
2E46 E0          movx a,[dptr]                                      ;
2E47 75 F0 03    mov  b,03h                                         ;
2E4A A4          mul  a,b                                           ;
2E4B 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
2E4D F5 82       mov  dpl,a                                         ; apply
2E4F E4          clr  a                                             ; proc
2E50 34 2C       adc  a,gui_menu_list/100h                          ;
2E52 F5 83       mov  dph,a                                         ;
2E54 E4          clr  a                                             ;
2E55 93          movc a,[a+dptr]                                    ;
2E56 FB          mov  r3,a                                          ;
2E57 74 01       mov  a,01h                                         ;
2E59 93          movc a,[a+dptr]                                    ;
2E5A FA          mov  r2,a                                          ;
2E5B 74 02       mov  a,02h                                         ;
2E5D 93          movc a,[a+dptr]                                    ;
2E5E F9          mov  r1,a                                          ;
2E5F 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
2E62 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2E65 E9          mov  a,r1                                          ;
2E66 2F          add  a,r7                                          ;
2E67 F9          mov  r1,a                                          ;
2E68 EA          mov  a,r2                                          ;
2E69 3E          adc  a,r6                                          ;
2E6A FA          mov  r2,a                                          ;
2E6B 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
2E6E 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2E71 12 4D B1    call jmp_r2r1  ;------>                            ;/
                @@no_apply_proc:
2E74 C3          clr  c
2E75 22          ret
                ;------------------
                func_28h_volume_plus:           ;\volume +/-
                func_29h_volume_minus:          ;/
2E76 90 00 47    mov  dptr,xram_keypad_flags_lsb    ;\
2E79 E0          movx a,[dptr]                      ; check if display ON
2E7A 20 E0 03    jnz  a.0,@@display_is_on           ;/
2E7D 02 2C 92    ljmp resume_execute_func_if_any    ;-refuse when display OFF
                ;---
                @@display_is_on:
2E80 90 00 B8    mov  dptr,xram_current_menu
2E83 E0          movx a,[dptr]
2E84 75 F0 03    mov  b,03h
2E87 A4          mul  a,b
2E88 24 4C       add  a,gui_menu_list and 0ffh
2E8A F5 82       mov  dpl,a
2E8C E4          clr  a
2E8D 34 2C       adc  a,gui_menu_list/100h
2E8F F5 83       mov  dph,a
2E91 E4          clr  a
2E92 93          movc a,[a+dptr]
2E93 FB          mov  r3,a
2E94 74 01       mov  a,01h
2E96 93          movc a,[a+dptr]
2E97 FA          mov  r2,a
2E98 74 02       mov  a,02h
2E9A 93          movc a,[a+dptr]
2E9B F9          mov  r1,a
2E9C 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
2E9F 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
2EA2 B4 13 04    jne  a,MenuID_13h_QuicklyVolume,@@_2EA9h          ;\
2EA5 7F 01       mov  r7,01h                                       ;
2EA7 80 02       sjmp @@_2EABh                                     ;
                ;---                                               ;
                @@_2EA9h:                                          ;
2EA9 7F 00       mov  r7,00h                                       ;
                @@_2EABh:                                          ;
2EAB EF          mov  a,r7                                         ;/
2EAC 70 07       jnz  a,@@_2EB5h
2EAE 7D 01       mov  r5,01h ;txt.scale (1=normal)
2EB0 7F 13       mov  r7,MenuID_13h_QuicklyVolume
2EB2 02 3A 2E    jmp  do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any
                ;---
                @@_2EB5h:
2EB5 90 00 B8    mov  dptr,xram_current_menu                        ;\
2EB8 E0          movx a,[dptr]                                      ;
2EB9 75 F0 03    mov  b,03h                                         ;
2EBC A4          mul  a,b                                           ;
2EBD 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
2EBF F5 82       mov  dpl,a                                         ; change
2EC1 E4          clr  a                                             ; proc
2EC2 34 2C       adc  a,gui_menu_list/100h                          ; exists
2EC4 F5 83       mov  dph,a                                         ;
2EC6 E4          clr  a                                             ;
2EC7 93          movc a,[a+dptr]                                    ;
2EC8 FB          mov  r3,a                                          ;
2EC9 74 01       mov  a,01h                                         ;
2ECB 93          movc a,[a+dptr]                                    ;
2ECC FA          mov  r2,a                                          ;
2ECD 74 02       mov  a,02h                                         ;
2ECF 93          movc a,[a+dptr]                                    ;
2ED0 F9          mov  r1,a                                          ;
2ED1 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
2ED4 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2ED7 90 00 B9    mov  dptr,xram_current_item                        ;
2EDA E0          movx a,[dptr]                                      ;
2EDB 75 F0 20    mov  b,20h                                         ;
2EDE A4          mul  a,b                                           ;
2EDF FF          mov  r7,a                                          ;
2EE0 AE F0       mov  r6,b                                          ;
2EE2 29          add  a,r1                                          ;
2EE3 F9          mov  r1,a                                          ;
2EE4 EA          mov  a,r2                                          ;
2EE5 3E          adc  a,r6                                          ;
2EE6 FA          mov  r2,a                                          ;
2EE7 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
2EEA 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2EED EA          mov  a,r2                                          ;
2EEE 49          or   a,r1                                          ;
2EEF 4B          or   a,r3                                          ;
2EF0 60 3C       jz   a,@@no_change_proc                            ;/
                ;- - -
2EF2 90 00 B8    mov  dptr,xram_current_menu                        ;\
2EF5 E0          movx a,[dptr]                                      ;
2EF6 75 F0 03    mov  b,03h                                         ;
2EF9 A4          mul  a,b                                           ;
2EFA 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
2EFC F5 82       mov  dpl,a                                         ; change
2EFE E4          clr  a                                             ; proc
2EFF 34 2C       adc  a,gui_menu_list/100h                          ;
2F01 F5 83       mov  dph,a                                         ;
2F03 E4          clr  a                                             ;
2F04 93          movc a,[a+dptr]                                    ;
2F05 FB          mov  r3,a                                          ;
2F06 74 01       mov  a,01h                                         ;
2F08 93          movc a,[a+dptr]                                    ;
2F09 FA          mov  r2,a                                          ;
2F0A 74 02       mov  a,02h                                         ;
2F0C 93          movc a,[a+dptr]                                    ;
2F0D F9          mov  r1,a                                          ;
2F0E 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
2F11 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2F14 E9          mov  a,r1                                          ;
2F15 2F          add  a,r7                                          ;
2F16 F9          mov  r1,a                                          ;
2F17 EA          mov  a,r2                                          ;
2F18 3E          adc  a,r6                                          ;
2F19 FA          mov  r2,a                                          ;
2F1A 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
2F1D 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
2F20 89 82       mov  dpl,r1                                        ;
2F22 8A 83       mov  dph,r2                                        ;
2F24 AF 27       mov  r7,[iram_tmp__27h]                            ;
2F26 12 4D B5    call jmp_dptr                                      ;/
2F29 50 03       jnc  @@_2F2Eh             ;<-
                ;- - -
2F2B 12 82 95    call xxx_8295h            ;<-
                ;- - -
                @@_2F2Eh:
                @@no_change_proc:
2F2E 90 00 B8    mov  dptr,xram_current_menu
2F31 E0          movx a,[dptr]
2F32 75 F0 03    mov  b,03h
2F35 A4          mul  a,b
2F36 24 4C       add  a,gui_menu_list and 0ffh
2F38 F5 82       mov  dpl,a
2F3A E4          clr  a
2F3B 34 2C       adc  a,gui_menu_list/100h
2F3D F5 83       mov  dph,a
2F3F E4          clr  a
2F40 93          movc a,[a+dptr]
2F41 FB          mov  r3,a
2F42 74 01       mov  a,01h
2F44 93          movc a,[a+dptr]
2F45 FA          mov  r2,a
2F46 74 02       mov  a,02h
2F48 93          movc a,[a+dptr]
2F49 F9          mov  r1,a
2F4A 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
2F4D 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
2F50 90 00 B9    mov  dptr,xram_current_item
2F53 E0          movx a,[dptr]
2F54 75 F0 20    mov  b,20h
2F57 A4          mul  a,b
2F58 FF          mov  r7,a
2F59 AE F0       mov  r6,b
2F5B 29          add  a,r1
2F5C F9          mov  r1,a
2F5D EA          mov  a,r2
2F5E 3E          adc  a,r6
2F5F FA          mov  r2,a
2F60 90 00 17    mov  dptr,0017h ;idxItemProcApply
2F63 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
2F66 EA          mov  a,r2
2F67 49          or   a,r1
2F68 4B          or   a,r3
2F69 70 03       jnz  a,@@have_apply_proc
2F6B 02 2C 92    ljmp resume_execute_func_if_any
                ;---
                @@have_apply_proc:
2F6E 02 38 C5    jmp  execute_apply_proc     ;-------->
                ;------------------
                func_0Dh_plus:         ;\MAIN +/- buttons
                func_0Eh_minus:        ;/
2F71 90 00 B8    mov  dptr,xram_current_menu
2F74 E0          movx a,[dptr]
2F75 75 F0 03    mov  b,03h
2F78 A4          mul  a,b
2F79 24 4C       add  a,gui_menu_list and 0ffh
2F7B F5 82       mov  dpl,a
2F7D E4          clr  a
2F7E 34 2C       adc  a,gui_menu_list/100h
2F80 F5 83       mov  dph,a
2F82 E4          clr  a
2F83 93          movc a,[a+dptr]
2F84 FB          mov  r3,a
2F85 74 01       mov  a,01h
2F87 93          movc a,[a+dptr]
2F88 FA          mov  r2,a
2F89 74 02       mov  a,02h
2F8B 93          movc a,[a+dptr]
2F8C F9          mov  r1,a
2F8D 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
2F90 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
2F93 B4 02 04    jne  a,MenuID_02h_Root,@@_2F9Ah                ;\
2F96 7F 01       mov  r7,01h                                    ;
2F98 80 02       sjmp @@_2F9Ch                                  ;
                ;---                                            ;
                @@_2F9Ah:                                       ;
2F9A 7F 00       mov  r7,00h                                    ;
                @@_2F9Ch:                                       ;
2F9C EF          mov  a,r7                                      ;/
2F9D 60 03       jz   a,@@_2FA2h
2F9F 02 2C 92    ljmp resume_execute_func_if_any
                ;---
                @@_2FA2h:
2FA2 AF 27       mov  r7,[iram_tmp__27h]
2FA4 12 6E 7D    call xxx_6E7Dh
2FA7 02 2C 92    ljmp resume_execute_func_if_any
                ;------------------
                func_06h_prev_item:
                func_07h_next_item:
2FAA AF 27       mov  r7,[iram_tmp__27h]   ;func (06h or 07h)
2FAC 12 A2 3A    call prev_next_item     ;maybe +/- buttons or so
2FAF 02 2C 92    ljmp resume_execute_func_if_any
                ;------------------
                func_04h_next_menu:   ;<-- exists on small 3KEY keypad
                func_05h_prev_menu:   ;<-- exists only on bigger keypads
2FB2 E5 27       mov  a,[iram_tmp__27h]  ;func (04h or 05h)     ;\
2FB4 B4 04 05    jne  a,04h,@@not_next                          ;
2FB7 12 79 19    call search_next_menu      ;NEXT MENU          ;
2FBA 80 03       sjmp @@this                                    ;
                ;---                                            ;
                @@not_next:                                     ;
2FBC 12 7A F0    call search_prev_menu      ;PREV MENU          ;
                @@this:                                         ;/
2FBF 90 00 B8    mov  dptr,xram_current_menu
2FC2 EF          mov  a,r7                      ;XXXXXXXXX!!!!!!!!!!!
2FC3 F0          movx [dptr],a
                ;- - - - - --------
                func_13h_show_menu:
2FC4 90 00 47    mov  dptr,xram_keypad_flags_lsb    ;\
2FC7 E0          movx a,[dptr]                      ; check if display ON
2FC8 20 E0 03    jnz  a.0,@@display_is_on           ;/
2FCB 02 2C 92    ljmp resume_execute_func_if_any    ;-refuse when display OFF
                ;---
                @@display_is_on:
2FCE 90 00 B8    mov  dptr,xram_current_menu
2FD1 E0          movx a,[dptr]
2FD2 75 F0 03    mov  b,03h
2FD5 A4          mul  a,b
2FD6 24 4C       add  a,gui_menu_list and 0ffh
2FD8 F5 82       mov  dpl,a
2FDA E4          clr  a
2FDB 34 2C       adc  a,gui_menu_list/100h
2FDD F5 83       mov  dph,a
2FDF E4          clr  a
2FE0 93          movc a,[a+dptr]
2FE1 FB          mov  r3,a
2FE2 74 01       mov  a,01h
2FE4 93          movc a,[a+dptr]
2FE5 FA          mov  r2,a
2FE6 74 02       mov  a,02h
2FE8 93          movc a,[a+dptr]
2FE9 F9          mov  r1,a
2FEA 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
2FED 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
2FF0 FF          mov  r7,a
2FF1 D3          set  c        ;<-- CY!!!
2FF2 94 02       sbc  a,MenuID_02h_Root
2FF4 40 0B       jc   @@_3001h
2FF6 EF          mov  a,r7
2FF7 94 10       sbc  a,MenuID_10h_SourceMenu
2FF9 40 0B       jc   @@_3006h
2FFB EF          mov  a,r7
2FFC D3          set  c        ;<-- CY!!!
2FFD 94 18       sbc  a,18h ;MenuID_18h_    ???? XXXXXXXXXX
2FFF 50 05       jnc  @@_3006h
                @@_3001h:
3001 7F 03       mov  r7,MenuID_03h_Brightness          ;\FORCE BRIGHTNESS
3003 12 BC 9D    call select_menu_r7                    ;/
                @@_3006h:
3006 7D 01       mov  r5,01h ;txt.scale (1=normal)
3008 7F 25       mov  r7,MenuID_25h_INVALID_or_so
300A 02 3A 2E    jmp  do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any
                ;------------------
                func_0Ch_save_settings:
300D 02 31 69    jmp  do_save_settings_return_cy_0
                ;------------------
                func_0Bh_xxx_NoSignal:
3010 12 A4 EE    call xxx_A4EEh       ;... NoSignal ... Root & Save Settings
3013 C3          clr  c
3014 22          ret
                ;------------------
                func_2Dh_fMenuSource:
3015 12 BA 95    call enter_secret_fMenuSource
3018 02 2C 92    ljmp resume_execute_func_if_any
                ;------------------
                func_2Ch_FactoryMenu:
301B 90 00 36    mov  dptr,xram_sett_keypadtype         ;\
301E E0          movx a,[dptr]                          ;
301F 90 00 4E    mov  dptr,xram_curr_keypadtype         ;
3022 F0          movx [dptr],a                          ;/
3023 7D 01       mov  r5,01h ;txt.scale (1=normal)              ;\
3025 7F 23       mov  r7,MenuID_23h_FactoryMenu                 ;
3027 12 A6 02    call do_select_menu_r7_and_scale_r5            ;/
302A 7D 40       mov  r5,40h
302C 12 71 63    call xxx_7163h            ;--------->
302F 90 00 46    mov  dptr,xram_keypad_flags_msb        ;\
3032 E0          movx a,[dptr]  ;blah                   ;
3033 F0          movx [dptr],a  ;blah                   ;
3034 A3          inc  dptr ;=xram_keypad_flags_lsb      ; set bit2
3035 E0          movx a,[dptr]                          ;
3036 44 04       or   a,04h     ;bit2                   ;
3038 F0          movx [dptr],a                          ;/
3039 02 2C 92    ljmp resume_execute_func_if_any        ;-
                ;------------------
                func_0Ah_FactoryPic:
303C 90 00 B8    mov  dptr,xram_current_menu
303F E0          movx a,[dptr]
3040 75 F0 03    mov  b,03h
3043 A4          mul  a,b
3044 24 4C       add  a,gui_menu_list and 0ffh
3046 F5 82       mov  dpl,a
3048 E4          clr  a
3049 34 2C       adc  a,gui_menu_list/100h
304B F5 83       mov  dph,a
304D E4          clr  a
304E 93          movc a,[a+dptr]
304F FB          mov  r3,a
3050 74 01       mov  a,01h
3052 93          movc a,[a+dptr]
3053 FA          mov  r2,a
3054 74 02       mov  a,02h
3056 93          movc a,[a+dptr]
3057 F9          mov  r1,a
3058 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
305B 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
305E B4 23 04    jne  a,MenuID_23h_FactoryMenu,@@_3065h                 ;\
3061 7F 01       mov  r7,01h                                            ;
3063 80 02       sjmp @@_3067h                                          ;
                ;---                                                    ;
                @@_3065h:                                               ;
3065 7F 00       mov  r7,00h                                            ;
                @@_3067h:                                               ;
3067 EF          mov  a,r7                                              ;/
3068 60 0D       jz   a,@@_3077h
306A 90 00 B9    mov  dptr,xram_current_item            ;\
306D E0          movx a,[dptr]                          ;
306E 70 02       jnz  a,@@blah  ;uh, blah               ; blah
3070 80 00       sjmp @@blah    ;blah                   ;
                @@blah:                                 ;/
3072 7F 24       mov  r7,MenuID_24h_FactoryPic          ;\
3074 12 BC 9D    call select_menu_r7                    ;/
                @@_3077h:
3077 12 71 61    call xxx_7161h
307A 7C 00       mov  r4,00h
307C 7D 40       mov  r5,40h
307E 12 71 65    call xxx_7165h
3081 02 2C 92    ljmp resume_execute_func_if_any
                ;------------------
                func_15h_FactoryMenu:
3084 90 00 B8    mov  dptr,xram_current_menu
3087 E0          movx a,[dptr]
3088 75 F0 03    mov  b,03h
308B A4          mul  a,b
308C 24 4C       add  a,gui_menu_list and 0ffh
308E F5 82       mov  dpl,a
3090 E4          clr  a
3091 34 2C       adc  a,gui_menu_list/100h
3093 F5 83       mov  dph,a
3095 E4          clr  a
3096 93          movc a,[a+dptr]
3097 FB          mov  r3,a
3098 74 01       mov  a,01h
309A 93          movc a,[a+dptr]
309B FA          mov  r2,a
309C 74 02       mov  a,02h
309E 93          movc a,[a+dptr]
309F F9          mov  r1,a
30A0 90 00 0B    mov  dptr,000Bh ;idxMenuWindowNo
30A3 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
30A6 FF          mov  r7,a
30A7 12 BF 96    call set_current_window_to_r7
30AA 7F 01       mov  r7,01h ;txt.scale (1=normal)      ;\
30AC 12 8E 0C    call osd_set_text_scale_r7             ;/
30AF 12 71 61    call xxx_7161h                         ;-
30B2 7F 23       mov  r7,MenuID_23h_FactoryMenu         ;\
30B4 12 BC 9D    call select_menu_r7                    ;/
30B7 90 00 B7    mov  dptr,xram_old_item
30BA E0          movx a,[dptr]
30BB 90 00 B9    mov  dptr,xram_current_item
30BE F0          movx [dptr],a
30BF 02 2C 92    ljmp resume_execute_func_if_any
                ;------------------
;:------------- ;:----------------- code (func_2Eh blue/snow/black)
                ;------------------
                func_2Eh_xxx:          ;...display BLUE,SNOW,BLACK (no signal)
30C2 90 00 46    mov  dptr,xram_keypad_flags_msb        ;\
30C5 E0          movx a,[dptr]  ;blah                   ;
30C6 F0          movx [dptr],a  ;blah                   ;
30C7 A3          inc  dptr ;=xram_keypad_flags_lsb      ; clear bit2
30C8 E0          movx a,[dptr]                          ;
30C9 54 FB       and  a,0FBh     ;clear bit2            ;
30CB F0          movx [dptr],a                          ;/
30CC 90 00 4E    mov  dptr,xram_curr_keypadtype         ;\
30CF E0          movx a,[dptr]                          ;
30D0 90 00 36    mov  dptr,xram_sett_keypadtype         ;
30D3 F0          movx [dptr],a                          ;/
30D4 90 00 2C    mov  dptr,xram_sett_no_signal       ;BLUE,SNOW,BLACK
30D7 E0          movx a,[dptr]
30D8 B4 01 05    jne  a,01h,@@not_1_snow
30DB 12 B4 6F    call lcd_display_snow                                  ;\SNOW
30DE 80 4A       sjmp @@blue_snow_black_done                            ;/
                ;---
                @@not_1_snow:
30E0 90 00 2C    mov  dptr,xram_sett_no_signal
30E3 E0          movx a,[dptr]
30E4 70 1B       jnz  a,@@not_0_blue
30E6 90 FF B0    mov  dptr,IO_LCD_snow_enable_and_misc  ;\              ;\
30E9 E0          movx a,[dptr]                          ;               ;
30EA 54 7F       and  a,7Fh      ;bit7=0 (snow off)     ;               ;
30EC F0          movx [dptr],a                          ;               ;
30ED E0          movx a,[dptr]   ;re-read?              ;               ;
30EE 44 20       or   a,20h      ;bit5=1                ;               ; BLUE
30F0 F0          movx [dptr],a                          ;/              ;
                .if tech_version<ver11sep2017                           ;
30F1 90 FF CE      mov  dptr,IO_LCD_backdrop_color_Y      ;\            ;
30F4 74 13         mov  a,13h                             ;             ;
30F6 F0            movx [dptr],a                          ;             ;
30F7 A3            inc  dptr ;=IO_LCD_backdrop_color_Cb   ; BLUE        ;
30F8 74 DD         mov  a,0DDh                            ;             ;
30FA F0            movx [dptr],a                          ;             ;
30FB A3            inc  dptr ;=IO_LCD_backdrop_color_Cr   ;             ;
30FC 74 72         mov  a,72h                             ;             ;
30FE F0            movx [dptr],a                          ;/            ;
                .else                                                   ;
     90 FF CE      mov  dptr,IO_LCD_backdrop_color_Y      ;\            ;
     E4            clr  a                                 ;             ;
     F0            movx [dptr],a                          ;             ;
     A3            inc  dptr ;=IO_LCD_backdrop_color_Cb   ; BLACK?      ;
     74 80         mov  a,80h                             ;             ;
     F0            movx [dptr],a                          ;             ;
     A3            inc  dptr ;=IO_LCD_backdrop_color_Cr   ;             ;
     F0            movx [dptr],a                          ;/            ;
                .endif                                                  ;
30FF 80 29       sjmp @@blue_snow_black_done                            ;/
                ;---
                @@not_0_blue:
3101 90 FF B0    mov  dptr,IO_LCD_snow_enable_and_misc  ;\              ;\
3104 E0          movx a,[dptr]                          ;               ;
3105 54 7F       and  a,7Fh      ;bit7=0 (snow off)     ;               ;
3107 F0          movx [dptr],a                          ;               ;
3108 E0          movx a,[dptr]   ;re-read?              ;               ; BLACK
3109 44 20       or   a,20h      ;bit5=1                ;               ;
310B F0          movx [dptr],a                          ;/              ;
310C 90 FF CE    mov  dptr,IO_LCD_backdrop_color_Y      ;\              ;
310F E4          clr  a                                 ;               ;
3110 F0          movx [dptr],a                          ;               ;
3111 A3          inc  dptr ;=IO_LCD_backdrop_color_Cb   ;               ;
3112 74 80       mov  a,80h                             ;               ;
3114 F0          movx [dptr],a                          ;               ;
3115 A3          inc  dptr ;=IO_LCD_backdrop_color_Cr   ;               ;
3116 F0          movx [dptr],a                          ;/              ;
3117 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\      ;
311A E0          movx a,[dptr]                                  ;       ;
311B 54 06       and  a,06h                                     ;       ;
311D FF          mov  r7,a                                      ;       ;
311E BF 06 03    jne  r7,06h,@@clear_cy  ;\                     ;       ;
3121 D3          set  c                  ;                      ;       ;
3122 80 01       sjmp @@this_cy          ;                      ;       ;
                ;---                     ;                      ;       ;
                @@clear_cy:              ;                      ;       ;
3124 C3          clr  c                  ;                      ;       ;
                @@this_cy:               ;/                     ;       ;
3125 40 03       jc   @@skip_backlight_off            ;\        ;       ;
3127 12 AF 27    call switch_screen_and_backlight_off ;         ;       ;
                @@skip_backlight_off:                 ;/        ;/      ;/
                ;- - - -
                @@blue_snow_black_done:
312A 90 00 46    mov  dptr,xram_keypad_flags_msb        ;\
312D E0          movx a,[dptr]  ;blah                   ;
312E F0          movx [dptr],a  ;blah                   ;
312F A3          inc  dptr ;=xram_keypad_flags_lsb      ; clear bit3
3130 E0          movx a,[dptr]                          ;
3131 54 F7       and  a,0F7h    ;clear bit3             ;
3133 F0          movx [dptr],a                          ;/
3134 12 BF 26    call osd_disable_all_windows_and_whatever    ;---------->
3137 12 BD 53    call select_Root_menu
313A 12 A5 FB    call do_select_menu_SourceMenu_and_whatever
                ;- - -
313D 90 00 B8    mov  dptr,xram_current_menu
3140 E0          movx a,[dptr]
3141 75 F0 03    mov  b,03h
3144 A4          mul  a,b
3145 24 4C       add  a,gui_menu_list and 0ffh
3147 F5 82       mov  dpl,a
3149 E4          clr  a
314A 34 2C       adc  a,gui_menu_list/100h
314C F5 83       mov  dph,a
314E E4          clr  a
314F 93          movc a,[a+dptr]
3150 FB          mov  r3,a
3151 74 01       mov  a,01h
3153 93          movc a,[a+dptr]
3154 FA          mov  r2,a
3155 74 02       mov  a,02h
3157 93          movc a,[a+dptr]
3158 F9          mov  r1,a
3159 90 00 22    mov  dptr,0022h ;idxMenu___22h
315C 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
315F FF          mov  r7,a
3160 90 00 3A    mov  dptr,xram_backtoroot_offhold_msb
3163 E5 F0       mov  a,b
3165 F0          movx [dptr],a
3166 A3          inc  dptr ;=xram_backtoroot_offhold_lsb
3167 EF          mov  a,r7
3168 F0          movx [dptr],a
                ;- - - - - - ------
                do_save_settings_return_cy_0:
3169 12 A6 A8    call do_save_settings
316C C3          clr  c
316D 22          ret
                ;------------------
;:------------- ;:----------------- GUI code (func_xxh's)
                ;------------------
                func_11h_QuicklyRotate:   ;hotkey?
316E 7F 15       mov  r7,MenuID_15h_QuicklyRotate       ;\
3170 12 BC 9D    call select_menu_r7                    ;/
3173 90 00 B8    mov  dptr,xram_current_menu                        ;\
3176 E0          movx a,[dptr]                                      ;
3177 75 F0 03    mov  b,03h                                         ;
317A A4          mul  a,b                                           ;
317B 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
317D F5 82       mov  dpl,a                                         ; change
317F E4          clr  a                                             ; proc
3180 34 2C       adc  a,gui_menu_list/100h                          ; exists
3182 F5 83       mov  dph,a                                         ;
3184 E4          clr  a                                             ;
3185 93          movc a,[a+dptr]                                    ;
3186 FB          mov  r3,a                                          ;
3187 74 01       mov  a,01h                                         ;
3189 93          movc a,[a+dptr]                                    ;
318A FA          mov  r2,a                                          ;
318B 74 02       mov  a,02h                                         ;
318D 93          movc a,[a+dptr]                                    ;
318E F9          mov  r1,a                                          ;
318F 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
3192 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3195 90 00 B9    mov  dptr,xram_current_item                        ;
3198 E0          movx a,[dptr]                                      ;
3199 75 F0 20    mov  b,20h                                         ;
319C A4          mul  a,b                                           ;
319D FF          mov  r7,a                                          ;
319E AE F0       mov  r6,b                                          ;
31A0 29          add  a,r1                                          ;
31A1 F9          mov  r1,a                                          ;
31A2 EA          mov  a,r2                                          ;
31A3 3E          adc  a,r6                                          ;
31A4 FA          mov  r2,a                                          ;
31A5 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
31A8 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
31AB EA          mov  a,r2                                          ;
31AC 49          or   a,r1                                          ;
31AD 4B          or   a,r3                                          ;
31AE 60 37       jz   a,@@no_change_proc                            ;/
                ;- - -
31B0 90 00 B8    mov  dptr,xram_current_menu                        ;\
31B3 E0          movx a,[dptr]                                      ;
31B4 75 F0 03    mov  b,03h                                         ;
31B7 A4          mul  a,b                                           ;
31B8 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
31BA F5 82       mov  dpl,a                                         ; change
31BC E4          clr  a                                             ; proc
31BD 34 2C       adc  a,gui_menu_list/100h                          ;
31BF F5 83       mov  dph,a                                         ;
31C1 E4          clr  a                                             ;
31C2 93          movc a,[a+dptr]                                    ;
31C3 FB          mov  r3,a                                          ;
31C4 74 01       mov  a,01h                                         ;
31C6 93          movc a,[a+dptr]                                    ;
31C7 FA          mov  r2,a                                          ;
31C8 74 02       mov  a,02h                                         ;
31CA 93          movc a,[a+dptr]                                    ;
31CB F9          mov  r1,a                                          ;
31CC 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
31CF 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
31D2 E9          mov  a,r1                                          ;
31D3 2F          add  a,r7                                          ;
31D4 F9          mov  r1,a                                          ;
31D5 EA          mov  a,r2                                          ;
31D6 3E          adc  a,r6                                          ;
31D7 FA          mov  r2,a                                          ;
31D8 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
31DB 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
31DE 89 82       mov  dpl,r1                                        ;
31E0 8A 83       mov  dph,r2                                        ;
31E2 AF 27       mov  r7,[iram_tmp__27h]                            ;
31E4 12 4D B5    call jmp_dptr                                      ;/
                ;- - -
                @@no_change_proc:
31E7 90 00 B8    mov  dptr,xram_current_menu                        ;\
31EA E0          movx a,[dptr]                                      ;
31EB 75 F0 03    mov  b,03h                                         ;
31EE A4          mul  a,b                                           ;
31EF 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
31F1 F5 82       mov  dpl,a                                         ; apply
31F3 E4          clr  a                                             ; proc
31F4 34 2C       adc  a,gui_menu_list/100h                          ; exists
31F6 F5 83       mov  dph,a                                         ;
31F8 E4          clr  a                                             ;
31F9 93          movc a,[a+dptr]                                    ;
31FA FB          mov  r3,a                                          ;
31FB 74 01       mov  a,01h                                         ;
31FD 93          movc a,[a+dptr]                                    ;
31FE FA          mov  r2,a                                          ;
31FF 74 02       mov  a,02h                                         ;
3201 93          movc a,[a+dptr]                                    ;
3202 F9          mov  r1,a                                          ;
3203 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
3206 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3209 90 00 B9    mov  dptr,xram_current_item                        ;
320C E0          movx a,[dptr]                                      ;
320D 75 F0 20    mov  b,20h                                         ;
3210 A4          mul  a,b                                           ;
3211 FF          mov  r7,a                                          ;
3212 AE F0       mov  r6,b                                          ;
3214 29          add  a,r1                                          ;
3215 F9          mov  r1,a                                          ;
3216 EA          mov  a,r2                                          ;
3217 3E          adc  a,r6                                          ;
3218 FA          mov  r2,a                                          ;
3219 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
321C 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
321F EA          mov  a,r2                                          ;
3220 49          or   a,r1                                          ;
3221 4B          or   a,r3                                          ;
3222 60 31       jz   a,@@no_apply_proc                             ;/
                ;- - -
3224 90 00 B8    mov  dptr,xram_current_menu                        ;\
3227 E0          movx a,[dptr]                                      ;
3228 75 F0 03    mov  b,03h                                         ;
322B A4          mul  a,b                                           ;
322C 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
322E F5 82       mov  dpl,a                                         ; apply
3230 E4          clr  a                                             ; proc
3231 34 2C       adc  a,gui_menu_list/100h                          ;
3233 F5 83       mov  dph,a                                         ;
3235 E4          clr  a                                             ;
3236 93          movc a,[a+dptr]                                    ;
3237 FB          mov  r3,a                                          ;
3238 74 01       mov  a,01h                                         ;
323A 93          movc a,[a+dptr]                                    ;
323B FA          mov  r2,a                                          ;
323C 74 02       mov  a,02h                                         ;
323E 93          movc a,[a+dptr]                                    ;
323F F9          mov  r1,a                                          ;
3240 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
3243 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3246 E9          mov  a,r1                                          ;
3247 2F          add  a,r7                                          ;
3248 F9          mov  r1,a                                          ;
3249 EA          mov  a,r2                                          ;
324A 3E          adc  a,r6                                          ;
324B FA          mov  r2,a                                          ;
324C 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
324F 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3252 12 4D B1    call jmp_r2r1  ;----->                             ;/
                @@no_apply_proc:
                ;- - - - - --------
                func_12h_xxx:
3255 7D 01       mov  r5,01h ;txt.scale (1=normal)
3257 7F 25       mov  r7,MenuID_25h_INVALID_or_so
3259 02 3A 2E    jmp  do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any
                ;------------------
                func_16h_QuicklySourceMenu:
                .if tech_version<ver11sep2017
325C D2 08         set  [iram_misc_flags].miscflg_0               ;-
325E 90 00 2C      mov  dptr,xram_sett_no_signal                  ;\
3261 E0            movx a,[dptr]                                  ;
3262 B4 02 17      jne  a,02h,@@not_2_black                       ;
3265 90 00 0C      mov  dptr,xram_sett_input                      ; maybe wakeup
3268 E0            movx a,[dptr]                                  ; when BLACK ?
3269 B4 02 09      jne  a,02h,@@_3275h ;------->                  ;
326C 12 04 93      call switch_lcd_screen_on_or_off    ;--->      ; and/or
326F 40 0B         jc   @@_327Ch                                  ; refuse when
3271 C2 08         clr  [iram_misc_flags].miscflg_0               ; no input ?
3273 80 07         sjmp @@_327Ch                                  ;
                  ;---                                            ;
                  @@_3275h:                                       ;
3275 12 06 1A      call check_if_signal  ;------------->          ;
3278 40 02         jc   @@_327Ch                                  ;
327A C2 08         clr  [iram_misc_flags].miscflg_0    ;<----     ;
                  @@_327Ch:                                       ;
                  @@not_2_black:                                  ;/
327C 20 08 02      jnz  [iram_misc_flags].miscflg_0,@@_3281h ;<-- ;\
327F C3            clr  c                                         ;
3280 22            ret                                            ;
                  ;---                                            ;
                  @@_3281h:                                       ;/
                .endif
                ;- - - -
3281 7F 10       mov  r7,MenuID_10h_SourceMenu                  ;\  <---
3283 12 BC 9D    call select_menu_r7                            ;/
3286 90 00 B8    mov  dptr,xram_current_menu                        ;\
3289 E0          movx a,[dptr]                                      ;
328A 75 F0 03    mov  b,03h                                         ;
328D A4          mul  a,b                                           ;
328E 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
3290 F5 82       mov  dpl,a                                         ; change
3292 E4          clr  a                                             ; proc
3293 34 2C       adc  a,gui_menu_list/100h                          ; exists
3295 F5 83       mov  dph,a                                         ;
3297 E4          clr  a                                             ;
3298 93          movc a,[a+dptr]                                    ;
3299 FB          mov  r3,a                                          ;
329A 74 01       mov  a,01h                                         ;
329C 93          movc a,[a+dptr]                                    ;
329D FA          mov  r2,a                                          ;
329E 74 02       mov  a,02h                                         ;
32A0 93          movc a,[a+dptr]                                    ;
32A1 F9          mov  r1,a                                          ;
32A2 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
32A5 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
32A8 90 00 B9    mov  dptr,xram_current_item                        ;
32AB E0          movx a,[dptr]                                      ;
32AC 75 F0 20    mov  b,20h                                         ;
32AF A4          mul  a,b                                           ;
32B0 FF          mov  r7,a                                          ;
32B1 AE F0       mov  r6,b                                          ;
32B3 29          add  a,r1                                          ;
32B4 F9          mov  r1,a                                          ;
32B5 EA          mov  a,r2                                          ;
32B6 3E          adc  a,r6                                          ;
32B7 FA          mov  r2,a                                          ;
32B8 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
32BB 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
32BE EA          mov  a,r2                                          ;
32BF 49          or   a,r1                                          ;
32C0 4B          or   a,r3                                          ;
32C1 60 37       jz   a,@@no_change_proc                            ;/
                ;- - -
32C3 90 00 B8    mov  dptr,xram_current_menu                        ;\
32C6 E0          movx a,[dptr]                                      ;
32C7 75 F0 03    mov  b,03h                                         ;
32CA A4          mul  a,b                                           ;
32CB 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
32CD F5 82       mov  dpl,a                                         ; change
32CF E4          clr  a                                             ; proc
32D0 34 2C       adc  a,gui_menu_list/100h                          ;
32D2 F5 83       mov  dph,a                                         ;
32D4 E4          clr  a                                             ;
32D5 93          movc a,[a+dptr]                                    ;
32D6 FB          mov  r3,a                                          ;
32D7 74 01       mov  a,01h                                         ;
32D9 93          movc a,[a+dptr]                                    ;
32DA FA          mov  r2,a                                          ;
32DB 74 02       mov  a,02h                                         ;
32DD 93          movc a,[a+dptr]                                    ;
32DE F9          mov  r1,a                                          ;
32DF 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
32E2 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
32E5 E9          mov  a,r1                                          ;
32E6 2F          add  a,r7                                          ;
32E7 F9          mov  r1,a                                          ;
32E8 EA          mov  a,r2                                          ;
32E9 3E          adc  a,r6                                          ;
32EA FA          mov  r2,a                                          ;
32EB 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
32EE 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
32F1 89 82       mov  dpl,r1                                        ;
32F3 8A 83       mov  dph,r2                                        ;
32F5 AF 27       mov  r7,[iram_tmp__27h]                            ;
32F7 12 4D B5    call jmp_dptr                                      ;/
                ;- - -
                @@no_change_proc:
32FA 90 00 B8    mov  dptr,xram_current_menu                        ;\
32FD E0          movx a,[dptr]                                      ;
32FE 75 F0 03    mov  b,03h                                         ;
3301 A4          mul  a,b                                           ;
3302 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
3304 F5 82       mov  dpl,a                                         ; apply
3306 E4          clr  a                                             ; proc
3307 34 2C       adc  a,gui_menu_list/100h                          ; exists
3309 F5 83       mov  dph,a                                         ;
330B E4          clr  a                                             ;
330C 93          movc a,[a+dptr]                                    ;
330D FB          mov  r3,a                                          ;
330E 74 01       mov  a,01h                                         ;
3310 93          movc a,[a+dptr]                                    ;
3311 FA          mov  r2,a                                          ;
3312 74 02       mov  a,02h                                         ;
3314 93          movc a,[a+dptr]                                    ;
3315 F9          mov  r1,a                                          ;
3316 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
3319 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
331C 90 00 B9    mov  dptr,xram_current_item                        ;
331F E0          movx a,[dptr]                                      ;
3320 75 F0 20    mov  b,20h                                         ;
3323 A4          mul  a,b                                           ;
3324 FF          mov  r7,a                                          ;
3325 AE F0       mov  r6,b                                          ;
3327 29          add  a,r1                                          ;
3328 F9          mov  r1,a                                          ;
3329 EA          mov  a,r2                                          ;
332A 3E          adc  a,r6                                          ;
332B FA          mov  r2,a                                          ;
332C 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
332F 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3332 EA          mov  a,r2                                          ;
3333 49          or   a,r1                                          ;
3334 4B          or   a,r3                                          ;
3335 60 31       jz   a,@@no_apply_proc                             ;/
                ;- - -
3337 90 00 B8    mov  dptr,xram_current_menu                        ;\
333A E0          movx a,[dptr]                                      ;
333B 75 F0 03    mov  b,03h                                         ;
333E A4          mul  a,b                                           ;
333F 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
3341 F5 82       mov  dpl,a                                         ; apply
3343 E4          clr  a                                             ; proc
3344 34 2C       adc  a,gui_menu_list/100h                          ;
3346 F5 83       mov  dph,a                                         ;
3348 E4          clr  a                                             ;
3349 93          movc a,[a+dptr]                                    ;
334A FB          mov  r3,a                                          ;
334B 74 01       mov  a,01h                                         ;
334D 93          movc a,[a+dptr]                                    ;
334E FA          mov  r2,a                                          ;
334F 74 02       mov  a,02h                                         ;
3351 93          movc a,[a+dptr]                                    ;
3352 F9          mov  r1,a                                          ;
3353 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
3356 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3359 E9          mov  a,r1                                          ;
335A 2F          add  a,r7                                          ;
335B F9          mov  r1,a                                          ;
335C EA          mov  a,r2                                          ;
335D 3E          adc  a,r6                                          ;
335E FA          mov  r2,a                                          ;
335F 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
3362 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3365 12 4D B1    call jmp_r2r1  ;----->                             ;/
                @@no_apply_proc:
                ;- - - - - --------
                func_19h_SourceMenu:
3368 90 00 46    mov  dptr,xram_keypad_flags_msb
336B E0          movx a,[dptr]
336C FE          mov  r6,a
336D A3          inc  dptr ;=xram_keypad_flags_lsb
336E E0          movx a,[dptr]
336F 78 03       mov  r0,03h  ;shift amount     ;\
                @@shift_lop:                    ;
3371 CE          xchg a,r6                      ;
3372 C3          clr  c                         ;
3373 13          rcr  a                         ;
3374 CE          xchg a,r6                      ;
3375 13          rcr  a                         ;
3376 D8 F9       djnz r0,@@shift_lop            ;/
3378 30 E0 03    jz   a.0,@@clear_cy
337B D3          set  c
337C 80 01       sjmp @@this_cy
                ;---
                @@clear_cy:
337E C3          clr  c
                @@this_cy:
337F 50 03       jnc  @@_3384h
3381 02 2C 92    ljmp resume_execute_func_if_any
                ;---
                @@_3384h:
3384 7D 01       mov  r5,01h ;txt.scale (1=normal)
3386 7F 10       mov  r7,MenuID_10h_SourceMenu
3388 02 3A 2E    jmp  do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any
                ;------------------
                func_20h_QuicklyMode:
338B 7F 14       mov  r7,MenuID_14h_QuicklyMode    ;\
338D 12 BC 9D    call select_menu_r7                    ;/
3390 90 00 B8    mov  dptr,xram_current_menu                        ;\
3393 E0          movx a,[dptr]                                      ;
3394 75 F0 03    mov  b,03h                                         ;
3397 A4          mul  a,b                                           ;
3398 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
339A F5 82       mov  dpl,a                                         ; change
339C E4          clr  a                                             ; proc
339D 34 2C       adc  a,gui_menu_list/100h                          ; exists
339F F5 83       mov  dph,a                                         ;
33A1 E4          clr  a                                             ;
33A2 93          movc a,[a+dptr]                                    ;
33A3 FB          mov  r3,a                                          ;
33A4 74 01       mov  a,01h                                         ;
33A6 93          movc a,[a+dptr]                                    ;
33A7 FA          mov  r2,a                                          ;
33A8 74 02       mov  a,02h                                         ;
33AA 93          movc a,[a+dptr]                                    ;
33AB F9          mov  r1,a                                          ;
33AC 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
33AF 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
33B2 90 00 B9    mov  dptr,xram_current_item                        ;
33B5 E0          movx a,[dptr]                                      ;
33B6 75 F0 20    mov  b,20h                                         ;
33B9 A4          mul  a,b                                           ;
33BA FF          mov  r7,a                                          ;
33BB AE F0       mov  r6,b                                          ;
33BD 29          add  a,r1                                          ;
33BE F9          mov  r1,a                                          ;
33BF EA          mov  a,r2                                          ;
33C0 3E          adc  a,r6                                          ;
33C1 FA          mov  r2,a                                          ;
33C2 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
33C5 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
33C8 EA          mov  a,r2                                          ;
33C9 49          or   a,r1                                          ;
33CA 4B          or   a,r3                                          ;
33CB 60 37       jz   a,@@no_change_proc                            ;/
                ;- - -
33CD 90 00 B8    mov  dptr,xram_current_menu                        ;\
33D0 E0          movx a,[dptr]                                      ;
33D1 75 F0 03    mov  b,03h                                         ;
33D4 A4          mul  a,b                                           ;
33D5 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
33D7 F5 82       mov  dpl,a                                         ; change
33D9 E4          clr  a                                             ; proc
33DA 34 2C       adc  a,gui_menu_list/100h                          ;
33DC F5 83       mov  dph,a                                         ;
33DE E4          clr  a                                             ;
33DF 93          movc a,[a+dptr]                                    ;
33E0 FB          mov  r3,a                                          ;
33E1 74 01       mov  a,01h                                         ;
33E3 93          movc a,[a+dptr]                                    ;
33E4 FA          mov  r2,a                                          ;
33E5 74 02       mov  a,02h                                         ;
33E7 93          movc a,[a+dptr]                                    ;
33E8 F9          mov  r1,a                                          ;
33E9 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
33EC 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
33EF E9          mov  a,r1                                          ;
33F0 2F          add  a,r7                                          ;
33F1 F9          mov  r1,a                                          ;
33F2 EA          mov  a,r2                                          ;
33F3 3E          adc  a,r6                                          ;
33F4 FA          mov  r2,a                                          ;
33F5 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
33F8 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
33FB 89 82       mov  dpl,r1                                        ;
33FD 8A 83       mov  dph,r2                                        ;
33FF AF 27       mov  r7,[iram_tmp__27h]                            ;
3401 12 4D B5    call jmp_dptr                                      ;/
                @@no_change_proc:
                ;- - -
3404 90 00 B8    mov  dptr,xram_current_menu                        ;\
3407 E0          movx a,[dptr]                                      ;
3408 75 F0 03    mov  b,03h                                         ;
340B A4          mul  a,b                                           ;
340C 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
340E F5 82       mov  dpl,a                                         ; apply
3410 E4          clr  a                                             ; proc
3411 34 2C       adc  a,gui_menu_list/100h                          ; exists
3413 F5 83       mov  dph,a                                         ;
3415 E4          clr  a                                             ;
3416 93          movc a,[a+dptr]                                    ;
3417 FB          mov  r3,a                                          ;
3418 74 01       mov  a,01h                                         ;
341A 93          movc a,[a+dptr]                                    ;
341B FA          mov  r2,a                                          ;
341C 74 02       mov  a,02h                                         ;
341E 93          movc a,[a+dptr]                                    ;
341F F9          mov  r1,a                                          ;
3420 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
3423 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3426 90 00 B9    mov  dptr,xram_current_item                        ;
3429 E0          movx a,[dptr]                                      ;
342A 75 F0 20    mov  b,20h                                         ;
342D A4          mul  a,b                                           ;
342E FF          mov  r7,a                                          ;
342F AE F0       mov  r6,b                                          ;
3431 29          add  a,r1                                          ;
3432 F9          mov  r1,a                                          ;
3433 EA          mov  a,r2                                          ;
3434 3E          adc  a,r6                                          ;
3435 FA          mov  r2,a                                          ;
3436 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
3439 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
343C EA          mov  a,r2                                          ;
343D 49          or   a,r1                                          ;
343E 4B          or   a,r3                                          ;
343F 60 31       jz   a,@@no_apply_proc                             ;/
                ;- - -
3441 90 00 B8    mov  dptr,xram_current_menu                        ;\
3444 E0          movx a,[dptr]                                      ;
3445 75 F0 03    mov  b,03h                                         ;
3448 A4          mul  a,b                                           ;
3449 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
344B F5 82       mov  dpl,a                                         ; apply
344D E4          clr  a                                             ; proc
344E 34 2C       adc  a,gui_menu_list/100h                          ;
3450 F5 83       mov  dph,a                                         ;
3452 E4          clr  a                                             ;
3453 93          movc a,[a+dptr]                                    ;
3454 FB          mov  r3,a                                          ;
3455 74 01       mov  a,01h                                         ;
3457 93          movc a,[a+dptr]                                    ;
3458 FA          mov  r2,a                                          ;
3459 74 02       mov  a,02h                                         ;
345B 93          movc a,[a+dptr]                                    ;
345C F9          mov  r1,a                                          ;
345D 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
3460 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3463 E9          mov  a,r1                                          ;
3464 2F          add  a,r7                                          ;
3465 F9          mov  r1,a                                          ;
3466 EA          mov  a,r2                                          ;
3467 3E          adc  a,r6                                          ;
3468 FA          mov  r2,a                                          ;
3469 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
346C 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
346F 12 4D B1    call jmp_r2r1  ;----->                             ;/
                @@no_apply_proc:
                ;- - - - - --------
                func_21h_xxx:
3472 7D 01       mov  r5,01h ;txt.scale (1=normal)
3474 7F 25       mov  r7,MenuID_25h_INVALID_or_so
3476 02 3A 2E    jmp  do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any
                ;------------------
                func_22h_QuicklyBrightness:
3479 90 00 B8    mov  dptr,xram_current_menu
347C E0          movx a,[dptr]
347D 75 F0 03    mov  b,03h
3480 A4          mul  a,b
3481 24 4C       add  a,gui_menu_list and 0ffh
3483 F5 82       mov  dpl,a
3485 E4          clr  a
3486 34 2C       adc  a,gui_menu_list/100h
3488 F5 83       mov  dph,a
348A E4          clr  a
348B 93          movc a,[a+dptr]
348C FB          mov  r3,a
348D 74 01       mov  a,01h
348F 93          movc a,[a+dptr]
3490 FA          mov  r2,a
3491 74 02       mov  a,02h
3493 93          movc a,[a+dptr]
3494 F9          mov  r1,a
3495 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
3498 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
349B B4 03 04    jne  a,MenuID_03h_Brightness,@@_34A2h          ;\
349E 7F 01       mov  r7,01h                                    ;
34A0 80 02       sjmp @@_34A4h                                  ;
                ;---                                            ;
                @@_34A2h:                                       ;
34A2 7F 00       mov  r7,00h                                    ;
                @@_34A4h:                                       ;/
34A4 EF          mov  a,r7
34A5 70 03       jnz  a,@@_34AAh
34A7 02 35 4A    jmp  do_select_menu_Brightness
                ;---
                @@_34AAh:
34AA 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
34AD 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
34B0 90 00 B9    mov  dptr,xram_current_item
34B3 E0          movx a,[dptr]
34B4 75 F0 20    mov  b,20h
34B7 A4          mul  a,b
34B8 FF          mov  r7,a
34B9 AE F0       mov  r6,b
34BB 29          add  a,r1
34BC F9          mov  r1,a
34BD EA          mov  a,r2
34BE 3E          adc  a,r6
34BF FA          mov  r2,a
34C0 90 00 14    mov  dptr,0014h ;idxItemProcChange
34C3 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
34C6 EA          mov  a,r2
34C7 49          or   a,r1
34C8 4B          or   a,r3
34C9 60 3C       jz   a,@@no_change_proc
34CB 90 00 B8    mov  dptr,xram_current_menu                        ;\
34CE E0          movx a,[dptr]                                      ;
34CF 75 F0 03    mov  b,03h                                         ;
34D2 A4          mul  a,b                                           ;
34D3 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
34D5 F5 82       mov  dpl,a                                         ; change
34D7 E4          clr  a                                             ; proc
34D8 34 2C       adc  a,gui_menu_list/100h                          ;
34DA F5 83       mov  dph,a                                         ;
34DC E4          clr  a                                             ;
34DD 93          movc a,[a+dptr]                                    ;
34DE FB          mov  r3,a                                          ;
34DF 74 01       mov  a,01h                                         ;
34E1 93          movc a,[a+dptr]                                    ;
34E2 FA          mov  r2,a                                          ;
34E3 74 02       mov  a,02h                                         ;
34E5 93          movc a,[a+dptr]                                    ;
34E6 F9          mov  r1,a                                          ;
34E7 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
34EA 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
34ED E9          mov  a,r1                                          ;
34EE 2F          add  a,r7                                          ;
34EF F9          mov  r1,a                                          ;
34F0 EA          mov  a,r2                                          ;
34F1 3E          adc  a,r6                                          ;
34F2 FA          mov  r2,a                                          ;
34F3 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
34F6 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
34F9 89 82       mov  dpl,r1                                        ;
34FB 8A 83       mov  dph,r2                                        ;
34FD AF 27       mov  r7,[iram_tmp__27h]                            ;
34FF 12 4D B5    call jmp_dptr                                      ;/
3502 50 03       jnc  @@_3507h              ;<--
3504 12 82 95    call xxx_8295h             ;<--
                ;- - -
                @@_3507h:
                @@no_change_proc:
3507 90 00 B8    mov  dptr,xram_current_menu
350A E0          movx a,[dptr]
350B 75 F0 03    mov  b,03h
350E A4          mul  a,b
350F 24 4C       add  a,gui_menu_list and 0ffh
3511 F5 82       mov  dpl,a
3513 E4          clr  a
3514 34 2C       adc  a,gui_menu_list/100h
3516 F5 83       mov  dph,a
3518 E4          clr  a
3519 93          movc a,[a+dptr]
351A FB          mov  r3,a
351B 74 01       mov  a,01h
351D 93          movc a,[a+dptr]
351E FA          mov  r2,a
351F 74 02       mov  a,02h
3521 93          movc a,[a+dptr]
3522 F9          mov  r1,a
3523 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
3526 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
3529 90 00 B9    mov  dptr,xram_current_item
352C E0          movx a,[dptr]
352D 75 F0 20    mov  b,20h
3530 A4          mul  a,b
3531 FF          mov  r7,a
3532 AE F0       mov  r6,b
3534 29          add  a,r1
3535 F9          mov  r1,a
3536 EA          mov  a,r2
3537 3E          adc  a,r6
3538 FA          mov  r2,a
3539 90 00 17    mov  dptr,0017h ;idxItemProcApply
353C 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
353F EA          mov  a,r2
3540 49          or   a,r1
3541 4B          or   a,r3
3542 70 03       jnz  a,@@have_apply_proc
3544 02 2C 92    ljmp resume_execute_func_if_any
                ;---
                @@have_apply_proc:
3547 02 38 C5    jmp  execute_apply_proc
                ;--- --- --- ------
                do_select_menu_Brightness:
354A 7F 03       mov  r7,MenuID_03h_Brightness          ;\
354C 12 BC 9D    call select_menu_r7                    ;/
354F 90 00 B8    mov  dptr,xram_current_menu                        ;\
3552 E0          movx a,[dptr]                                      ;
3553 75 F0 03    mov  b,03h                                         ;
3556 A4          mul  a,b                                           ;
3557 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
3559 F5 82       mov  dpl,a                                         ; change
355B E4          clr  a                                             ; proc
355C 34 2C       adc  a,gui_menu_list/100h                          ; exists
355E F5 83       mov  dph,a                                         ;
3560 E4          clr  a                                             ;
3561 93          movc a,[a+dptr]                                    ;
3562 FB          mov  r3,a                                          ;
3563 74 01       mov  a,01h                                         ;
3565 93          movc a,[a+dptr]                                    ;
3566 FA          mov  r2,a                                          ;
3567 74 02       mov  a,02h                                         ;
3569 93          movc a,[a+dptr]                                    ;
356A F9          mov  r1,a                                          ;
356B 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
356E 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3571 90 00 B9    mov  dptr,xram_current_item                        ;
3574 E0          movx a,[dptr]                                      ;
3575 75 F0 20    mov  b,20h                                         ;
3578 A4          mul  a,b                                           ;
3579 FF          mov  r7,a                                          ;
357A AE F0       mov  r6,b                                          ;
357C 29          add  a,r1                                          ;
357D F9          mov  r1,a                                          ;
357E EA          mov  a,r2                                          ;
357F 3E          adc  a,r6                                          ;
3580 FA          mov  r2,a                                          ;
3581 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
3584 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3587 EA          mov  a,r2                                          ;
3588 49          or   a,r1                                          ;
3589 4B          or   a,r3                                          ;
358A 60 37       jz   a,@@no_change_proc                            ;/
358C 90 00 B8    mov  dptr,xram_current_menu                        ;\
358F E0          movx a,[dptr]                                      ;
3590 75 F0 03    mov  b,03h                                         ;
3593 A4          mul  a,b                                           ;
3594 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
3596 F5 82       mov  dpl,a                                         ; change
3598 E4          clr  a                                             ; proc
3599 34 2C       adc  a,gui_menu_list/100h                          ;
359B F5 83       mov  dph,a                                         ;
359D E4          clr  a                                             ;
359E 93          movc a,[a+dptr]                                    ;
359F FB          mov  r3,a                                          ;
35A0 74 01       mov  a,01h                                         ;
35A2 93          movc a,[a+dptr]                                    ;
35A3 FA          mov  r2,a                                          ;
35A4 74 02       mov  a,02h                                         ;
35A6 93          movc a,[a+dptr]                                    ;
35A7 F9          mov  r1,a                                          ;
35A8 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
35AB 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
35AE E9          mov  a,r1                                          ;
35AF 2F          add  a,r7                                          ;
35B0 F9          mov  r1,a                                          ;
35B1 EA          mov  a,r2                                          ;
35B2 3E          adc  a,r6                                          ;
35B3 FA          mov  r2,a                                          ;
35B4 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
35B7 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
35BA 89 82       mov  dpl,r1                                        ;
35BC 8A 83       mov  dph,r2                                        ;
35BE AF 27       mov  r7,[iram_tmp__27h]                            ;
35C0 12 4D B5    call jmp_dptr                                      ;/
                @@no_change_proc:
35C3 90 00 B8    mov  dptr,xram_current_menu                        ;\
35C6 E0          movx a,[dptr]                                      ;
35C7 75 F0 03    mov  b,03h                                         ;
35CA A4          mul  a,b                                           ;
35CB 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
35CD F5 82       mov  dpl,a                                         ; apply
35CF E4          clr  a                                             ; proc
35D0 34 2C       adc  a,gui_menu_list/100h                          ; exists
35D2 F5 83       mov  dph,a                                         ;
35D4 E4          clr  a                                             ;
35D5 93          movc a,[a+dptr]                                    ;
35D6 FB          mov  r3,a                                          ;
35D7 74 01       mov  a,01h                                         ;
35D9 93          movc a,[a+dptr]                                    ;
35DA FA          mov  r2,a                                          ;
35DB 74 02       mov  a,02h                                         ;
35DD 93          movc a,[a+dptr]                                    ;
35DE F9          mov  r1,a                                          ;
35DF 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
35E2 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
35E5 90 00 B9    mov  dptr,xram_current_item                        ;
35E8 E0          movx a,[dptr]                                      ;
35E9 75 F0 20    mov  b,20h                                         ;
35EC A4          mul  a,b                                           ;
35ED FF          mov  r7,a                                          ;
35EE AE F0       mov  r6,b                                          ;
35F0 29          add  a,r1                                          ;
35F1 F9          mov  r1,a                                          ;
35F2 EA          mov  a,r2                                          ;
35F3 3E          adc  a,r6                                          ;
35F4 FA          mov  r2,a                                          ;
35F5 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
35F8 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
35FB EA          mov  a,r2                                          ;
35FC 49          or   a,r1                                          ;
35FD 4B          or   a,r3                                          ;
35FE 60 31       jz   a,@@no_apply_proc                             ;/
3600 90 00 B8    mov  dptr,xram_current_menu                        ;\
3603 E0          movx a,[dptr]                                      ;
3604 75 F0 03    mov  b,03h                                         ;
3607 A4          mul  a,b                                           ;
3608 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
360A F5 82       mov  dpl,a                                         ; apply
360C E4          clr  a                                             ; proc
360D 34 2C       adc  a,gui_menu_list/100h                          ;
360F F5 83       mov  dph,a                                         ;
3611 E4          clr  a                                             ;
3612 93          movc a,[a+dptr]                                    ;
3613 FB          mov  r3,a                                          ;
3614 74 01       mov  a,01h                                         ;
3616 93          movc a,[a+dptr]                                    ;
3617 FA          mov  r2,a                                          ;
3618 74 02       mov  a,02h                                         ;
361A 93          movc a,[a+dptr]                                    ;
361B F9          mov  r1,a                                          ;
361C 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
361F 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3622 E9          mov  a,r1                                          ;
3623 2F          add  a,r7                                          ;
3624 F9          mov  r1,a                                          ;
3625 EA          mov  a,r2                                          ;
3626 3E          adc  a,r6                                          ;
3627 FA          mov  r2,a                                          ;
3628 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
362B 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
362E 12 4D B1    call jmp_r2r1  ;----->                             ;/
                @@no_apply_proc:
3631 7D 01       mov  r5,01h ;txt.scale (1=normal)
3633 7F 03       mov  r7,MenuID_03h_Brightness
3635 02 3A 2E    jmp  do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any
                ;------------------
                func_23h_QuicklyContrast:
3638 90 00 B8    mov  dptr,xram_current_menu
363B E0          movx a,[dptr]
363C 75 F0 03    mov  b,03h
363F A4          mul  a,b
3640 24 4C       add  a,gui_menu_list and 0ffh
3642 F5 82       mov  dpl,a
3644 E4          clr  a
3645 34 2C       adc  a,gui_menu_list/100h
3647 F5 83       mov  dph,a
3649 E4          clr  a
364A 93          movc a,[a+dptr]
364B FB          mov  r3,a
364C 74 01       mov  a,01h
364E 93          movc a,[a+dptr]
364F FA          mov  r2,a
3650 74 02       mov  a,02h
3652 93          movc a,[a+dptr]
3653 F9          mov  r1,a
3654 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
3657 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
365A B4 04 04    jne  a,MenuID_04h_Contrast,@@_3661h            ;\
365D 7F 01       mov  r7,01h                                    ;
365F 80 02       sjmp @@_3663h                                  ;
                ;---                                            ;
                @@_3661h:                                       ;
3661 7F 00       mov  r7,00h                                    ;
                @@_3663h:                                       ;/
3663 EF          mov  a,r7
3664 70 03       jnz  a,@@_3669h
3666 02 37 09    jmp  do_select_menu_Contrast
                ;---
                @@_3669h:
3669 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
366C 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
366F 90 00 B9    mov  dptr,xram_current_item
3672 E0          movx a,[dptr]
3673 75 F0 20    mov  b,20h
3676 A4          mul  a,b
3677 FF          mov  r7,a
3678 AE F0       mov  r6,b
367A 29          add  a,r1
367B F9          mov  r1,a
367C EA          mov  a,r2
367D 3E          adc  a,r6
367E FA          mov  r2,a
367F 90 00 14    mov  dptr,0014h ;idxItemProcChange
3682 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
3685 EA          mov  a,r2
3686 49          or   a,r1
3687 4B          or   a,r3
3688 60 3C       jz   a,@@no_change_proc
368A 90 00 B8    mov  dptr,xram_current_menu                        ;\
368D E0          movx a,[dptr]                                      ;
368E 75 F0 03    mov  b,03h                                         ;
3691 A4          mul  a,b                                           ;
3692 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
3694 F5 82       mov  dpl,a                                         ; change
3696 E4          clr  a                                             ; proc
3697 34 2C       adc  a,gui_menu_list/100h                          ;
3699 F5 83       mov  dph,a                                         ;
369B E4          clr  a                                             ;
369C 93          movc a,[a+dptr]                                    ;
369D FB          mov  r3,a                                          ;
369E 74 01       mov  a,01h                                         ;
36A0 93          movc a,[a+dptr]                                    ;
36A1 FA          mov  r2,a                                          ;
36A2 74 02       mov  a,02h                                         ;
36A4 93          movc a,[a+dptr]                                    ;
36A5 F9          mov  r1,a                                          ;
36A6 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
36A9 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
36AC E9          mov  a,r1                                          ;
36AD 2F          add  a,r7                                          ;
36AE F9          mov  r1,a                                          ;
36AF EA          mov  a,r2                                          ;
36B0 3E          adc  a,r6                                          ;
36B1 FA          mov  r2,a                                          ;
36B2 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
36B5 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
36B8 89 82       mov  dpl,r1                                        ;
36BA 8A 83       mov  dph,r2                                        ;
36BC AF 27       mov  r7,[iram_tmp__27h]                            ;
36BE 12 4D B5    call jmp_dptr                                      ;/
36C1 50 03       jnc  @@_36C6h          ;<--
36C3 12 82 95    call xxx_8295h         ;<--
                ;- - -
                @@_36C6h:
                @@no_change_proc:
36C6 90 00 B8    mov  dptr,xram_current_menu
36C9 E0          movx a,[dptr]
36CA 75 F0 03    mov  b,03h
36CD A4          mul  a,b
36CE 24 4C       add  a,gui_menu_list and 0ffh
36D0 F5 82       mov  dpl,a
36D2 E4          clr  a
36D3 34 2C       adc  a,gui_menu_list/100h
36D5 F5 83       mov  dph,a
36D7 E4          clr  a
36D8 93          movc a,[a+dptr]
36D9 FB          mov  r3,a
36DA 74 01       mov  a,01h
36DC 93          movc a,[a+dptr]
36DD FA          mov  r2,a
36DE 74 02       mov  a,02h
36E0 93          movc a,[a+dptr]
36E1 F9          mov  r1,a
36E2 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
36E5 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
36E8 90 00 B9    mov  dptr,xram_current_item
36EB E0          movx a,[dptr]
36EC 75 F0 20    mov  b,20h
36EF A4          mul  a,b
36F0 FF          mov  r7,a
36F1 AE F0       mov  r6,b
36F3 29          add  a,r1
36F4 F9          mov  r1,a
36F5 EA          mov  a,r2
36F6 3E          adc  a,r6
36F7 FA          mov  r2,a
36F8 90 00 17    mov  dptr,0017h ;idxItemProcApply
36FB 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
36FE EA          mov  a,r2
36FF 49          or   a,r1
3700 4B          or   a,r3
3701 70 03       jnz  a,@@have_apply_proc
3703 02 2C 92    ljmp resume_execute_func_if_any
                ;---
                @@have_apply_proc:
3706 02 38 C5    jmp  execute_apply_proc
                ;--- --- --- ------
                do_select_menu_Contrast:
3709 7F 04       mov  r7,MenuID_04h_Contrast            ;\
370B 12 BC 9D    call select_menu_r7                    ;/
370E 90 00 B8    mov  dptr,xram_current_menu                        ;\
3711 E0          movx a,[dptr]                                      ;
3712 75 F0 03    mov  b,03h                                         ;
3715 A4          mul  a,b                                           ;
3716 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
3718 F5 82       mov  dpl,a                                         ; change
371A E4          clr  a                                             ; proc
371B 34 2C       adc  a,gui_menu_list/100h                          ; exists
371D F5 83       mov  dph,a                                         ;
371F E4          clr  a                                             ;
3720 93          movc a,[a+dptr]                                    ;
3721 FB          mov  r3,a                                          ;
3722 74 01       mov  a,01h                                         ;
3724 93          movc a,[a+dptr]                                    ;
3725 FA          mov  r2,a                                          ;
3726 74 02       mov  a,02h                                         ;
3728 93          movc a,[a+dptr]                                    ;
3729 F9          mov  r1,a                                          ;
372A 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
372D 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3730 90 00 B9    mov  dptr,xram_current_item                        ;
3733 E0          movx a,[dptr]                                      ;
3734 75 F0 20    mov  b,20h                                         ;
3737 A4          mul  a,b                                           ;
3738 FF          mov  r7,a                                          ;
3739 AE F0       mov  r6,b                                          ;
373B 29          add  a,r1                                          ;
373C F9          mov  r1,a                                          ;
373D EA          mov  a,r2                                          ;
373E 3E          adc  a,r6                                          ;
373F FA          mov  r2,a                                          ;
3740 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
3743 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3746 EA          mov  a,r2                                          ;
3747 49          or   a,r1                                          ;
3748 4B          or   a,r3                                          ;
3749 60 37       jz   a,@@no_change_proc                            ;/
374B 90 00 B8    mov  dptr,xram_current_menu                        ;\
374E E0          movx a,[dptr]                                      ;
374F 75 F0 03    mov  b,03h                                         ;
3752 A4          mul  a,b                                           ;
3753 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
3755 F5 82       mov  dpl,a                                         ; change
3757 E4          clr  a                                             ; proc
3758 34 2C       adc  a,gui_menu_list/100h                          ;
375A F5 83       mov  dph,a                                         ;
375C E4          clr  a                                             ;
375D 93          movc a,[a+dptr]                                    ;
375E FB          mov  r3,a                                          ;
375F 74 01       mov  a,01h                                         ;
3761 93          movc a,[a+dptr]                                    ;
3762 FA          mov  r2,a                                          ;
3763 74 02       mov  a,02h                                         ;
3765 93          movc a,[a+dptr]                                    ;
3766 F9          mov  r1,a                                          ;
3767 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
376A 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
376D E9          mov  a,r1                                          ;
376E 2F          add  a,r7                                          ;
376F F9          mov  r1,a                                          ;
3770 EA          mov  a,r2                                          ;
3771 3E          adc  a,r6                                          ;
3772 FA          mov  r2,a                                          ;
3773 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
3776 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3779 89 82       mov  dpl,r1                                        ;
377B 8A 83       mov  dph,r2                                        ;
377D AF 27       mov  r7,[iram_tmp__27h]                            ;
377F 12 4D B5    call jmp_dptr                                      ;/
                @@no_change_proc:
3782 90 00 B8    mov  dptr,xram_current_menu                        ;\
3785 E0          movx a,[dptr]                                      ;
3786 75 F0 03    mov  b,03h                                         ;
3789 A4          mul  a,b                                           ;
378A 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
378C F5 82       mov  dpl,a                                         ; apply
378E E4          clr  a                                             ; proc
378F 34 2C       adc  a,gui_menu_list/100h                          ; exists
3791 F5 83       mov  dph,a                                         ;
3793 E4          clr  a                                             ;
3794 93          movc a,[a+dptr]                                    ;
3795 FB          mov  r3,a                                          ;
3796 74 01       mov  a,01h                                         ;
3798 93          movc a,[a+dptr]                                    ;
3799 FA          mov  r2,a                                          ;
379A 74 02       mov  a,02h                                         ;
379C 93          movc a,[a+dptr]                                    ;
379D F9          mov  r1,a                                          ;
379E 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
37A1 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
37A4 90 00 B9    mov  dptr,xram_current_item                        ;
37A7 E0          movx a,[dptr]                                      ;
37A8 75 F0 20    mov  b,20h                                         ;
37AB A4          mul  a,b                                           ;
37AC FF          mov  r7,a                                          ;
37AD AE F0       mov  r6,b                                          ;
37AF 29          add  a,r1                                          ;
37B0 F9          mov  r1,a                                          ;
37B1 EA          mov  a,r2                                          ;
37B2 3E          adc  a,r6                                          ;
37B3 FA          mov  r2,a                                          ;
37B4 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
37B7 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
37BA EA          mov  a,r2                                          ;
37BB 49          or   a,r1                                          ;
37BC 4B          or   a,r3                                          ;
37BD 60 31       jz   a,@@no_apply_proc                             ;/
37BF 90 00 B8    mov  dptr,xram_current_menu                        ;\
37C2 E0          movx a,[dptr]                                      ;
37C3 75 F0 03    mov  b,03h                                         ;
37C6 A4          mul  a,b                                           ;
37C7 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
37C9 F5 82       mov  dpl,a                                         ; apply
37CB E4          clr  a                                             ; proc
37CC 34 2C       adc  a,gui_menu_list/100h                          ;
37CE F5 83       mov  dph,a                                         ;
37D0 E4          clr  a                                             ;
37D1 93          movc a,[a+dptr]                                    ;
37D2 FB          mov  r3,a                                          ;
37D3 74 01       mov  a,01h                                         ;
37D5 93          movc a,[a+dptr]                                    ;
37D6 FA          mov  r2,a                                          ;
37D7 74 02       mov  a,02h                                         ;
37D9 93          movc a,[a+dptr]                                    ;
37DA F9          mov  r1,a                                          ;
37DB 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
37DE 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
37E1 E9          mov  a,r1                                          ;
37E2 2F          add  a,r7                                          ;
37E3 F9          mov  r1,a                                          ;
37E4 EA          mov  a,r2                                          ;
37E5 3E          adc  a,r6                                          ;
37E6 FA          mov  r2,a                                          ;
37E7 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
37EA 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
37ED 12 4D B1    call jmp_r2r1  ;----->                             ;/
                @@no_apply_proc:
37F0 7D 01       mov  r5,01h ;txt.scale (1=normal)
37F2 7F 04       mov  r7,MenuID_04h_Contrast
37F4 02 3A 2E    jmp  do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any
                ;------------------
                func_24h_QuicklySaturation:
37F7 90 00 B8    mov  dptr,xram_current_menu
37FA E0          movx a,[dptr]
37FB 75 F0 03    mov  b,03h
37FE A4          mul  a,b
37FF 24 4C       add  a,gui_menu_list and 0ffh
3801 F5 82       mov  dpl,a
3803 E4          clr  a
3804 34 2C       adc  a,gui_menu_list/100h
3806 F5 83       mov  dph,a
3808 E4          clr  a
3809 93          movc a,[a+dptr]
380A FB          mov  r3,a
380B 74 01       mov  a,01h
380D 93          movc a,[a+dptr]
380E FA          mov  r2,a
380F 74 02       mov  a,02h
3811 93          movc a,[a+dptr]
3812 F9          mov  r1,a
3813 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
3816 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
3819 B4 05 04    jne  a,MenuID_05h_Saturation,@@_3820h          ;\
381C 7F 01       mov  r7,01h                                    ;
381E 80 02       sjmp @@_3822h                                  ;
                ;---                                            ;
                @@_3820h:                                       ;
3820 7F 00       mov  r7,00h                                    ;
                @@_3822h:                                       ;/
3822 EF          mov  a,r7
3823 70 03       jnz  a,@@_3828h
3825 02 38 F9    jmp  do_select_menu_Saturation
                ;---
                @@_3828h:
3828 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
382B 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
382E 90 00 B9    mov  dptr,xram_current_item
3831 E0          movx a,[dptr]
3832 75 F0 20    mov  b,20h
3835 A4          mul  a,b
3836 FF          mov  r7,a
3837 AE F0       mov  r6,b
3839 29          add  a,r1
383A F9          mov  r1,a
383B EA          mov  a,r2
383C 3E          adc  a,r6
383D FA          mov  r2,a
383E 90 00 14    mov  dptr,0014h ;idxItemProcChange
3841 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
3844 EA          mov  a,r2
3845 49          or   a,r1
3846 4B          or   a,r3
3847 60 3C       jz   a,@@no_change_proc
3849 90 00 B8    mov  dptr,xram_current_menu                        ;\
384C E0          movx a,[dptr]                                      ;
384D 75 F0 03    mov  b,03h                                         ;
3850 A4          mul  a,b                                           ;
3851 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
3853 F5 82       mov  dpl,a                                         ; change
3855 E4          clr  a                                             ; proc
3856 34 2C       adc  a,gui_menu_list/100h                          ;
3858 F5 83       mov  dph,a                                         ;
385A E4          clr  a                                             ;
385B 93          movc a,[a+dptr]                                    ;
385C FB          mov  r3,a                                          ;
385D 74 01       mov  a,01h                                         ;
385F 93          movc a,[a+dptr]                                    ;
3860 FA          mov  r2,a                                          ;
3861 74 02       mov  a,02h                                         ;
3863 93          movc a,[a+dptr]                                    ;
3864 F9          mov  r1,a                                          ;
3865 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
3868 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
386B E9          mov  a,r1                                          ;
386C 2F          add  a,r7                                          ;
386D F9          mov  r1,a                                          ;
386E EA          mov  a,r2                                          ;
386F 3E          adc  a,r6                                          ;
3870 FA          mov  r2,a                                          ;
3871 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
3874 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3877 89 82       mov  dpl,r1                                        ;
3879 8A 83       mov  dph,r2                                        ;
387B AF 27       mov  r7,[iram_tmp__27h]                            ;
387D 12 4D B5    call jmp_dptr                                      ;/
3880 50 03       jnc  @@_3885h          ;<--
3882 12 82 95    call xxx_8295h         ;<--
                ;---
                @@_3885h:
                @@no_change_proc:
3885 90 00 B8    mov  dptr,xram_current_menu
3888 E0          movx a,[dptr]
3889 75 F0 03    mov  b,03h
388C A4          mul  a,b
388D 24 4C       add  a,gui_menu_list and 0ffh
388F F5 82       mov  dpl,a
3891 E4          clr  a
3892 34 2C       adc  a,gui_menu_list/100h
3894 F5 83       mov  dph,a
3896 E4          clr  a
3897 93          movc a,[a+dptr]
3898 FB          mov  r3,a
3899 74 01       mov  a,01h
389B 93          movc a,[a+dptr]
389C FA          mov  r2,a
389D 74 02       mov  a,02h
389F 93          movc a,[a+dptr]
38A0 F9          mov  r1,a
38A1 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
38A4 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
38A7 90 00 B9    mov  dptr,xram_current_item
38AA E0          movx a,[dptr]
38AB 75 F0 20    mov  b,20h
38AE A4          mul  a,b
38AF FF          mov  r7,a
38B0 AE F0       mov  r6,b
38B2 29          add  a,r1
38B3 F9          mov  r1,a
38B4 EA          mov  a,r2
38B5 3E          adc  a,r6
38B6 FA          mov  r2,a
38B7 90 00 17    mov  dptr,0017h ;idxItemProcApply
38BA 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
38BD EA          mov  a,r2
38BE 49          or   a,r1
38BF 4B          or   a,r3
38C0 70 03       jnz  a,execute_apply_proc
38C2 02 2C 92    ljmp resume_execute_func_if_any
                ;------------------
                execute_apply_proc:
38C5 90 00 B8    mov  dptr,xram_current_menu                        ;\
38C8 E0          movx a,[dptr]                                      ;
38C9 75 F0 03    mov  b,03h                                         ;
38CC A4          mul  a,b                                           ;
38CD 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
38CF F5 82       mov  dpl,a                                         ; apply
38D1 E4          clr  a                                             ; proc
38D2 34 2C       adc  a,gui_menu_list/100h                          ;
38D4 F5 83       mov  dph,a                                         ;
38D6 E4          clr  a                                             ;
38D7 93          movc a,[a+dptr]                                    ;
38D8 FB          mov  r3,a                                          ;
38D9 74 01       mov  a,01h                                         ;
38DB 93          movc a,[a+dptr]                                    ;
38DC FA          mov  r2,a                                          ;
38DD 74 02       mov  a,02h                                         ;
38DF 93          movc a,[a+dptr]                                    ;
38E0 F9          mov  r1,a                                          ;
38E1 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
38E4 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
38E7 E9          mov  a,r1                                          ;
38E8 2F          add  a,r7                                          ;
38E9 F9          mov  r1,a                                          ;
38EA EA          mov  a,r2                                          ;
38EB 3E          adc  a,r6                                          ;
38EC FA          mov  r2,a                                          ;
38ED 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
38F0 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
38F3 12 4D B1    call jmp_r2r1  ;----->                             ;/
38F6 02 2C 92    ljmp resume_execute_func_if_any
                ;------------------
                do_select_menu_Saturation:
38F9 7F 05       mov  r7,MenuID_05h_Saturation          ;\
38FB 12 BC 9D    call select_menu_r7                    ;/
38FE 90 00 B8    mov  dptr,xram_current_menu                        ;\
3901 E0          movx a,[dptr]                                      ;
3902 75 F0 03    mov  b,03h                                         ;
3905 A4          mul  a,b                                           ;
3906 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
3908 F5 82       mov  dpl,a                                         ; change
390A E4          clr  a                                             ; proc
390B 34 2C       adc  a,gui_menu_list/100h                          ; exists
390D F5 83       mov  dph,a                                         ;
390F E4          clr  a                                             ;
3910 93          movc a,[a+dptr]                                    ;
3911 FB          mov  r3,a                                          ;
3912 74 01       mov  a,01h                                         ;
3914 93          movc a,[a+dptr]                                    ;
3915 FA          mov  r2,a                                          ;
3916 74 02       mov  a,02h                                         ;
3918 93          movc a,[a+dptr]                                    ;
3919 F9          mov  r1,a                                          ;
391A 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
391D 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3920 90 00 B9    mov  dptr,xram_current_item                        ;
3923 E0          movx a,[dptr]                                      ;
3924 75 F0 20    mov  b,20h                                         ;
3927 A4          mul  a,b                                           ;
3928 FF          mov  r7,a                                          ;
3929 AE F0       mov  r6,b                                          ;
392B 29          add  a,r1                                          ;
392C F9          mov  r1,a                                          ;
392D EA          mov  a,r2                                          ;
392E 3E          adc  a,r6                                          ;
392F FA          mov  r2,a                                          ;
3930 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
3933 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3936 EA          mov  a,r2                                          ;
3937 49          or   a,r1                                          ;
3938 4B          or   a,r3                                          ;
3939 60 37       jz   a,@@no_change_proc                            ;/
393B 90 00 B8    mov  dptr,xram_current_menu                        ;\
393E E0          movx a,[dptr]                                      ;
393F 75 F0 03    mov  b,03h                                         ;
3942 A4          mul  a,b                                           ;
3943 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
3945 F5 82       mov  dpl,a                                         ; change
3947 E4          clr  a                                             ; proc
3948 34 2C       adc  a,gui_menu_list/100h                          ;
394A F5 83       mov  dph,a                                         ;
394C E4          clr  a                                             ;
394D 93          movc a,[a+dptr]                                    ;
394E FB          mov  r3,a                                          ;
394F 74 01       mov  a,01h                                         ;
3951 93          movc a,[a+dptr]                                    ;
3952 FA          mov  r2,a                                          ;
3953 74 02       mov  a,02h                                         ;
3955 93          movc a,[a+dptr]                                    ;
3956 F9          mov  r1,a                                          ;
3957 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
395A 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
395D E9          mov  a,r1                                          ;
395E 2F          add  a,r7                                          ;
395F F9          mov  r1,a                                          ;
3960 EA          mov  a,r2                                          ;
3961 3E          adc  a,r6                                          ;
3962 FA          mov  r2,a                                          ;
3963 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
3966 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3969 89 82       mov  dpl,r1                                        ;
396B 8A 83       mov  dph,r2                                        ;
396D AF 27       mov  r7,[iram_tmp__27h]                            ;
396F 12 4D B5    call jmp_dptr                                      ;/
                @@no_change_proc:
3972 90 00 B8    mov  dptr,xram_current_menu                        ;\
3975 E0          movx a,[dptr]                                      ;
3976 75 F0 03    mov  b,03h                                         ;
3979 A4          mul  a,b                                           ;
397A 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
397C F5 82       mov  dpl,a                                         ; apply
397E E4          clr  a                                             ; proc
397F 34 2C       adc  a,gui_menu_list/100h                          ; exists
3981 F5 83       mov  dph,a                                         ;
3983 E4          clr  a                                             ;
3984 93          movc a,[a+dptr]                                    ;
3985 FB          mov  r3,a                                          ;
3986 74 01       mov  a,01h                                         ;
3988 93          movc a,[a+dptr]                                    ;
3989 FA          mov  r2,a                                          ;
398A 74 02       mov  a,02h                                         ;
398C 93          movc a,[a+dptr]                                    ;
398D F9          mov  r1,a                                          ;
398E 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
3991 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
3994 90 00 B9    mov  dptr,xram_current_item                        ;
3997 E0          movx a,[dptr]                                      ;
3998 75 F0 20    mov  b,20h                                         ;
399B A4          mul  a,b                                           ;
399C FF          mov  r7,a                                          ;
399D AE F0       mov  r6,b                                          ;
399F 29          add  a,r1                                          ;
39A0 F9          mov  r1,a                                          ;
39A1 EA          mov  a,r2                                          ;
39A2 3E          adc  a,r6                                          ;
39A3 FA          mov  r2,a                                          ;
39A4 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
39A7 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
39AA EA          mov  a,r2                                          ;
39AB 49          or   a,r1                                          ;
39AC 4B          or   a,r3                                          ;
39AD 60 31       jz   a,@@no_apply_proc                             ;/
39AF 90 00 B8    mov  dptr,xram_current_menu                        ;\
39B2 E0          movx a,[dptr]                                      ;
39B3 75 F0 03    mov  b,03h                                         ;
39B6 A4          mul  a,b                                           ;
39B7 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
39B9 F5 82       mov  dpl,a                                         ; apply
39BB E4          clr  a                                             ; proc
39BC 34 2C       adc  a,gui_menu_list/100h                          ;
39BE F5 83       mov  dph,a                                         ;
39C0 E4          clr  a                                             ;
39C1 93          movc a,[a+dptr]                                    ;
39C2 FB          mov  r3,a                                          ;
39C3 74 01       mov  a,01h                                         ;
39C5 93          movc a,[a+dptr]                                    ;
39C6 FA          mov  r2,a                                          ;
39C7 74 02       mov  a,02h                                         ;
39C9 93          movc a,[a+dptr]                                    ;
39CA F9          mov  r1,a                                          ;
39CB 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
39CE 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
39D1 E9          mov  a,r1                                          ;
39D2 2F          add  a,r7                                          ;
39D3 F9          mov  r1,a                                          ;
39D4 EA          mov  a,r2                                          ;
39D5 3E          adc  a,r6                                          ;
39D6 FA          mov  r2,a                                          ;
39D7 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
39DA 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
39DD 12 4D B1    call jmp_r2r1  ;----->                             ;/
                @@no_apply_proc:
39E0 7D 01       mov  r5,01h ;txt.scale (1=normal)
39E2 7F 05       mov  r7,MenuID_05h_Saturation
39E4 80 48       sjmp do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any
                ;------------------
;:------------- ;:----------------- code func_31h LCD on/off
                ;------------------
                func_31h_xxx:  ;switch on
39E6 12 AF 27    call switch_screen_and_backlight_off           ;-shortly off?
39E9 90 FE D7    mov  dptr,IO_AV_video_on_off                   ;\
39EC E0          movx a,[dptr]                                  ;
39ED 54 EF       and  a,0EFh    ;bit4 clear                     ;
39EF F0          movx [dptr],a                                  ;/
39F0 90 FD 13    mov  dptr,IO_PLL_13h_used                      ;\
39F3 E0          movx a,[dptr]                                  ;
39F4 70 03       jnz  a,@@already_on                            ;/
39F6 12 AD 39    call switch_lcd_screen_on                      ;-LCD ON
                @@already_on:
39F9 90 00 0C    mov  dptr,xram_sett_input                      ;\
39FC E0          movx a,[dptr]                                  ;
39FD FF          mov  r7,a                                      ;
39FE 12 AE 7A    call lcd_apply_input_and_ratio_and_detect_video;/
3A01 7F C8       mov  r7,0C8h                                   ;\
3A03 7E 00       mov  r6,00h                                    ; delay 200
3A05 12 BB 5D    call slow_delay_r6r7                           ;/
3A08 12 A0 F5    call switch_screen_and_backlight_on            ;-
3A0B C3          clr  c
3A0C 22          ret
                ;------------------
;:------------- ;:----------------- GUI code (func_xxh's)
                ;------------------
                func_30h_xxx:          ;...PWM0
3A0D 12 94 BF    call xxx_94BFh            ;...PWM0
3A10 C3          clr  c
3A11 22          ret
                ;------------------
                func_32h_screen_on:
3A12 12 BB 75    call lcd_apply_input_ratio_etc_and_switch_screen_on
3A15 C3          clr  c
3A16 22          ret
                ;------------------
                func_01h_Version:
3A17 7D 01       mov  r5,01h ;txt.scale (1=normal)
3A19 7F 21       mov  r7,MenuID_21h_Version
3A1B 80 11       sjmp do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any
                ;------------------
                func_02h_SourceMenu:    ;see also: func_19h_SourceMenu
3A1D 90 00 46    mov  dptr,xram_keypad_flags_msb        ;\
3A20 E0          movx a,[dptr]  ;blah                   ;
3A21 F0          movx [dptr],a  ;blah                   ;
3A22 A3          inc  dptr ;=xram_keypad_flags_lsb      ; clear bit4
3A23 E0          movx a,[dptr]                          ;
3A24 54 EF       and  a,0EFh    ;clear bit4             ;
3A26 F0          movx [dptr],a                          ;/
3A27 43 48 02    or   [iram_menu_flags],02h
3A2A 7D 01       mov  r5,01h ;txt.scale (1=normal)
3A2C 7F 10       mov  r7,MenuID_10h_SourceMenu
                ;- - - - - --------
                do_select_menu_r7_and_scale_r5_and_resume_execute_func_if_any:
                                ;in: r5=txt.scale(01h), r7=MenuID_XXh_xxx
3A2E 12 A6 02    call do_select_menu_r7_and_scale_r5
3A31 02 2C 92    jmp  resume_execute_func_if_any   ;-------------->
                ;------------------
                func_2Fh_xxx:          ;... to root
3A34 12 AB A0    call xxx_ABA0h ;...close/destroy menu window? and switch to root
3A37 02 2C 92    jmp  resume_execute_func_if_any
                ;------------------
                func_1Eh_xxx:
                .if tech_version<ver11sep2017
3A3A 12 BF C3      call to_switch_screen_and_backlight_off
                .else
                   call conditionally_switch_screen_and_backlight_off
                .endif
3A3D 02 2C 92    jmp  resume_execute_func_if_any
                ;------------------
                func_XXh_invalid:       ;out: cy=0
3A40 C3          clr  c
3A41 22          ret
                ;------------------
                func_not_busy_return_cy_set:
3A42 D3          set  c
3A43 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defdata_menu_stuff                    ;-
                  defdata_gui_menu_PowerOff             ;\
                  defdata_gui_menu_PowerOn              ;
                  defdata_gui_menu_RootMenu             ;
                  defdata_gui_menu_SourceMenu           ;
                  defdata_gui_menu_fMenuSource          ;
                  defdata_gui_menu_NoSignal             ;
                  defdata_gui_menu_QuicklyVolume        ;
                  defdata_gui_menu_QuicklyMode          ;
                  defdata_gui_menu_QuicklySys           ;
                  defdata_gui_menu_Brightness   ;\      ;
                  defdata_gui_menu_Contrast     ;       ;
                  defdata_gui_menu_Saturation   ;       ;
                  defdata_gui_menu_Tint         ;       ;
                  defdata_gui_menu_SelSource    ;/      ;
                  defdata_gui_menu_ModeMenu     ;\      ;
                  defdata_gui_menu_SysMenuXflip ;       ;
                  defdata_gui_menu_Language     ;-      ;
                  defdata_gui_menu_IR_A_B       ;       ;
                  defdata_gui_menu_Reset        ;/      ;
                  defdata_gui_menu_FactoryMenu          ;
                  defdata_gui_menu_FactoryPic           ;
                  defdata_gui_menu_Version              ;/
                  defdata_gui_menu_list                 ;-
                .endif
                ;------------------
;:------------- ;:----------------- GUI data (more font data)
                ;------------------
                ;(unused?)
3A44 00 00 00 00 dw   00000h,00000h,00000h,001C0h,001C0h,003C0h,00760h,00630h
3A54 0C 1C 38 0F dw   00C1Ch,0380Fh,0601Fh,0CFF1h,00000h,0180Ch,01FFCh,0180Ch
3A64 18 0C 18 0C dw   0180Ch,0180Ch,0180Ch,01FFCh,00000h,00000h,00000h,00000h
3A74 00 00 00 0E dw   00000h,0000Eh,001FFh,03F00h,03000h,03000h,03000h,03FFFh
3A84 36 06 33 0E dw   03606h,0330Eh,0330Ch,03198h,030F8h,030F0h,06070h,061F8h
3A94 C3 0F 9E 07 dw   0C30Fh,09E07h,0F001h,00000h,00000h,00000h,00000h,01C00h
3AA4 18 00 FF FF dw   01800h,0FFFFh,01980h,01800h,0FF00h,0DB00h,0DB01h,0FFFFh
3AB4 DB 18 DB 38 dw   0DB18h,0DB38h,0FF30h,01B66h,0FFE3h,018C1h,019FFh,01801h
3AC4 18 00 00 00 dw   01800h,00000h,00000h,00000h,00000h,00000h,00000h,00000h
3AD4 00 00 00 00 dw   00000h,00000h,00000h,00000h,03FFCh,03FFCh,00000h,00000h
3AE4 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,00000h
                ;------------------
                extra_font_1:
                 ;..... USED !!!!!!! osd related... 20h-bytes each?
3AF4 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,0B60Dh
3B04 B6 0D 00 00 dw   0B60Dh,00000h,00000h,00000h,00000h,00000h,00000h,00000h
3B14 00 00 80 0D dw   00000h,0800Dh,0800Dh,0800Dh,0800Dh,0800Dh,0800Dh,0B60Dh
3B24 B6 0D 80 0D dw   0B60Dh,0800Dh,0800Dh,0800Dh,0800Dh,0800Dh,0800Dh,00000h
3B34 00 00 B6 0D dw   00000h,0B60Dh,0B60Dh,0B60Dh,0B60Dh,0B60Dh,0B60Dh,0B60Dh
3B44 B6 0D B6 0D dw   0B60Dh,0B60Dh,0B60Dh,0B60Dh,0B60Dh,0B60Dh,0B60Dh,00000h
3B54 00 00 00 00 dw   00000h,00000h,02800h,02A20h,06E20h,029F0h,07E20h,02420h
3B64 7F 20 10 A0 dw   07F20h,010A0h,03C20h,01020h,01E20h,060E0h,00000h,00000h
3B74 00 00 00 00 dw   00000h,00000h,02000h,033F0h,0FA50h,002F0h,07A50h,003F0h
3B84 7A 10 02 F0 dw   07A10h,002F0h,07AB0h,04AF0h,07C10h,04C30h,00000h,00000h
3B94 00 00 00 00 dw   00000h,00000h,02000h,033F0h,0F880h,003E0h,07920h,00120h
3BA4 7B F0 00 00 dw   07BF0h,00000h,07BE0h,04A20h,07A20h,04BE0h,00000h,00000h
3BB4 00 00 00 00 dw   00000h,00000h,01000h,01200h,07BF0h,017E0h,01220h,03BE0h
3BC4 33 E0 59 00 dw   033E0h,05900h,013E0h,01540h,010C0h,01730h,00000h,00000h
3BD4 00 00 00 00 dw   00000h,00000h,01040h,03E80h,04170h,03DA0h,07EC0h,034C0h
3BE4 09 30 3C 00 dw   00930h,03C00h,00860h,03FA0h,012C0h,06E20h,00000h,00000h
3BF4 00 00 00 00 dw   00000h,00000h,078C0h,04BF0h,07AD0h,05BF0h,0FD20h,087F0h
3C04 78 00 4B F0 dw   07800h,04BF0h,07A10h,07BF0h,04920h,05FF0h,00000h,00000h
3C14 00 00 00 00 dw   00000h,00000h,01000h,01000h,03FF0h,05540h,01540h,07FF0h
3C24 15 40 15 40 dw   01540h,01540h,07FF0h,02920h,06490h,04490h,00000h,00000h
3C34 00 00 00 00 dw   00000h,00000h,00080h,078F0h,04880h,07BF0h,00290h,0FFE0h
3C44 22 90 42 60 dw   02290h,04260h,07AE0h,00AA0h,00D20h,03530h,00000h,00000h
3C54 00 00 00 00 dw   00000h,00000h,01040h,013F0h,07D50h,011F0h,07D50h,055F0h
3C64 7C 40 55 F0 dw   07C40h,055F0h,07C20h,013F0h,07D20h,010E0h,00000h,00000h
3C74 00 00 00 00 dw   00000h,00000h,02080h,03CF0h,04920h,08000h,07DF0h,07DF0h
3C84 45 10 78 F0 dw   04510h,078F0h,04F90h,04F90h,04890h,04FB0h,00000h,00000h
3C94 00 00 00 00 dw   00000h,00000h,02000h,011E0h,07920h,00220h,07A30h,00000h
3CA4 7B E0 01 20 dw   07BE0h,00120h,07960h,048C0h,079C0h,04F30h,00000h,00000h
3CB4 00 00 00 00 dw   00000h,00000h,00000h,00840h,00820h,01880h,07E80h,01240h
3CC4 12 40 32 20 dw   01240h,03220h,02220h,06200h,04C00h,00000h,00000h,00000h
3CD4 00 00 00 00 dw   00000h,00000h,00000h,00800h,00A00h,03C80h,00860h,01080h
3CE4 11 00 21 00 dw   01100h,02100h,02700h,00980h,00F40h,00000h,00000h,00000h
3CF4 00 00 00 00 dw   00000h,00000h,00000h,00000h,01000h,01080h,03040h,02020h
3D04 20 20 20 60 dw   02020h,02060h,01420h,01800h,00800h,00000h,00000h,00000h
3D14 00 00 00 00 dw   00000h,00000h,00000h,00600h,00500h,00880h,01060h,07FB0h
3D24 40 00 1F C0 dw   04000h,01FC0h,01040h,01040h,01FC0h,01040h,00000h,00000h
3D34 00 00 00 00 dw   00000h,00000h,00000h,003E0h,03C00h,01000h,01FE0h,02840h
3D44 24 40 24 C0 dw   02440h,024C0h,02280h,02300h,046C0h,07870h,00000h,00000h
3D54 00 00 00 00 dw   00000h,00000h,01000h,07C00h,010E0h,07C00h,05400h,07FF0h
3D64 54 40 7C 80 dw   05440h,07C80h,010A0h,0FD10h,013F0h,01000h,00000h,00000h
3D74 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,07FE0h
3D84 7F E0 00 00 dw   07FE0h,00000h,00000h,00000h,00000h,00000h,00000h,00000h
3D94 00 00 00 00 dw   00000h,00000h,00200h,00200h,00200h,00220h,07E60h,00B80h
3DA4 12 80 12 80 dw   01280h,01280h,02240h,06230h,04210h,00600h,00000h,00000h
3DB4 00 00 00 00 dw   00000h,00000h,00000h,03FE0h,00200h,03260h,01240h,00A80h
3DC4 02 00 7F F0 dw   00200h,07FF0h,00200h,00200h,00200h,00200h,00000h,00000h
3DD4 00 00 00 00 dw   00000h,00000h,00000h,07FE0h,04020h,04020h,04FA0h,048A0h
3DE4 48 A0 4F A0 dw   048A0h,04FA0h,04020h,04020h,07FE0h,04020h,00000h,00000h
3DF4 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,00000h
3E04 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,07FE0h,07FE0h
                extra_font_1_num_chars equ ($-extra_font_1)/20h
                ;---
                ;... below unused?
3E14 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,00000h,0DB60h
3E24 DB 60 00 00 dw   0DB60h,00000h,00000h,00000h,00000h,00000h,00000h,00000h
3E34 00 00 C0 00 dw   00000h,0C000h,0C000h,0C000h,0C000h,0C000h,0C000h,0DB60h
3E44 DB 60 C0 00 dw   0DB60h,0C000h,0C000h,0C000h,0C000h,0C000h,0C000h,00000h
3E54 00 00 D8 00 dw   00000h,0D800h,0D800h,0D800h,0D800h,0D800h,0D800h,0DB60h
3E64 DB 60 D8 00 dw   0DB60h,0D800h,0D800h,0D800h,0D800h,0D800h,0D800h,00000h
3E74 00 00 DB 00 dw   00000h,0DB00h,0DB00h,0DB00h,0DB00h,0DB00h,0DB00h,0DB60h
3E84 DB 60 DB 00 dw   0DB60h,0DB00h,0DB00h,0DB00h,0DB00h,0DB00h,0DB00h,00000h
3E94 00 00 DB 60 dw   00000h,0DB60h,0DB60h,0DB60h,0DB60h,0DB60h,0DB60h,0DB60h
3EA4 DB 60 DB 60 dw   0DB60h,0DB60h,0DB60h,0DB60h,0DB60h,0DB60h,0DB60h,00000h
                ;---
                extra_font_2:     ;USED!
3EB4 00 00 00 30 dw   00000h,00030h,00070h,000E0h,000C0h,000C0h,000C0h,000C0h
3EC4 00 C0 00 C0 dw   000C0h,000C0h,000C0h,000C0h,000E0h,00070h,00030h,00000h
3ED4 00 00 FF F0 dw   00000h,0FFF0h,0FFF0h,00000h,00000h,00000h,00000h,00000h
3EE4 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,0FFF0h,0FFF0h,00000h
3EF4 00 00 FF F0 dw   00000h,0FFF0h,0FFF0h,00000h,0E000h,0E000h,0E000h,0E000h
3F04 E0 00 E0 00 dw   0E000h,0E000h,0E000h,0E000h,00000h,0FFF0h,0FFF0h,00000h
3F14 00 00 FF F0 dw   00000h,0FFF0h,0FFF0h,00000h,0FC00h,0FC00h,0FC00h,0FC00h
3F24 FC 00 FC 00 dw   0FC00h,0FC00h,0FC00h,0FC00h,00000h,0FFF0h,0FFF0h,00000h
3F34 00 00 FF F0 dw   00000h,0FFF0h,0FFF0h,00000h,0FF80h,0FF80h,0FF80h,0FF80h
3F44 FF 80 FF 80 dw   0FF80h,0FF80h,0FF80h,0FF80h,00000h,0FFF0h,0FFF0h,00000h
3F54 00 00 FF F0 dw   00000h,0FFF0h,0FFF0h,00000h,0FFF0h,0FFF0h,0FFF0h,0FFF0h
3F64 FF F0 FF F0 dw   0FFF0h,0FFF0h,0FFF0h,0FFF0h,00000h,0FFF0h,0FFF0h,00000h
3F74 00 00 C0 00 dw   00000h,0C000h,0E000h,07000h,03000h,03000h,03000h,03000h
3F84 30 00 30 00 dw   03000h,03000h,03000h,03000h,07000h,0E000h,0C000h,00000h
                extra_font_2_num_chars equ ($-extra_font_2)/20h
                ;---
                extra_font_3:     ;USED!
3F94 00 00 00 00 dw   00000h,00000h,00000h,01B40h,00940h,01140h,011C0h,02940h
3FA4 C5 40 00 00 dw   0C540h,00000h,01FC0h,00040h,00040h,00040h,00000h,00000h
3FB4 00 00 00 00 dw   00000h,00000h,00000h,00000h,03F80h,01000h,01000h,01000h
3FC4 1F 80 02 00 dw   01F80h,00200h,00200h,00200h,07FE0h,00000h,00000h,00000h
3FD4 00 00 00 00 dw   00000h,00000h,00000h,00000h,01F80h,00100h,00300h,00C80h
3FE4 30 40 02 00 dw   03040h,00200h,00200h,00200h,07FE0h,00000h,00000h,00000h
3FF4 00 00 00 00 dw   00000h,00000h,00000h,000C0h,00340h,07940h,02140h,02140h
4004 21 C0 23 40 dw   021C0h,02340h,03D40h,00140h,00140h,00040h,00000h,00000h
4014 00 00 00 00 dw   00000h,00000h,00000h,00000h,03F80h,01000h,01000h,01000h
4024 1F 80 00 00 dw   01F80h,00000h,00000h,00000h,07FE0h,00000h,00000h,00000h
4034 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03840h,04440h,04440h,047C0h
4044 44 40 44 40 dw   04440h,04440h,03840h,00040h,00040h,00040h,00000h,00000h
4054 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03E40h,00240h,00240h,00440h
4064 04 40 08 40 dw   00440h,00840h,01040h,06040h,00040h,00040h,00000h,00000h
4074 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03E40h,00440h,00840h,01440h
4084 62 40 00 00 dw   06240h,00000h,01FC0h,00840h,00840h,00FC0h,00000h,00000h
4094 00 00 00 00 dw   00000h,00000h,00000h,000C0h,07E40h,023C0h,02240h,023C0h
40A4 3E 40 00 00 dw   03E40h,00000h,00780h,00840h,00840h,00780h,00000h,00000h
40B4 00 00 00 00 dw   00000h,00000h,00000h,000C0h,01B40h,00140h,03D40h,00940h
40C4 11 C0 29 40 dw   011C0h,02940h,04540h,00140h,00140h,00040h,00000h,00000h
40D4 00 00 00 00 dw   00000h,00000h,00000h,00000h,03F80h,01080h,01080h,01080h
40E4 1F 80 02 00 dw   01F80h,00200h,00200h,00200h,07FE0h,00000h,00000h,00000h
40F4 00 00 00 00 dw   00000h,00000h,00000h,01CC0h,00040h,07F40h,01440h,02240h
4104 22 40 1C 40 dw   02240h,01C40h,00840h,00840h,07FC0h,00040h,00000h,00000h
4114 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03E40h,00440h,00BC0h,01440h
4124 62 40 00 40 dw   06240h,00040h,00040h,01800h,00800h,00FC0h,00000h,00000h
4134 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03840h,04440h,047C0h,04440h
4144 38 40 00 40 dw   03840h,00040h,00040h,01800h,00800h,00FC0h,00000h,00000h
4154 00 00 00 00 dw   00000h,00000h,00000h,00000h,00700h,00000h,01FC0h,00200h
4164 05 80 38 40 dw   00580h,03840h,00200h,00200h,07FE0h,00000h,00000h,00000h
4174 00 00 00 00 dw   00000h,00000h,00000h,01CC0h,00040h,07F40h,01440h,02240h
4184 22 70 1C 40 dw   02270h,01C40h,00840h,00840h,07FC0h,00040h,00000h,00000h
4194 00 00 00 00 dw   00000h,00000h,00000h,01CC0h,00040h,07F40h,01470h,02240h
41A4 22 40 1C 40 dw   02240h,01C40h,00040h,01800h,00800h,00FC0h,00000h,00000h
41B4 00 00 00 00 dw   00000h,00000h,00000h,01F80h,00080h,00080h,00100h,07FE0h
41C4 02 00 02 00 dw   00200h,00200h,01F80h,00080h,00080h,00080h,00000h,00000h
41D4 00 00 00 00 dw   00000h,00000h,00000h,000C0h,00C40h,00440h,00840h,00C40h
41E4 12 40 61 40 dw   01240h,06140h,00040h,01800h,00800h,00FC0h,00000h,00000h
41F4 00 00 00 00 dw   00000h,00000h,00000h,00700h,00000h,03FE0h,00500h,00880h
4204 08 80 07 00 dw   00880h,00700h,00200h,00200h,07FE0h,00000h,00000h,00000h
4214 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03840h,04440h,047C0h,04440h
4224 38 40 00 00 dw   03840h,00000h,03580h,01C80h,01540h,01E20h,00000h,00000h
4234 00 00 00 00 dw   00000h,00000h,00000h,00F00h,01080h,01080h,00F00h,00000h
4244 7F E0 00 00 dw   07FE0h,00000h,03F80h,01080h,01080h,01F80h,00000h,00000h
4254 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03E40h,00240h,003C0h,03C40h
4264 04 40 0B C0 dw   00440h,00BC0h,01040h,06040h,00040h,00040h,00000h,00000h
4274 00 00 00 00 dw   00000h,00000h,00000h,000C0h,07E40h,01240h,01240h,013C0h
4284 24 40 24 40 dw   02440h,02440h,04840h,01040h,00040h,00040h,00000h,00000h
4294 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03E40h,00240h,00240h,00440h
42A4 04 70 08 40 dw   00470h,00840h,01040h,06040h,00040h,00040h,00000h,00000h
42B4 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03840h,04440h,04440h,04440h
42C4 44 40 44 40 dw   04440h,04440h,03840h,00040h,00040h,00040h,00000h,00000h
42D4 00 00 00 00 dw   00000h,00000h,00000h,000C0h,07C40h,00440h,00440h,07C40h
42E4 20 70 20 40 dw   02070h,02040h,021C0h,03E40h,00040h,00040h,00000h,00000h
42F4 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03840h,04440h,04440h,04440h
4304 38 40 00 40 dw   03840h,00040h,00040h,01800h,00800h,00FC0h,00000h,00000h
4314 00 00 00 00 dw   00000h,00000h,00000h,066C0h,02240h,03E40h,02270h,03E40h
4324 00 00 3F C0 dw   00000h,03FC0h,00440h,03C40h,01040h,01E40h,00000h,00000h
4334 00 00 00 00 dw   00000h,00000h,00000h,00CC0h,00440h,00840h,00C70h,01240h
4344 61 40 00 00 dw   06140h,00000h,00780h,00840h,00840h,00780h,00000h,00000h
4354 00 00 00 00 dw   00000h,00000h,00000h,000C0h,00340h,07940h,00940h,01140h
4364 11 C0 29 40 dw   011C0h,02940h,0C540h,00140h,00140h,00040h,00000h,00000h
4374 00 00 00 00 dw   00000h,00000h,00000h,00CC0h,00440h,009C0h,01440h,06240h
4384 00 00 1F C0 dw   00000h,01FC0h,00040h,01FC0h,00800h,00FC0h,00000h,00000h
4394 00 00 00 00 dw   00000h,00000h,00000h,000C0h,03C40h,00440h,00BC0h,01440h
43A4 62 40 00 00 dw   06240h,00000h,00780h,00840h,00840h,00780h,00000h,00000h
                extra_font_3_num_chars equ ($-extra_font_3)/20h
                ;---
                .if blah_version<ver11sep2017
                 ;... below unused?
43B4 1F F0 3F F0 dw   01FF0h,03FF0h,03000h,037D0h,037D0h,037D0h,0F7D0h,0F7D0h
43C4 F7 D0 F7 D0 dw   0F7D0h,0F7D0h,037D0h,037D0h,037D0h,03000h,03FF0h,01FF0h
43D4 FF F0 FF F0 dw   0FFF0h,0FFF0h,00000h,0F7D0h,0F7D0h,0F7D0h,0F7D0h,0F7D0h
43E4 F7 D0 F7 D0 dw   0F7D0h,0F7D0h,0F7D0h,0F7D0h,0F7D0h,00000h,0FFF0h,0FFF0h
43F4 FC 00 FE 00 dw   0FC00h,0FE00h,00600h,0F600h,0F600h,0F600h,0F600h,0F600h
4404 F6 00 F6 00 dw   0F600h,0F600h,0F600h,0F600h,0F600h,00600h,0FE00h,0FC00h
4414 1F F0 3F F0 dw   01FF0h,03FF0h,03000h,03010h,03010h,03010h,0F010h,0F010h
4424 F0 10 F0 10 dw   0F010h,0F010h,03010h,03010h,03010h,03000h,03FF0h,01FF0h
4434 FF F0 FF F0 dw   0FFF0h,0FFF0h,00000h,0F7D0h,0F7D0h,0F7D0h,0F7D0h,0F7D0h
4444 F7 D0 F7 D0 dw   0F7D0h,0F7D0h,0F7D0h,0F7D0h,0F7D0h,00000h,0FFF0h,0FFF0h
4454 FC 00 FE 00 dw   0FC00h,0FE00h,00600h,0F600h,0F600h,0F600h,0F600h,0F600h
4464 F6 00 F6 00 dw   0F600h,0F600h,0F600h,0F600h,0F600h,00600h,0FE00h,0FC00h
4474 1F F0 3F F0 dw   01FF0h,03FF0h,03000h,03000h,03000h,03000h,0F000h,0F000h
4484 F0 00 F0 00 dw   0F000h,0F000h,03000h,03000h,03000h,03000h,03FF0h,01FF0h
4494 FF F0 FF F0 dw   0FFF0h,0FFF0h,00000h,007D0h,007D0h,007D0h,007D0h,007D0h
44A4 07 D0 07 D0 dw   007D0h,007D0h,007D0h,007D0h,007D0h,00000h,0FFF0h,0FFF0h
44B4 FC 00 FE 00 dw   0FC00h,0FE00h,00600h,0F600h,0F600h,0F600h,0F600h,0F600h
44C4 F6 00 F6 00 dw   0F600h,0F600h,0F600h,0F600h,0F600h,00600h,0FE00h,0FC00h
44D4 1F F0 3F F0 dw   01FF0h,03FF0h,03000h,03000h,03000h,03000h,0F000h,0F000h
44E4 F0 00 F0 00 dw   0F000h,0F000h,03000h,03000h,03000h,03000h,03FF0h,01FF0h
44F4 FF F0 FF F0 dw   0FFF0h,0FFF0h,00000h,00010h,00010h,00010h,00010h,00010h
4504 00 10 00 10 dw   00010h,00010h,00010h,00010h,00010h,00000h,0FFF0h,0FFF0h
4514 FC 00 FE 00 dw   0FC00h,0FE00h,00600h,0F600h,0F600h,0F600h,0F600h,0F600h
4524 F6 00 F6 00 dw   0F600h,0F600h,0F600h,0F600h,0F600h,00600h,0FE00h,0FC00h
4534 1F F0 3F F0 dw   01FF0h,03FF0h,03000h,03000h,03000h,03000h,0F000h,0F000h
4544 F0 00 F0 00 dw   0F000h,0F000h,03000h,03000h,03000h,03000h,03FF0h,01FF0h
4554 FF F0 FF F0 dw   0FFF0h,0FFF0h,00000h,00000h,00000h,00000h,00000h,00000h
4564 00 00 00 00 dw   00000h,00000h,00000h,00000h,00000h,00000h,0FFF0h,0FFF0h
4574 FC 00 FE 00 dw   0FC00h,0FE00h,00600h,00600h,00600h,00600h,00600h,00600h
4584 06 00 06 00 dw   00600h,00600h,00600h,00600h,00600h,00600h,0FE00h,0FC00h
                .endif
                ;------------------
;:------------- ;:----------------- FLOAT code (float maths)
                ;------------------
                to_set_r4r5r6r7_to_FFFFFFFFh:
4594 02 48 DC    jmp  set_r4r5r6r7_to_FFFFFFFFh
                ;------------------
                float_add_r4r5r6r7_r0r1r2r3:          ;<-- UNUSED
                ;(unused?)
4597 E8          mov  a,r0      ;\
4598 64 80       xor  a,80h     ; negate r0r1r2r3
459A F8          mov  r0,a      ;/
                ;- - - - - --------
                float_subtract_r4r5r6r7_r0r1r2r3:     ;<-- USED 2x
459B E9          mov  a,r1
459C 33          rcl  a
459D E8          mov  a,r0
459E 33          rcl  a
459F 60 11       jz   a,@@_45B2h
45A1 04          inc  a
45A2 60 F0       jz   a,to_set_r4r5r6r7_to_FFFFFFFFh
45A4 ED          mov  a,r5
45A5 33          rcl  a
45A6 EC          mov  a,r4
45A7 33          rcl  a
45A8 70 09       jnz  a,@@_45B3h
45AA E8          mov  a,r0      ;\
45AB FC          mov  r4,a      ;
45AC E9          mov  a,r1      ;
45AD FD          mov  r5,a      ; r4r5r6r7 = r0r1r2r3
45AE EA          mov  a,r2      ;
45AF FE          mov  r6,a      ;
45B0 EB          mov  a,r3      ;
45B1 FF          mov  r7,a      ;/
                @@_45B2h:
45B2 22          ret
                ;---
                @@_45B3h:
45B3 04          inc  a
45B4 60 DE       jz   a,to_set_r4r5r6r7_to_FFFFFFFFh
45B6 D3          set  c    ;<-- ;\
45B7 EB          mov  a,r3      ;
45B8 9F          sbc  a,r7      ;
45B9 EA          mov  a,r2      ; compare r0r1r2r3-r4r5r6r7
45BA 9E          sbc  a,r6      ; (excluding bit31, aka MSB.bit7)
45BB E9          mov  a,r1      ;
45BC 9D          sbc  a,r5      ;
45BD E8          mov  a,r0      ;
45BE C2 E7       clr  a.7  ;<-- ;
45C0 8C F0       mov  b,r4      ;
45C2 C2 F7       clr  b.7  ;<-- ;
45C4 95 F0       sbc  a,b       ;/
45C6 40 0C       jc   @@_45D4h
45C8 E8          mov  a,r0      ;\
45C9 CC          xchg a,r4      ;
45CA F8          mov  r0,a      ;
45CB E9          mov  a,r1      ;
45CC CD          xchg a,r5      ; swap r0r1r2r3, r4r5r6r7
45CD F9          mov  r1,a      ;
45CE EA          mov  a,r2      ;
45CF CE          xchg a,r6      ;
45D0 FA          mov  r2,a      ;
45D1 EB          mov  a,r3      ;
45D2 CF          xchg a,r7      ;
45D3 FB          mov  r3,a      ;/
                @@_45D4h:
45D4 12 48 A7    call xxx_48A7h
45D7 85 D0 F0    mov  b,psw
45DA 58          and  a,r0
45DB 04          inc  a
45DC 70 03       jnz  a,@@_45E1h
45DE 20 D5 B3    jnz  f0,to_set_r4r5r6r7_to_FFFFFFFFh
                @@_45E1h:
45E1 E8          mov  a,r0
45E2 04          inc  a
45E3 70 07       jnz  a,@@_45ECh
45E5 50 02       jnc  @@to_xxx_48E6h
45E7 B2 D5       cpl  f0
                @@to_xxx_48E6h:
45E9 02 48 E6    jmp  xxx_48E6h
                ;---
                @@_45ECh:
45EC 92 D5       mov  f0,c
45EE EC          mov  a,r4
45EF 04          inc  a
45F0 60 F7       jz   a,@@to_xxx_48E6h
45F2 E4          clr  a
45F3 CC          xchg a,r4
45F4 C0 E0       push a         ;----> STACK
45F6 C3          clr  c
45F7 98          sbc  a,r0
45F8 F8          mov  r0,a
45F9 60 3B       jz   a,@@_4636h
45FB 94 18       sbc  a,18h
45FD 60 08       jz   a,@@_4607h
45FF 40 0D       jc   @@_460Eh
4601 D0 E0       pop  a         ;<---- STACK
4603 FB          mov  r3,a
4604 02 48 BE    jmp  xxx_48BEh
                ;---
                @@_4607h:
4607 E4          clr  a
4608 FB          mov  r3,a
4609 FA          mov  r2,a
460A C9          xchg a,r1
460B FC          mov  r4,a
460C 80 28       sjmp @@_4636h
                ;---
                @@_460Eh:
460E E8          mov  a,r0                      ;\
460F 30 E4 06    jz   a.4,@@skip_shift_16       ;
4612 E4          clr  a                         ;
4613 C9          xchg a,r1                      ;
4614 FB          mov  r3,a                      ;
4615 E4          clr  a                         ;
4616 CA          xchg a,r2                      ;
4617 FC          mov  r4,a                      ;
                @@skip_shift_16:                ;/
4618 E8          mov  a,r0                      ;\
4619 30 E3 05    jz   a.3,@@skip_shift_8        ;
461C E4          clr  a                         ;
461D C9          xchg a,r1                      ;
461E CA          xchg a,r2                      ;
461F CB          xchg a,r3                      ;
4620 FC          mov  r4,a                      ;
                @@skip_shift_8:                 ;/
4621 E8          mov  a,r0                      ;\
4622 54 07       and  a,07h                     ;
4624 60 10       jz   a,@@skip_shift_1234567    ;
4626 F8          mov  r0,a                      ;
                @@shift_lop:                    ;
4627 C3          clr  c                         ;
4628 E9          mov  a,r1                      ;
4629 13          rcr  a                         ;
462A F9          mov  r1,a                      ;
462B EA          mov  a,r2                      ;
462C 13          rcr  a                         ;
462D FA          mov  r2,a                      ;
462E EB          mov  a,r3                      ;
462F 13          rcr  a                         ;
4630 FB          mov  r3,a                      ;
4631 EC          mov  a,r4                      ;
4632 13          rcr  a                         ;
4633 FC          mov  r4,a                      ;
4634 D8 F1       djnz r0,@@shift_lop            ;
                @@skip_shift_1234567:           ;/
                ;- - -
                @@_4636h:
4636 30 F5 2F    jz   b.5,@@_4668h     ;---> add
4639 C3          clr  c         ;\
463A E4          clr  a         ;
463B 9C          sbc  a,r4      ;
463C FC          mov  r4,a      ;
463D EF          mov  a,r7  ;\  ;        subtract !!!
463E 9B          sbc  a,r3  ;   ;
463F FF          mov  r7,a  ;/  ;
4640 EE          mov  a,r6  ;\  ;
4641 9A          sbc  a,r2  ;   ;
4642 FE          mov  r6,a  ;/  ;
4643 ED          mov  a,r5  ;\  ;
4644 99          sbc  a,r1  ;   ;
4645 FD          mov  r5,a  ;/  ;/
4646 D0 E0       pop  a         ;<---- STACK
4648 FB          mov  r3,a
4649 EF          mov  a,r7      ;\
464A 4E          or   a,r6      ; check if zero
464B 4D          or   a,r5      ;
464C 4C          or   a,r4      ;/
464D 70 12       jnz  a,@@shift_to_msbs_inj   ;--> adjust exponent (eg. if new value has value with MSBs=0)
464F 22          ret            ;done (zero)
                ;---
                @@shift_to_msbs_lop:                    ;\
4650 DB 03       djnz r3,@@shift_to_msbs_lop_next       ;
4652 02 48 E3    jmp  set_r4r5r6r7_to_00000000h         ;
                ;---                                    ;
                @@shift_to_msbs_lop_next:               ;
4655 EC          mov  a,r4                              ;
4656 2C          add  a,r4                              ; shift result to MSBs
4657 FC          mov  r4,a                              ;
4658 EF          mov  a,r7                              ;
4659 33          rcl  a                                 ;
465A FF          mov  r7,a                              ;
465B EE          mov  a,r6                              ;
465C 33          rcl  a                                 ;
465D FE          mov  r6,a                              ;
465E ED          mov  a,r5                              ;
465F 33          rcl  a                                 ;
4660 FD          mov  r5,a                              ;
                @@shift_to_msbs_inj:                    ;
4661 ED          mov  a,r5                              ;
4662 30 E7 EB    jz   a.7,@@shift_to_msbs_lop           ;/
4665 02 48 BE    jmp  xxx_48BEh             ;----->
                ;---
                @@_4668h:
4668 EF          mov  a,r7
4669 2B          add  a,r3
466A FF          mov  r7,a
466B EE          mov  a,r6
466C 3A          adc  a,r2
466D FE          mov  r6,a
466E ED          mov  a,r5
466F 39          adc  a,r1
4670 FD          mov  r5,a
4671 D0 E0       pop  a         ;<---- STACK
4673 FB          mov  r3,a
4674 50 13       jnc  @@_4689h
4676 0B          inc  r3
4677 BB 00 03    jne  r3,00h,@@_467Dh
467A 02 48 E6    jmp  xxx_48E6h
                ;---
                @@_467Dh:
467D ED          mov  a,r5
467E 13          rcr  a
467F FD          mov  r5,a
4680 EE          mov  a,r6
4681 13          rcr  a
4682 FE          mov  r6,a
4683 EF          mov  a,r7
4684 13          rcr  a
4685 FF          mov  r7,a
4686 EC          mov  a,r4
4687 13          rcr  a
4688 FC          mov  r4,a
                @@_4689h:
4689 02 48 BE    jmp  xxx_48BEh
                ;------------------
                float_multiply:    ;FLOAT... multiply ?      ;used 6x
468C EC          mov  a,r4
468D 4D          or   a,r5
468E 60 11       jz   a,@@_46A1h
4690 E8          mov  a,r0
4691 49          or   a,r1
4692 70 17       jnz  a,@@_46ABh
4694 ED          mov  a,r5
4695 33          rcl  a
4696 EC          mov  a,r4
4697 33          rcl  a
4698 04          inc  a
4699 60 0D       jz   a,@@_46A8h
469B E4          clr  a
469C FC          mov  r4,a
469D FF          mov  r7,a
469E FE          mov  r6,a
469F FD          mov  r5,a
                @@exit:
46A0 22          ret
                ;---
                @@_46A1h:
46A1 E9          mov  a,r1
46A2 33          rcl  a
46A3 E8          mov  a,r0
46A4 33          rcl  a
46A5 04          inc  a
46A6 70 F8       jnz  a,@@exit
                @@_46A8h:
46A8 02 48 DC    jmp  set_r4r5r6r7_to_FFFFFFFFh
                ;--- ---
                @@_46ABh:
46AB 12 48 A7    call xxx_48A7h
46AE 58          and  a,r0
46AF 04          inc  a
46B0 60 09       jz   a,@@_46BBh
46B2 E4          clr  a
46B3 CC          xchg a,r4
46B4 24 81       add  a,81h
46B6 50 06       jnc  @@_46BEh
46B8 28          add  a,r0
46B9 50 09       jnc  @@_46C4h
                @@_46BBh:
46BB 02 48 E6    jmp  xxx_48E6h
                ;---
                @@_46BEh:
46BE 28          add  a,r0
46BF 40 03       jc   @@_46C4h
46C1 02 48 E3    jmp  set_r4r5r6r7_to_00000000h
                ;---
                @@_46C4h:
46C4 C0 E0       push a         ;----> STACK
46C6 EB          mov  a,r3
46C7 4A          or   a,r2
46C8 70 44       jnz  a,@@_470Eh        ;----->
46CA B9 80 06    jne  r1,80h,@@_46D3h
                @@_46CDh:
46CD D0 E0       pop  a         ;<---- STACK
46CF FB          mov  r3,a
46D0 02 48 D2    jmp  xxx_48D2h
                ;---
                @@_46D3h:
46D3 EF          mov  a,r7
46D4 4E          or   a,r6
46D5 70 1C       jnz  a,@@_46F3h
46D7 BD 80 08    jne  r5,80h,@@_46E2h
                @@_46DAh:
46DA EB          mov  a,r3
46DB FF          mov  r7,a
46DC EA          mov  a,r2
46DD FE          mov  r6,a
46DE E9          mov  a,r1
46DF FD          mov  r5,a
46E0 80 EB       sjmp @@_46CDh
                ;---
                @@_46E2h:
46E2 E9          mov  a,r1
46E3 8D F0       mov  b,r5
46E5 A4          mul  a,b
46E6 FE          mov  r6,a
46E7 E5 F0       mov  a,b
46E9 02 47 75    jmp  @@_4775h
                ;--- ---
                @@_46ECh:    ;... MUL      ;lop.........
46EC E9          mov  a,r1
46ED CD          xchg a,r5
46EE F9          mov  r1,a
46EF EA          mov  a,r2
46F0 FE          mov  r6,a
46F1 EB          mov  a,r3
46F2 FF          mov  r7,a
                @@_46F3h:         ;<-- lop injump
46F3 EF          mov  a,r7
46F4 89 F0       mov  b,r1
46F6 A4          mul  a,b
46F7 FC          mov  r4,a
46F8 E5 F0       mov  a,b
46FA CE          xchg a,r6
46FB 89 F0       mov  b,r1
46FD A4          mul  a,b
46FE 2E          add  a,r6
46FF FF          mov  r7,a
4700 E4          clr  a
4701 35 F0       adc  a,b
4703 CD          xchg a,r5
4704 89 F0       mov  b,r1
4706 A4          mul  a,b
4707 2D          add  a,r5
4708 FE          mov  r6,a
4709 E4          clr  a
470A 35 F0       adc  a,b
470C 80 67       sjmp @@_4775h
                ;--- ---
                @@_470Eh:           ;... MUL
470E EF          mov  a,r7
470F 4E          or   a,r6
4710 70 05       jnz  a,@@_4717h
4712 BD 80 D7    jne  r5,80h,@@_46ECh       ;--------->      .....lop
4715 80 C3       sjmp @@_46DAh
                ;---
                @@_4717h:
4717 EF          mov  a,r7
4718 8B F0       mov  b,r3
471A A4          mul  a,b
471B AC F0       mov  r4,b
471D EE          mov  a,r6
471E 8B F0       mov  b,r3
4720 A4          mul  a,b
4721 2C          add  a,r4
4722 FC          mov  r4,a
4723 E4          clr  a
4724 35 F0       adc  a,b
4726 F8          mov  r0,a
4727 EF          mov  a,r7
4728 8A F0       mov  b,r2
472A A4          mul  a,b
472B 2C          add  a,r4
472C E5 F0       mov  a,b
472E 38          adc  a,r0
472F FC          mov  r4,a
4730 E4          clr  a
4731 33          rcl  a
4732 CB          xchg a,r3
4733 8D F0       mov  b,r5
4735 A4          mul  a,b
4736 2C          add  a,r4
4737 FC          mov  r4,a
4738 E5 F0       mov  a,b
473A 3B          adc  a,r3
473B F8          mov  r0,a
473C EE          mov  a,r6
473D 8A F0       mov  b,r2
473F A4          mul  a,b
4740 2C          add  a,r4
4741 FC          mov  r4,a
4742 E5 F0       mov  a,b
4744 38          adc  a,r0
4745 F8          mov  r0,a
4746 E4          clr  a
4747 33          rcl  a
4748 CF          xchg a,r7
4749 89 F0       mov  b,r1
474B A4          mul  a,b
474C 2C          add  a,r4
474D FC          mov  r4,a
474E E5 F0       mov  a,b
4750 38          adc  a,r0
4751 CF          xchg a,r7
4752 34 00       adc  a,00h
4754 CE          xchg a,r6
4755 89 F0       mov  b,r1
4757 A4          mul  a,b
4758 2F          add  a,r7
4759 FF          mov  r7,a
475A E5 F0       mov  a,b
475C 3E          adc  a,r6
475D FE          mov  r6,a
475E E4          clr  a
475F 33          rcl  a
4760 C9          xchg a,r1
4761 8D F0       mov  b,r5
4763 A4          mul  a,b
4764 2E          add  a,r6
4765 FE          mov  r6,a
4766 E5 F0       mov  a,b
4768 39          adc  a,r1
4769 CD          xchg a,r5
476A 8A F0       mov  b,r2
476C A4          mul  a,b
476D 2F          add  a,r7
476E FF          mov  r7,a
476F E5 F0       mov  a,b
4771 3E          adc  a,r6
4772 FE          mov  r6,a
4773 E4          clr  a
4774 3D          adc  a,r5
                ;- - - - - --------
                @@_4775h:
4775 FD          mov  r5,a
4776 33          rcl  a
4777 D0 E0       pop  a         ;<---- STACK
4779 FB          mov  r3,a
477A 50 07       jnc  @@_4783h
477C 0B          inc  r3
477D BB 00 0F    jne  r3,00h,@@_478Fh
4780 02 48 E6    jmp  xxx_48E6h
                ;---
                @@_4783h:
4783 EC          mov  a,r4
4784 2C          add  a,r4
4785 FC          mov  r4,a
4786 EF          mov  a,r7
4787 33          rcl  a
4788 FF          mov  r7,a
4789 EE          mov  a,r6
478A 33          rcl  a
478B FE          mov  r6,a
478C ED          mov  a,r5
478D 33          rcl  a
478E FD          mov  r5,a
                @@_478Fh:
478F 02 48 BE    jmp  xxx_48BEh
                ;------------------
                to_xxx_48E6h:
4792 02 48 E6    jmp  xxx_48E6h
                ;------------------
                float_divide:       ;FLOAT divide?    ;used 4x
4795 EC          mov  a,r4
4796 5D          and  a,r5
4797 04          inc  a
4798 60 05       jz   a,@@to_set_r4r5r6r7_to_FFFFFFFFh
479A E8          mov  a,r0
479B 59          and  a,r1
479C 04          inc  a
479D 70 03       jnz  a,@@cont1
                ;- - -
                @@to_set_r4r5r6r7_to_FFFFFFFFh:
479F 02 48 DC    jmp  set_r4r5r6r7_to_FFFFFFFFh
                ;---
                @@cont1:
47A2 12 48 A7    call xxx_48A7h     ;------->
47A5 58          and  a,r0
47A6 04          inc  a
47A7 60 F6       jz   a,@@to_set_r4r5r6r7_to_FFFFFFFFh
47A9 EC          mov  a,r4
47AA 48          or   a,r0
47AB 60 F2       jz   a,@@to_set_r4r5r6r7_to_FFFFFFFFh
47AD EC          mov  a,r4
47AE 70 04       jnz  a,@@cont2
47B0 FD          mov  r5,a
47B1 FE          mov  r6,a
47B2 FF          mov  r7,a
47B3 22          ret
                ;---
                @@cont2:
47B4 C8          xchg a,r0
47B5 60 DB       jz   a,to_xxx_48E6h
47B7 24 81       add  a,81h
47B9 C8          xchg a,r0
47BA 50 09       jnc  @@cont3
47BC C3          clr  c
47BD 98          sbc  a,r0
47BE 60 02       jz   a,@@to_set_r4r5r6r7_to_00000000h
47C0 50 06       jnc  @@cont4
                @@to_set_r4r5r6r7_to_00000000h:
47C2 02 48 E3    jmp  set_r4r5r6r7_to_00000000h
                ;---
                @@cont3:
47C5 98          sbc  a,r0
47C6 50 CA       jnc  to_xxx_48E6h
                @@cont4:
47C8 F5 82       mov  dpl,a
47CA E9          mov  a,r1
47CB 29          add  a,r1
47CC 4B          or   a,r3
47CD 4A          or   a,r2
47CE 70 05       jnz  a,@@cont5
47D0 AB 82       mov  r3,dpl
47D2 02 48 D2    jmp  xxx_48D2h
                ;--- --- ---
                @@cont5:
47D5 75 F0 00    mov  b,00h
47D8 7C 1A       mov  r4,1Ah
47DA 78 80       mov  r0,80h
                @@divide_lop_type_1:           ;lop.A.......
47DC C3          clr  c
47DD EF          mov  a,r7
47DE 9B          sbc  a,r3
47DF EE          mov  a,r6
47E0 9A          sbc  a,r2
47E1 ED          mov  a,r5
47E2 99          sbc  a,r1
47E3 40 0D       jc   @@div_cont1
                @@divide_lop_type_2:           ;lop.B.......
47E5 C3          clr  c
47E6 EF          mov  a,r7
47E7 9B          sbc  a,r3
47E8 FF          mov  r7,a
47E9 EE          mov  a,r6
47EA 9A          sbc  a,r2
47EB FE          mov  r6,a
47EC ED          mov  a,r5
47ED 99          sbc  a,r1
47EE FD          mov  r5,a
47EF E8          mov  a,r0
47F0 42 F0       or   b,a
                @@div_cont1:
                @@divide_lop_type_3:           ;lop.C.......
47F2 DC 23       djnz r4,@@div_cont2
                ;- - - FINISH...
47F4 AC F0       mov  r4,b
47F6 D0 E0       pop  a         ;<---- STACK
47F8 FF          mov  r7,a
47F9 D0 E0       pop  a         ;<---- STACK
47FB FE          mov  r6,a
47FC D0 E0       pop  a         ;<---- STACK
47FE FD          mov  r5,a
47FF AB 82       mov  r3,dpl
4801 20 E7 10    jnz  a.7,@@to_xxx_48BEh
4804 1B          dec  r3
4805 EB          mov  a,r3
4806 60 BA       jz   a,@@to_set_r4r5r6r7_to_00000000h
4808 EC          mov  a,r4
4809 2C          add  a,r4
480A FC          mov  r4,a
480B EF          mov  a,r7
480C 33          rcl  a
480D FF          mov  r7,a
480E EE          mov  a,r6
480F 33          rcl  a
4810 FE          mov  r6,a
4811 ED          mov  a,r5
4812 33          rcl  a
4813 FD          mov  r5,a
                @@to_xxx_48BEh:
4814 02 48 BE    jmp  xxx_48BEh
                ;---
                @@div_cont2:
4817 E8          mov  a,r0
4818 03          ror  a
4819 F8          mov  r0,a
481A 30 E7 05    jz   a.7,@@_4822h
481D C0 F0       push b         ;----> STACK
481F 75 F0 00    mov  b,00h
                @@_4822h:
4822 EF          mov  a,r7
4823 2F          add  a,r7
4824 FF          mov  r7,a
4825 EE          mov  a,r6
4826 33          rcl  a
4827 FE          mov  r6,a
4828 ED          mov  a,r5
4829 33          rcl  a
482A FD          mov  r5,a
482B 40 B8       jc   @@divide_lop_type_2
482D 30 E7 C2    jz   a.7,@@divide_lop_type_3
4830 80 AA       sjmp @@divide_lop_type_1
                ;------------------
                convert_a_r4r5r6r7_to_float:  ;in: r4r5r6r7=value, a.bit7=sign
                ;(unused)
4832 75 F0 20    mov  b,20h ;32bits
4835 80 0E       sjmp convert_to_float_inj_32bit
                ;------------------
                convert_a_r4r5_to_float:      ;in: r4r5=value, a.bit7=sign
4837 75 F0 10    mov  b,10h ;16bits
483A 80 05       sjmp convert_to_float_inj_16bit
                ;------------------
                convert_a_r4_to_float:        ;in: r4=value, a.bit7=sign
483C 75 F0 08    mov  b,08h ;8bits
483F 7D 00       mov  r5,00h
                ;- - - -
                convert_to_float_inj_16bit:
4841 7E 00       mov  r6,00h
4843 7F 00       mov  r7,00h
                ;- - - -
                convert_to_float_inj_32bit:
4845 33          rcl  a                 ;sign (a.bit7)
4846 92 D5       mov  f0,c
4848 30 D5 03    jz   f0,@@positive
484B 12 4C 91    call negate_r4r5r6r7    ;make positive
                @@positive:
                @@search_msb_lop:       ;\
484E EC          mov  a,r4              ;
484F 33          rcl  a
4850 40 10       jc   @@found_msb  ;---> end of leading zeroes
4852 EF          mov  a,r7
4853 33          rcl  a                 ;
4854 FF          mov  r7,a              ;
4855 EE          mov  a,r6              ;
4856 33          rcl  a                 ;
4857 FE          mov  r6,a              ;
4858 ED          mov  a,r5              ;
4859 33          rcl  a                 ;
485A FD          mov  r5,a              ;
485B EC          mov  a,r4              ;
485C 33          rcl  a                 ;
485D FC          mov  r4,a              ;
485E D5 F0 ED    djnz b,@@search_msb_lop;/
4861 22          ret
                ;---
                @@found_msb:
4862 E5 F0       mov  a,b               ;\exponent ?
4864 24 7E       add  a,7Eh             ;/
4866 A2 D5       mov  c,f0
4868 13          rcr  a
4869 CC          xchg a,r4
486A 92 E7       mov  a.7,c
486C CD          xchg a,r5
486D CE          xchg a,r6
486E FF          mov  r7,a
486F 22          ret
                ;------------------
                convert_float_to_r4r5r6r7:    ;used 1x
4870 ED          mov  a,r5
4871 D2 E7       set  a.7
4873 CD          xchg a,r5
4874 33          rcl  a
4875 EC          mov  a,r4
4876 33          rcl  a
4877 92 D5       mov  f0,c
4879 24 81       add  a,81h
487B 40 06       jc   @@nonzero
487D E4          clr  a          ;zero (or small fraction rounded to zero)
                @@return_r7r6r5r4_a_a_a_a:
487E FF          mov  r7,a       ;\
487F FE          mov  r6,a       ;
4880 FD          mov  r5,a       ;
4881 FC          mov  r4,a       ;/
                @@done:
4882 22          ret
                ;---
                @@nonzero:
4883 FC          mov  r4,a
4884 E4          clr  a
4885 CF          xchg a,r7
4886 CE          xchg a,r6
4887 CD          xchg a,r5
4888 CC          xchg a,r4
4889 24 E0       add  a,0E0h
488B 50 11       jnc  @@lop_injump
488D 74 FF       mov  a,0FFh                    ;\infinite +FFFFFFFFh ? (but ignoring "f0" float-sign, and violating bit31=integer-sign)
488F 80 ED       sjmp @@return_r7r6r5r4_a_a_a_a ;/
                ;---
                @@lop:
4891 C3          clr  c
4892 CC          xchg a,r4
4893 13          rcr  a
4894 CC          xchg a,r4
4895 CD          xchg a,r5
4896 13          rcr  a
4897 CD          xchg a,r5
4898 CE          xchg a,r6
4899 13          rcr  a
489A CE          xchg a,r6
489B CF          xchg a,r7
489C 13          rcr  a
489D CF          xchg a,r7
                @@lop_injump:
489E 04          inc  a
489F 70 F0       jnz  a,@@lop
48A1 30 D5 DE    jz   f0,@@done          ;keep positive
48A4 02 4C 91    jmp  negate_r4r5r6r7    ;make negative
                ;------------------
                xxx_48A7h:
48A7 E9          mov  a,r1
48A8 D2 E7       set  a.7
48AA C9          xchg a,r1               ;<-- mod
48AB 33          rcl  a
48AC E8          mov  a,r0
48AD 33          rcl  a
48AE F8          mov  r0,a               ;<-- mod
48AF 92 D5       mov  f0,c      ;sign 1
48B1 ED          mov  a,r5
48B2 D2 E7       set  a.7
48B4 CD          xchg a,r5               ;<-- mod
48B5 33          rcl  a
48B6 EC          mov  a,r4
48B7 33          rcl  a
48B8 FC          mov  r4,a               ;<-- mod
48B9 50 02       jnc  @@done
48BB B2 D5       cpl  f0        ;sign 1 xor sign 2      ?
                @@done:
48BD 22          ret
                ;------------------
                xxx_48BEh:
48BE EC          mov  a,r4
48BF 30 E7 10    jz   a.7,@@cont
48C2 0F          inc  r7
48C3 BF 00 0C    jne  r7,00h,@@cont
48C6 0E          inc  r6
48C7 BE 00 08    jne  r6,00h,@@cont
48CA 0D          inc  r5
48CB BD 00 04    jne  r5,00h,@@cont
48CE 0B          inc  r3
48CF EB          mov  a,r3
48D0 60 14       jz   a,xxx_48E6h     ;--->
                @@cont:
                ;- - - - - --------
                xxx_48D2h:
48D2 A2 D5       mov  c,f0
48D4 EB          mov  a,r3
48D5 13          rcr  a
48D6 FC          mov  r4,a
48D7 ED          mov  a,r5
48D8 92 E7       mov  a.7,c
48DA FD          mov  r5,a
48DB 22          ret
                ;------------------
                set_r4r5r6r7_to_FFFFFFFFh:
48DC 74 FF       mov  a,0FFh
                ;- - - - - --------
                set_r4r5r6r7_to_a_a_a_a:
48DE FC          mov  r4,a
48DF FD          mov  r5,a
                ;- - - - - --------
                set_r6r7_to_a_a:
48E0 FE          mov  r6,a
48E1 FF          mov  r7,a
48E2 22          ret
                ;------------------
                set_r4r5r6r7_to_00000000h:
48E3 E4          clr  a
48E4 80 F8       sjmp set_r4r5r6r7_to_a_a_a_a
                ;--- --- ----------
                xxx_48E6h:
                       ;... maybe set float to plus/minus 1 or so? or INFINITE?
48E6 A2 D5       mov  c,f0    ;cy=f0
48E8 74 FF       mov  a,0FFh  ;FFh
48EA 13          rcr  a       ;7Fh+cy*80h
48EB FC          mov  r4,a    ;7Fh+cy*80h
48EC 7D 80       mov  r5,80h  ;80h
48EE E4          clr  a
48EF 80 EF       sjmp set_r6r7_to_a_a   ;0000h
                ;------------------
;:------------- ;:----------------- ANYMEM code (anymem_generic_memcopy)
                ;------------------
                generic_memcopy_ram8bit_to_ram8bit:
                @@lop:                          ;\
48F1 E7          mov  a,[r1]                    ; memcopy (RAM)
48F2 09          inc  r1                        ; (8bit addr's)
48F3 F6          mov  [r0],a                    ;
48F4 08          inc  r0                        ;
48F5 DF FA       djnz r7,@@lop                  ;/
48F7 80 46       sjmp to_generic_memcopy_finish
                ;--- --- ----------
                generic_memcopy_ram8bit_to_xram8bit:
                @@lop:                          ;\
48F9 E7          mov  a,[r1]                    ;
48FA 09          inc  r1                        ;
48FB F2          movx [r0],a                    ;
48FC 08          inc  r0                        ;
48FD DF FA       djnz r7,@@lop                  ;/
48FF 80 3E       sjmp to_generic_memcopy_finish
                ;--- --- ----------
                generic_memcopy_ram8bit_to_xram16bit:
4901 88 82       mov  dpl,r0
4903 8C 83       mov  dph,r4
                @@lop:                          ;\
4905 E7          mov  a,[r1]                    ;
4906 09          inc  r1                        ;
4907 F0          movx [dptr],a                  ;
4908 A3          inc  dptr                      ;
4909 DF FA       djnz r7,@@lop                  ;/
490B 80 32       sjmp to_generic_memcopy_finish
                ;--- --- ----------
                generic_memcopy_xram8bit_to_ram8bit:
                @@lop:                          ;\
490D E3          movx a,[r1]                    ;
490E 09          inc  r1                        ;
490F F6          mov  [r0],a                    ;
4910 08          inc  r0                        ;
4911 DF FA       djnz r7,@@lop                  ;/
4913 80 78       sjmp generic_memcopy_finish
                ;------------------
                generic_memcopy_xram8bit_to_xram8bit:
                @@lop:                          ;\
4915 E3          movx a,[r1]                    ; memcopy (XRAM)
4916 09          inc  r1                        ; (8bit addr's)
4917 F2          movx [r0],a                    ;
4918 08          inc  r0                        ;
4919 DF FA       djnz r7,@@lop                  ;/
491B 80 70       sjmp generic_memcopy_finish
                ;--- --- ----------
                generic_memcopy_xram8bit_to_xram16bit:
491D 88 82       mov  dpl,r0
491F 8C 83       mov  dph,r4
                @@lop:                          ;\
4921 E3          movx a,[r1]                    ; memcopy (XRAM)
4922 09          inc  r1                        ; (mixed 8bit/16bit addr's)
4923 F0          movx [dptr],a                  ;
4924 A3          inc  dptr                      ;
4925 DF FA       djnz r7,@@lop                  ;/
4927 80 64       sjmp generic_memcopy_finish
                ;--- --- ----------
                generic_memcopy_xram16bit_to_ram8bit:
4929 89 82       mov  dpl,r1
492B 8A 83       mov  dph,r2
                @@lop:                          ;\
492D E0          movx a,[dptr]                  ; memcopy (XRAM-to-RAM) (!)
492E A3          inc  dptr                      ; (mixed 8bit/16bit addr's)
492F F6          mov  [r0],a    ;<-- "MOV" !!!  ;
4930 08          inc  r0                        ;
4931 DF FA       djnz r7,@@lop                  ;/
4933 80 58       sjmp generic_memcopy_finish
                ;--- --- ----------
                generic_memcopy_xram16bit_to_xram8bit:
4935 89 82       mov  dpl,r1
4937 8A 83       mov  dph,r2
                @@lop:                          ;\
4939 E0          movx a,[dptr]                  ; memcopy (XRAM)
493A A3          inc  dptr                      ; (mixed 8bit/16bit addr's)
493B F2          movx [r0],a                    ;
493C 08          inc  r0                        ;
493D DF FA       djnz r7,@@lop                  ;/
                ;- - - - - - - ----
                generic_memcopy_xram8bit_to_code16bit:   ;\
                generic_memcopy_ram8bit_to_code16bit:    ; can't WRITE
                generic_memcopy_code16bit_to_code16bit:  ; to CODE area
                generic_memcopy_xram16bit_to_code16bit:  ;/
                to_generic_memcopy_finish:
493F 80 4C       sjmp generic_memcopy_finish
                ;--- --- ----------
                generic_memcopy_jumplist:
4941 80 D2       sjmp generic_memcopy_xram8bit_to_xram8bit      ;\
4943 80 FA       sjmp generic_memcopy_xram8bit_to_code16bit     ;
4945 80 C6       sjmp generic_memcopy_xram8bit_to_ram8bit       ;
4947 80 D4       sjmp generic_memcopy_xram8bit_to_xram16bit     ;/
4949 80 69       sjmp generic_memcopy_code16bit_to_xram8bit     ;\
494B 80 F2       sjmp generic_memcopy_code16bit_to_code16bit    ;
494D 80 33       sjmp generic_memcopy_code16bit_to_ram8bit      ;
494F 80 10       sjmp generic_memcopy_code16bit_to_xram16bit    ;/
4951 80 A6       sjmp generic_memcopy_ram8bit_to_xram8bit       ;\
4953 80 EA       sjmp generic_memcopy_ram8bit_to_code16bit      ;
4955 80 9A       sjmp generic_memcopy_ram8bit_to_ram8bit        ;
4957 80 A8       sjmp generic_memcopy_ram8bit_to_xram16bit      ;/
4959 80 DA       sjmp generic_memcopy_xram16bit_to_xram8bit     ;\
495B 80 E2       sjmp generic_memcopy_xram16bit_to_code16bit    ;
495D 80 CA       sjmp generic_memcopy_xram16bit_to_ram8bit      ;
495F 80 33       sjmp generic_memcopy_xram16bit_to_xram16bit    ;/
                ;--- --- ----------
                generic_memcopy_code16bit_to_xram16bit:
4961 89 82       mov  dpl,r1
4963 8A 83       mov  dph,r2
4965 EC          mov  a,r4
4966 FA          mov  r2,a
                @@lop:                          ;\
4967 E4          clr  a                         ; memcopy (CODE-to-XRAM)
4968 93          movc a,[a+dptr]                ;
4969 A3          inc  dptr                      ;
496A C8          xchg a,r0                      ;
496B C5 82       xchg a,dpl                     ;
496D C8          xchg a,r0                      ;
496E CC          xchg a,r4                      ;
496F C5 83       xchg a,dph                     ;
4971 CC          xchg a,r4                      ;
4972 F0          movx [dptr],a                  ;
4973 A3          inc  dptr                      ;
4974 C8          xchg a,r0                      ;
4975 C5 82       xchg a,dpl                     ;
4977 C8          xchg a,r0                      ;
4978 CC          xchg a,r4                      ;
4979 C5 83       xchg a,dph                     ;
497B CC          xchg a,r4                      ;
497C DF E9       djnz r7,@@lop                  ;
497E DE E7       djnz r6,@@lop                  ;/
4980 80 0D       sjmp generic_memcopy_finish_inj
                ;--- --- ----------
                generic_memcopy_code16bit_to_ram8bit:
4982 89 82       mov  dpl,r1
4984 8A 83       mov  dph,r2
                @@lop:                          ;\
4986 E4          clr  a                         ;
4987 93          movc a,[a+dptr]                ; memcopy (CODE-to-RAM)
4988 A3          inc  dptr                      ;
4989 F6          mov  [r0],a   ;<-- "MOV"       ;
498A 08          inc  r0                        ;
498B DF F9       djnz r7,@@lop                  ;/
                ;- - - - ----------
                generic_memcopy_finish:
498D EC          mov  a,r4
498E FA          mov  r2,a
                ;- - - - ----------
                generic_memcopy_finish_inj:
498F A9 F0       mov  r1,b
4991 ED          mov  a,r5
4992 FB          mov  r3,a
4993 22          ret
                ;--- --- ----------
                generic_memcopy_xram16bit_to_xram16bit:
4994 89 82       mov  dpl,r1
4996 8A 83       mov  dph,r2
4998 EC          mov  a,r4
4999 FA          mov  r2,a
                @@lop:                          ;\
499A E0          movx a,[dptr]                  ;
499B A3          inc  dptr                      ;
499C C8          xchg a,r0                      ; memcopy (XRAM)
499D C5 82       xchg a,dpl                     ; (both 16bit addr's)
499F C8          xchg a,r0                      ;
49A0 CC          xchg a,r4                      ;
49A1 C5 83       xchg a,dph                     ;
49A3 CC          xchg a,r4                      ;
49A4 F0          movx [dptr],a                  ;
49A5 A3          inc  dptr                      ;
49A6 C8          xchg a,r0                      ;
49A7 C5 82       xchg a,dpl                     ;
49A9 C8          xchg a,r0                      ;
49AA CC          xchg a,r4                      ;
49AB C5 83       xchg a,dph                     ;
49AD CC          xchg a,r4                      ;
49AE DF EA       djnz r7,@@lop                  ;
49B0 DE E8       djnz r6,@@lop                  ;/
49B2 80 DB       sjmp generic_memcopy_finish_inj
                ;--- --- ----------
                generic_memcopy_code16bit_to_xram8bit:
49B4 89 82       mov  dpl,r1
49B6 8A 83       mov  dph,r2
                @@lop:                          ;\
49B8 E4          clr  a                         ;
49B9 93          movc a,[a+dptr]                ; memcopy (CODE-to-XRAM)
49BA A3          inc  dptr                      ; (with 8bit xram addr)
49BB F2          movx [r0],a                    ;
49BC 08          inc  r0                        ;
49BD DF F9       djnz r7,@@lop                  ;/
49BF 80 CC       sjmp generic_memcopy_finish
                ;------------------
                anymem_generic_memcopy:   ;<======= MAIN MEMCOPY FUNC
                 ;in: r3 = src.area    ;r3,0FFh                   ;\
                 ;in: r2 = src.msb     ;r2,0A1h ;A1A5h/100h       ; gui_null_IR_A_B
                 ;in: r1 = src.lsb     ;r1,0A5h ;A1A5h and 0ffh   ;/
                 ;in: r5 = dest.area   ;r5,01h
                 ;in: r4 = dest.msb    ;r4,00h
                 ;in: r0 = dest.lsb    ;r0,8Eh
                 ;in: r6 = len.msb  ;r6,00h
                 ;in: r7 = len.lsb  ;r7,05h
                 ;- - -
49C1 88 F0       mov  b,r0      ;dest.lsb
49C3 EF          mov  a,r7      ;len.lsb
49C4 60 01       jz   a,@@keep_msb
49C6 0E          inc  r6        ;len.msb
                @@keep_msb:
49C7 4E          or   a,r6      ;len.msb
49C8 60 C3       jz   a,generic_memcopy_finish   ;---> refuse (len zero)
49CA 88 F0       mov  b,r0      ;dest.lsb ;blah/again
49CC ED          mov  a,r5      ;dest.area
49CD 24 02       add  a,02h     ;dest.area+2 (change FEh..01h to 00h..03h)
49CF B4 04 00    jne  a,04h,$+3 ;<-- aka COMPARE to carry
49D2 50 B9       jnc  generic_memcopy_finish     ;---> refuse
49D4 F5 82       mov  dpl,a     ;dest.area+2
49D6 EB          mov  a,r3      ;src.area
49D7 24 02       add  a,02h     ;src.area+2 (change FEh..01h to 00h..03h)
49D9 B4 04 00    jne  a,04h,$+3 ;<-- aka COMPARE to carry
49DC 50 AF       jnc  generic_memcopy_finish     ;---> refuse
49DE 23          rol  a         ;(src.area+2)*2
49DF 23          rol  a         ;(src.area+2)*4
49E0 45 82       or   a,dpl     ;(src.area+2)*4 + (dest.area+2)
49E2 23          rol  a         ;((src.area+2)*4 + (dest.area+2))*2
49E3 90 49 41    mov  dptr,generic_memcopy_jumplist     ;\copy via jumplist
49E6 73          jmp  a+dptr                            ;/
                ;------------------
;:------------- ;:----------------- ANYMEM code (integer maths and anymem)
                ;------------------
                anymem_read_8bit_a_from_mem_r3r2r1:    ;A = [r3r2r1]
49E7 BB 01 06    jne  r3,01h,@@not_xram_16bit
49EA 89 82       mov  dpl,r1
49EC 8A 83       mov  dph,r2
49EE E0          movx a,[dptr]
49EF 22          ret
                ;---
                @@not_xram_16bit:
49F0 50 02       jnc  @@not_ram_8bit
49F2 E7          mov  a,[r1]
49F3 22          ret
                ;---
                @@not_ram_8bit:
49F4 BB FE 02    jne  r3,0FEh,@@not_xram_8bit
49F7 E3          movx a,[r1]
49F8 22          ret
                ;---
                @@not_xram_8bit:
49F9 89 82       mov  dpl,r1
49FB 8A 83       mov  dph,r2
49FD E4          clr  a
49FE 93          movc a,[a+dptr]
49FF 22          ret
                ;------------------
                anymem_read_8bit_a_from_mem_r3r2r1dptr:    ;A = [r3r2r1+dptr]
4A00 BB 01 0C    jne  r3,01h,@@not_xram_16bit
4A03 E5 82       mov  a,dpl
4A05 29          add  a,r1
4A06 F5 82       mov  dpl,a
4A08 E5 83       mov  a,dph
4A0A 3A          adc  a,r2
4A0B F5 83       mov  dph,a
4A0D E0          movx a,[dptr]
4A0E 22          ret
                ;---
                @@not_xram_16bit:
4A0F 50 06       jnc  @@not_ram_8bit
4A11 E9          mov  a,r1
4A12 25 82       add  a,dpl
4A14 F8          mov  r0,a
4A15 E6          mov  a,[r0]
4A16 22          ret
                ;---
                @@not_ram_8bit:
4A17 BB FE 06    jne  r3,0FEh,@@not_xram_8bit
4A1A E9          mov  a,r1
4A1B 25 82       add  a,dpl
4A1D F8          mov  r0,a
4A1E E2          movx a,[r0]
4A1F 22          ret
                ;---
                @@not_xram_8bit:
4A20 E5 82       mov  a,dpl
4A22 29          add  a,r1
4A23 F5 82       mov  dpl,a
4A25 E5 83       mov  a,dph
4A27 3A          adc  a,r2
4A28 F5 83       mov  dph,a
4A2A E4          clr  a
4A2B 93          movc a,[a+dptr]
4A2C 22          ret
                ;------------------
                .if tech_version>=ver11sep2017
                  anymem_add_8bit_a_to_mem_r3r2r1:   ;ADD [r3r2r1],A
48E8 BB 01 09      jne  r3,01h,@@not_xram_16bit
48EB 89 82         mov  dpl,r1
48ED 8A 83         mov  dph,r2
48EF F8            mov  r0,a
48F0 E0            movx a,[dptr]
48F1 28            add  a,r0
48F2 F0            movx [dptr],a
48F3 22            ret
                  ;---
                  @@not_xram_16bit:
48F4 50 03         jnc  @@not_ram_8bit
48F6 27            add  a,[r1]
48F7 F7            mov  [r1],a
48F8 22            ret
                  ;---
                  @@not_ram_8bit:
48F9 BB FE 05      jne  r3,0FEh,@@not_xram_8bit
48FC F8            mov  r0,a
48FD E3            movx a,[r1]
48FE 28            add  a,r0
48FF F3            movx [r1],a
4900 22            ret
                  ;---
                  @@not_xram_8bit:
4901 8A 83         mov  dph,r2
4903 89 82         mov  dpl,r1
4905 F8            mov  r0,a
4906 E4            clr  a
4907 93            movc a,[a+dptr]
4908 28            add  a,r0
4909 22            ret
                .endif
                ;------------------
                anymem_add_8bit_a_to_mem_r3r2r1dptr:   ;ADD [r3r2r1+dptr],A
4A2D BB 01 0F    jne  r3,01h,@@not_xram_16bit
4A30 F8          mov  r0,a
4A31 E5 82       mov  a,dpl
4A33 29          add  a,r1
4A34 F5 82       mov  dpl,a
4A36 E5 83       mov  a,dph
4A38 3A          adc  a,r2
4A39 F5 83       mov  dph,a
4A3B E0          movx a,[dptr]
4A3C 28          add  a,r0
4A3D F0          movx [dptr],a
4A3E 22          ret
                ;---
                @@not_xram_16bit:
4A3F 50 09       jnc  @@not_ram_8bit
4A41 C5 82       xchg a,dpl
4A43 29          add  a,r1
4A44 F8          mov  r0,a
4A45 E5 82       mov  a,dpl
4A47 26          add  a,[r0]
4A48 F6          mov  [r0],a
4A49 22          ret
                ;---
                @@not_ram_8bit:
4A4A BB FE 09    jne  r3,0FEh,@@not_xram_8bit
4A4D C5 82       xchg a,dpl
4A4F 29          add  a,r1
4A50 F8          mov  r0,a
4A51 E2          movx a,[r0]
4A52 25 82       add  a,dpl
4A54 F2          movx [r0],a
4A55 22          ret
                ;---
                @@not_xram_8bit:
4A56 F8          mov  r0,a
4A57 EA          mov  a,r2
4A58 25 83       add  a,dph
4A5A F5 83       mov  dph,a
4A5C E9          mov  a,r1
4A5D 93          movc a,[a+dptr]
4A5E 28          add  a,r0
4A5F 22          ret
                ;------------------
                anymem_store_8bit_a_to_mem_r3r2r1:    ;[r3r2r1] = A   ;used 1x
4A60 BB 01 06    jne  r3,01h,@@not_xram_16bit
4A63 89 82       mov  dpl,r1
4A65 8A 83       mov  dph,r2
4A67 F0          movx [dptr],a
4A68 22          ret
                ;---
                @@not_xram_16bit:
4A69 50 02       jnc  @@not_ram_8bit
4A6B F7          mov  [r1],a
4A6C 22          ret
                ;---
                @@not_ram_8bit:
4A6D BB FE 01    jne  r3,0FEh,@@not_xram_8bit
4A70 F3          movx [r1],a
                @@not_xram_8bit:
4A71 22          ret
                ;------------------
                anymem_store_8bit_a_to_mem_r3r2r1dptr:  ;[r3r2r1+dptr] = A
                ;r3=memtype
                ;    00h  store r0 to MOV  [dpl +(r1)]
                ;    01h  store r0 to MOVX [dptr+(r2:r1)]
                ;    FEh  store r0 to MOVX [dpl +(r1)]
                ;---
4A72 F8          mov  r0,a              ;memorize data
4A73 BB 01 0D    jne  r3,01h,@@not_xram_16bit
4A76 E5 82       mov  a,dpl
4A78 29          add  a,r1
4A79 F5 82       mov  dpl,a
4A7B E5 83       mov  a,dph
4A7D 3A          adc  a,r2
4A7E F5 83       mov  dph,a
4A80 E8          mov  a,r0
4A81 F0          movx [dptr],a
4A82 22          ret
                ;---
                @@not_xram_16bit:
4A83 50 06       jnc  @@not_ram_8bit
4A85 E9          mov  a,r1
4A86 25 82       add  a,dpl
4A88 C8          xchg a,r0
4A89 F6          mov  [r0],a
4A8A 22          ret
                ;---
                @@not_ram_8bit:
4A8B BB FE 05    jne  r3,0FEh,@@not_xram_8bit
4A8E E9          mov  a,r1
4A8F 25 82       add  a,dpl
4A91 C8          xchg a,r0
4A92 F2          movx [r0],a
                @@not_xram_8bit:
4A93 22          ret
                ;------------------
                multiply_r6r7_by_r4r5:     ;out: r6r7 = r6r7*r4r5
4A94 EF          mov  a,r7
4A95 8D F0       mov  b,r5
4A97 A4          mul  a,b       ;r5*r7  ;                 LSB1*LSB2
4A98 A8 F0       mov  r0,b              ;       (temp MSB)
4A9A CF          xchg a,r7              ;--> r7 (final LSB)
4A9B 8C F0       mov  b,r4
4A9D A4          mul  a,b       ;r4*r7
4A9E 28          add  a,r0      ;add
4A9F CE          xchg a,r6              ;--> r6 (temp)
4AA0 8D F0       mov  b,r5
4AA2 A4          mul  a,b       ;r5*r6
4AA3 2E          add  a,r6      ;add
4AA4 FE          mov  r6,a              ;--> r6 (final MSB)
4AA5 22          ret
                ;------------------
                divide_r6r7_by_r4r5:
4AA6 BC 00 0B    jne  r4,00h,div_16bit_r6r7_by_16bit_r4r5
4AA9 BE 00 29    jne  r6,00h,div_16bit_r6r7_by_8bit_r5
4AAC EF          mov  a,r7              ;\
4AAD 8D F0       mov  b,r5              ;
4AAF 84          div  a,b               ; div_8bit_r7_by_8bit_r5
4AB0 FF          mov  r7,a              ;
4AB1 AD F0       mov  r5,b              ;/
4AB3 22          ret
                ;--- --- ---
                div_16bit_r6r7_by_16bit_r4r5:
4AB4 E4          clr  a
4AB5 CC          xchg a,r4
4AB6 F8          mov  r0,a
4AB7 75 F0 08    mov  b,08h
                @@lop:
4ABA EF          mov  a,r7
4ABB 2F          add  a,r7
4ABC FF          mov  r7,a
4ABD EE          mov  a,r6
4ABE 33          rcl  a
4ABF FE          mov  r6,a
4AC0 EC          mov  a,r4
4AC1 33          rcl  a
4AC2 FC          mov  r4,a
4AC3 EE          mov  a,r6
4AC4 9D          sbc  a,r5
4AC5 EC          mov  a,r4
4AC6 98          sbc  a,r0
4AC7 40 05       jc   @@carry
4AC9 FC          mov  r4,a
4ACA EE          mov  a,r6
4ACB 9D          sbc  a,r5
4ACC FE          mov  r6,a
4ACD 0F          inc  r7
                @@carry:
4ACE D5 F0 E9    djnz b,@@lop
4AD1 E4          clr  a
4AD2 CE          xchg a,r6
4AD3 FD          mov  r5,a
4AD4 22          ret
                ;--- --- ---
                div_16bit_r6r7_by_8bit_r5:
4AD5 ED          mov  a,r5
4AD6 F8          mov  r0,a
4AD7 F5 F0       mov  b,a
4AD9 EE          mov  a,r6
4ADA 84          div  a,b
4ADB 20 D2 1C    jnz  ov,@@oops_overflow
4ADE FE          mov  r6,a
4ADF AD F0       mov  r5,b
4AE1 75 F0 08    mov  b,08h
                @@lop:
4AE4 EF          mov  a,r7
4AE5 2F          add  a,r7
4AE6 FF          mov  r7,a
4AE7 ED          mov  a,r5
4AE8 33          rcl  a
4AE9 FD          mov  r5,a
4AEA 40 07       jc   @@carry
4AEC 98          sbc  a,r0
4AED 50 06       jnc  @@no_carry
4AEF D5 F0 F2    djnz b,@@lop
4AF2 22          ret
                ;---
                @@carry:
4AF3 C3          clr  c
4AF4 98          sbc  a,r0
                @@no_carry:
4AF5 FD          mov  r5,a
4AF6 0F          inc  r7
4AF7 D5 F0 EA    djnz b,@@lop
                @@oops_overflow:
4AFA 22          ret
                ;------------------
                add_ab_to_xram_at_dptr:    ;movx [DPTR]=[DPTR]+ab
4AFB C5 F0       xchg a,b
4AFD F8          mov  r0,a  ;lsb
4AFE A3          inc  dptr      ;dst+1 (lsb)
4AFF E0          movx a,[dptr]  ;\
4B00 28          add  a,r0      ; add to lsb
4B01 F0          movx [dptr],a  ;/
4B02 C5 F0       xchg a,b
4B04 F8          mov  r0,a  ;msb
4B05 E5 82       mov  a,dpl     ;\
4B07 15 82       dec  dpl       ;
4B09 70 02       jnz  a,@@this  ; "dec dptr" (back dptr+0, ie. to msb)
4B0B 15 83       dec  dph       ;
                @@this:         ;/
4B0D E0          movx a,[dptr]  ;\
4B0E 38          adc  a,r0      ; add to msb
4B0F F0          movx [dptr],a  ;/
4B10 22          ret
                ;------------------
                anymem_read_16bit_ba_from_mem_r3r2r1:    ;B:A = [r3r2r1]  ;used 1x
4B11 BB 01 0A    jne  r3,01h,@@not_xram_16bit
4B14 89 82       mov  dpl,r1
4B16 8A 83       mov  dph,r2
4B18 E0          movx a,[dptr]
4B19 F5 F0       mov  b,a
4B1B A3          inc  dptr
4B1C E0          movx a,[dptr]
4B1D 22          ret
                ;---
                @@not_xram_16bit:
4B1E 50 06       jnc  @@not_ram_8bit
4B20 87 F0       mov  b,[r1]
4B22 09          inc  r1
4B23 E7          mov  a,[r1]
4B24 19          dec  r1
4B25 22          ret
                ;---
                @@not_ram_8bit:
4B26 BB FE 07    jne  r3,0FEh,@@not_xram_8bit
4B29 E3          movx a,[r1]
4B2A F5 F0       mov  b,a
4B2C 09          inc  r1
4B2D E3          movx a,[r1]
4B2E 19          dec  r1
4B2F 22          ret
                ;---
                @@not_xram_8bit:
4B30 89 82       mov  dpl,r1
4B32 8A 83       mov  dph,r2
4B34 E4          clr  a
4B35 93          movc a,[a+dptr]
4B36 F5 F0       mov  b,a
4B38 74 01       mov  a,01h
4B3A 93          movc a,[a+dptr]
4B3B 22          ret
                ;------------------
                anymem_read_16bit_ba_from_mem_r3r2r1dptr:  ;mov B:A = [r3r2r1+dptr]
4B3C BB 01 10    jne  r3,01h,@@not_xram_16bit
4B3F E5 82       mov  a,dpl
4B41 29          add  a,r1
4B42 F5 82       mov  dpl,a
4B44 E5 83       mov  a,dph
4B46 3A          adc  a,r2
4B47 F5 83       mov  dph,a
4B49 E0          movx a,[dptr]
4B4A F5 F0       mov  b,a
4B4C A3          inc  dptr
4B4D E0          movx a,[dptr]
4B4E 22          ret
                ;---
                @@not_xram_16bit:
4B4F 50 09       jnc  @@not_ram_8bit
4B51 E9          mov  a,r1
4B52 25 82       add  a,dpl
4B54 F8          mov  r0,a
4B55 86 F0       mov  b,[r0]
4B57 08          inc  r0
4B58 E6          mov  a,[r0]
4B59 22          ret
                ;---
                @@not_ram_8bit:
4B5A BB FE 0A    jne  r3,0FEh,@@not_xram_8bit
4B5D E9          mov  a,r1
4B5E 25 82       add  a,dpl
4B60 F8          mov  r0,a
4B61 E2          movx a,[r0]
4B62 F5 F0       mov  b,a
4B64 08          inc  r0
4B65 E2          movx a,[r0]
4B66 22          ret
                ;---
                @@not_xram_8bit:
4B67 E5 83       mov  a,dph
4B69 2A          add  a,r2
4B6A F5 83       mov  dph,a
4B6C E9          mov  a,r1
4B6D 93          movc a,[a+dptr]
4B6E F5 F0       mov  b,a
4B70 A3          inc  dptr
4B71 E9          mov  a,r1
4B72 93          movc a,[a+dptr]
4B73 22          ret
                ;------------------
                multiply_r4r5r6r7_by_r0r1r2r3:
4B74 E8          mov  a,r0
4B75 8F F0       mov  b,r7
4B77 A4          mul  a,b
4B78 CC          xchg a,r4
4B79 8B F0       mov  b,r3
4B7B A4          mul  a,b
4B7C 2C          add  a,r4
4B7D FC          mov  r4,a
4B7E E9          mov  a,r1
4B7F 8E F0       mov  b,r6
4B81 A4          mul  a,b
4B82 2C          add  a,r4
4B83 FC          mov  r4,a
4B84 8A F0       mov  b,r2
4B86 ED          mov  a,r5
4B87 A4          mul  a,b
4B88 2C          add  a,r4
4B89 FC          mov  r4,a
4B8A EA          mov  a,r2
4B8B 8E F0       mov  b,r6
4B8D A4          mul  a,b
4B8E CD          xchg a,r5
4B8F A8 F0       mov  r0,b
4B91 8B F0       mov  b,r3
4B93 A4          mul  a,b
4B94 2D          add  a,r5
4B95 CC          xchg a,r4
4B96 38          adc  a,r0
4B97 25 F0       add  a,b
4B99 FD          mov  r5,a
4B9A E9          mov  a,r1
4B9B 8F F0       mov  b,r7
4B9D A4          mul  a,b
4B9E 2C          add  a,r4
4B9F CD          xchg a,r5
4BA0 35 F0       adc  a,b
4BA2 FC          mov  r4,a
4BA3 EB          mov  a,r3
4BA4 8E F0       mov  b,r6
4BA6 A4          mul  a,b
4BA7 FE          mov  r6,a
4BA8 A9 F0       mov  r1,b
4BAA EB          mov  a,r3
4BAB 8F F0       mov  b,r7
4BAD A4          mul  a,b
4BAE CF          xchg a,r7
4BAF C5 F0       xchg a,b
4BB1 2E          add  a,r6
4BB2 CD          xchg a,r5
4BB3 39          adc  a,r1
4BB4 FE          mov  r6,a
4BB5 E4          clr  a
4BB6 3C          adc  a,r4
4BB7 FC          mov  r4,a
4BB8 EA          mov  a,r2
4BB9 A4          mul  a,b
4BBA 2D          add  a,r5
4BBB CE          xchg a,r6
4BBC 35 F0       adc  a,b
4BBE FD          mov  r5,a
4BBF E4          clr  a
4BC0 3C          adc  a,r4
4BC1 FC          mov  r4,a
4BC2 22          ret
                ;------------------
                div_r4r5r6r7_by_32bit_r0r1r2r3:
4BC3 75 F0 08    mov  b,08h
4BC6 75 82 00    mov  dpl,00h
                @@lop:
4BC9 EF          mov  a,r7
4BCA 2F          add  a,r7
4BCB FF          mov  r7,a
4BCC EE          mov  a,r6
4BCD 33          rcl  a
4BCE FE          mov  r6,a
4BCF CD          xchg a,r5
4BD0 33          rcl  a
4BD1 CD          xchg a,r5
4BD2 CC          xchg a,r4
4BD3 33          rcl  a
4BD4 CC          xchg a,r4
4BD5 C5 82       xchg a,dpl
4BD7 33          rcl  a
4BD8 C5 82       xchg a,dpl
4BDA 9B          sbc  a,r3
4BDB ED          mov  a,r5
4BDC 9A          sbc  a,r2
4BDD EC          mov  a,r4
4BDE 99          sbc  a,r1
4BDF E5 82       mov  a,dpl
4BE1 98          sbc  a,r0
4BE2 40 0C       jc   @@carry
4BE4 F5 82       mov  dpl,a
4BE6 EE          mov  a,r6
4BE7 9B          sbc  a,r3
4BE8 FE          mov  r6,a
4BE9 ED          mov  a,r5
4BEA 9A          sbc  a,r2
4BEB FD          mov  r5,a
4BEC EC          mov  a,r4
4BED 99          sbc  a,r1
4BEE FC          mov  r4,a
4BEF 0F          inc  r7
                @@carry:
4BF0 D5 F0 D6    djnz b,@@lop
4BF3 E4          clr  a
4BF4 CE          xchg a,r6
4BF5 FB          mov  r3,a
4BF6 E4          clr  a
4BF7 CD          xchg a,r5
4BF8 FA          mov  r2,a
4BF9 E4          clr  a
4BFA CC          xchg a,r4
4BFB F9          mov  r1,a
4BFC A8 82       mov  r0,dpl
4BFE 22          ret
                ;------------------
                divide_r4r5r6r7_by_r0r1r2r3:
4BFF B8 00 C1    jne  r0,00h,div_r4r5r6r7_by_32bit_r0r1r2r3
4C02 B9 00 59    jne  r1,00h,div_r4r5r6r7_by_24bit_r1r2r3
4C05 BA 00 2D    jne  r2,00h,div_r4r5r6r7_by_16bit_r2r3
                ;- - -      ;div_r4r5r6r7_by_8bit_r3
                div_r4r5r6r7_by_8bit_r3:
4C08 EC          mov  a,r4
4C09 8B F0       mov  b,r3
4C0B 84          div  a,b
4C0C CF          xchg a,r7
4C0D CE          xchg a,r6
4C0E CD          xchg a,r5
4C0F FC          mov  r4,a
4C10 E5 F0       mov  a,b
4C12 CB          xchg a,r3
4C13 F9          mov  r1,a
4C14 78 18       mov  r0,18h
                @@lop:
4C16 EF          mov  a,r7
4C17 2F          add  a,r7
4C18 FF          mov  r7,a
4C19 EE          mov  a,r6
4C1A 33          rcl  a
4C1B FE          mov  r6,a
4C1C ED          mov  a,r5
4C1D 33          rcl  a
4C1E FD          mov  r5,a
4C1F EC          mov  a,r4
4C20 33          rcl  a
4C21 FC          mov  r4,a
4C22 EB          mov  a,r3
4C23 33          rcl  a
4C24 FB          mov  r3,a
4C25 10 D7 03    jnz0 cy,@@cont
4C28 99          sbc  a,r1
4C29 40 04       jc   @@carry
                @@cont:
4C2B EB          mov  a,r3
4C2C 99          sbc  a,r1
4C2D FB          mov  r3,a
4C2E 0F          inc  r7
                @@carry:
4C2F D8 E5       djnz r0,@@lop
4C31 E4          clr  a
4C32 F9          mov  r1,a
4C33 FA          mov  r2,a
4C34 22          ret
                ;--- --- ---
                div_r4r5r6r7_by_16bit_r2r3:
4C35 78 18       mov  r0,18h
                @@lop:
4C37 EF          mov  a,r7
4C38 2F          add  a,r7
4C39 FF          mov  r7,a
4C3A EE          mov  a,r6
4C3B 33          rcl  a
4C3C FE          mov  r6,a
4C3D ED          mov  a,r5
4C3E 33          rcl  a
4C3F FD          mov  r5,a
4C40 EC          mov  a,r4
4C41 33          rcl  a
4C42 FC          mov  r4,a
4C43 C9          xchg a,r1
4C44 33          rcl  a
4C45 C9          xchg a,r1
4C46 10 D7 05    jnz0 cy,@@cont
4C49 9B          sbc  a,r3
4C4A E9          mov  a,r1
4C4B 9A          sbc  a,r2
4C4C 40 07       jc   @@carry
                @@cont:
4C4E EC          mov  a,r4
4C4F 9B          sbc  a,r3
4C50 FC          mov  r4,a
4C51 E9          mov  a,r1
4C52 9A          sbc  a,r2
4C53 F9          mov  r1,a
4C54 0F          inc  r7
                @@carry:
4C55 D8 E0       djnz r0,@@lop
4C57 E4          clr  a
4C58 C9          xchg a,r1
4C59 FA          mov  r2,a
4C5A E4          clr  a
4C5B CC          xchg a,r4
4C5C FB          mov  r3,a
4C5D 22          ret
                ;--- --- ---
                div_r4r5r6r7_by_24bit_r1r2r3:
4C5E 75 F0 10    mov  b,10h
                @@lop:
4C61 EF          mov  a,r7
4C62 2F          add  a,r7
4C63 FF          mov  r7,a
4C64 EE          mov  a,r6
4C65 33          rcl  a
4C66 FE          mov  r6,a
4C67 ED          mov  a,r5
4C68 33          rcl  a
4C69 FD          mov  r5,a
4C6A CC          xchg a,r4
4C6B 33          rcl  a
4C6C CC          xchg a,r4
4C6D C8          xchg a,r0
4C6E 33          rcl  a
4C6F C8          xchg a,r0
4C70 10 D7 07    jnz0 cy,@@cont
4C73 9B          sbc  a,r3
4C74 EC          mov  a,r4
4C75 9A          sbc  a,r2
4C76 E8          mov  a,r0
4C77 99          sbc  a,r1
4C78 40 0A       jc   @@carry
                @@cont:
4C7A ED          mov  a,r5
4C7B 9B          sbc  a,r3
4C7C FD          mov  r5,a
4C7D EC          mov  a,r4
4C7E 9A          sbc  a,r2
4C7F FC          mov  r4,a
4C80 E8          mov  a,r0
4C81 99          sbc  a,r1
4C82 F8          mov  r0,a
4C83 0F          inc  r7
                @@carry:
4C84 D5 F0 DA    djnz b,@@lop
4C87 E4          clr  a
4C88 CD          xchg a,r5
4C89 FB          mov  r3,a
4C8A E4          clr  a
4C8B CC          xchg a,r4
4C8C FA          mov  r2,a
4C8D E4          clr  a
4C8E C8          xchg a,r0
4C8F F9          mov  r1,a
4C90 22          ret
                ;------------------
                negate_r4r5r6r7:
4C91 C3          clr  c
4C92 E4          clr  a
4C93 9F          sbc  a,r7      ;lsb
4C94 FF          mov  r7,a
4C95 E4          clr  a
4C96 9E          sbc  a,r6
4C97 FE          mov  r6,a
4C98 E4          clr  a
4C99 9D          sbc  a,r5
4C9A FD          mov  r5,a
4C9B E4          clr  a
4C9C 9C          sbc  a,r4      ;msb
4C9D FC          mov  r4,a
4C9E 22          ret
                ;------------------
                compare_r4r5r6r7_equal_r0r1r2r3:
4C9F EB          mov  a,r3
4CA0 9F          sbc  a,r7
4CA1 F5 F0       mov  b,a
4CA3 EA          mov  a,r2
4CA4 9E          sbc  a,r6
4CA5 42 F0       or   b,a
4CA7 E9          mov  a,r1
4CA8 9D          sbc  a,r5
4CA9 42 F0       or   b,a
4CAB E8          mov  a,r0
4CAC 9C          sbc  a,r4
4CAD 45 F0       or   a,b               ;out: zf (z=equal)
4CAF 22          ret
                ;------------------
                shift_right_r4r5r6r7_by_r0:
                 ;bizarre shift function
                 ;used for div100h, div10000h... on a 8bit cpu, outch!
                 ;- - -
4CB0 E8          mov  a,r0
4CB1 60 0F       jz   a,@@done
                @@lop:
4CB3 EC          mov  a,r4
4CB4 C3          clr  c
4CB5 13          rcr  a
4CB6 FC          mov  r4,a
4CB7 ED          mov  a,r5
4CB8 13          rcr  a
4CB9 FD          mov  r5,a
4CBA EE          mov  a,r6
4CBB 13          rcr  a
4CBC FE          mov  r6,a
4CBD EF          mov  a,r7
4CBE 13          rcr  a
4CBF FF          mov  r7,a
4CC0 D8 F1       djnz r0,@@lop
                @@done:
4CC2 22          ret
                ;------------------
                .if tech_version>=ver11sep2017
                  read_r4r5r6r7_from_code_dptr:  ;MOVC r4r5r6r6,[dptr]
4BA0 E4            clr  a
4BA1 93            movc a,[a+dptr]
4BA2 FC            mov  r4,a
4BA3 74 01         mov  a,01h
4BA5 93            movc a,[a+dptr]
4BA6 FD            mov  r5,a
4BA7 74 02         mov  a,02h
4BA9 93            movc a,[a+dptr]
4BAA FE            mov  r6,a
4BAB 74 03         mov  a,03h
4BAD 93            movc a,[a+dptr]
4BAE FF            mov  r7,a
4BAF 22            ret
                .endif
                ;------------------
                store_r4r5r6r7_to_dptr:
4CC3 EC          mov  a,r4
4CC4 F0          movx [dptr],a
4CC5 A3          inc  dptr
4CC6 ED          mov  a,r5
4CC7 F0          movx [dptr],a
4CC8 A3          inc  dptr
4CC9 EE          mov  a,r6
4CCA F0          movx [dptr],a
4CCB A3          inc  dptr
4CCC EF          mov  a,r7
4CCD F0          movx [dptr],a
4CCE 22          ret
                ;------------------
                multiply_dptr_by_a:   ;dptr=dptr*a
4CCF F5 F0       mov  b,a
4CD1 C5 82       xchg a,dpl
4CD3 A4          mul  a,b
4CD4 C5 82       xchg a,dpl
4CD6 C5 F0       xchg a,b
4CD8 C5 83       xchg a,dph
4CDA A4          mul  a,b
4CDB 25 83       add  a,dph
4CDD F5 83       mov  dph,a
4CDF 22          ret
                ;------------------
                add_a_mul_b_to_dptr:   ;dptr=dptr+(a*b)
4CE0 A4          mul  a,b
4CE1 25 82       add  a,dpl
4CE3 F5 82       mov  dpl,a
4CE5 E5 F0       mov  a,b
4CE7 35 83       adc  a,dph
4CE9 F5 83       mov  dph,a
4CEB 22          ret
                ;------------------
                anymem_read_24bit_r3r2r1_from_mem_r3r2r1:  ;r3r2r1 = [r3r2r1]
4CEC BB 01 07    jne  r3,01h,@@not_xram_16bit
4CEF 89 82       mov  dpl,r1
4CF1 8A 83       mov  dph,r2
4CF3 02 4D C9    jmp  load_r3r2r1_from_xram_dptr
                ;---
                @@not_xram_16bit:
4CF6 50 05       jnc  @@not_ram_8bit
4CF8 E9          mov  a,r1
4CF9 F8          mov  r0,a
4CFA 02 4D B7    jmp  load_r3r2r1_from_r0
                ;---
                @@not_ram_8bit:
4CFD BB FE 05    jne  r3,0FEh,@@not_xram_8bit
4D00 E9          mov  a,r1
4D01 F8          mov  r0,a
4D02 02 4D DB    jmp  load_r3r2r1_from_xram_r0
                ;---
                @@not_xram_8bit:
4D05 89 82       mov  dpl,r1
4D07 8A 83       mov  dph,r2
4D09 02 4D ED    jmp  load_r3r2r1_from_code_dptr
                ;------------------
                anymem_store_24bit_pushed_values_to_mem_r3r2r1:  ;[r3r2r1] = [pushedstackparam24bit]   ;used 1x
4D0C BB 01 1A    jne  r3,01h,@@not_xram_16bit
4D0F 89 82       mov  dpl,r1    ;\
4D11 8A 83       mov  dph,r2    ;/
4D13 D0 F0       pop  b                 ;\
4D15 D0 E0       pop  a                 ; save retadr
4D17 F8          mov  r0,a              ;/
4D18 D0 E0       pop  a           ;\
4D1A F9          mov  r1,a        ;
4D1B D0 E0       pop  a           ; pushed stack values
4D1D FA          mov  r2,a        ;
4D1E D0 E0       pop  a           ;/
4D20 FB          mov  r3,a
4D21 E8          mov  a,r0              ;\
4D22 C0 E0       push a                 ; restore retadr
4D24 C0 F0       push b                 ;/
4D26 02 4D D2    jmp  store_r3r2r1_to_xram_dptr
                ;---
                @@not_xram_16bit:
4D29 50 16       jnc  @@not_ram_8bit
4D2B E9          mov  a,r1
4D2C F8          mov  r0,a
4D2D D0 83       pop  dph               ;\save retadr
4D2F D0 82       pop  dpl               ;/
4D31 D0 E0       pop  a
4D33 F9          mov  r1,a
4D34 D0 E0       pop  a
4D36 FA          mov  r2,a
4D37 D0 E0       pop  a
4D39 FB          mov  r3,a
4D3A C0 82       push dpl               ;\restore retadr
4D3C C0 83       push dph               ;/
4D3E 02 4D C0    jmp  store_r3r2r1_to_r0
                ;---
                @@not_ram_8bit:
4D41 BB FE 16    jne  r3,0FEh,@@not_xram_8bit
4D44 E9          mov  a,r1
4D45 F8          mov  r0,a
4D46 D0 83       pop  dph               ;\save retadr
4D48 D0 82       pop  dpl               ;/
4D4A D0 E0       pop  a
4D4C F9          mov  r1,a
4D4D D0 E0       pop  a
4D4F FA          mov  r2,a
4D50 D0 E0       pop  a
4D52 FB          mov  r3,a
4D53 C0 82       push dpl               ;\restore retadr
4D55 C0 83       push dph               ;/
4D57 02 4D E4    jmp  store_r3r2r1_to_xram_r0
                ;---
                @@not_xram_8bit:
4D5A 22          ret
                ;------------------
                anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr:    ;r3r2r1=[r3r2r1+dptr]
4D5B BB 01 0D    jne  r3,01h,@@not_xram_16bit
4D5E E5 82       mov  a,dpl
4D60 29          add  a,r1
4D61 F5 82       mov  dpl,a
4D63 E5 83       mov  a,dph
4D65 3A          adc  a,r2
4D66 F5 83       mov  dph,a
4D68 02 4D C9    jmp  load_r3r2r1_from_xram_dptr
                ;---
                @@not_xram_16bit:
4D6B 50 07       jnc  @@not_ram_8bit
4D6D E9          mov  a,r1
4D6E 25 82       add  a,dpl
4D70 F8          mov  r0,a
4D71 02 4D B7    jmp  load_r3r2r1_from_r0
                ;---
                @@not_ram_8bit:
4D74 BB FE 07    jne  r3,0FEh,@@not_xram_8bit
4D77 E9          mov  a,r1
4D78 25 82       add  a,dpl
4D7A F8          mov  r0,a
4D7B 02 4D DB    jmp  load_r3r2r1_from_xram_r0
                ;---
                @@not_xram_8bit:
4D7E E5 82       mov  a,dpl
4D80 29          add  a,r1
4D81 F5 82       mov  dpl,a
4D83 E5 83       mov  a,dph
4D85 3A          adc  a,r2
4D86 F5 83       mov  dph,a
4D88 02 4D ED    jmp  load_r3r2r1_from_code_dptr
                ;------------------
                jump_via_id_jumplist_at_retadr:   ;in: a=index/id, [sp]=jumplist
4D8B D0 83       pop  dph               ;\retadr !!!
4D8D D0 82       pop  dpl               ;/
4D8F F8          mov  r0,a
                @@lop:      ;search ID (or end of list)...
4D90 E4          clr  a                                         ;\
4D91 93          movc a,[a+dptr]   ;[ptr+0] jumpaddr.msb        ; check if end
4D92 70 12       jnz  a,@@cont                                  ; (addr=0000h)
4D94 74 01       mov  a,01h                                     ;
4D96 93          movc a,[a+dptr]   ;[ptr+1] jumpaddr.lsb        ;
4D97 70 0D       jnz  a,@@cont                                  ;/
4D99 A3          inc  dptr   ;\when it was 0000h (end of list)
4D9A A3          inc  dptr   ;/skip that 0000h word, and jump to following word
                @@this:
4D9B 93          movc a,[a+dptr]
4D9C F8          mov  r0,a
4D9D 74 01       mov  a,01h
4D9F 93          movc a,[a+dptr]
4DA0 F5 82       mov  dpl,a
4DA2 88 83       mov  dph,r0
4DA4 E4          clr  a
4DA5 73          jmp  a+dptr
                ;---
                @@cont:
4DA6 74 02       mov  a,02h
4DA8 93          movc a,[a+dptr]   ;[ptr+2] function.number
4DA9 68          xor  a,r0              ;<-- compare value
4DAA 60 EF       jz   a,@@this
4DAC A3          inc  dptr         ;\
4DAD A3          inc  dptr         ; next entry
4DAE A3          inc  dptr         ;/
4DAF 80 DF       sjmp @@lop
                ;------------------
                jmp_r2r1:    ;in: r3r2r1 (r3=area/ignored, must be always CODE area)
4DB1 8A 83       mov  dph,r2
4DB3 89 82       mov  dpl,r1
                ;- - - - - --------
                jmp_dptr:    ;in: dptr
4DB5 E4          clr  a
4DB6 73          jmp  a+dptr
                ;------------------
                load_r3r2r1_from_r0:
4DB7 E6          mov  a,[r0]
4DB8 FB          mov  r3,a
4DB9 08          inc  r0
4DBA E6          mov  a,[r0]
4DBB FA          mov  r2,a
4DBC 08          inc  r0
4DBD E6          mov  a,[r0]
4DBE F9          mov  r1,a
4DBF 22          ret
                ;------------------
                store_r3r2r1_to_r0:
4DC0 EB          mov  a,r3
4DC1 F6          mov  [r0],a
4DC2 08          inc  r0
4DC3 EA          mov  a,r2
4DC4 F6          mov  [r0],a
4DC5 08          inc  r0
4DC6 E9          mov  a,r1
4DC7 F6          mov  [r0],a
4DC8 22          ret
                ;------------------
                load_r3r2r1_from_xram_dptr:    ;movx r3r2r1,[dptr]
4DC9 E0          movx a,[dptr]
4DCA FB          mov  r3,a
4DCB A3          inc  dptr
4DCC E0          movx a,[dptr]
4DCD FA          mov  r2,a
4DCE A3          inc  dptr
4DCF E0          movx a,[dptr]
4DD0 F9          mov  r1,a
4DD1 22          ret
                ;------------------
                store_r3r2r1_to_xram_dptr:
4DD2 EB          mov  a,r3
4DD3 F0          movx [dptr],a
4DD4 A3          inc  dptr
4DD5 EA          mov  a,r2
4DD6 F0          movx [dptr],a
4DD7 A3          inc  dptr
4DD8 E9          mov  a,r1
4DD9 F0          movx [dptr],a
4DDA 22          ret
                ;------------------
                load_r3r2r1_from_xram_r0:
4DDB E2          movx a,[r0]
4DDC FB          mov  r3,a
4DDD 08          inc  r0
4DDE E2          movx a,[r0]
4DDF FA          mov  r2,a
4DE0 08          inc  r0
4DE1 E2          movx a,[r0]
4DE2 F9          mov  r1,a
4DE3 22          ret
                ;------------------
                store_r3r2r1_to_xram_r0:
4DE4 EB          mov  a,r3
4DE5 F2          movx [r0],a
4DE6 08          inc  r0
4DE7 EA          mov  a,r2
4DE8 F2          movx [r0],a
4DE9 08          inc  r0
4DEA E9          mov  a,r1
4DEB F2          movx [r0],a
4DEC 22          ret
                ;------------------
                load_r3r2r1_from_code_dptr:
4DED E4          clr  a
4DEE 93          movc a,[a+dptr]
4DEF FB          mov  r3,a
4DF0 74 01       mov  a,01h
4DF2 93          movc a,[a+dptr]
4DF3 FA          mov  r2,a
4DF4 74 02       mov  a,02h
4DF6 93          movc a,[a+dptr]
4DF7 F9          mov  r1,a
4DF8 22          ret
                ;------------------
;:------------- ;:----------------- data (keypad)
                ;------------------
                .if tech_version<ver11sep2017
                ;below are keypad types
                ;mine is using type 16h aka "U_3KEY" (=with three buttons)
                ;------------------
4DF9 20 44 5F.. typekey_00h_name_D_MT702_6A  db ' D_MT702_6A',00h
4E05 44 5F 47.. typekey_01h_name_D_GB070AKEY db 'D_GB070AKEY',00h
4E11 20 44 5F.. typekey_02h_name_D_2075AKEY  db ' D_2075AKEY',00h
4E1D 20 44 5F.. typekey_03h_name_D_HW700KEY  db ' D_HW700KEY',00h
4E29 44 5F 44.. typekey_04h_name_D_DYB701KEY db 'D_DYB701KEY',00h
4E35 44 5F 58.. typekey_05h_name_D_XYD903KEY db 'D_XYD903KEY',00h
4E41 44 5F 56.. typekey_06h_name_D_VDK781KEY db 'D_VDK781KEY',00h
4E4D 20 44 5F.. typekey_07h_name_D_VD782KEY  db ' D_VD782KEY',00h
4E59 20 20 20.. typekey_08h_name_U_701_5T    db '   U_701_5T',00h
4E65 20 20 55.. typekey_09h_name_U_ZCD1629   db '  U_ZCD1629 ',00h  ;uh, ending space
4E72 55 5F 5A.. typekey_0Ah_name_U_ZCD3210_1 db 'U_ZCD3210_1',00h
4E7E 55 5F 5A.. typekey_0Bh_name_U_ZCD3210_2 db 'U_ZCD3210_2',00h
4E8A 20 20 20.. typekey_0Ch_name_U_6KEY      db '     U_6KEY',00h
4E96 20 20 20.. typekey_0Dh_name_U_ZCD903    db '   U_ZCD903',00h
4EA2 20 20 55.. typekey_0Eh_name_U_ZCD8702   db '  U_ZCD8702',00h
4EAE 20 20 55.. typekey_0Fh_name_U_ZCD8008   db '  U_ZCD8008',00h
4EBA 55 5F 43.. typekey_10h_name_U_CSX7A5KEY db 'U_CSX7A5KEY',00h
4EC6 55 5F 37.. typekey_11h_name_U_701_5P_V1 db 'U_701_5P_V1',00h
4ED2 55 5F 37.. typekey_12h_name_U_701_5P_V2 db 'U_701_5P_V2',00h
4EDE 20 20 55.. typekey_13h_name_U_201TKEY   db '  U_201TKEY',00h
4EEA 20 20 55.. typekey_14h_name_U_ZCD1701   db '  U_ZCD1701',00h
4EF6 55 5F 54.. typekey_15h_name_U_TZKEY_V31 db 'U_TZKEY_V31',00h
4F02 20 20 20.. typekey_16h_name_U_3KEY      db '     U_3KEY',00h
                ;------------------
                typekey_00h_subinfo:
4F0E 00 28 00 34 dw   0028h,0034h // db 05h
                 dw   0018h,0024h // db 07h
                 dw   0094h,00A0h // db 04h
                 dw   005Ah,0066h // db 02h
                 dw   003Ch,0048h // db 03h
                 dw   00F7h,00FFh // db 01h
                typekey_00h_nullbyte:
4F2C 00          db   00h
                ;---
                typekey_00h_data:
4F2D FF 4D F9    db   0FFh // dw typekey_00h_name_D_MT702_6A  ;00h-02h
4F30 00 18 00 FF dw   0018h,00FFh                             ;03h-06h
4F34 FF 4F 0E    db   0FFh // dw typekey_00h_subinfo          ;07h-09h
4F37 06          db   06h                                     ;0Ah
4F38 FF 4F 2C    db   0FFh // dw typekey_00h_nullbyte         ;0Bh-0Dh
4F3B 01          db   01h                                     ;0Eh
                ;------------------
                typekey_01h_subinfo:
4F3C 00 26 00 32 dw   0026h,0032h // db 05h
                 dw   008Dh,0099h // db 04h
                 dw   005Ah,0066h // db 02h
                 dw   003Ch,0048h // db 03h
                 dw   00E4h,00F0h // db 01h
                typekey_01h_nullbyte:
4F55 00          db   00h
                ;---
                typekey_01h_data:
4F56 FF 4E 05    db   0FFh // dw typekey_01h_name_D_GB070AKEY
4F59 00 26 00 F0 dw   0026h,00F0h
4F5D FF 4F 3C    db   0FFh // dw typekey_01h_subinfo
4F60 05          db   05h
4F61 FF 4F 55    db   0FFh // dw typekey_01h_nullbyte
4F64 01          db   01h
                ;------------------
                typekey_02h_subinfo:
4F65 00 7B 00 87 dw   007Bh,0087h // db 05h
                 dw   001Fh,002Bh // db 07h
                 dw   0068h,0074h // db 06h
                 dw   0042h,004Eh // db 04h
                 dw   0030h,003Ch // db 02h
                 dw   0050h,005Ch // db 03h
                 dw   000Dh,0019h // db 01h
                typekey_02h_nullbyte:
4F88 00          db   00h
                ;---
                typekey_02h_data:
4F89 FF 4E 11    db   0FFh // dw typekey_02h_name_D_2075AKEY
4F8C 00 0D 00 87 dw   000Dh,0087h
4F90 FF 4F 65    db   0FFh // dw typekey_02h_subinfo
4F93 07          db   07h
4F94 FF 4F 88    db   0FFh // dw typekey_02h_nullbyte
4F97 01          db   01h
                ;------------------
                typekey_03h_subinfo:
4F98 00 A3 00 AF dw   00A3h,00AFh // db 05h
                 dw   0079h,0085h // db 06h
                 dw   0033h,003Fh // db 04h
                 dw   0023h,002Fh // db 02h
                 dw   0046h,0052h // db 03h
                 dw   00F9h,00FFh // db 01h
                typekey_03h_nullbyte:
4FB6 00          db   00h
                ;---
                typekey_03h_data:
4FB7 FF 4E 1D    db   0FFh // dw typekey_03h_name_D_HW700KEY
4FBA 00 23 00 FF dw   0023h,00FFh
4FBE FF 4F 98    db   0FFh // dw typekey_03h_subinfo
4FC1 06          db   06h
4FC2 FF 4F B6    db   0FFh // dw typekey_03h_nullbyte
4FC5 01          db   01h
                ;------------------
                typekey_04h_subinfo:
4FC6 00 79 00 85 dw   0079h,0085h // db 05h
                 dw   0059h,0065h // db 07h
                 dw   003Bh,0047h // db 06h
                 dw   00D9h,00E5h // db 04h
                 dw   00B5h,00C1h // db 02h
                 dw   0098h,00A4h // db 03h
                 dw   00F9h,00FFh // db 01h
                typekey_04h_nullbyte:
4FE9 00          db   00h
                ;---
                typekey_04h_data:
4FEA FF 4E 29    db   0FFh // dw typekey_04h_name_D_DYB701KEY
4FED 00 3B 00 FF dw   003Bh,00FFh
4FF1 FF 4F C6    db   0FFh // dw typekey_04h_subinfo
4FF4 07          db   07h
4FF5 FF 4F E9    db   0FFh // dw typekey_04h_nullbyte
4FF8 01          db   01h
                ;------------------
                typekey_05h_subinfo:
4FF9 00 27 00 33 dw   0027h,0033h // db 05h
                 dw   0016h,0022h // db 06h
                 dw   0093h,009Fh // db 04h
                 dw   005Ch,0068h // db 02h
                 dw   003Dh,0049h // db 03h
                 dw   00F6h,00FFh // db 01h
                typekey_05h_nullbyte:
5017 00          db   00h
                ;---
                typekey_05h_data:
5018 FF 4E 35    db   0FFh // dw typekey_05h_name_D_XYD903KEY
501B 00 16 00 FF dw   0016h,00FFh
501F FF 4F F9    db   0FFh // dw typekey_05h_subinfo
5022 06          db   06h
5023 FF 50 17    db   0FFh // dw typekey_05h_nullbyte
5026 01          db   01h
                ;------------------
                typekey_06h_subinfo:
5027 00 26 00 32 dw   0026h,0032h // db 05h
                 dw   0017h,0023h // db 07h
                 dw   0092h,009Eh // db 04h
                 dw   0059h,0065h // db 02h
                 dw   003Ch,0048h // db 03h
                 dw   00F4h,0100h // db 01h
                typekey_06h_nullbyte:
5045 00          db   00h
                ;---
                typekey_06h_data:
5046 FF 4E 41    db   0FFh // dw typekey_06h_name_D_VDK781KEY
5049 00 17 01 00 dw   0017h,0100h   ;<-- 100h (exceeding common 8bit range!)
504D FF 50 27    db   0FFh // dw typekey_06h_subinfo
5050 06          db   06h
5051 FF 50 45    db   0FFh // dw typekey_06h_nullbyte
5054 01          db   01h
                ;------------------
                typekey_07h_subinfo:
5055 00 26 00 32 dw   0026h,0032h // db 05h
                 dw   0017h,0023h // db 07h
                 dw   0092h,009Eh // db 04h
                 dw   0059h,0065h // db 02h
                 dw   003Ch,0048h // db 03h
                 dw   00EAh,00F6h // db 01h
                typekey_07h_nullbyte:
5073 00          db   00h
                ;---
                typekey_07h_data:
5074 FF 4E 4D    db   0FFh // dw typekey_07h_name_D_VD782KEY
5077 00 17 00 F6 dw   0017h,00F6h
507B FF 50 55    db   0FFh // dw typekey_07h_subinfo
507E 06          db   06h
507F FF 50 73    db   0FFh // dw typekey_07h_nullbyte
5082 01          db   01h
                ;------------------
                typekey_08h_subinfo:
5083 00 7A 00 86 dw   007Ah,0086h // db 05h    ;2.0K ohm
                 dw   0005h,0011h // db 04h
                 dw   0052h,005Eh // db 02h
                 dw   00CDh,00D9h // db 03h
                 dw   00ABh,00B7h // db 01h
                typekey_08h_nullbyte:
509C 00          db   00h
                ;---
                typekey_08h_data:
509D FF 4E 59    db   0FFh // dw typekey_08h_name_U_701_5T
50A0 00 05 00 D9 dw   0005h,00D9h
50A4 FF 50 83    db   0FFh // dw typekey_08h_subinfo
50A7 05          db   05h
50A8 FF 50 9C    db   0FFh // dw typekey_08h_nullbyte
50AB 01          db   01h
                ;------------------
                typekey_09h_subinfo:
50AC 00 15 00 21 dw   0015h,0021h // db 05h
                 dw   005Eh,006Ah // db 04h
                 dw   0028h,0034h // db 02h
                 dw   0082h,008Eh // db 03h
                 dw   0000h,000Ch // db 01h
                typekey_09h_nullbyte:
50C5 00          db   00h
                ;---
                typekey_09h_data:
50C6 FF 4E 65    db   0FFh // dw typekey_09h_name_U_ZCD1629
50C9 00 00 00 8E dw   0000h,008Eh
50CD FF 50 AC    db   0FFh // dw typekey_09h_subinfo
50D0 05          db   05h
50D1 FF 50 C5    db   0FFh // dw typekey_09h_nullbyte
50D4 01          db   01h
                ;------------------
                typekey_0Ah_subinfo:
50D5 00 00 00 0C dw   0000h,000Ch // db 05h
                 dw   0013h,001Fh // db 04h
                 dw   005Ch,0068h // db 02h
                 dw   0081h,008Dh // db 03h
                 dw   0026h,0032h // db 01h
                typekey_0Ah_nullbyte:
50EE 00          db   00h
                ;---
                typekey_0Ah_data:
50EF FF 4E 72    db   0FFh // dw typekey_0Ah_name_U_ZCD3210_1
50F2 00 00 00 8D dw   0000h,008Dh
50F6 FF 50 D5    db   0FFh // dw typekey_0Ah_subinfo
50F9 05          db   05h
50FA FF 50 EE    db   0FFh // dw typekey_0Ah_nullbyte
50FD 01          db   01h
                ;------------------
                typekey_0Bh_subinfo:
50FE 00 81 00 8D dw   0081h,008Dh // db 05h
                 dw   0026h,0032h // db 04h
                 dw   005Ch,0068h // db 02h
                 dw   0013h,001Fh // db 03h
                 dw   0000h,000Ch // db 01h
                typekey_0Bh_nullbyte:
5117 00          db   00h
                ;---
                typekey_0Bh_data:
5118 FF 4E 7E    db   0FFh // dw typekey_0Bh_name_U_ZCD3210_2
511B 00 00 00 8D dw   0000h,008Dh
511F FF 50 FE    db   0FFh // dw typekey_0Bh_subinfo
5122 05          db   05h
5123 FF 51 17    db   0FFh // dw typekey_0Bh_nullbyte
5126 01          db   01h
                ;------------------
                typekey_0Ch_subinfo:
5127 00 6A 00 76 dw   006Ah,0076h // db 05h
                 dw   00E4h,00F0h // db 07h
                 dw   00A3h,00AFh // db 04h
                 dw   00BFh,00CBh // db 02h
                 dw   00D5h,00E1h // db 03h
                 dw   0000h,0006h // db 01h
                typekey_0Ch_nullbyte:
5145 00          db   00h
                ;---
                typekey_0Ch_data:
5146 FF 4E 8A    db   0FFh // dw typekey_0Ch_name_U_6KEY
5149 00 00 00 F0 dw   0000h,00F0h
514D FF 51 27    db   0FFh // dw typekey_0Ch_subinfo
5150 06          db   06h
5151 FF 51 45    db   0FFh // dw typekey_0Ch_nullbyte
5154 01          db   01h
                ;------------------
                typekey_0Dh_subinfo:
5155 00 DB 00 E7 dw   00DBh,00E7h // db 05h
                 dw   00B6h,00C2h // db 06h
                 dw   0058h,0064h // db 04h
                 dw   00CEh,00DAh // db 02h
                 dw   007Dh,0089h // db 03h
                 dw   002Dh,0039h // db 01h
                typekey_0Dh_nullbyte:
5173 00          db   00h
                ;---
                typekey_0Dh_data:
5174 FF 4E 96    db   0FFh // dw typekey_0Dh_name_U_ZCD903
5177 00 2D 00 E7 dw   002Dh,00E7h
517B FF 51 55    db   0FFh // dw typekey_0Dh_subinfo
517E 06          db   06h
517F FF 51 73    db   0FFh // dw typekey_0Dh_nullbyte
5182 01          db   01h
                ;------------------
                typekey_0Eh_subinfo:
5183 00 80 00 8C dw   0080h,008Ch // db 05h
                 dw   00B6h,00C2h // db 06h
                 dw   0043h,004Fh // db 07h
                 dw   000Eh,001Ah // db 04h
                 dw   0023h,002Fh // db 02h
                 dw   0059h,0065h // db 03h
                 dw   0000h,0006h // db 01h
                typekey_0Eh_nullbyte:
51A6 00          db   00h
                ;---
                typekey_0Eh_data:
51A7 FF 4E A2    db   0FFh // dw typekey_0Eh_name_U_ZCD8702
51AA 00 00 00 C2 dw   0000h,00C2h
51AE FF 51 83    db   0FFh // dw typekey_0Eh_subinfo
51B1 07          db   07h
51B2 FF 51 A6    db   0FFh // dw typekey_0Eh_nullbyte
51B5 01          db   01h
                ;------------------
                typekey_0Fh_subinfo:
51B6 00 7F 00 8B dw   007Fh,008Bh // db 05h
                 dw   000Fh,001Bh // db 04h
                 dw   0023h,002Fh // db 02h
                 dw   005Ah,0066h // db 03h
                 dw   0000h,0006h // db 01h
                typekey_0Fh_nullbyte:
51CF 00          db   00h
                ;---
                typekey_0Fh_data:
51D0 FF 4E AE    db   0FFh // dw typekey_0Fh_name_U_ZCD8008
51D3 00 00 00 8B dw   0000h,008Bh
51D7 FF 51 B6    db   0FFh // dw typekey_0Fh_subinfo
51DA 05          db   05h
51DB FF 51 CF    db   0FFh // dw typekey_0Fh_nullbyte
51DE 01          db   01h
                ;------------------
                typekey_10h_subinfo:
51DF 00 A3 00 AF dw   00A3h,00AFh // db 05h
                 dw   006Ah,0076h // db 04h
                 dw   00D3h,00DFh // db 02h
                 dw   00BFh,00CBh // db 03h
                 dw   0001h,000Dh // db 01h
                typekey_10h_nullbyte:
51F8 00          db   00h
                ;---
                typekey_10h_data:
51F9 FF 4E BA    db   0FFh // dw typekey_10h_name_U_CSX7A5KEY
51FC 00 01 00 DF dw   0001h,00DFh
5200 FF 51 DF    db   0FFh // dw typekey_10h_subinfo
5203 05          db   05h
5204 FF 51 F8    db   0FFh // dw typekey_10h_nullbyte
5207 01          db   01h
                ;------------------
                typekey_11h_subinfo:
5208 00 6E 00 7A dw   006Eh,007Ah // db 05h
                 dw   00BCh,00C8h // db 04h
                 dw   004Fh,005Bh // db 02h    ;1.0K ohm
                 dw   0087h,0093h // db 03h
                 dw   00DEh,00EAh // db 01h
                typekey_11h_nullbyte:
5221 00          db   00h
                ;---
                typekey_11h_data:
5222 FF 4E C6    db   0FFh // dw typekey_11h_name_U_701_5P_V1
5225 00 4F 00 EA dw   004Fh,00EAh
5229 FF 52 08    db   0FFh // dw typekey_11h_subinfo
522C 05          db   05h
522D FF 52 21    db   0FFh // dw typekey_11h_nullbyte
5230 01          db   01h
                ;------------------
                typekey_12h_subinfo:
5231 00 6E 00 7A dw   006Eh,007Ah // db 05h
                 dw   00BCh,00C8h // db 04h
                 dw   004Fh,005Bh // db 01h    ;1.0K ohm
                 dw   0087h,0093h // db 03h
                 dw   00DEh,00EAh // db 02h
                typekey_12h_nullbyte:
524A 00          db   00h
                ;---
                typekey_12h_data:
524B FF 4E D2    db   0FFh // dw typekey_12h_name_U_701_5P_V2
524E 00 4F 00 EA dw   004Fh,00EAh
5252 FF 52 31    db   0FFh // dw typekey_12h_subinfo
5255 05          db   05h
5256 FF 52 4A    db   0FFh // dw typekey_12h_nullbyte
5259 01          db   01h
                ;------------------
                typekey_13h_subinfo:
525A 00 AF 00 BB dw   00AFh,00BBh // db 01h
                 dw   007Bh,0087h // db 05h
                typekey_13h_nullbyte:
5264 00          db   00h
                ;---
                typekey_13h_data:
5265 FF 4E DE    db   0FFh // dw typekey_13h_name_U_201TKEY
5268 00 7B 00 BB dw   007Bh,00BBh
526C FF 52 5A    db   0FFh // dw typekey_13h_subinfo
526F 02          db   02h
5270 FF 52 64    db   0FFh // dw typekey_13h_nullbyte
5273 01          db   01h
                ;------------------
                typekey_14h_subinfo:
5274 00 52 00 5E dw   0052h,005Eh // db 01h
                 dw   006Ch,0078h // db 05h
                typekey_14h_nullbyte:
527E 00          db   00h
                ;---
                typekey_14h_data:
527F FF 4E EA    db   0FFh // dw typekey_14h_name_U_ZCD1701
5282 00 52 00 78 dw   0052h,0078h
5286 FF 52 74    db   0FFh // dw typekey_14h_subinfo
5289 02          db   02h
528A FF 52 7E    db   0FFh // dw typekey_14h_nullbyte
528D 01          db   01h
                ;------------------
                typekey_15h_subinfo:
528E 00 7F 00 8B dw   007Fh,008Bh // db 05h
                 dw   0044h,0050h // db 07h
                 dw   000Fh,001Bh // db 04h
                 dw   0023h,002Fh // db 02h
                 dw   005Ah,0066h // db 03h
                 dw   0000h,0006h // db 01h
                typekey_15h_nullbyte:
52AC 00          db   00h
                ;---
                typekey_15h_data:
52AD FF 4E F6    db   0FFh // dw typekey_15h_name_U_TZKEY_V31
52B0 00 00 00 8B dw   0000h,008Bh
52B4 FF 52 8E    db   0FFh // dw typekey_15h_subinfo
52B7 06          db   06h
52B8 FF 52 AC    db   0FFh // dw typekey_15h_nullbyte
52BB 01          db   01h
                ;------------------
                typekey_16h_subinfo:         ;3KEY (default)
52BC 00 AD 00 B9 dw   00ADh,00B9h // db 02h    ;4.7K ohm (button -)
                 dw   007Ah,0086h // db 04h    ;2.0K ohm (button menu)
                 dw   004Fh,005Bh // db 03h    ;1.0K ohm (button +)
                typekey_16h_nullbyte:
52CB 00          db   00h
                ;---
                typekey_16h_data:     ;see ";typekey_list/100h"
52CC FF 4F 02    db   0FFh // dw typekey_16h_name_U_3KEY ;00h-02h txt     ;idxKeypad_txt
52CF 00 4F 00 B9 dw   004Fh,00B9h                        ;03h     min,max ;idxKeypad_minmax
52D3 FF 52 BC    db   0FFh // dw typekey_16h_subinfo     ;07h-09h keys    ;idxKeypad_keys
52D6 03          db   03h                                ;0Ah     numkeys ;idxKeypad_numkeys
52D7 FF 52 CB    db   0FFh // dw typekey_16h_nullbyte    ;0Bh-0Dh blah?   ;idxKeypad_blah1
52DA 01          db   01h                                ;0Eh     blah?   ;idxKeypad_blah2
                ;------------------
                typekey_list:        ;used 4x
52DB FF 4F 2D    db   0FFh // dw typekey_00h_data  ;numkeys=6 ;D_MT702_6A  ;-
52DE FF 4F 56    db   0FFh // dw typekey_01h_data  ;numkeys=5 ;D_GB070AKEY ;-
52E1 FF 4F 89    db   0FFh // dw typekey_02h_data  ;numkeys=7 ;D_2075AKEY  ;-max
52E4 FF 4F B7    db   0FFh // dw typekey_03h_data  ;numkeys=6 ;D_HW700KEY  ;-
52E7 FF 4F EA    db   0FFh // dw typekey_04h_data  ;numkeys=7 ;D_DYB701KEY ;-max
52EA FF 50 18    db   0FFh // dw typekey_05h_data  ;numkeys=6 ;D_XYD903KEY ;\
52ED FF 50 46    db   0FFh // dw typekey_06h_data  ;numkeys=6 ;D_VDK781KEY ;
52F0 FF 50 74    db   0FFh // dw typekey_07h_data  ;numkeys=6 ;D_VD782KEY  ;/
52F3 FF 50 9D    db   0FFh // dw typekey_08h_data  ;numkeys=5 ;U_701_5T    ;\
52F6 FF 50 C6    db   0FFh // dw typekey_09h_data  ;numkeys=5 ;U_ZCD1629   ;
52F9 FF 50 EF    db   0FFh // dw typekey_0Ah_data  ;numkeys=5 ;U_ZCD3210_1 ;
52FC FF 51 18    db   0FFh // dw typekey_0Bh_data  ;numkeys=5 ;U_ZCD3210_2 ;/
52FF FF 51 46    db   0FFh // dw typekey_0Ch_data  ;numkeys=6 ;U_6KEY      ;\
5302 FF 51 74    db   0FFh // dw typekey_0Dh_data  ;numkeys=6 ;U_ZCD903    ;/
5305 FF 51 A7    db   0FFh // dw typekey_0Eh_data  ;numkeys=7 ;U_ZCD8702   ;-max
5308 FF 51 D0    db   0FFh // dw typekey_0Fh_data  ;numkeys=5 ;U_ZCD8008   ;\
530B FF 51 F9    db   0FFh // dw typekey_10h_data  ;numkeys=5 ;U_CSX7A5KEY ;
530E FF 52 22    db   0FFh // dw typekey_11h_data  ;numkeys=5 ;U_701_5P_V1 ;
5311 FF 52 4B    db   0FFh // dw typekey_12h_data  ;numkeys=5 ;U_701_5P_V2 ;/
5314 FF 52 65    db   0FFh // dw typekey_13h_data  ;numkeys=2 ;U_201TKEY   ;\mini
5317 FF 52 7F    db   0FFh // dw typekey_14h_data  ;numkeys=2 ;U_ZCD1701   ;/
531A FF 52 AD    db   0FFh // dw typekey_15h_data  ;numkeys=6 ;U_TZKEY_V31 ;-
531D FF 52 CC    db   0FFh // dw typekey_16h_data  ;numkeys=3 ;U_3KEY      ;-default
                typekey_list_num_entries equ ($-typekey_list)/3
                ;------------------
                keypad_analog_channel:
5320 00          db   00h       ;analog channel 0
                .endif
                ;------------------
;:------------- ;:----------------- code (LCD SPI)
                ;------------------
                .if lcd_spi_version<ver11sep2017
                ;------------------
                display_spi_init:
                       ;... below is for a "HX8238-D" chip (as used in HX8238-D displays, which the firmware version strings claims to be used)
                       ;... NOT matching for NV3035C ??!!! (as used in Tianma TM035KDH03, which I do actually have in my display)
                       ;... (unless the NV3035C is in its undocumented "alternate" 3-wire SPI mode via its SPSW pin?)
                ;- - -
                ;summary of writes done by below crappy code:
                ; 70h, index... 72h, data...  ;<-- overall access scheme
532B            ; 70h, 00h,01h, 72h, 63h,00h  ;\ Driver output control
5358            ; 70h, 00h,02h, 72h, 02h,00h  ;  LCD driver AC control
5385            ; 70h, 00h,03h, 72h, 76h,64h  ;  Power control (1)
53B2            ; 70h, 00h,04h, 72h, 04h,47h  ;  Data and color filter control
53DF            ; 70h, 00h,05h, 72h, BCh,14h  ;  ...?
540C            ; 70h, 00h,06h, 72h, E8h,60h  ;/ ...Reserved?
N/A             ;(70h, 00h,08h, 72h, N/A)     ;- ...missing...LED Control
5439            ; 70h, 00h,0Ah, 72h, 40h,08h  ;\ Contrast/Brightness Control
5466            ; 70h, 00h,0Bh, 72h, D4h,00h  ;/ ...?
5493            ; 70h, 00h,0Dh, 72h, 12h,3Ah  ;\ Power control (2)
54C0            ; 70h, 00h,0Eh, 72h, 2Ch,C0h  ;  Power control (3)
54ED            ; 70h, 00h,0Fh, 72h, 00h,00h  ;/ Gate scan starting position
551A            ; 70h, 00h,16h, 72h, 9Fh,80h  ;\ Horizontal Porch
5547            ; 70h, 00h,17h, 72h, 22h,12h  ;/ Vertical Porch
5574            ; 70h, 00h,1Eh, 72h, 00h,DDh  ;- Power control (4)
55A1            ; 70h, 00h,30h, 72h, 05h,07h  ;\ y control (1)
55CE            ; 70h, 00h,31h, 72h, 00h,04h  ;  y control (2)
55FB            ; 70h, 00h,32h, 72h, 07h,07h  ;  y control (3)
5628            ; 70h, 00h,33h, 72h, 00h,00h  ;  y control (4)
5655            ; 70h, 00h,34h, 72h, 00h,00h  ;  y control (5)
5682            ; 70h, 00h,35h, 72h, 03h,07h  ;  y control (6)
56AF            ; 70h, 00h,36h, 72h, 07h,00h  ;  y control (7)
56DC            ; 70h, 00h,37h, 72h, 00h,00h  ;/ y control (8)
5709            ; 70h, 00h,3Ah, 72h, 14h,0Bh  ;\ y control (9)
5736            ; 70h, 00h,3Bh, 72h, 14h,0Bh  ;/ y control (10)
                ;- - -
                ;BUG: should initialize PWM2 clock HIGH before first transfer?
                ;as well as forcing PWM3 chip select HIGH for a moment?
                ;(ideally, that should be done within "display_spi_reset")
                ;(without that, the first cmd might get wrong, unless the
                ;chip boots up with those signals HIGH or at least HIGH-Z)
                ;- - -
5321 7F 00       mov  r7,00h                                    ;\PWM3 off
5323 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5326 7F 70       mov  r7,70h                                    ;\
5328 12 AA 26    call lcd_spi_send_byte                         ; id  cmd/index
532B E4          clr  a                                         ; 70h,00h,01h
532C FF          mov  r7,a                                      ;
532D 12 AA 26    call lcd_spi_send_byte                         ;
5330 7F 01       mov  r7,01h                                    ;
5332 12 AA 26    call lcd_spi_send_byte                         ;/
5335 7F 01       mov  r7,01h                                    ;\PWM3 on
5337 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
533A 7F 72       mov  r7,72h                                    ;\
533C 12 AA 26    call lcd_spi_send_byte                         ; id  data
533F 7F 63       mov  r7,63h                                    ; 72h,63h,00h
5341 12 AA 26    call lcd_spi_send_byte                         ;
5344 E4          clr  a                                         ;
5345 FF          mov  r7,a                                      ;
5346 12 AA 26    call lcd_spi_send_byte                         ;/
5349 7F 01       mov  r7,01h                                    ;\PWM3 on
534B 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
534E 7F 00       mov  r7,00h                                    ;\PWM3 off
5350 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5353 7F 70       mov  r7,70h                                    ;\
5355 12 AA 26    call lcd_spi_send_byte                         ;
5358 E4          clr  a                                         ; 70h,00h,02h
5359 FF          mov  r7,a                                      ;
535A 12 AA 26    call lcd_spi_send_byte                         ;
535D 7F 02       mov  r7,02h                                    ;
535F 12 AA 26    call lcd_spi_send_byte                         ;/
5362 7F 01       mov  r7,01h                                    ;\PWM3 on
5364 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5367 7F 72       mov  r7,72h                                    ;\
5369 12 AA 26    call lcd_spi_send_byte                         ;
536C 7F 02       mov  r7,02h                                    ; 72h,02h,00h
536E 12 AA 26    call lcd_spi_send_byte                         ;
5371 E4          clr  a                                         ;
5372 FF          mov  r7,a                                      ;
5373 12 AA 26    call lcd_spi_send_byte                         ;/
5376 7F 01       mov  r7,01h                                    ;\PWM3 on
5378 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
537B 7F 00       mov  r7,00h                                    ;\PWM3 off
537D 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5380 7F 70       mov  r7,70h                                    ;\
5382 12 AA 26    call lcd_spi_send_byte                         ;
5385 E4          clr  a                                         ; 70h,00h,03h
5386 FF          mov  r7,a                                      ;
5387 12 AA 26    call lcd_spi_send_byte                         ;
538A 7F 03       mov  r7,03h                                    ;
538C 12 AA 26    call lcd_spi_send_byte                         ;/
538F 7F 01       mov  r7,01h                                    ;\PWM3 on
5391 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5394 7F 72       mov  r7,72h                                    ;\
5396 12 AA 26    call lcd_spi_send_byte                         ;
5399 7F 76       mov  r7,76h                                    ; 72h,76h,64h
539B 12 AA 26    call lcd_spi_send_byte                         ;
539E 7F 64       mov  r7,64h                                    ;
53A0 12 AA 26    call lcd_spi_send_byte                         ;/
53A3 7F 01       mov  r7,01h                                    ;\PWM3 on
53A5 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
53A8 7F 00       mov  r7,00h                                    ;\PWM3 off
53AA 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
53AD 7F 70       mov  r7,70h                                    ;\
53AF 12 AA 26    call lcd_spi_send_byte                         ;
53B2 E4          clr  a                                         ; 70h,00h,04h
53B3 FF          mov  r7,a                                      ;
53B4 12 AA 26    call lcd_spi_send_byte                         ;
53B7 7F 04       mov  r7,04h                                    ;
53B9 12 AA 26    call lcd_spi_send_byte                         ;/
53BC 7F 01       mov  r7,01h                                    ;\PWM3 on
53BE 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
53C1 7F 72       mov  r7,72h                                    ;\
53C3 12 AA 26    call lcd_spi_send_byte                         ;
53C6 7F 04       mov  r7,04h                                    ; 72h,04h,47h
53C8 12 AA 26    call lcd_spi_send_byte                         ;
53CB 7F 47       mov  r7,47h                                    ;
53CD 12 AA 26    call lcd_spi_send_byte                         ;/
53D0 7F 01       mov  r7,01h                                    ;\PWM3 on
53D2 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
53D5 7F 00       mov  r7,00h                                    ;\PWM3 off
53D7 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
53DA 7F 70       mov  r7,70h                                    ;\
53DC 12 AA 26    call lcd_spi_send_byte                         ;
53DF E4          clr  a                                         ; 70h,00h,05h
53E0 FF          mov  r7,a                                      ;
53E1 12 AA 26    call lcd_spi_send_byte                         ;
53E4 7F 05       mov  r7,05h                                    ;
53E6 12 AA 26    call lcd_spi_send_byte                         ;/
53E9 7F 01       mov  r7,01h                                    ;\PWM3 on
53EB 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
53EE 7F 72       mov  r7,72h                                    ;\
53F0 12 AA 26    call lcd_spi_send_byte                         ;
53F3 7F BC       mov  r7,0BCh                                   ; 72h,BCh,14h
53F5 12 AA 26    call lcd_spi_send_byte                         ;
53F8 7F 14       mov  r7,14h                                    ;
53FA 12 AA 26    call lcd_spi_send_byte                         ;/
53FD 7F 01       mov  r7,01h                                    ;\PWM3 on
53FF 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
5402 7F 00       mov  r7,00h                                    ;\PWM3 off
5404 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5407 7F 70       mov  r7,70h                                    ;\
5409 12 AA 26    call lcd_spi_send_byte                         ;
540C E4          clr  a                                         ; 70h,00h,06h
540D FF          mov  r7,a                                      ;
540E 12 AA 26    call lcd_spi_send_byte                         ;
5411 7F 06       mov  r7,06h                                    ;
5413 12 AA 26    call lcd_spi_send_byte                         ;/
5416 7F 01       mov  r7,01h                                    ;\PWM3 on
5418 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
541B 7F 72       mov  r7,72h                                    ;\
541D 12 AA 26    call lcd_spi_send_byte                         ;
5420 7F E8       mov  r7,0E8h                                   ; 72h,E8h,60h
5422 12 AA 26    call lcd_spi_send_byte                         ;
5425 7F 60       mov  r7,60h                                    ;
5427 12 AA 26    call lcd_spi_send_byte                         ;/
542A 7F 01       mov  r7,01h                                    ;\PWM3 on
542C 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
542F 7F 00       mov  r7,00h                                    ;\PWM3 off
5431 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5434 7F 70       mov  r7,70h                                    ;\
5436 12 AA 26    call lcd_spi_send_byte                         ;
5439 E4          clr  a                                         ; 70h,00h,0Ah !!
543A FF          mov  r7,a                                      ;
543B 12 AA 26    call lcd_spi_send_byte                         ;
543E 7F 0A       mov  r7,0Ah                                    ;
5440 12 AA 26    call lcd_spi_send_byte                         ;/
5443 7F 01       mov  r7,01h                                    ;\PWM3 on
5445 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5448 7F 72       mov  r7,72h                                    ;\
544A 12 AA 26    call lcd_spi_send_byte                         ;
544D 7F 40       mov  r7,40h                                    ; 72h,40h,08h
544F 12 AA 26    call lcd_spi_send_byte                         ;
5452 7F 08       mov  r7,08h                                    ;
5454 12 AA 26    call lcd_spi_send_byte                         ;/
5457 7F 01       mov  r7,01h                                    ;\PWM3 on
5459 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
545C 7F 00       mov  r7,00h                                    ;\PWM3 off
545E 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5461 7F 70       mov  r7,70h                                    ;\
5463 12 AA 26    call lcd_spi_send_byte                         ;
5466 E4          clr  a                                         ; 70h,00h,0Bh
5467 FF          mov  r7,a                                      ;
5468 12 AA 26    call lcd_spi_send_byte                         ;
546B 7F 0B       mov  r7,0Bh                                    ;
546D 12 AA 26    call lcd_spi_send_byte                         ;/
5470 7F 01       mov  r7,01h                                    ;\PWM3 on
5472 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5475 7F 72       mov  r7,72h                                    ;\
5477 12 AA 26    call lcd_spi_send_byte                         ;
547A 7F D4       mov  r7,0D4h                                   ; 72h,D4h,00h
547C 12 AA 26    call lcd_spi_send_byte                         ;
547F E4          clr  a                                         ;
5480 FF          mov  r7,a                                      ;
5481 12 AA 26    call lcd_spi_send_byte                         ;/
5484 7F 01       mov  r7,01h                                    ;\PWM3 on
5486 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
5489 7F 00       mov  r7,00h                                    ;\PWM3 off
548B 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
548E 7F 70       mov  r7,70h                                    ;\
5490 12 AA 26    call lcd_spi_send_byte                         ;
5493 E4          clr  a                                         ; 70h,00h,0Dh !!
5494 FF          mov  r7,a                                      ;
5495 12 AA 26    call lcd_spi_send_byte                         ;
5498 7F 0D       mov  r7,0Dh                                    ;
549A 12 AA 26    call lcd_spi_send_byte                         ;/
549D 7F 01       mov  r7,01h                                    ;\PWM3 on
549F 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
54A2 7F 72       mov  r7,72h                                    ;\
54A4 12 AA 26    call lcd_spi_send_byte                         ;
54A7 7F 12       mov  r7,12h                                    ; 72h,12h,3Ah
54A9 12 AA 26    call lcd_spi_send_byte                         ;
54AC 7F 3A       mov  r7,3Ah                                    ;
54AE 12 AA 26    call lcd_spi_send_byte                         ;/
54B1 7F 01       mov  r7,01h                                    ;\PWM3 on
54B3 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
54B6 7F 00       mov  r7,00h                                    ;\PWM3 off
54B8 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
54BB 7F 70       mov  r7,70h                                    ;\
54BD 12 AA 26    call lcd_spi_send_byte                         ;
54C0 E4          clr  a                                         ; 70h,00h,0Eh
54C1 FF          mov  r7,a                                      ;
54C2 12 AA 26    call lcd_spi_send_byte                         ;
54C5 7F 0E       mov  r7,0Eh                                    ;
54C7 12 AA 26    call lcd_spi_send_byte                         ;/
54CA 7F 01       mov  r7,01h                                    ;\PWM3 on
54CC 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
54CF 7F 72       mov  r7,72h                                    ;\
54D1 12 AA 26    call lcd_spi_send_byte                         ;
54D4 7F 2C       mov  r7,2Ch                                    ; 72h,2Ch,C0h
54D6 12 AA 26    call lcd_spi_send_byte                         ;
54D9 7F C0       mov  r7,0C0h                                   ;
54DB 12 AA 26    call lcd_spi_send_byte                         ;/
54DE 7F 01       mov  r7,01h                                    ;\PWM3 on
54E0 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
54E3 7F 00       mov  r7,00h                                    ;\PWM3 off
54E5 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
54E8 7F 70       mov  r7,70h                                    ;\
54EA 12 AA 26    call lcd_spi_send_byte                         ;
54ED E4          clr  a                                         ; 70h,00h,0Fh
54EE FF          mov  r7,a                                      ;
54EF 12 AA 26    call lcd_spi_send_byte                         ;
54F2 7F 0F       mov  r7,0Fh                                    ;
54F4 12 AA 26    call lcd_spi_send_byte                         ;/
54F7 7F 01       mov  r7,01h                                    ;\PWM3 on
54F9 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
54FC 7F 72       mov  r7,72h                                    ;\
54FE 12 AA 26    call lcd_spi_send_byte                         ;
5501 E4          clr  a                                         ; 72h,00h,00h
5502 FF          mov  r7,a                                      ;
5503 12 AA 26    call lcd_spi_send_byte                         ;
5506 E4          clr  a                                         ;
5507 FF          mov  r7,a                                      ;
5508 12 AA 26    call lcd_spi_send_byte                         ;/
550B 7F 01       mov  r7,01h                                    ;\PWM3 on
550D 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
5510 7F 00       mov  r7,00h                                    ;\PWM3 off
5512 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5515 7F 70       mov  r7,70h                                    ;\
5517 12 AA 26    call lcd_spi_send_byte                         ;
551A E4          clr  a                                         ; 70h,00h,16h !!
551B FF          mov  r7,a                                      ;
551C 12 AA 26    call lcd_spi_send_byte                         ;
551F 7F 16       mov  r7,16h                                    ;
5521 12 AA 26    call lcd_spi_send_byte                         ;/
5524 7F 01       mov  r7,01h                                    ;\PWM3 on
5526 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5529 7F 72       mov  r7,72h                                    ;\
552B 12 AA 26    call lcd_spi_send_byte                         ;
552E 7F 9F       mov  r7,9Fh                                    ; 72h,9Fh,80h
5530 12 AA 26    call lcd_spi_send_byte                         ;
5533 7F 80       mov  r7,80h                                    ;
5535 12 AA 26    call lcd_spi_send_byte                         ;/
5538 7F 01       mov  r7,01h                                    ;\PWM3 on
553A 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
553D 7F 00       mov  r7,00h                                    ;\PWM3 off
553F 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5542 7F 70       mov  r7,70h                                    ;\
5544 12 AA 26    call lcd_spi_send_byte                         ;
5547 E4          clr  a                                         ; 70h,00h,17h
5548 FF          mov  r7,a                                      ;
5549 12 AA 26    call lcd_spi_send_byte                         ;
554C 7F 17       mov  r7,17h                                    ;
554E 12 AA 26    call lcd_spi_send_byte                         ;/
5551 7F 01       mov  r7,01h                                    ;\PWM3 on
5553 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5556 7F 72       mov  r7,72h                                    ;\
5558 12 AA 26    call lcd_spi_send_byte                         ;
555B 7F 22       mov  r7,22h                                    ; 72h,22h,12h
555D 12 AA 26    call lcd_spi_send_byte                         ;
5560 7F 12       mov  r7,12h                                    ;
5562 12 AA 26    call lcd_spi_send_byte                         ;/
5565 7F 01       mov  r7,01h                                    ;\PWM3 on
5567 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
556A 7F 00       mov  r7,00h                                    ;\PWM3 off
556C 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
556F 7F 70       mov  r7,70h                                    ;\
5571 12 AA 26    call lcd_spi_send_byte                         ;
5574 E4          clr  a                                         ; 70h,00h,1Eh !!
5575 FF          mov  r7,a                                      ;
5576 12 AA 26    call lcd_spi_send_byte                         ;
5579 7F 1E       mov  r7,1Eh                                    ;
557B 12 AA 26    call lcd_spi_send_byte                         ;/
557E 7F 01       mov  r7,01h                                    ;\PWM3 on
5580 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5583 7F 72       mov  r7,72h                                    ;\
5585 12 AA 26    call lcd_spi_send_byte                         ;
5588 E4          clr  a                                         ; 72h,00h,DDh
5589 FF          mov  r7,a                                      ;
558A 12 AA 26    call lcd_spi_send_byte                         ;
558D 7F DD       mov  r7,0DDh                                   ;
558F 12 AA 26    call lcd_spi_send_byte                         ;/
5592 7F 01       mov  r7,01h                                    ;\PWM3 on
5594 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
5597 7F 00       mov  r7,00h                                    ;\PWM3 off
5599 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
559C 7F 70       mov  r7,70h                                    ;\
559E 12 AA 26    call lcd_spi_send_byte                         ;
55A1 E4          clr  a                                         ; 70h,00h,30h !!
55A2 FF          mov  r7,a                                      ;
55A3 12 AA 26    call lcd_spi_send_byte                         ;
55A6 7F 30       mov  r7,30h                                    ;
55A8 12 AA 26    call lcd_spi_send_byte                         ;/
55AB 7F 01       mov  r7,01h                                    ;\PWM3 on
55AD 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
55B0 7F 72       mov  r7,72h                                    ;\
55B2 12 AA 26    call lcd_spi_send_byte                         ;
55B5 7F 05       mov  r7,05h                                    ; 72h,05h,07h
55B7 12 AA 26    call lcd_spi_send_byte                         ;
55BA 7F 07       mov  r7,07h                                    ;
55BC 12 AA 26    call lcd_spi_send_byte                         ;/
55BF 7F 01       mov  r7,01h                                    ;\PWM3 on
55C1 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
55C4 7F 00       mov  r7,00h                                    ;\PWM3 off
55C6 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
55C9 7F 70       mov  r7,70h                                    ;\
55CB 12 AA 26    call lcd_spi_send_byte                         ;
55CE E4          clr  a                                         ; 70h,00h,31h
55CF FF          mov  r7,a                                      ;
55D0 12 AA 26    call lcd_spi_send_byte                         ;
55D3 7F 31       mov  r7,31h                                    ;
55D5 12 AA 26    call lcd_spi_send_byte                         ;/
55D8 7F 01       mov  r7,01h                                    ;\PWM3 on
55DA 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
55DD 7F 72       mov  r7,72h                                    ;\
55DF 12 AA 26    call lcd_spi_send_byte                         ;
55E2 E4          clr  a                                         ; 72h,00h,04h
55E3 FF          mov  r7,a                                      ;
55E4 12 AA 26    call lcd_spi_send_byte                         ;
55E7 7F 04       mov  r7,04h                                    ;
55E9 12 AA 26    call lcd_spi_send_byte                         ;/
55EC 7F 01       mov  r7,01h                                    ;\PWM3 on
55EE 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
55F1 7F 00       mov  r7,00h                                    ;\PWM3 off
55F3 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
55F6 7F 70       mov  r7,70h                                    ;\
55F8 12 AA 26    call lcd_spi_send_byte                         ;
55FB E4          clr  a                                         ; 70h,00h,32h
55FC FF          mov  r7,a                                      ;
55FD 12 AA 26    call lcd_spi_send_byte                         ;
5600 7F 32       mov  r7,32h                                    ;
5602 12 AA 26    call lcd_spi_send_byte                         ;/
5605 7F 01       mov  r7,01h                                    ;\PWM3 on
5607 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
560A 7F 72       mov  r7,72h                                    ;\
560C 12 AA 26    call lcd_spi_send_byte                         ;
560F 7F 07       mov  r7,07h                                    ; 72h,07h,07h
5611 12 AA 26    call lcd_spi_send_byte                         ;
5614 7F 07       mov  r7,07h                                    ;
5616 12 AA 26    call lcd_spi_send_byte                         ;/
5619 7F 01       mov  r7,01h                                    ;\PWM3 on
561B 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
561E 7F 00       mov  r7,00h                                    ;\PWM3 off
5620 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5623 7F 70       mov  r7,70h                                    ;\
5625 12 AA 26    call lcd_spi_send_byte                         ;
5628 E4          clr  a                                         ; 70h,00h,33h
5629 FF          mov  r7,a                                      ;
562A 12 AA 26    call lcd_spi_send_byte                         ;
562D 7F 33       mov  r7,33h                                    ;
562F 12 AA 26    call lcd_spi_send_byte                         ;/
5632 7F 01       mov  r7,01h                                    ;\PWM3 on
5634 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5637 7F 72       mov  r7,72h                                    ;\
5639 12 AA 26    call lcd_spi_send_byte                         ;
563C E4          clr  a                                         ; 72h,00h,00h
563D FF          mov  r7,a                                      ;
563E 12 AA 26    call lcd_spi_send_byte                         ;
5641 E4          clr  a                                         ;
5642 FF          mov  r7,a                                      ;
5643 12 AA 26    call lcd_spi_send_byte                         ;/
5646 7F 01       mov  r7,01h                                    ;\PWM3 on
5648 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
564B 7F 00       mov  r7,00h                                    ;\PWM3 off
564D 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5650 7F 70       mov  r7,70h                                    ;\
5652 12 AA 26    call lcd_spi_send_byte                         ;
5655 E4          clr  a                                         ; 70h,00h,34h
5656 FF          mov  r7,a                                      ;
5657 12 AA 26    call lcd_spi_send_byte                         ;
565A 7F 34       mov  r7,34h                                    ;
565C 12 AA 26    call lcd_spi_send_byte                         ;/
565F 7F 01       mov  r7,01h                                    ;\PWM3 on
5661 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5664 7F 72       mov  r7,72h                                    ;\
5666 12 AA 26    call lcd_spi_send_byte                         ;
5669 E4          clr  a                                         ; 72h,00h,00h
566A FF          mov  r7,a                                      ;
566B 12 AA 26    call lcd_spi_send_byte                         ;
566E E4          clr  a                                         ;
566F FF          mov  r7,a                                      ;
5670 12 AA 26    call lcd_spi_send_byte                         ;/
5673 7F 01       mov  r7,01h                                    ;\PWM3 on
5675 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
5678 7F 00       mov  r7,00h                                    ;\PWM3 off
567A 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
567D 7F 70       mov  r7,70h                                    ;\
567F 12 AA 26    call lcd_spi_send_byte                         ;
5682 E4          clr  a                                         ; 70h,00h,35h
5683 FF          mov  r7,a                                      ;
5684 12 AA 26    call lcd_spi_send_byte                         ;
5687 7F 35       mov  r7,35h                                    ;
5689 12 AA 26    call lcd_spi_send_byte                         ;/
568C 7F 01       mov  r7,01h                                    ;\PWM3 on
568E 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5691 7F 72       mov  r7,72h                                    ;\
5693 12 AA 26    call lcd_spi_send_byte                         ;
5696 7F 03       mov  r7,03h                                    ; 72h,03h,07h
5698 12 AA 26    call lcd_spi_send_byte                         ;
569B 7F 07       mov  r7,07h                                    ;
569D 12 AA 26    call lcd_spi_send_byte                         ;/
56A0 7F 01       mov  r7,01h                                    ;\PWM3 on
56A2 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
56A5 7F 00       mov  r7,00h                                    ;\PWM3 off
56A7 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
56AA 7F 70       mov  r7,70h                                    ;\
56AC 12 AA 26    call lcd_spi_send_byte                         ;
56AF E4          clr  a                                         ; 70h,00h,36h
56B0 FF          mov  r7,a                                      ;
56B1 12 AA 26    call lcd_spi_send_byte                         ;
56B4 7F 36       mov  r7,36h                                    ;
56B6 12 AA 26    call lcd_spi_send_byte                         ;/
56B9 7F 01       mov  r7,01h                                    ;\PWM3 on
56BB 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
56BE 7F 72       mov  r7,72h                                    ;\
56C0 12 AA 26    call lcd_spi_send_byte                         ;
56C3 7F 07       mov  r7,07h                                    ; 72h,07h,00h
56C5 12 AA 26    call lcd_spi_send_byte                         ;
56C8 E4          clr  a                                         ;
56C9 FF          mov  r7,a                                      ;
56CA 12 AA 26    call lcd_spi_send_byte                         ;/
56CD 7F 01       mov  r7,01h                                    ;\PWM3 on
56CF 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
56D2 7F 00       mov  r7,00h                                    ;\PWM3 off
56D4 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
56D7 7F 70       mov  r7,70h                                    ;\
56D9 12 AA 26    call lcd_spi_send_byte                         ;
56DC E4          clr  a                                         ; 70h,00h,37h
56DD FF          mov  r7,a                                      ;
56DE 12 AA 26    call lcd_spi_send_byte                         ;
56E1 7F 37       mov  r7,37h                                    ;
56E3 12 AA 26    call lcd_spi_send_byte                         ;/
56E6 7F 01       mov  r7,01h                                    ;\PWM3 on
56E8 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
56EB 7F 72       mov  r7,72h                                    ;\
56ED 12 AA 26    call lcd_spi_send_byte                         ;
56F0 E4          clr  a                                         ; 72h,00h,00h
56F1 FF          mov  r7,a                                      ;
56F2 12 AA 26    call lcd_spi_send_byte                         ;
56F5 E4          clr  a                                         ;
56F6 FF          mov  r7,a                                      ;
56F7 12 AA 26    call lcd_spi_send_byte                         ;/
56FA 7F 01       mov  r7,01h                                    ;\PWM3 on
56FC 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
56FF 7F 00       mov  r7,00h                                    ;\PWM3 off
5701 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5704 7F 70       mov  r7,70h                                    ;\
5706 12 AA 26    call lcd_spi_send_byte                         ;
5709 E4          clr  a                                         ; 70h,00h,3Ah !!
570A FF          mov  r7,a                                      ;
570B 12 AA 26    call lcd_spi_send_byte                         ;
570E 7F 3A       mov  r7,3Ah                                    ;
5710 12 AA 26    call lcd_spi_send_byte                         ;/
5713 7F 01       mov  r7,01h                                    ;\PWM3 on
5715 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5718 7F 72       mov  r7,72h                                    ;\
571A 12 AA 26    call lcd_spi_send_byte                         ;
571D 7F 14       mov  r7,14h                                    ; 72h,14h,0Bh
571F 12 AA 26    call lcd_spi_send_byte                         ;
5722 7F 0B       mov  r7,0Bh                                    ;
5724 12 AA 26    call lcd_spi_send_byte                         ;/
5727 7F 01       mov  r7,01h                                    ;\PWM3 on
5729 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
                ;- - - -
572C 7F 00       mov  r7,00h                                    ;\PWM3 off
572E 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5731 7F 70       mov  r7,70h                                    ;\
5733 12 AA 26    call lcd_spi_send_byte                         ;
5736 E4          clr  a                                         ; 70h,00h,3Bh
5737 FF          mov  r7,a                                      ;
5738 12 AA 26    call lcd_spi_send_byte                         ;
573B 7F 3B       mov  r7,3Bh                                    ;
573D 12 AA 26    call lcd_spi_send_byte                         ;/
5740 7F 01       mov  r7,01h                                    ;\PWM3 on
5742 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
5745 7F 72       mov  r7,72h                                    ;\
5747 12 AA 26    call lcd_spi_send_byte                         ;
574A 7F 14       mov  r7,14h                                    ; 72h,14h,0Bh
574C 12 AA 26    call lcd_spi_send_byte                         ;
574F 7F 0B       mov  r7,0Bh                                    ;
5751 12 AA 26    call lcd_spi_send_byte                         ;/
5754 7F 01       mov  r7,01h                                    ;\PWM3 on
5756 02 B2 BA    jmp  pwm_switch_pwm3_on_port07                 ;/
                ;------------------
                .endif ;lcd_spi_version<ver11sep2017 ;(LCD SPI)
                ;------------------
;:------------- ;:----------------- GUI data (character/tileno's)
                ;------------------
                normal_char_xlat_table:
                ;tile numbers for normal characters (ASCII based UPPERCASE only)
5759 01 E5 01 E6 dw   01E5h,01E6h,01E7h,01E8h,01E9h,01EAh,01EBh,01ECh ;chr(00h..)
5769 01 ED 01 EE dw   01EDh,01EEh,01EFh,01F0h,01F1h,01F2h,01F3h,01F4h
5779 01 F5 01 F6 dw   01F5h,01F6h,01F7h,01F8h,01F9h,01FAh,01FBh,01FCh ;chr(10h..)
5789 01 FD 01 FE dw   01FDh,01FEh,01FFh,0200h,0201h,0202h,0203h,0204h
5799 01 C0 02 10 dw   01C0h,0210h,0205h,0206h,0207h,0208h,0209h,020Ah ;chr(20h..)
57A9 02 0B 02 0C dw   020Bh,020Ch,0206h,0206h,0020h,0020h,020Dh,0020h
57B9 01 C1 01 C2 dw   01C1h,01C2h,01C3h,01C4h,01C5h,01C6h,01C7h,01C8h ;chr(30h..)  DIGITS
57C9 01 C9 01 CA dw   01C9h,01CAh,020Eh,0020h,0020h,0211h,0020h,020Fh
57D9 02 12 01 CB dw   0212h,01CBh,01CCh,01CDh,01CEh,01CFh,01D0h,01D1h ;chr(40h..)  UPPERCASE
57E9 01 D2 01 D3 dw   01D2h,01D3h,01D4h,01D5h,01D6h,01D7h,01D8h,01D9h
57F9 01 DA 01 DB dw   01DAh,01DBh,01DCh,01DDh,01DEh,01DFh,01E0h,01E1h ;chr(50h..)
5809 01 E2 01 E3 dw   01E2h,01E3h,01E4h,0020h,0020h,0020h,0020h,0282h
5819 00 20 01 CB dw   0020h,01CBh,01CCh,01CDh,01CEh,01CFh,01D0h,01D1h ;chr(60h..)  UPPERCASE TOO
5829 01 D2 01 D3 dw   01D2h,01D3h,01D4h,01D5h,01D6h,01D7h,01D8h,01D9h
5839 01 DA 01 DB dw   01DAh,01DBh,01DCh,01DDh,01DEh,01DFh,01E0h,01E1h ;chr(70h..)
5849 01 E2 01 E3 dw   01E2h,01E3h,01E4h,0020h,0020h,0020h,0020h,0020h
5859 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h ;chr(80h..)
5869 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5879 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h ;chr(90h..)
5889 02 11 02 12 dw   0211h,0212h,0213h,0214h,0215h,0216h,0217h,0218h
5899 02 19 02 1A dw   0219h,021Ah,021Bh,021Ch,021Dh,021Eh,021Fh,0220h ;chr(A0h..)
58A9 02 21 02 22 dw   0221h,0222h,0223h,0224h,0225h,0226h,0227h,0228h
58B9 02 29 02 2A dw   0229h,022Ah,022Bh,022Ch,022Dh,022Eh,022Fh,0230h ;chr(B0h..)
58C9 00 20 02 31 dw   0020h,0231h,0232h,0020h,0020h,0020h,0233h,0020h
58D9 00 20 00 20 dw   0020h,0020h,0020h,0239h,023Ah,023Bh,023Ch,0020h ;chr(C0h..)
58E9 00 20 02 3D dw   0020h,023Dh,0020h,023Eh,023Fh,0240h,0020h,0020h
58F9 02 41 02 42 dw   0241h,0242h,0020h,0020h,0020h,0020h,0020h,0020h ;chr(D0h..)
5909 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5919 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h ;chr(E0h..)
5929 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,026Ah
5939 02 6D 02 6E dw   026Dh,026Eh,026Fh,0271h,0272h,0273h,0274h,0275h ;chr(F0h..)
5949 02 76 02 77 dw   0276h,0277h,0270h,0278h,0279h,027Ah,026Bh,026Ch
                ;---
                prefixed_char_xlat_table:   ;for chars with "#" prefix...
5959 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0256h,0020h,0020h
5969 00 20 00 20 dw   0020h,0020h,0020h,0250h,0251h,0020h,0020h,0020h
5979 00 20 00 20 dw   0020h,0020h,0020h,0020h,024Fh,0020h,0249h,024Ah
5989 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5999 02 8A 02 8B dw   028Ah,028Bh,028Ch,028Dh,028Eh,028Fh,0290h,0291h
59A9 02 92 02 93 dw   0292h,0293h,0294h,0295h,0296h,0297h,0298h,0299h
59B9 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
59C9 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0243h,0244h,0020h
59D9 00 20 00 20 dw   0020h,0020h,0020h,0020h,0254h,0020h,0020h,0020h
59E9 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
59F9 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,025Ah,0020h
5A09 02 7F 02 80 dw   027Fh,0280h,0020h,0020h,0020h,0020h,0020h,0020h
5A19 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5A29 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5A39 00 20 02 64 dw   0020h,0264h,0020h,0020h,0020h,0247h,0248h,0020h
5A49 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5A59 00 20 00 20 dw   0020h,0020h,0257h,0020h,0020h,024Bh,0260h,0020h
5A69 02 81 00 20 dw   0281h,0020h,0020h,0020h,0020h,0020h,0020h,0255h
5A79 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5A89 00 20 00 20 dw   0020h,0020h,0020h,0020h,0262h,0245h,0246h,0020h
5A99 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,024Ch,024Dh
5AA9 02 4E 00 20 dw   024Eh,0020h,0020h,0020h,0020h,0020h,0020h,0253h
5AB9 02 58 00 20 dw   0258h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5AC9 00 20 02 67 dw   0020h,0267h,0020h,025Dh,025Eh,025Fh,0261h,025Bh
5AD9 02 5C 00 20 dw   025Ch,0020h,0020h,027Bh,0263h,0020h,0265h,0259h
5AE9 00 20 00 20 dw   0020h,0020h,0020h,0269h,0020h,027Dh,0020h,0020h
5AF9 02 9A 02 9B dw   029Ah,029Bh,029Ch,029Dh,029Eh,029Fh,02A0h,02A1h
5B09 02 A2 02 A3 dw   02A2h,02A3h,02A4h,02A5h,02A6h,02A7h,02A8h,02A9h
5B19 02 AA 00 20 dw   02AAh,0020h,0020h,0020h,0020h,0268h,0266h,0020h
5B29 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5B39 02 52 00 20 dw   0252h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5B49 00 20 00 20 dw   0020h,0020h,0020h,0020h,0020h,0020h,0020h,0020h
5B59 00 20       dw   0020h   ;<-- uh?
                ;------------------
5B5B 30 31 32.. decimal_chars                      db '0123456789'
5B65 00 00 00.. decimal_initial_zero_variables     db 0,0,0,0    ;4x00h
                ;---
5B69 30 31 32.. hexadecimal_chars                  db '0123456789ABCDEF'
5B79 00 00 00.. hexadecimal_initial_zero_variables db 0,0,0,0,0  ;5x00h
                ;------------------
                bar_tileno_284h_thru_287h:   ;... draw bar related
5B7E 02 84       dw   0284h    ;... character/tile numbers
5B80 02 85       dw   0285h
5B82 02 86       dw   0286h
5B84 02 87       dw   0287h
                ;------------------
                bar_tileno_288h:    ;... draw bar related
5B86 02 88       dw   0288h
                ;------------------
;:------------- ;:----------------- OSD code (vram alloc)
                ;------------------
                init_OSD_window_vram_allocation:
                 ;this is allocating the BIGGEST amount of memory per window
                 ;as used by ANY of the menu screens (rather than dynamically
                 ;allocating memory for the CURRENTLY displayed menues).
                 ;  ie. if window 1 is used by two menues, one with 10 chars,
                 ;and one with 32 chars, then it will permanently allocate
                 ;32 chars for window 1.
                 ;- - -
5B88 E4          clr  a
5B89 90 00 7F    mov  dptr,xram_tmp__7Fh
5B8C F0          movx [dptr],a
5B8D A3          inc  dptr ;=xram_tmp__80h
5B8E F0          movx [dptr],a
5B8F A3          inc  dptr ;=xram_tmp__81h
5B90 F0          movx [dptr],a
5B91 A3          inc  dptr ;=xram_tmp__82h
5B92 F0          movx [dptr],a
5B93 A3          inc  dptr ;=xram_tmp__83h
5B94 F0          movx [dptr],a
5B95 A3          inc  dptr ;=xram_tmp__84h
5B96 F0          movx [dptr],a
5B97 A3          inc  dptr ;=xram_tmp__85h
5B98 F0          movx [dptr],a
5B99 A3          inc  dptr ;=xram_tmp__86h
5B9A F0          movx [dptr],a
5B9B A3          inc  dptr ;=xram_tmp__87h
5B9C F0          movx [dptr],a
5B9D A3          inc  dptr ;=xram_tmp__88h
5B9E F0          movx [dptr],a
5B9F 90 00 7E    mov  dptr,xram_tmp__7Eh
5BA2 F0          movx [dptr],a      ;index
                @@lop:                                 ;lop..........
5BA3 90 00 7E    mov  dptr,xram_tmp__7Eh    ;index
5BA6 E0          movx a,[dptr]
5BA7 FF          mov  r7,a
5BA8 C3          clr  c
5BA9 94 16       sbc  a,gui_menu_list_num_entries
5BAB 40 03       jc   @@cont
5BAD 02 5E 0C    jmp  @@lop_done
                ;---
                @@cont:
5BB0 EF          mov  a,r7
5BB1 75 F0 03    mov  b,03h
5BB4 A4          mul  a,b
5BB5 24 4C       add  a,gui_menu_list and 0ffh
5BB7 F5 82       mov  dpl,a
5BB9 E4          clr  a
5BBA 34 2C       adc  a,gui_menu_list/100h
5BBC F5 83       mov  dph,a
5BBE E4          clr  a
5BBF 93          movc a,[a+dptr]
5BC0 FB          mov  r3,a
5BC1 74 01       mov  a,01h
5BC3 93          movc a,[a+dptr]
5BC4 FA          mov  r2,a
5BC5 74 02       mov  a,02h
5BC7 93          movc a,[a+dptr]
5BC8 F9          mov  r1,a
5BC9 90 00 0B    mov  dptr,000Bh ;idxMenuWindowNo
5BCC 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5BCF 14          dec  a
5BD0 60 6E       jz   a,@@is_window_1
5BD2 14          dec  a
5BD3 70 03       jnz  a,@@not_window_2
5BD5 02 5C B1    jmp  @@is_window_2
                ;---
                @@not_window_2:
5BD8 14          dec  a
5BD9 70 03       jnz  a,@@not_window_3
5BDB 02 5D 22    jmp  @@is_window_3
                ;---
                @@not_window_3:
5BDE 14          dec  a
5BDF 70 03       jnz  a,@@not_window_4
5BE1 02 5D 92    jmp  @@is_window_4
                ;---
                @@not_window_4:
5BE4 24 04       add  a,04h
5BE6 60 03       jz   a,@@is_window_0
5BE8 02 5E 03    jmp  @@wrong_window_number
                ;---
                @@is_window_0:
5BEB 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5BEE 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5BF1 FF          mov  r7,a
5BF2 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5BF5 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5BF8 8F F0       mov  b,r7
5BFA A4          mul  a,b
5BFB FF          mov  r7,a
5BFC C3          clr  c
5BFD 90 00 80    mov  dptr,xram_tmp__80h     ;check if another MENU SCREEN has already allocated enough BUFFER SPACE for this window
5C00 E0          movx a,[dptr]
5C01 9F          sbc  a,r7
5C02 90 00 7F    mov  dptr,xram_tmp__7Fh
5C05 E0          movx a,[dptr]
5C06 95 F0       sbc  a,b
5C08 40 03       jc   @@need_alloc_window_0
5C0A 02 5E 03    jmp  @@lop_next   ;already alloc'ed enough
                ;---
                @@need_alloc_window_0:
5C0D 90 00 7E    mov  dptr,xram_tmp__7Eh
5C10 E0          movx a,[dptr]
5C11 75 F0 03    mov  b,03h
5C14 A4          mul  a,b
5C15 24 4C       add  a,gui_menu_list and 0ffh
5C17 F5 82       mov  dpl,a
5C19 E4          clr  a
5C1A 34 2C       adc  a,gui_menu_list/100h
5C1C F5 83       mov  dph,a
5C1E E4          clr  a
5C1F 93          movc a,[a+dptr]
5C20 FB          mov  r3,a
5C21 74 01       mov  a,01h
5C23 93          movc a,[a+dptr]
5C24 FA          mov  r2,a
5C25 74 02       mov  a,02h
5C27 93          movc a,[a+dptr]
5C28 F9          mov  r1,a
5C29 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5C2C 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5C2F FF          mov  r7,a
5C30 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5C33 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5C36 8F F0       mov  b,r7
5C38 A4          mul  a,b
5C39 FF          mov  r7,a
5C3A 90 00 7F    mov  dptr,xram_tmp__7Fh
5C3D 02 5D FD    jmp  @@apply_new_size
                ;---
                @@is_window_1:
5C40 90 00 7E    mov  dptr,xram_tmp__7Eh
5C43 E0          movx a,[dptr]
5C44 75 F0 03    mov  b,03h
5C47 A4          mul  a,b
5C48 24 4C       add  a,gui_menu_list and 0ffh
5C4A F5 82       mov  dpl,a
5C4C E4          clr  a
5C4D 34 2C       adc  a,gui_menu_list/100h
5C4F F5 83       mov  dph,a
5C51 E4          clr  a
5C52 93          movc a,[a+dptr]
5C53 FB          mov  r3,a
5C54 74 01       mov  a,01h
5C56 93          movc a,[a+dptr]
5C57 FA          mov  r2,a
5C58 74 02       mov  a,02h
5C5A 93          movc a,[a+dptr]
5C5B F9          mov  r1,a
5C5C 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5C5F 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5C62 FF          mov  r7,a
5C63 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5C66 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5C69 8F F0       mov  b,r7
5C6B A4          mul  a,b
5C6C FF          mov  r7,a
5C6D C3          clr  c
5C6E 90 00 82    mov  dptr,xram_tmp__82h
5C71 E0          movx a,[dptr]
5C72 9F          sbc  a,r7
5C73 90 00 81    mov  dptr,xram_tmp__81h
5C76 E0          movx a,[dptr]
5C77 95 F0       sbc  a,b
5C79 40 03       jc   @@need_alloc_window_1
5C7B 02 5E 03    jmp  @@lop_next
                ;---
                @@need_alloc_window_1:
5C7E 90 00 7E    mov  dptr,xram_tmp__7Eh
5C81 E0          movx a,[dptr]
5C82 75 F0 03    mov  b,03h
5C85 A4          mul  a,b
5C86 24 4C       add  a,gui_menu_list and 0ffh
5C88 F5 82       mov  dpl,a
5C8A E4          clr  a
5C8B 34 2C       adc  a,gui_menu_list/100h
5C8D F5 83       mov  dph,a
5C8F E4          clr  a
5C90 93          movc a,[a+dptr]
5C91 FB          mov  r3,a
5C92 74 01       mov  a,01h
5C94 93          movc a,[a+dptr]
5C95 FA          mov  r2,a
5C96 74 02       mov  a,02h
5C98 93          movc a,[a+dptr]
5C99 F9          mov  r1,a
5C9A 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5C9D 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5CA0 FF          mov  r7,a
5CA1 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5CA4 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5CA7 8F F0       mov  b,r7
5CA9 A4          mul  a,b
5CAA FF          mov  r7,a
5CAB 90 00 81    mov  dptr,xram_tmp__81h
5CAE 02 5D FD    jmp  @@apply_new_size
                ;---
                @@is_window_2:
5CB1 90 00 7E    mov  dptr,xram_tmp__7Eh
5CB4 E0          movx a,[dptr]
5CB5 75 F0 03    mov  b,03h
5CB8 A4          mul  a,b
5CB9 24 4C       add  a,gui_menu_list and 0ffh
5CBB F5 82       mov  dpl,a
5CBD E4          clr  a
5CBE 34 2C       adc  a,gui_menu_list/100h
5CC0 F5 83       mov  dph,a
5CC2 E4          clr  a
5CC3 93          movc a,[a+dptr]
5CC4 FB          mov  r3,a
5CC5 74 01       mov  a,01h
5CC7 93          movc a,[a+dptr]
5CC8 FA          mov  r2,a
5CC9 74 02       mov  a,02h
5CCB 93          movc a,[a+dptr]
5CCC F9          mov  r1,a
5CCD 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5CD0 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5CD3 FF          mov  r7,a
5CD4 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5CD7 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5CDA 8F F0       mov  b,r7
5CDC A4          mul  a,b
5CDD FF          mov  r7,a
5CDE C3          clr  c
5CDF 90 00 84    mov  dptr,xram_tmp__84h
5CE2 E0          movx a,[dptr]
5CE3 9F          sbc  a,r7
5CE4 90 00 83    mov  dptr,xram_tmp__83h
5CE7 E0          movx a,[dptr]
5CE8 95 F0       sbc  a,b
5CEA 40 03       jc   @@need_alloc_window_2
5CEC 02 5E 03    jmp  @@lop_next
                ;---
                @@need_alloc_window_2:
5CEF 90 00 7E    mov  dptr,xram_tmp__7Eh
5CF2 E0          movx a,[dptr]
5CF3 75 F0 03    mov  b,03h
5CF6 A4          mul  a,b
5CF7 24 4C       add  a,gui_menu_list and 0ffh
5CF9 F5 82       mov  dpl,a
5CFB E4          clr  a
5CFC 34 2C       adc  a,gui_menu_list/100h
5CFE F5 83       mov  dph,a
5D00 E4          clr  a
5D01 93          movc a,[a+dptr]
5D02 FB          mov  r3,a
5D03 74 01       mov  a,01h
5D05 93          movc a,[a+dptr]
5D06 FA          mov  r2,a
5D07 74 02       mov  a,02h
5D09 93          movc a,[a+dptr]
5D0A F9          mov  r1,a
5D0B 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5D0E 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5D11 FF          mov  r7,a
5D12 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5D15 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5D18 8F F0       mov  b,r7
5D1A A4          mul  a,b
5D1B FF          mov  r7,a
5D1C 90 00 83    mov  dptr,xram_tmp__83h
5D1F 02 5D FD    jmp  @@apply_new_size
                ;---
                @@is_window_3:
5D22 90 00 7E    mov  dptr,xram_tmp__7Eh
5D25 E0          movx a,[dptr]
5D26 75 F0 03    mov  b,03h
5D29 A4          mul  a,b
5D2A 24 4C       add  a,gui_menu_list and 0ffh
5D2C F5 82       mov  dpl,a
5D2E E4          clr  a
5D2F 34 2C       adc  a,gui_menu_list/100h
5D31 F5 83       mov  dph,a
5D33 E4          clr  a
5D34 93          movc a,[a+dptr]
5D35 FB          mov  r3,a
5D36 74 01       mov  a,01h
5D38 93          movc a,[a+dptr]
5D39 FA          mov  r2,a
5D3A 74 02       mov  a,02h
5D3C 93          movc a,[a+dptr]
5D3D F9          mov  r1,a
5D3E 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5D41 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5D44 FF          mov  r7,a
5D45 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5D48 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5D4B 8F F0       mov  b,r7
5D4D A4          mul  a,b
5D4E FF          mov  r7,a
5D4F C3          clr  c
5D50 90 00 86    mov  dptr,xram_tmp__86h
5D53 E0          movx a,[dptr]
5D54 9F          sbc  a,r7
5D55 90 00 85    mov  dptr,xram_tmp__85h
5D58 E0          movx a,[dptr]
5D59 95 F0       sbc  a,b
5D5B 40 03       jc   @@need_alloc_window_3
5D5D 02 5E 03    jmp  @@lop_next
                ;---
                @@need_alloc_window_3:
5D60 90 00 7E    mov  dptr,xram_tmp__7Eh
5D63 E0          movx a,[dptr]
5D64 75 F0 03    mov  b,03h
5D67 A4          mul  a,b
5D68 24 4C       add  a,gui_menu_list and 0ffh
5D6A F5 82       mov  dpl,a
5D6C E4          clr  a
5D6D 34 2C       adc  a,gui_menu_list/100h
5D6F F5 83       mov  dph,a
5D71 E4          clr  a
5D72 93          movc a,[a+dptr]
5D73 FB          mov  r3,a
5D74 74 01       mov  a,01h
5D76 93          movc a,[a+dptr]
5D77 FA          mov  r2,a
5D78 74 02       mov  a,02h
5D7A 93          movc a,[a+dptr]
5D7B F9          mov  r1,a
5D7C 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5D7F 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5D82 FF          mov  r7,a
5D83 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5D86 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5D89 8F F0       mov  b,r7
5D8B A4          mul  a,b
5D8C FF          mov  r7,a
5D8D 90 00 85    mov  dptr,xram_tmp__85h
5D90 80 6B       sjmp @@apply_new_size
                ;---
                @@is_window_4:
5D92 90 00 7E    mov  dptr,xram_tmp__7Eh
5D95 E0          movx a,[dptr]
5D96 75 F0 03    mov  b,03h
5D99 A4          mul  a,b
5D9A 24 4C       add  a,gui_menu_list and 0ffh
5D9C F5 82       mov  dpl,a
5D9E E4          clr  a
5D9F 34 2C       adc  a,gui_menu_list/100h
5DA1 F5 83       mov  dph,a
5DA3 E4          clr  a
5DA4 93          movc a,[a+dptr]
5DA5 FB          mov  r3,a
5DA6 74 01       mov  a,01h
5DA8 93          movc a,[a+dptr]
5DA9 FA          mov  r2,a
5DAA 74 02       mov  a,02h
5DAC 93          movc a,[a+dptr]
5DAD F9          mov  r1,a
5DAE 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5DB1 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5DB4 FF          mov  r7,a
5DB5 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5DB8 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5DBB 8F F0       mov  b,r7
5DBD A4          mul  a,b
5DBE FF          mov  r7,a
5DBF C3          clr  c
5DC0 90 00 88    mov  dptr,xram_tmp__88h
5DC3 E0          movx a,[dptr]
5DC4 9F          sbc  a,r7
5DC5 90 00 87    mov  dptr,xram_tmp__87h
5DC8 E0          movx a,[dptr]
5DC9 95 F0       sbc  a,b
5DCB 50 36       jnc  @@lop_next
                ;- - -
                ;@@need_alloc_window_4:
5DCD 90 00 7E    mov  dptr,xram_tmp__7Eh
5DD0 E0          movx a,[dptr]
5DD1 75 F0 03    mov  b,03h
5DD4 A4          mul  a,b
5DD5 24 4C       add  a,gui_menu_list and 0ffh
5DD7 F5 82       mov  dpl,a
5DD9 E4          clr  a
5DDA 34 2C       adc  a,gui_menu_list/100h
5DDC F5 83       mov  dph,a
5DDE E4          clr  a
5DDF 93          movc a,[a+dptr]
5DE0 FB          mov  r3,a
5DE1 74 01       mov  a,01h
5DE3 93          movc a,[a+dptr]
5DE4 FA          mov  r2,a
5DE5 74 02       mov  a,02h
5DE7 93          movc a,[a+dptr]
5DE8 F9          mov  r1,a
5DE9 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
5DEC 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5DEF FF          mov  r7,a
5DF0 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
5DF3 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
5DF6 8F F0       mov  b,r7
5DF8 A4          mul  a,b      ;SIZ = sizX*sizY ?
5DF9 FF          mov  r7,a
5DFA 90 00 87    mov  dptr,xram_tmp__87h
                ;- - - -
                @@apply_new_size:  ;in: a,r7, dptr=xram_tmp__7Fh+(N*2)   ;=007Fh,0081h,0083h,0085h,0087h
5DFD E5 F0       mov  a,b
5DFF F0          movx [dptr],a  ;msb
5E00 A3          inc  dptr ;=xram_tmp__80h+(N*2)
5E01 EF          mov  a,r7
5E02 F0          movx [dptr],a  ;lsb
                ;- - - - - - - - - -
                @@wrong_window_number:
                @@lop_next:
5E03 90 00 7E    mov  dptr,xram_tmp__7Eh
5E06 E0          movx a,[dptr]
5E07 04          inc  a
5E08 F0          movx [dptr],a
5E09 02 5B A3    ljmp @@lop                     ;..........lop
                ;---
                @@lop_done:
5E0C 90 00 81    mov  dptr,xram_tmp__81h
5E0F E0          movx a,[dptr]
5E10 FE          mov  r6,a
5E11 A3          inc  dptr ;=xram_tmp__82h
5E12 E0          movx a,[dptr]
5E13 FF          mov  r7,a
5E14 90 00 80    mov  dptr,xram_tmp__80h
5E17 E0          movx a,[dptr]
5E18 2F          add  a,r7
5E19 FF          mov  r7,a
5E1A 90 00 7F    mov  dptr,xram_tmp__7Fh
5E1D E0          movx a,[dptr]
5E1E 3E          adc  a,r6
5E1F FE          mov  r6,a
5E20 90 00 84    mov  dptr,xram_tmp__84h
5E23 E0          movx a,[dptr]
5E24 2F          add  a,r7
5E25 FF          mov  r7,a
5E26 90 00 83    mov  dptr,xram_tmp__83h
5E29 E0          movx a,[dptr]
5E2A 3E          adc  a,r6
5E2B FE          mov  r6,a
5E2C 90 00 86    mov  dptr,xram_tmp__86h
5E2F E0          movx a,[dptr]
5E30 2F          add  a,r7
5E31 FF          mov  r7,a
5E32 90 00 85    mov  dptr,xram_tmp__85h
5E35 E0          movx a,[dptr]
5E36 3E          adc  a,r6
5E37 FE          mov  r6,a
5E38 90 00 87    mov  dptr,xram_tmp__87h
5E3B E0          movx a,[dptr]
5E3C FA          mov  r2,a
5E3D A3          inc  dptr ;=xram_tmp__88h
5E3E E0          movx a,[dptr]
5E3F FB          mov  r3,a
5E40 2F          add  a,r7
5E41 EA          mov  a,r2
5E42 3E          adc  a,r6
5E43 C3          clr  c
5E44 94 02       sbc  a,02h
5E46 40 03       jc   @@cont2
5E48 02 5F 02    jmp  @@exit
                ;---
                @@cont2:
5E4B 90 00 7F    mov  dptr,xram_tmp__7Fh
5E4E E0          movx a,[dptr]
5E4F FC          mov  r4,a
5E50 A3          inc  dptr ;=xram_tmp__80h
5E51 E0          movx a,[dptr]
5E52 FD          mov  r5,a
5E53 90 00 99    mov  dptr,xram_window_0_size_msb
5E56 EC          mov  a,r4
5E57 F0          movx [dptr],a
5E58 A3          inc  dptr ;=xram_window_0_size_lsb
5E59 ED          mov  a,r5
5E5A F0          movx [dptr],a
5E5B 90 00 81    mov  dptr,xram_tmp__81h
5E5E E0          movx a,[dptr]
5E5F FF          mov  r7,a
5E60 A3          inc  dptr ;=xram_tmp__82h
5E61 E0          movx a,[dptr]
5E62 90 00 9B    mov  dptr,xram_window_1_size_msb
5E65 CF          xchg a,r7
5E66 F0          movx [dptr],a
5E67 A3          inc  dptr ;=xram_window_1_size_lsb
5E68 EF          mov  a,r7
5E69 F0          movx [dptr],a
5E6A 90 00 83    mov  dptr,xram_tmp__83h
5E6D E0          movx a,[dptr]
5E6E FF          mov  r7,a
5E6F A3          inc  dptr ;=xram_tmp__84h
5E70 E0          movx a,[dptr]
5E71 90 00 9D    mov  dptr,xram_window_2_size_msb
5E74 CF          xchg a,r7
5E75 F0          movx [dptr],a
5E76 A3          inc  dptr ;=xram_window_2_size_lsb
5E77 EF          mov  a,r7
5E78 F0          movx [dptr],a
5E79 90 00 85    mov  dptr,xram_tmp__85h
5E7C E0          movx a,[dptr]
5E7D FF          mov  r7,a
5E7E A3          inc  dptr ;=xram_tmp__86h
5E7F E0          movx a,[dptr]
5E80 90 00 9F    mov  dptr,xram_window_3_size_msb
5E83 CF          xchg a,r7
5E84 F0          movx [dptr],a
5E85 A3          inc  dptr ;=xram_window_3_size_lsb
5E86 EF          mov  a,r7
5E87 F0          movx [dptr],a
5E88 A3          inc  dptr ;=xram_window_4_size_msb
5E89 EA          mov  a,r2
5E8A F0          movx [dptr],a
5E8B A3          inc  dptr ;=xram_window_4_size_lsb
5E8C EB          mov  a,r3
                ;- - - -
                 ;in: r4r5 = addr_1 = size_0
5E8D F0          movx [dptr],a
5E8E 7F 01       mov  r7,01h    ;window 1
5E90 12 A4 31    call set_window_addr
                ;- - - -
5E93 90 00 81    mov  dptr,xram_tmp__81h
5E96 E0          movx a,[dptr]
5E97 FE          mov  r6,a
5E98 A3          inc  dptr ;=xram_tmp__82h
5E99 E0          movx a,[dptr]
5E9A FF          mov  r7,a
5E9B 90 00 80    mov  dptr,xram_tmp__80h
5E9E E0          movx a,[dptr]
5E9F 2F          add  a,r7
5EA0 FD          mov  r5,a
5EA1 90 00 7F    mov  dptr,xram_tmp__7Fh
5EA4 E0          movx a,[dptr]
5EA5 3E          adc  a,r6
5EA6 FC          mov  r4,a
5EA7 7F 02       mov  r7,02h    ;window 2
5EA9 12 A4 31    call set_window_addr
                ;- - - -
5EAC 90 00 81    mov  dptr,xram_tmp__81h
5EAF E0          movx a,[dptr]
5EB0 FE          mov  r6,a
5EB1 A3          inc  dptr ;=xram_tmp__82h
5EB2 E0          movx a,[dptr]
5EB3 FF          mov  r7,a
5EB4 90 00 80    mov  dptr,xram_tmp__80h
5EB7 E0          movx a,[dptr]
5EB8 2F          add  a,r7
5EB9 FF          mov  r7,a
5EBA 90 00 7F    mov  dptr,xram_tmp__7Fh
5EBD E0          movx a,[dptr]
5EBE 3E          adc  a,r6
5EBF FE          mov  r6,a
5EC0 90 00 84    mov  dptr,xram_tmp__84h
5EC3 E0          movx a,[dptr]
5EC4 2F          add  a,r7
5EC5 FD          mov  r5,a
5EC6 90 00 83    mov  dptr,xram_tmp__83h
5EC9 E0          movx a,[dptr]
5ECA 3E          adc  a,r6
5ECB FC          mov  r4,a
5ECC 7F 03       mov  r7,03h    ;window 3
5ECE 12 A4 31    call set_window_addr
                ;- - - -
5ED1 90 00 81    mov  dptr,xram_tmp__81h
5ED4 E0          movx a,[dptr]
5ED5 FE          mov  r6,a
5ED6 A3          inc  dptr ;=xram_tmp__82h
5ED7 E0          movx a,[dptr]
5ED8 FF          mov  r7,a
5ED9 90 00 80    mov  dptr,xram_tmp__80h
5EDC E0          movx a,[dptr]
5EDD 2F          add  a,r7
5EDE FF          mov  r7,a
5EDF 90 00 7F    mov  dptr,xram_tmp__7Fh
5EE2 E0          movx a,[dptr]
5EE3 3E          adc  a,r6
5EE4 FE          mov  r6,a
5EE5 90 00 84    mov  dptr,xram_tmp__84h
5EE8 E0          movx a,[dptr]
5EE9 2F          add  a,r7
5EEA FF          mov  r7,a
5EEB 90 00 83    mov  dptr,xram_tmp__83h
5EEE E0          movx a,[dptr]
5EEF 3E          adc  a,r6
5EF0 FE          mov  r6,a
5EF1 90 00 86    mov  dptr,xram_tmp__86h
5EF4 E0          movx a,[dptr]
5EF5 2F          add  a,r7
5EF6 FD          mov  r5,a      ;addr.lsb
5EF7 90 00 85    mov  dptr,xram_tmp__85h
5EFA E0          movx a,[dptr]
5EFB 3E          adc  a,r6   ;<-- that goes to bit7 ???
5EFC FC          mov  r4,a      ;addr.msb*80h
5EFD 7F 04       mov  r7,04h    ;window 4
5EFF 12 A4 31    call set_window_addr
                @@exit:
5F02 22          ret
                ;------------------
;:------------- ;:----------------- Init I/O
                ;------------------
                huge_fixed_io_list:
                .if tech_version<ver11sep2017      ;XXXlcdSIZE
                   @@p0Ah  equ 02Bh  ;IO_PLL_dotclk_multiplier  ;\                    ;\note: this is one multiplier, and two dividers (or vice-versa)
                   @@p0Fh  equ 003h  ;IO_PLL_dotclk_divider_1   ; for 240 lines ?     ; (bottom line is that video still works when multiplying all three values by N, eg. 2Bh*5,03h*5,03h*5)
                   @@p16h  equ 003h  ;IO_PLL_16h_cfg            ;/                    ;/
                   @@p19h  equ 083h  ;IO_PLL_19h_used
                   @@what  equ 000h  ;IO_AV_ctrl_whatever_2
                   @@misc  equ 022h  ;IO_LCD_snow_enable_and_misc
                   @@trip  equ 020h  ;IO_LCD_config_FFB2h..FFB4h
                   @@bold  equ 002h  ;IO_60HZ_boldness_contrast
                   @@yuv0h equ 01Ah // @@yuv1h equ 006h // @@yuv2h equ 0D4h // @@yuv3h equ 0D2h
                   @@yuv4h equ 0F1h // @@yuv5h equ 00Eh // @@yuv6h equ 015h // @@yuv7h equ 0E4h
                   @@yuv8h equ 0F6h // @@yuv9h equ 0F1h // @@yuvAh equ 01Bh // @@yuvBh equ 081h

                   @@yy60 equ 003C8h ;frametime/240 ? ;IO_60HZ_15khz_lsb
                   @@xx60 equ 001E3h ;A3h+320 ?       ;IO_60HZ_15khz_div2_lsb
                   @@xa60 equ 00000h ;00h+0           ;IO_60HZ_xloc_av_osd_lsb
                   @@xb60 equ 00044h ;44h+0           ;IO_60HZ_xloc_osd_lsb
                   @@xc60 equ 00043h ;43h+0           ;IO_60HZ_xloc_av_lsb
                   @@xd60 equ 0018Ah ;4Ah+320         ;IO_60HZ_xcrop_end_av_lsb
                   @@ya60 equ 00007h ;07h+0           ;IO_60HZ_yloc_av_osd_lsb
                   @@yb60 equ 00009h ;09h+0           ;IO_60HZ_yloc_osd_lsb
                   @@yc60 equ 00010h ;10h+0           ;IO_60HZ_ycrop_upper_av_lsb
                   @@yd60 equ 00110h ;20h+240         ;IO_60HZ_heavy_flimmer_lsb
                   @@ye   equ 00116h ;26h+240         ;IO_VIDEO_something_1_lsb
                   @@yf   equ 0011Ch ;2Ch+240         ;IO_VIDEO_something_2_lsb
                   @@yy50 equ 00466h                  ;IO_50HZ_15khz_lsb
                   @@xx50 equ 00236h ;F6h+320 ?       ;IO_50HZ_15khz_div2_lsb
                   @@xa50 equ 00002h ;02h+0           ;IO_50HZ_xloc_av_osd_lsb
                   @@xb50 equ 00036h ;36h+0           ;IO_50HZ_xloc_osd_lsb
                   @@xc50 equ 00043h ;43h+0           ;IO_50HZ_xloc_av_lsb
                   @@xd50 equ 00192h ;52h+320         ;IO_50HZ_xcrop_end_av_lsb
                   @@ya50 equ 00008h ;08h+0           ;IO_50HZ_yloc_av_osd_lsb
                   @@yb50 equ 00009h ;09h+0           ;IO_50HZ_yloc_osd_lsb
                   @@yc50 equ 0000Ch ;0Ch+0           ;IO_50HZ_ycrop_upper_av_lsb
                   @@yd50 equ 0010Fh ;1Fh+240         ;IO_50HZ_heavy_flimmer_lsb
                .else ;- - - NEWER firmware...
                   @@p0Ah  equ 0A8h  ;IO_PLL_dotclk_multiplier
                   @@p0Fh  equ 009h  ;IO_PLL_dotclk_divider_1
                   @@p16h  equ 00Ah  ;IO_PLL_16h_cfg
                   @@p19h  equ 0C3h  ;IO_PLL_19h_used
                   @@what  equ 040h  ;IO_AV_ctrl_whatever_2
                   @@misc  equ 023h  ;IO_LCD_snow_enable_and_misc
                   @@trip  equ 010h  ;IO_LCD_config_FFB2h..FFB4h
                   @@bold  equ 000h  ;IO_60HZ_boldness_contrast
                   @@yuv0h equ 011h // @@yuv1h equ 000h // @@yuv2h equ 000h // @@yuv3h equ 0E9h
                   @@yuv4h equ 0E1h // @@yuv5h equ 00Eh // @@yuv6h equ 009h // @@yuv7h equ 0EEh
                   @@yuv8h equ 0F4h // @@yuv9h equ 0F1h // @@yuvAh equ 023h // @@yuvBh equ 081h

                   @@yy60 equ 00358h ;frametime/272 ? ;IO_60HZ_15khz_lsb
                   @@xx60 equ 0022Dh ;4Dh+480 ?       ;IO_60HZ_15khz_div2_lsb
                   @@xa60 equ 00001h ;01h+0           ;IO_60HZ_xloc_av_osd_lsb
                   @@xb60 equ 00006h ;06h+0           ;IO_60HZ_xloc_osd_lsb
                   @@xc60 equ 00027h ;27h+0           ;IO_60HZ_xloc_av_lsb
                   @@xd60 equ 00207h ;27h+480         ;IO_60HZ_xcrop_end_av_lsb
                   @@ya60 equ 00000h ;00h+0           ;IO_60HZ_yloc_av_osd_lsb
                   @@yb60 equ 0000Ah ;0Ah+0           ;IO_60HZ_yloc_osd_lsb
                   @@yc60 equ 00018h ;18h+0           ;IO_60HZ_ycrop_upper_av_lsb
                   @@yd60 equ 00131h ;21h+272         ;IO_60HZ_heavy_flimmer_lsb
                   @@ye   equ 0013Ah ;2Ah+272         ;IO_VIDEO_something_1_lsb
                   @@yf   equ 0013Ch ;2Ch+272         ;IO_VIDEO_something_2_lsb
                   @@yy50 equ 003F6h                  ;IO_50HZ_15khz_lsb
                   @@xx50 equ 00298h ;B8h+480 ?       ;IO_50HZ_15khz_div2_lsb
                   @@xa50 equ 00001h ;01h+0           ;IO_50HZ_xloc_av_osd_lsb
                   @@xb50 equ 00006h ;06h+0           ;IO_50HZ_xloc_osd_lsb
                   @@xc50 equ 00027h ;27h+0           ;IO_50HZ_xloc_av_lsb
                   @@xd50 equ 00207h ;27h+480         ;IO_50HZ_xcrop_end_av_lsb
                   @@ya50 equ 00004h ;04h+0  ;!!!     ;IO_50HZ_yloc_av_osd_lsb
                   @@yb50 equ 0000Ah ;0Ah+0           ;IO_50HZ_yloc_osd_lsb
                   @@yc50 equ 00018h ;18h+0           ;IO_50HZ_ycrop_upper_av_lsb
                   @@yd50 equ 00131h ;21h+272         ;IO_50HZ_heavy_flimmer_lsb
                .endif
                .if lcd_pin_variant<ver11sep2017
                   @@swap equ 005h  ;IO_LCD_color_swap
                .else
                   @@swap equ 000h  ;IO_LCD_color_swap
                .endif
                ;- - -
                .if lcd_rgb_variant=1  ;gamma ramp...
                  @@r00h equ 000h // @@r01h equ 003h // @@r02h equ 006h // @@r03h equ 00Ah
                  @@r04h equ 00Eh // @@r05h equ 014h // @@r06h equ 01Ah // @@r07h equ 021h
                  @@r08h equ 029h // @@r09h equ 034h // @@r0Ah equ 040h // @@r0Bh equ 04Dh
                  @@r0Ch equ 059h // @@r0Dh equ 066h // @@r0Eh equ 073h // @@r0Fh equ 081h
                  @@r10h equ 08Eh // @@r11h equ 09Ch // @@r12h equ 0A7h // @@r13h equ 0B1h
                  @@r14h equ 0BAh // @@r15h equ 0C2h // @@r16h equ 0CAh // @@r17h equ 0D0h
                  @@r18h equ 0D7h // @@r19h equ 0DDh // @@r1Ah equ 0E2h // @@r1Bh equ 0E7h
                  @@r1Ch equ 0ECh // @@r1Dh equ 0F1h // @@r1Eh equ 0F6h // @@r1Fh equ 0FAh
                .else
                  @@r00h equ 000h // @@r01h equ 003h // @@r02h equ 007h // @@r03h equ 00Bh
                  @@r04h equ 010h // @@r05h equ 015h // @@r06h equ 01Bh // @@r07h equ 022h
                  @@r08h equ 02Ah // @@r09h equ 034h // @@r0Ah equ 03Fh // @@r0Bh equ 04Bh
                  @@r0Ch equ 058h // @@r0Dh equ 065h // @@r0Eh equ 072h // @@r0Fh equ 07Eh
                  @@r10h equ 089h // @@r11h equ 096h // @@r12h equ 0A2h // @@r13h equ 0AEh
                  @@r14h equ 0BAh // @@r15h equ 0C4h // @@r16h equ 0CDh // @@r17h equ 0D5h
                  @@r18h equ 0DCh // @@r19h equ 0E2h // @@r1Ah equ 0E7h // @@r1Bh equ 0ECh
                  @@r1Ch equ 0F0h // @@r1Dh equ 0F4h // @@r1Eh equ 0F8h // @@r1Fh equ 0FBh
                .endif
                ;- - -
5F03 FD 0A 2B    dw   IO_PLL_dotclk_multiplier    // db @@p0Ah ;\ ;old/new=2Bh/A8h
5F06 FD 0B 40    dw   IO_PLL_0Bh_used             // db 040h   ;/
5F09 FD 0D F0    dw   IO_PLL_0Dh_cfg              // db 0F0h   ;-
5F0C FD 0F 03    dw   IO_PLL_dotclk_divider_1     // db @@p0Fh ;- ;old/new=03h/09h
5F0F FD 10 04    dw   IO_PLL_10h_cfg              // db 004h   ;-(also set to 04h, too, elsewhere)
5F12 FD 14 03    dw   IO_PLL_dotclk_divider_2     // db 003h   ;\
5F15 FD 15 02    dw   IO_PLL_dotclk_divider_3     // db 002h   ;
5F18 FD 16 03    dw   IO_PLL_16h_cfg              // db @@p16h ;/ ;old/new=03h/0Ah
5F1B FD 1A 08    dw   IO_PLL_1Ah_cfg              // db 008h   ;<-- this first
5F1E FD 19 83    dw   IO_PLL_19h_used             // db @@p19h ;<-- then this? ;old/new=83h/C3h
                ;- - -
5F21 FE 54 00    dw   IO_AV_ctrl_whatever_2       // db @@what ;- ;old/new=00h/40h
5F24 FE 83 FE    dw   IO_AV_config_FE83h          // db 0FEh   ;-
5F27 FE D5 B1    dw   IO_AV_ctrl_sensitivity_1    // db 0B1h   ;-
                .if tech_version>=ver11sep2017
N/A  FE C9 01      dw   IO_AV_config_FEC9h        // db 001h   ;-not needed (it's 01h on power-up anyways)
                .endif
                ;- - -
5F2A FF B0 22    dw   IO_LCD_snow_enable_and_misc // db @@misc ;\ ;old/new=22h/23h
5F2D FF B1 0F    dw   IO_LCD_sharpness_or_so      // db 00Fh   ;
5F30 FF B2 20    dw   IO_LCD_config_FFB2h         // db @@trip ;  ;old/new=20h/10h
5F33 FF B3 20    dw   IO_LCD_config_FFB3h         // db @@trip ;  ;old/new=20h/10h
5F36 FF B4 20    dw   IO_LCD_config_FFB4h         // db @@trip ;/ ;old/new=20h/10h
5F39 FF B7 90    dw   IO_LCD_config_FFB7h         // db 090h   ;- (also set to 90h, too, elsewhere)
                .if tech_version<ver11sep2017  ;OLD VERSION ONLY
5F3C FF CB 2A      dw   IO_LCD_whatever_FFCBh       // db 02Ah   ;<--- initialized in OLD version only (but set to 80h elsewhere in both old+new version)
                .endif
                ;- - -
5F3F FF F0 1A    dw   IO_LCD_config_FFF0h         // db @@yuv0h ;\
5F42 FF F1 06    dw   IO_LCD_config_FFF1h         // db @@yuv1h ;
5F45 FF F2 D4    dw   IO_LCD_config_FFF2h         // db @@yuv2h ;
5F48 FF F3 D2    dw   IO_LCD_config_FFF3h         // db @@yuv3h ;
5F4B FF F4 F1    dw   IO_LCD_config_FFF4h         // db @@yuv4h ;
5F4E FF F5 0E    dw   IO_LCD_config_FFF5h         // db @@yuv5h ;
5F51 FF F6 15    dw   IO_LCD_config_FFF6h         // db @@yuv6h ;
5F54 FF F7 E4    dw   IO_LCD_config_FFF7h         // db @@yuv7h ;
5F57 FF F8 F6    dw   IO_LCD_config_FFF8h         // db @@yuv8h ;
5F5A FF F9 F1    dw   IO_LCD_config_FFF9h         // db @@yuv9h ;
5F5D FF FA 1B    dw   IO_LCD_config_FFFAh         // db @@yuvAh ;
5F60 FF FB 81    dw   IO_LCD_config_FFFBh         // db @@yuvBh ;/
                ;- - -
5F63 FC 00 05    dw   IO_LCD_color_swap           // db @@swap ;- ;old/new=05h/00h ;--- related to "lcd_pin_variant"?
5F66 FC 90 02    dw   IO_VIDEO_control            // db 002h   ;-
5F69 FC 91 01    dw   IO_60HZ_control_lsb         // db 001h   ;\
5F6C FC 92 00    dw   IO_60HZ_control_mid         // db 000h   ;
5F6F FC 93 00    dw   IO_60HZ_control_msb         // db 000h   ;/
                .if tech_version>=ver11sep2017
N/A  FC 94 00      dw   IO_60HZ_internal_unused1  // db 000h   ;\not needed (it's 2x00h on power-up anyways)
N/A  FC 95 00      dw   IO_60HZ_internal_unused2  // db 000h   ;/
                .endif
5F72 FC 98 C8    dw   IO_60HZ_15khz_lsb           // db @@yy60 and 0ffh ;0C8h/058h   ;\
5F75 FC 99 03    dw   IO_60HZ_15khz_msb           // db @@yy60/100h     ;003h/003h   ;
5F78 FC 9A E3    dw   IO_60HZ_15khz_div2_lsb      // db @@xx60 and 0ffh ;0E3h/02Dh   ;
5F7B FC 9B 01    dw   IO_60HZ_15khz_div2_msb      // db @@xx60/100h     ;001h/002h   ;
5F7E FC 9C 00    dw   IO_60HZ_xloc_av_osd_lsb     // db @@xa60 and 0ffh ;000h/001h   ;
5F81 FC 9D 00    dw   IO_60HZ_xloc_av_osd_msb     // db @@xa60/100h     ;000h/000h   ;
5F84 FC 9E 44    dw   IO_60HZ_xloc_osd_lsb        // db @@xb60 and 0ffh ;044h/006h   ;
5F87 FC 9F 00    dw   IO_60HZ_xloc_osd_msb        // db @@xb60/100h     ;000h/000h   ;
5F8A FC A0 43    dw   IO_60HZ_xloc_av_lsb         // db @@xc60 and 0ffh ;043h/027h   ;
5F8D FC A1 00    dw   IO_60HZ_xloc_av_msb         // db @@xc60/100h     ;000h/000h   ;
5F90 FC A2 8A    dw   IO_60HZ_xcrop_end_av_lsb    // db @@xd60 and 0ffh ;08Ah/007h   ;
5F93 FC A3 01    dw   IO_60HZ_xcrop_end_av_msb    // db @@xd60/100h     ;001h/002h   ;
5F96 FC A4 07    dw   IO_60HZ_yloc_av_osd_lsb     // db @@ya60 and 0ffh ;007h/000h   ;
5F99 FC A5 00    dw   IO_60HZ_yloc_av_osd_msb     // db @@ya60/100h     ;000h/000h   ;
5F9C FC A6 09    dw   IO_60HZ_yloc_osd_lsb        // db @@yb60 and 0ffh ;009h/00Ah   ;
5F9F FC A7 00    dw   IO_60HZ_yloc_osd_msb        // db @@yb60/100h     ;000h/000h   ;
5FA2 FC A8 10    dw   IO_60HZ_ycrop_upper_av_lsb  // db @@yc60 and 0ffh ;010h/018h   ;
5FA5 FC A9 00    dw   IO_60HZ_ycrop_upper_av_msb  // db @@yc60/100h     ;000h/000h   ;
5FA8 FC AA 10    dw   IO_60HZ_heavy_flimmer_lsb   // db @@yd60 and 0ffh ;010h/031h   ;
5FAB FC AB 01    dw   IO_60HZ_heavy_flimmer_msb   // db @@yd60/100h     ;001h/001h   ;/
                .if tech_version>=ver11sep2017
N/A  FC B1 14      dw   IO_60HZ_internal_unused3  // db 014h   ;\
N/A  FC B2 00      dw   IO_60HZ_internal_unused4  // db 000h   ;
N/A  FC B3 00      dw   IO_60HZ_internal_unused5  // db 000h   ; not needed (it's 14h,4x00h on power-up anyways)
N/A  FC B4 00      dw   IO_60HZ_internal_unused6  // db 000h   ;
N/A  FC B5 00      dw   IO_60HZ_internal_unused7  // db 000h   ;/
                .endif
5FAE FC B7 16    dw   IO_VIDEO_something_1_lsb    // db @@ye and 0ffh   ;016h/03Ah   ;\
5FB1 FC B8 01    dw   IO_VIDEO_something_1_msb    // db @@ye/100h       ;001h/001h   ;/
5FB4 FC BB 1C    dw   IO_VIDEO_something_2_lsb    // db @@yf and 0ffh   ;01Ch/03Ch   ;\ ;<--
5FB7 FC BC 01    dw   IO_VIDEO_something_2_msb    // db @@yf/100h       ;001h/001h   ;/
5FBA FC BD 01    dw   IO_50HZ_control_lsb         // db 001h   ;\
5FBD FC BE 00    dw   IO_50HZ_control_mid         // db 000h   ;
5FC0 FC BF 00    dw   IO_50HZ_control_msb         // db 000h   ;/
                .if tech_version>=ver11sep2017
N/A  FC C0 00      dw   IO_50HZ_internal_unused1  // db 000h   ;\not needed (it's 2x00h on power-up anyways)
N/A  FC C1 00      dw   IO_50HZ_internal_unused2  // db 000h   ;/
                .endif
5FC3 FC C4 66    dw   IO_50HZ_15khz_lsb           // db @@yy50 and 0ffh ;066h/0F6h   ;\
5FC6 FC C5 04    dw   IO_50HZ_15khz_msb           // db @@yy50/100h     ;004h/003h   ;
5FC9 FC C6 36    dw   IO_50HZ_15khz_div2_lsb      // db @@xx50 and 0ffh ;036h/098h   ;
5FCC FC C7 02    dw   IO_50HZ_15khz_div2_msb      // db @@xx50/100h     ;002h/002h   ;
5FCF FC C8 02    dw   IO_50HZ_xloc_av_osd_lsb     // db @@xa50 and 0ffh ;002h/001h   ;
5FD2 FC C9 00    dw   IO_50HZ_xloc_av_osd_msb     // db @@xa50/100h     ;000h/000h   ;
5FD5 FC CA 36    dw   IO_50HZ_xloc_osd_lsb        // db @@xb50 and 0ffh ;036h/006h   ;
5FD8 FC CB 00    dw   IO_50HZ_xloc_osd_msb        // db @@xb50/100h     ;000h/000h   ;
5FDB FC CC 43    dw   IO_50HZ_xloc_av_lsb         // db @@xc50 and 0ffh ;043h/027h   ;
5FDE FC CD 00    dw   IO_50HZ_xloc_av_msb         // db @@xc50/100h     ;000h/000h   ;
5FE1 FC CE 92    dw   IO_50HZ_xcrop_end_av_lsb    // db @@xd50 and 0ffh ;092h/007h   ;
5FE4 FC CF 01    dw   IO_50HZ_xcrop_end_av_msb    // db @@xd50/100h     ;001h/002h   ;/
N/A             ;dw   IO_50HZ_yloc_av_osd_lsb     // db @@ya50 and 0ffh ;008h/004h   ;\  ;<-- this is initialized elsewhere for whatever reason
5FE7 FC D1 00    dw   IO_50HZ_yloc_av_osd_msb     // db @@ya50/100h     ;000h/000h   ;
5FEA FC D2 09    dw   IO_50HZ_yloc_osd_lsb        // db @@yb50 and 0ffh ;009h/00Ah   ;
5FED FC D3 00    dw   IO_50HZ_yloc_osd_msb        // db @@yb50/100h     ;000h/000h   ;
5FF0 FC D4 0C    dw   IO_50HZ_ycrop_upper_av_lsb  // db @@yc50 and 0ffh ;00Ch/018h   ;
5FF3 FC D5 00    dw   IO_50HZ_ycrop_upper_av_msb  // db @@yc50/100h     ;000h/000h   ;
5FF6 FC D6 0F    dw   IO_50HZ_heavy_flimmer_lsb   // db @@yd50 and 0ffh ;00Fh/031h   ;
5FF9 FC D7 01    dw   IO_50HZ_heavy_flimmer_msb   // db @@yd50/100h     ;001h/001h   ;
                .if tech_version>=ver11sep2017                                       ;
N/A  FC DD 14      dw   IO_50HZ_internal_unused3  // db 014h                         ; ;\
N/A  FC DE 00      dw   IO_50HZ_internal_unused4  // db 000h                         ; ;
N/A  FC DF 00      dw   IO_50HZ_internal_unused5  // db 000h                         ; ; not needed (it's 14h,4x00h on power-up anyways)
N/A  FC E0 00      dw   IO_50HZ_internal_unused6  // db 000h                         ; ;
N/A  FC E1 00      dw   IO_50HZ_internal_unused7  // db 000h                         ; ;/
N/A  FC E4 45      dw   IO_VIDEO_something_4      // db 045h                         ; ;-not needed (set to 45h elsewhere anyways)
                .endif                                                               ;
5FFC FC D0 08    dw   IO_50HZ_yloc_av_osd_lsb     // db @@ya50 and 0ffh ;008h/004h   ;/ ;<--weirdly this is here/last, instead or prior to IO_50HZ_yloc_av_osd_msb
5FFF FC E2 02    dw   IO_50HZ_boldness_contrast   // db 002h   ;-
6002 FC B6 02    dw   IO_60HZ_boldness_contrast   // db @@bold ;- ;old/new=02h/00h  ;set here/now (instead earlier above)
                ;- - -
6005 FB 35 00    dw   IO_OSD_bitmap_transp_misc   // db 000h  ;---
6008 FB 89 00    dw   IO_OSD_screen_position      // db 000h  ;---
                ;- - -
                .macro @@def_ramp
600E FF 01 03    dw   @@base+00h   // db @@r01h  ;\
6011 FF 02 06    dw   @@base+01h   // db @@r02h  ;
6014 FF 03 0A    dw   @@base+02h   // db @@r03h  ;
6017 FF 04 0E    dw   @@base+03h   // db @@r04h  ;
601A FF 05 14    dw   @@base+04h   // db @@r05h  ; gamma ramp
601D FF 06 1A    dw   @@base+05h   // db @@r06h  ;
6020 FF 07 21    dw   @@base+06h   // db @@r07h  ;
6023 FF 08 29    dw   @@base+07h   // db @@r08h  ;
6026 FF 09 34    dw   @@base+08h   // db @@r09h  ;
6029 FF 0A 40    dw   @@base+09h   // db @@r0Ah  ;
602C FF 0B 4D    dw   @@base+0Ah   // db @@r0Bh  ;
602F FF 0C 59    dw   @@base+0Bh   // db @@r0Ch  ;
6032 FF 0D 66    dw   @@base+0Ch   // db @@r0Dh  ;
6035 FF 0E 73    dw   @@base+0Dh   // db @@r0Eh  ;
6038 FF 0F 81    dw   @@base+0Eh   // db @@r0Fh  ;
603B FF 10 8E    dw   @@base+0Fh   // db @@r10h  ;
603E FF 11 9C    dw   @@base+10h   // db @@r11h  ;
6041 FF 12 A7    dw   @@base+11h   // db @@r12h  ;
6044 FF 13 B1    dw   @@base+12h   // db @@r13h  ;
6047 FF 14 BA    dw   @@base+13h   // db @@r14h  ;
604A FF 15 C2    dw   @@base+14h   // db @@r15h  ;
604D FF 16 CA    dw   @@base+15h   // db @@r16h  ;
6050 FF 17 D0    dw   @@base+16h   // db @@r17h  ;
6053 FF 18 D7    dw   @@base+17h   // db @@r18h  ;
6056 FF 19 DD    dw   @@base+18h   // db @@r19h  ;
6059 FF 1A E2    dw   @@base+19h   // db @@r1Ah  ;
605C FF 1B E7    dw   @@base+1Ah   // db @@r1Bh  ;
605F FF 1C EC    dw   @@base+1Bh   // db @@r1Ch  ;
6062 FF 1D F1    dw   @@base+1Ch   // db @@r1Dh  ;
6065 FF 1E F6    dw   @@base+1Dh   // db @@r1Eh  ;
6068 FF 1F FA    dw   @@base+1Eh   // db @@r1Fh  ;/
                .undef @@base
                .endm
                ;- - -
600B FF 00 03    dw   IO_LCD_config_FF00h             // db 003h    ;-
600E FF 01 03 .. @@base equ IO_LCD_gamma_ramp_red+0   // @@def_ramp ;-ramp RED
606B FF 20 03 .. @@base equ IO_LCD_gamma_ramp_green+0 // @@def_ramp ;-ramp GREEN
60C8 FF 3F 03 .. @@base equ IO_LCD_gamma_ramp_blue+0  // @@def_ramp ;-ramp BLUE
                .if tech_version>=ver11sep2017
56DF FF 5E FF      dw   IO_LCD_whatever_FFh_1 // db 0FFh ;\
56E2 FF 5F FF      dw   IO_LCD_whatever_FFh_2 // db 0FFh ; not needed (it's 3xFFh on power-up anyways)
56E5 FF 60 FF      dw   IO_LCD_whatever_FFh_3 // db 0FFh ;/
                .endif
                huge_fixed_io_list_num_entries equ ($-huge_fixed_io_list)/3
                ;------------------
                mode_ratio_io_list:
                                ;with SIX alternate values per port
                                ;selected via "xram_sett_mode"
                                ;(ie. 16:9 or 4:3 or FOUR DUMMY values)


                ;NTSC    525/60  15.734kHz       60Hz
                ;PAL     625/50  15.625kHz       50Hz

                .if tech_version<ver11sep2017   ;XXXlcdSIZE
                  @@w60  equ 0861h  ;wide.scale       224 vs 240 ?   2048*240/229
                  @@w50  equ 085Ch  ;wide.scale
                  @@n60  equ 087Eh  ;normal.scale
                  @@n50  equ 0884h  ;normal.scale   ;ca. 80000h/240     ;888
                  @@x60  equ 10h    ;xloc
                  @@x50  equ 06h    ;xloc
                  @@what equ 00h    ;whatever
                  @@d60  equ 035Bh  ;dummy.scale
                  @@d50  equ 0363h  ;dummy.scale
                  @@dx60 equ 1Dh    ;dummy.xloc
                  @@dx50 equ 0Ch    ;dummy.xloc
                  @@dw60 equ 09h    ;dummy.whatever
                  @@dw50 equ 06h    ;dummy.whatever
                .else
                  @@w60  equ 05AFh  ;wide.scale
                  @@w50  equ 05A7h  ;wide.scale
                  @@n60  equ 0762h  ;normal.scale     ;15kHz*32/272 ?
                  @@n50  equ 0770h  ;normal.scale  ;ca. 80000h/272      ;787
                  @@x60  equ 16h    ;xloc
                  @@x50  equ 0Bh    ;xloc
                  @@what equ 3Ch    ;whatever
                  @@d60  equ 0370h  ;dummy.scale
                  @@d50  equ 037Ah  ;dummy.scale
                  @@dx60 equ 1Dh    ;dummy.xloc
                  @@dx50 equ 08h    ;dummy.xloc
                  @@dw60 equ 00h    ;dummy.whatever
                  @@dw50 equ 02h    ;dummy.whatever
                .endif
6125 FC 96 61 7E dw   IO_60HZ_ratio_whatever_A_lsb      // db @@w60 and 0ffh, @@n60 and 0ffh // .fill 4,1,@@d60 and 0ffh ;61h, 7Eh, 5Bh,5Bh,5Bh,5Bh / 0AFh,62h, 70h,70h,70h,70h ;\
612D FC 97 08 08 dw   IO_60HZ_ratio_whatever_A_msb      // db @@w60/100h    , @@n60/100h     // .fill 4,1,@@d60/100h     ;08h, 08h, 03h,03h,03h,03h / 005h,07h, 03h,03h,03h,03h ;/
6135 FC AC 10 10 dw   IO_60HZ_ratio_xloc_av_8bit        // db @@x60         , @@x60          // .fill 4,1,@@dx60         ;10h, 10h, 1Dh,1Dh,1Dh,1Dh / 016h,16h, 1Dh,1Dh,1Dh,1Dh ;\
613D FC AD 00 00 dw   IO_60HZ_ratio_whatever_B_lsb      // db 00h           , @@what         // .fill 4,1,@@dw60         ;00h, 00h, 09h,09h,09h,09h / 000h,3Ch, 00h,00h,00h,00h ;
6145 FC AE 00 00 dw   IO_60HZ_ratio_whatever_B_msb      // db 00h           , @@what         // .fill 4,1,00h            ;00h, 00h, 00h,00h,00h,00h / 000h,3Ch, 00h,00h,00h,00h ;
614D FC AF 00 00 dw   IO_60HZ_ratio_ycrop_upper_av_8bit // db 00h           , 00h            // .fill 4,1,00h            ;00h, 00h, 00h,00h,00h,00h / 000h,00h, 00h,00h,00h,00h ;
6155 FC B0 00 00 dw   IO_60HZ_ratio_ycrop_lower_av_8bit // db 00h           , 00h            // .fill 4,1,00h            ;00h, 00h, 00h,00h,00h,00h / 000h,00h, 00h,00h,00h,00h ;/
615D FC C2 5C 84 dw   IO_50HZ_ratio_whatever_A_lsb      // db @@w50 and 0ffh, @@n50 and 0ffh // .fill 4,1,@@d50 and 0ffh ;5Ch, 84h, 63h,63h,63h,63h / 0A7h,70h, 7Ah,7Ah,7Ah,7Ah ;\
6165 FC C3 08 08 dw   IO_50HZ_ratio_whatever_A_msb      // db @@w50/100h    , @@n50/100h     // .fill 4,1,@@d50/100h     ;08h, 08h, 03h,03h,03h,03h / 005h,07h, 03h,03h,03h,03h ;/
616D FC D8 06 06 dw   IO_50HZ_ratio_xloc_av_8bit        // db @@x50         , @@x50          // .fill 4,1,@@dx50         ;06h, 06h, 0Ch,0Ch,0Ch,0Ch / 00Bh,0Bh, 08h,08h,08h,08h ;\
6175 FC D9 00 00 dw   IO_50HZ_ratio_whatever_B_lsb      // db 00h           , @@what         // .fill 4,1,@@dw50         ;00h, 00h, 06h,06h,06h,06h / 000h,3Ch, 02h,02h,02h,02h ;
617D FC DA 00 00 dw   IO_50HZ_ratio_whatever_B_msb      // db 00h           , @@what         // .fill 4,1,00h            ;00h, 00h, 00h,00h,00h,00h / 000h,3Ch, 00h,00h,00h,00h ;
6185 FC DB 00 00 dw   IO_50HZ_ratio_ycrop_upper_av_8bit // db 00h           , 00h            // .fill 4,1,00h            ;00h, 00h, 00h,00h,00h,00h / 000h,00h, 00h,00h,00h,00h ;
618D FC DC 00 00 dw   IO_50HZ_ratio_ycrop_lower_av_8bit // db 00h           , 00h            // .fill 4,1,00h            ;00h, 00h, 00h,00h,00h,00h / 000h,00h, 00h,00h,00h,00h ;/
                mode_ratio_io_list_num_entries equ ($-mode_ratio_io_list)/8
                ;------------------
                basic_calibration_io_list:
                                ;with EIGHT alternate values per port?
                ;- - - port                 //    PAL -   -  NTSC -   -   -   -
                .if lcd_rgb_variant=1
6195 FF D3 7E    dw IO_LCD_basic_contrast   // db 7Eh,80h,80h,7Eh,80h,80h,80h,80h
619F FF D4 8E    dw IO_LCD_basic_brightness // db 8Eh,80h,80h,8Eh,80h,80h,80h,80h
61A9 FF D5 00    dw IO_LCD_basic_tint       // db 00h,00h,00h,00h,00h,00h,00h,00h
61B3 FF D6 38    dw IO_LCD_basic_saturation // db 38h,55h,55h,38h,55h,55h,55h,55h
                .else
                 dw IO_LCD_basic_contrast   // db 80h,80h,80h,80h,80h,80h,80h,80h
                 dw IO_LCD_basic_brightness // db 80h,80h,80h,80h,80h,80h,80h,80h
                 dw IO_LCD_basic_tint       // db 00h,00h,00h,00h,00h,00h,00h,00h
                 dw IO_LCD_basic_saturation // db 30h,36h,36h,30h,36h,36h,36h,36h
                .endif
                basic_calibration_io_list_num_entries equ ($-basic_calibration_io_list)/10
                ;------------------
                extra_fixed_io_list:     ;this list is issued TWICE
                .if lcd_pin_variant=1
                  @@pin  equ 11h
                  @@mode equ 0Bh
                .else
                  @@pin  equ 22h
                  @@mode equ 0Fh
                .endif
61BD FD 32 11    dw   IO_PIN_P10_P11_spi_flash     // db 11h      ;\
61C0 FD 33 11    dw   IO_PIN_P12_P13_spi_flash     // db 11h      ;
61C3 FD 34 11    dw   IO_PIN_P14_P15_lcd           // db @@pin    ;
61C6 FD 35 11    dw   IO_PIN_P16_P17_lcd           // db @@pin    ;
61C9 FD 36 11    dw   IO_PIN_P20_P21_lcd           // db @@pin    ;
61CC FD 37 11    dw   IO_PIN_P22_GPIO0_lcd         // db @@pin    ;
61CF FD 38 11    dw   IO_PIN_GPIO1_GPIO2_lcd       // db @@pin    ; 16 bytes, set to 11h
61D2 FD 39 11    dw   IO_PIN_GPIO3_GPIO4_lcd       // db @@pin    ;
61D5 FD 3A 11    dw   IO_PIN_P23_P24_lcd           // db @@pin    ;
61D8 FD 3B 11    dw   IO_PIN_P25_P26_lcd           // db @@pin    ;
61DB FD 3C 11    dw   IO_PIN_GPIO5_GPIO6_lcd       // db @@pin    ;
61DE FD 3D 11    dw   IO_PIN_GPIO7_GPIO8_lcd       // db @@pin    ;
61E1 FD 3E 11    dw   IO_PIN_GPIO9_GPIO10_lcd      // db @@pin    ;
61E4 FD 3F 11    dw   IO_PIN_P27_P30_lcd           // db @@pin    ;
61E7 FD 40 11    dw   IO_PIN_P31_P32_lcd           // db @@pin    ;
61EA FD 41 11    dw   IO_PIN_P33_P34_lcd           // db @@pin    ;/
61ED FD 44 01    dw   IO_PIN_maybe1_01h            // db 01h ;<-- ;\
61F0 FD 45 00    dw   IO_PIN_maybe2_zero           // db 00h      ;
61F3 FD 46 00    dw   IO_PIN_maybe3_zero           // db 00h      ;
61F6 FD 47 00    dw   IO_PIN_maybe4_zero           // db 00h      ; 8 bytes, first is 01h
61F9 FD 48 00    dw   IO_PIN_maybe5_zero           // db 00h      ;          others are 00h
61FC FD 49 00    dw   IO_PIN_maybe6_zero           // db 00h      ;
61FF FD 4A 00    dw   IO_PIN_maybe7_zero           // db 00h      ;
6202 FD 4B 00    dw   IO_PIN_maybe8_zero           // db 00h      ;/
6205 FD 50 0B    dw   IO_whatever_FD50h            // db @@mode   ;-whatever (was previously set to 00h via init_part_4_subsubfunc)
                extra_fixed_io_list_num_entries equ ($-extra_fixed_io_list)/3
                ;------------------
                xxx_6208h:                                  ;\
6208 00          db   00h   ;=input                         ;
                ;---                                        ;
                indirect_huge_fixed_io_list:                ;
6209 FF 5F 03    db   0FFh // dw huge_fixed_io_list         ; 0Ah bytes
                ;---                                        ;
                indirect_mode_ratio_io_list:                ;
620C FF 61 25    db   0FFh // dw mode_ratio_io_list         ;
                ;---                                        ;
                indirect_basic_calibration_io_list:         ;
620F FF 61 95    db   0FFh // dw basic_calibration_io_list  ;/
                ;------------------
                vcom_ac_table:
6212 00          db   000h      ;VCOM_AC table (with only ONE entry implemented)
                ;------------------
6213 00          nop
6214 00          nop
6215 00          nop
6216 00          nop
6217 00          nop
                ;------------------
;:------------- ;:----------------- OSD code (draw window/draw bar)
                ;------------------
                do_draw_menu_window:
6218 90 00 B8    mov  dptr,xram_current_menu
621B E0          movx a,[dptr]
621C FF          mov  r7,a
621D 75 F0 03    mov  b,03h
6220 A4          mul  a,b
6221 24 4C       add  a,gui_menu_list and 0ffh
6223 F5 82       mov  dpl,a
6225 E4          clr  a
6226 34 2C       adc  a,gui_menu_list/100h
6228 F5 83       mov  dph,a
622A E4          clr  a
622B 93          movc a,[a+dptr]
622C FB          mov  r3,a
622D 74 01       mov  a,01h
622F 93          movc a,[a+dptr]
6230 FA          mov  r2,a
6231 74 02       mov  a,02h
6233 93          movc a,[a+dptr]
6234 F9          mov  r1,a
6235 90 00 0F    mov  dptr,000Fh ;idxMenu___0Fh
6238 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
623B EA          mov  a,r2
623C 49          or   a,r1
623D 4B          or   a,r3
623E 60 2F       jz   a,@@_626Fh
6240 EF          mov  a,r7
6241 75 F0 03    mov  b,03h
6244 A4          mul  a,b
6245 24 4C       add  a,gui_menu_list and 0ffh
6247 F5 82       mov  dpl,a
6249 E4          clr  a
624A 34 2C       adc  a,gui_menu_list/100h
624C F5 83       mov  dph,a
624E E4          clr  a
624F 93          movc a,[a+dptr]
6250 FB          mov  r3,a
6251 74 01       mov  a,01h
6253 93          movc a,[a+dptr]
6254 FA          mov  r2,a
6255 74 02       mov  a,02h
6257 93          movc a,[a+dptr]
6258 F9          mov  r1,a
6259 90 00 0F    mov  dptr,000Fh ;idxMenu___0Fh
625C 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
625F 12 4D B1    call jmp_r2r1  ;----->
6262 78 7E       mov  r0,xram_tmp__7Eh and 0ffh ;\
6264 7C 00       mov  r4,xram_tmp__7Eh/100h     ; dst
6266 7D 01       mov  r5,01h           ;area    ;/
6268 7E 00       mov  r6,00h  ;\len 5
626A 7F 05       mov  r7,05h  ;/
626C 12 49 C1    call anymem_generic_memcopy
                @@_626Fh:
626F 90 00 B8    mov  dptr,xram_current_menu
6272 E0          movx a,[dptr]
6273 75 F0 03    mov  b,03h
6276 A4          mul  a,b
6277 24 4C       add  a,gui_menu_list and 0ffh
6279 F5 82       mov  dpl,a
627B E4          clr  a
627C 34 2C       adc  a,gui_menu_list/100h
627E F5 83       mov  dph,a
6280 E4          clr  a
6281 93          movc a,[a+dptr]
6282 FB          mov  r3,a
6283 74 01       mov  a,01h
6285 93          movc a,[a+dptr]
6286 FA          mov  r2,a
6287 74 02       mov  a,02h
6289 93          movc a,[a+dptr]
628A F9          mov  r1,a
628B 90 00 24    mov  dptr,0024h ;idxMenu___24h
628E 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
6291 30 E0 03    jz   a.0,@@_6297h
6294 02 BF 26    jmp  osd_disable_all_windows_and_whatever     ;------>
                ;---
                @@_6297h:
6297 90 00 B8    mov  dptr,xram_current_menu
629A E0          movx a,[dptr]
629B 75 F0 03    mov  b,03h
629E A4          mul  a,b
629F 24 4C       add  a,gui_menu_list and 0ffh
62A1 F5 82       mov  dpl,a
62A3 E4          clr  a
62A4 34 2C       adc  a,gui_menu_list/100h
62A6 F5 83       mov  dph,a
62A8 E4          clr  a
62A9 93          movc a,[a+dptr]
62AA FB          mov  r3,a
62AB 74 01       mov  a,01h
62AD 93          movc a,[a+dptr]
62AE FA          mov  r2,a
62AF 74 02       mov  a,02h
62B1 93          movc a,[a+dptr]
62B2 F9          mov  r1,a
62B3 90 00 24    mov  dptr,0024h ;idxMenu___24h
62B6 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
62B9 20 E2 03    jnz  a.2,@@_62BFh
62BC 02 63 E7    jmp  @@_63E7h
                ;---
                @@_62BFh:
62BF 90 00 7E    mov  dptr,xram_tmp__7Eh
62C2 E0          movx a,[dptr]
62C3 20 E1 03    jnz  a.1,@@_62C9h
62C6 02 63 E7    jmp  @@_63E7h
                ;---
                @@_62C9h:
62C9 12 BF 26    call osd_disable_all_windows_and_whatever
62CC 90 00 B8    mov  dptr,xram_current_menu
62CF E0          movx a,[dptr]
62D0 75 F0 03    mov  b,03h
62D3 A4          mul  a,b
62D4 24 4C       add  a,gui_menu_list and 0ffh
62D6 F5 82       mov  dpl,a
62D8 E4          clr  a
62D9 34 2C       adc  a,gui_menu_list/100h
62DB F5 83       mov  dph,a
62DD E4          clr  a
62DE 93          movc a,[a+dptr]
62DF FB          mov  r3,a
62E0 74 01       mov  a,01h
62E2 93          movc a,[a+dptr]
62E3 FA          mov  r2,a
62E4 74 02       mov  a,02h
62E6 93          movc a,[a+dptr]
62E7 F9          mov  r1,a
62E8 90 00 0B    mov  dptr,000Bh ;idxMenuWindowNo                       ;\
62EB 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr            ;
62EE FF          mov  r7,a                                              ;
62EF 12 9D C8    call osd_zerofill_window_r7  ;in: r7=window            ;/
62F2 90 00 B8    mov  dptr,xram_current_menu
62F5 E0          movx a,[dptr]
62F6 75 F0 03    mov  b,03h
62F9 A4          mul  a,b
62FA 24 4C       add  a,gui_menu_list and 0ffh
62FC F5 82       mov  dpl,a
62FE E4          clr  a
62FF 34 2C       adc  a,gui_menu_list/100h
6301 F5 83       mov  dph,a
6303 E4          clr  a
6304 93          movc a,[a+dptr]
6305 FB          mov  r3,a
6306 74 01       mov  a,01h
6308 93          movc a,[a+dptr]
6309 FA          mov  r2,a
630A 74 02       mov  a,02h
630C 93          movc a,[a+dptr]
630D F9          mov  r1,a
630E 90 00 07    mov  dptr,0007h ;idxMenuWindowCx
6311 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
6314 FF          mov  r7,a    ;<-- size_x
6315 90 00 08    mov  dptr,0008h ;idxMenuWindowCy
6318 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
631B FD          mov  r5,a    ;<-- size.y
631C 12 AD BD    call set_window_size_x_y
631F 90 00 B8    mov  dptr,xram_current_menu
6322 E0          movx a,[dptr]
6323 75 F0 03    mov  b,03h
6326 A4          mul  a,b
6327 24 4C       add  a,gui_menu_list and 0ffh
6329 F5 82       mov  dpl,a
632B E4          clr  a
632C 34 2C       adc  a,gui_menu_list/100h
632E F5 83       mov  dph,a
6330 E4          clr  a
6331 93          movc a,[a+dptr]
6332 FB          mov  r3,a
6333 74 01       mov  a,01h
6335 93          movc a,[a+dptr]
6336 FA          mov  r2,a
6337 74 02       mov  a,02h
6339 93          movc a,[a+dptr]
633A F9          mov  r1,a
                ;- - - - - -
633B 90 00 03    mov  dptr,0003h ;idxMenuWindowX
633E 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
6341 FF          mov  r7,a
6342 90 00 7F    mov  dptr,xram_tmp__7Fh
6345 E0          movx a,[dptr]
6346 FC          mov  r4,a
6347 A3          inc  dptr ;=xram_tmp__80h
6348 E0          movx a,[dptr]
6349 FD          mov  r5,a
634A C3          clr  c
634B EF          mov  a,r7
634C 9D          sbc  a,r5
634D FF          mov  r7,a      ;\
634E E5 F0       mov  a,b       ; r6r7 = 1st value (xloc)
6350 9C          sbc  a,r4      ;
6351 FE          mov  r6,a      ;/
6352 90 00 05    mov  dptr,0005h ;idxMenuWindowY
6355 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
6358 FD          mov  r5,a
6359 90 00 81    mov  dptr,xram_tmp__81h
635C E0          movx a,[dptr]
635D FA          mov  r2,a
635E A3          inc  dptr ;=xram_tmp__82h
635F E0          movx a,[dptr]
6360 FB          mov  r3,a
6361 C3          clr  c
6362 ED          mov  a,r5
6363 9B          sbc  a,r3
6364 FD          mov  r5,a      ;\
6365 E5 F0       mov  a,b       ; r4r5 = 2nd value (yloc)
6367 9A          sbc  a,r2      ;
6368 FC          mov  r4,a      ;/
6369 12 7F 4B    call set_window_position_x_y
                ;- - - - - -
636C 90 00 B8    mov  dptr,xram_current_menu
636F E0          movx a,[dptr]
6370 75 F0 03    mov  b,03h
6373 A4          mul  a,b
6374 24 4C       add  a,gui_menu_list and 0ffh
6376 F5 82       mov  dpl,a
6378 E4          clr  a
6379 34 2C       adc  a,gui_menu_list/100h
637B F5 83       mov  dph,a
637D E4          clr  a
637E 93          movc a,[a+dptr]
637F FB          mov  r3,a
6380 74 01       mov  a,01h
6382 93          movc a,[a+dptr]
6383 FA          mov  r2,a
6384 74 02       mov  a,02h
6386 93          movc a,[a+dptr]
6387 F9          mov  r1,a
6388 90 00 0A    mov  dptr,000Ah ;idxMenuWinAttrH               ;\
638B 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
638E C4          swap a                                         ;
638F 54 F0       and  a,0F0h     ;<-- attr.msbs                 ; window attr
6391 FF          mov  r7,a                                      ; (always 00h)
6392 90 00 09    mov  dptr,0009h ;idxMenuWinAttrL               ;
6395 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
6398 4F          or   a,r7       ;<-- attr.lsbs (+msbs)         ;
6399 FF          mov  r7,a                                      ;
639A 12 9F 2C    call set_window_attr  ;in: r7 (=00h)           ;/
                ;- - - - - -
639D 90 00 B8    mov  dptr,xram_current_menu
63A0 E0          movx a,[dptr]
63A1 FF          mov  r7,a
63A2 75 F0 03    mov  b,03h
63A5 A4          mul  a,b
63A6 24 4C       add  a,gui_menu_list and 0ffh
63A8 F5 82       mov  dpl,a
63AA E4          clr  a
63AB 34 2C       adc  a,gui_menu_list/100h
63AD F5 83       mov  dph,a
63AF E4          clr  a
63B0 93          movc a,[a+dptr]
63B1 FB          mov  r3,a
63B2 74 01       mov  a,01h
63B4 93          movc a,[a+dptr]
63B5 FA          mov  r2,a
63B6 74 02       mov  a,02h
63B8 93          movc a,[a+dptr]
63B9 F9          mov  r1,a
63BA 90 00 12    mov  dptr,0012h ;idxMenu___12h
63BD 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
63C0 EA          mov  a,r2
63C1 49          or   a,r1
63C2 4B          or   a,r3
63C3 60 22       jz   a,@@_63E7h
63C5 EF          mov  a,r7
63C6 75 F0 03    mov  b,03h
63C9 A4          mul  a,b
63CA 24 4C       add  a,gui_menu_list and 0ffh
63CC F5 82       mov  dpl,a
63CE E4          clr  a
63CF 34 2C       adc  a,gui_menu_list/100h
63D1 F5 83       mov  dph,a
63D3 E4          clr  a
63D4 93          movc a,[a+dptr]
63D5 FB          mov  r3,a
63D6 74 01       mov  a,01h
63D8 93          movc a,[a+dptr]
63D9 FA          mov  r2,a
63DA 74 02       mov  a,02h
63DC 93          movc a,[a+dptr]
63DD F9          mov  r1,a
63DE 90 00 12    mov  dptr,0012h ;idxMenu___12h
63E1 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
63E4 12 4D B1    call jmp_r2r1  ;----->
                @@_63E7h:
                ;- - - -
63E7 90 00 B8    mov  dptr,xram_current_menu
63EA E0          movx a,[dptr]
63EB FF          mov  r7,a
63EC 75 F0 03    mov  b,03h
63EF A4          mul  a,b
63F0 24 4C       add  a,gui_menu_list and 0ffh
63F2 F5 82       mov  dpl,a
63F4 E4          clr  a
63F5 34 2C       adc  a,gui_menu_list/100h
63F7 F5 83       mov  dph,a
63F9 E4          clr  a
63FA 93          movc a,[a+dptr]
63FB FB          mov  r3,a
63FC 74 01       mov  a,01h
63FE 93          movc a,[a+dptr]
63FF FA          mov  r2,a
6400 74 02       mov  a,02h
6402 93          movc a,[a+dptr]
6403 F9          mov  r1,a
6404 90 00 15    mov  dptr,0015h ;idxMenu___15h
6407 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
640A EA          mov  a,r2
640B 49          or   a,r1
640C 4B          or   a,r3
640D 60 26       jz   a,@@_6435h
640F EF          mov  a,r7
6410 75 F0 03    mov  b,03h
6413 A4          mul  a,b
6414 24 4C       add  a,gui_menu_list and 0ffh
6416 F5 82       mov  dpl,a
6418 E4          clr  a
6419 34 2C       adc  a,gui_menu_list/100h
641B F5 83       mov  dph,a
641D E4          clr  a
641E 93          movc a,[a+dptr]
641F FB          mov  r3,a
6420 74 01       mov  a,01h
6422 93          movc a,[a+dptr]
6423 FA          mov  r2,a
6424 74 02       mov  a,02h
6426 93          movc a,[a+dptr]
6427 F9          mov  r1,a
6428 90 00 15    mov  dptr,0015h ;idxMenu___15h
642B 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
642E 7D 80       mov  r5,80h
6430 7C 00       mov  r4,00h
6432 12 90 2C    call xxx_902Ch
                @@_6435h:
                ;- - - -
6435 90 00 B8    mov  dptr,xram_current_menu
6438 E0          movx a,[dptr]
6439 FF          mov  r7,a
643A 75 F0 03    mov  b,03h
643D A4          mul  a,b
643E 24 4C       add  a,gui_menu_list and 0ffh
6440 F5 82       mov  dpl,a
6442 E4          clr  a
6443 34 2C       adc  a,gui_menu_list/100h
6445 F5 83       mov  dph,a
6447 E4          clr  a
6448 93          movc a,[a+dptr]
6449 FB          mov  r3,a
644A 74 01       mov  a,01h
644C 93          movc a,[a+dptr]
644D FA          mov  r2,a
644E 74 02       mov  a,02h
6450 93          movc a,[a+dptr]
6451 F9          mov  r1,a
6452 90 00 18    mov  dptr,0018h ;idxMenu___18h
6455 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
6458 EA          mov  a,r2
6459 49          or   a,r1
645A 4B          or   a,r3
645B 60 26       jz   a,@@_6483h
645D EF          mov  a,r7
645E 75 F0 03    mov  b,03h
6461 A4          mul  a,b
6462 24 4C       add  a,gui_menu_list and 0ffh
6464 F5 82       mov  dpl,a
6466 E4          clr  a
6467 34 2C       adc  a,gui_menu_list/100h
6469 F5 83       mov  dph,a
646B E4          clr  a
646C 93          movc a,[a+dptr]
646D FB          mov  r3,a
646E 74 01       mov  a,01h
6470 93          movc a,[a+dptr]
6471 FA          mov  r2,a
6472 74 02       mov  a,02h
6474 93          movc a,[a+dptr]
6475 F9          mov  r1,a
6476 90 00 18    mov  dptr,0018h ;idxMenu___18h
6479 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
647C 7D 80       mov  r5,80h
647E 7C 00       mov  r4,00h
6480 12 8C 9B    call osd_write_string_type_A
                @@_6483h:
                ;- - - -
6483 E4          clr  a
6484 90 00 83    mov  dptr,xram_tmp__83h
6487 F0          movx [dptr],a
                @@_6488h:                               ;lop......
6488 90 00 B8    mov  dptr,xram_current_menu
648B E0          movx a,[dptr]
648C 75 F0 03    mov  b,03h
648F A4          mul  a,b
6490 24 4C       add  a,gui_menu_list and 0ffh
6492 F5 82       mov  dpl,a
6494 E4          clr  a
6495 34 2C       adc  a,gui_menu_list/100h
6497 F5 83       mov  dph,a
6499 E4          clr  a
649A 93          movc a,[a+dptr]
649B FB          mov  r3,a
649C 74 01       mov  a,01h
649E 93          movc a,[a+dptr]
649F FA          mov  r2,a
64A0 74 02       mov  a,02h
64A2 93          movc a,[a+dptr]
64A3 F9          mov  r1,a
64A4 90 00 1E    mov  dptr,001Eh ;idxMenuNumItems
64A7 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
64AA FF          mov  r7,a
64AB 90 00 83    mov  dptr,xram_tmp__83h
64AE E0          movx a,[dptr]
64AF C3          clr  c
64B0 9F          sbc  a,r7
64B1 50 18       jnc  @@_64CBh
64B3 7C 00       mov  r4,00h
64B5 7D 80       mov  r5,80h
64B7 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
64BA 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
64BD 90 00 83    mov  dptr,xram_tmp__83h
64C0 12 71 8A    call xxx_718Ah              ;XXXXXXXXXX Item+0 ?   ;idxItemTxtName ?
64C3 90 00 83    mov  dptr,xram_tmp__83h
64C6 E0          movx a,[dptr]
64C7 04          inc  a
64C8 F0          movx [dptr],a
64C9 80 BD       sjmp @@_6488h                          ;......lop
                ;---
                @@_64CBh:                               ;      lop done
64CB 90 00 B8    mov  dptr,xram_current_menu
64CE E0          movx a,[dptr]
64CF 75 F0 03    mov  b,03h
64D2 A4          mul  a,b
64D3 24 4C       add  a,gui_menu_list and 0ffh
64D5 F5 82       mov  dpl,a
64D7 E4          clr  a
64D8 34 2C       adc  a,gui_menu_list/100h
64DA F5 83       mov  dph,a
64DC E4          clr  a
64DD 93          movc a,[a+dptr]
64DE FB          mov  r3,a
64DF 74 01       mov  a,01h
64E1 93          movc a,[a+dptr]
64E2 FA          mov  r2,a
64E3 74 02       mov  a,02h
64E5 93          movc a,[a+dptr]
64E6 F9          mov  r1,a
64E7 90 00 0B    mov  dptr,000Bh ;idxMenuWindowNo
64EA 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
64ED FF          mov  r7,a                                      ;\enable window
64EE 12 BC 55    call osd_enable_window_r7                      ;/
64F1 22          ret
                ;------------------
                osd_draw_bar:     ;HUGE CRAP
                 ;in: r3    = width/range (usually 100 decimal)
                 ;in: r5    = xloc
                 ;in: r7    = yloc
                 ;in: [iram_tmp__35h] = attr
                 ;in: [iram_tmp__36h] = value (usually 0..100 decimal)
                 ;in: ...
                 ;- - -
64F2 8D 33       mov  [iram_tmp__33h],r5   ;xloc
64F4 8B 34       mov  [iram_tmp__34h],r3   ;width/range (usually 100 decimal)
64F6 AC 07       mov  r4,r7(0)   ;yloc
64F8 12 7B D8    call get_window_addr   ;out:r6r7
64FB 90 00 86    mov  dptr,xram_tmp__86h
64FE 12 AC 70    call get_window_width  ;out:[dptr]=addr, r6r7=width
6501 AD 04       mov  r5,r4(0)   ;yloc
6503 7C 00       mov  r4,00h
6505 12 4A 94    call multiply_r6r7_by_r4r5
6508 EF          mov  a,r7
6509 25 33       add  a,[iram_tmp__33h]    ;xloc
650B FF          mov  r7,a
650C EC          mov  a,r4
650D 3E          adc  a,r6
650E FE          mov  r6,a
650F 90 00 8C    mov  dptr,xram_tmp__8Ch
6512 F0          movx [dptr],a
6513 A3          inc  dptr ;=xram_tmp__8Dh
6514 EF          mov  a,r7
6515 F0          movx [dptr],a
6516 90 00 87    mov  dptr,xram_tmp__87h
6519 E0          movx a,[dptr]
651A 2F          add  a,r7
651B F0          movx [dptr],a
651C 90 00 86    mov  dptr,xram_tmp__86h
651F E0          movx a,[dptr]
6520 3E          adc  a,r6
6521 F0          movx [dptr],a
6522 E0          movx a,[dptr]
6523 FE          mov  r6,a
6524 A3          inc  dptr ;=xram_tmp__87h
6525 E0          movx a,[dptr]
6526 FF          mov  r7,a
6527 A3          inc  dptr ;=xram_tmp__88h
6528 EE          mov  a,r6
6529 F0          movx [dptr],a
652A A3          inc  dptr ;=xram_tmp__89h
652B EF          mov  a,r7
652C F0          movx [dptr],a
652D EE          mov  a,r6
652E 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
6531 F0          movx [dptr],a
6532 90 00 86    mov  dptr,xram_tmp__86h
6535 A3          inc  dptr ;=xram_tmp__87h
6536 E0          movx a,[dptr]
6537 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb
653A F0          movx [dptr],a
653B 90 00 B8    mov  dptr,xram_current_menu
653E E0          movx a,[dptr]
653F 75 F0 03    mov  b,03h
6542 A4          mul  a,b
6543 24 4C       add  a,gui_menu_list and 0ffh
6545 F5 82       mov  dpl,a
6547 E5 F0       mov  a,b
6549 34 2C       adc  a,gui_menu_list/100h
654B F5 83       mov  dph,a
654D E4          clr  a
654E 93          movc a,[a+dptr]
654F FB          mov  r3,a
6550 74 01       mov  a,01h
6552 93          movc a,[a+dptr]
6553 FA          mov  r2,a
6554 74 02       mov  a,02h
6556 93          movc a,[a+dptr]
6557 F9          mov  r1,a
6558 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
655B 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
655E FB          mov  r3,a        ;menu.id
655F B4 13 04    jne  a,MenuID_13h_QuicklyVolume,@@_6566h       ;\
6562 7F 01       mov  r7,01h                                    ;
6564 80 02       sjmp @@_6568h                                  ;
                ;---                                            ;
                @@_6566h:                                       ;
6566 7F 00       mov  r7,00h                                    ;
                @@_6568h:                                       ;/
6568 EF          mov  a,r7
6569 AF 36       mov  r7,[iram_tmp__36h]
656B 7E 00       mov  r6,00h
656D 7C 00       mov  r4,00h
656F 60 04       jz   a,@@_6575h                                ;\
6571 7D 30       mov  r5,30h                                    ;
6573 80 02       sjmp @@_6577h                                  ;
                ;---                                            ;
                @@_6575h:                                       ;
6575 7D 38       mov  r5,38h                                    ;
                @@_6577h:                                       ;/
6577 12 4A 94    call multiply_r6r7_by_r4r5
657A AD 34       mov  r5,[iram_tmp__34h]  ;width/range (usually 100 decimal)
657C 12 4A A6    call divide_r6r7_by_r4r5
657F 8F 37       mov  [iram_tmp__37h],r7
6581 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb
6584 74 02       mov  a,02h
6586 F0          movx [dptr],a
6587 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb
658A 74 83       mov  a,83h
658C F0          movx [dptr],a
658D EB          mov  a,r3        ;menu.id
658E B4 13 04    jne  a,MenuID_13h_QuicklyVolume,@@_6595h       ;\
6591 7F 01       mov  r7,01h          ;1=volume                 ;
6593 80 02       sjmp @@_6597h                                  ;
                ;---                                            ;
                @@_6595h:                                       ;
6595 7F 00       mov  r7,00h          ;0=normal                 ;
                @@_6597h:                                       ;
6597 EF          mov  a,r7                                      ;/
6598 70 03       jnz  a,@@draw_volume_bar
659A 02 66 55    jmp  @@draw_normal_bar   ;----->
                ;--- --- ---
                @@draw_volume_bar:
659D E4          clr  a
659E 90 00 8A    mov  dptr,xram_tmp__8Ah
65A1 F0          movx [dptr],a
65A2 A3          inc  dptr ;=xram_tmp__8Bh
65A3 F0          movx [dptr],a
                @@draw_volume_lop:                   ;lop......................
65A4 90 00 86    mov  dptr,xram_tmp__86h
65A7 E0          movx a,[dptr]
65A8 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
65AB F0          movx [dptr],a
65AC E5 37       mov  a,[iram_tmp__37h]
65AE D3          set  c
65AF 94 00       sbc  a,00h
65B1 40 56       jc   @@_6609h            ;------>
65B3 E5 37       mov  a,[iram_tmp__37h]
65B5 94 04       sbc  a,04h
65B7 40 1C       jc   @@_65D5h
65B9 90 5B 86    mov  dptr,bar_tileno_288h
65BC E4          clr  a
65BD 93          movc a,[a+dptr]
65BE FC          mov  r4,a
65BF 74 01       mov  a,01h
65C1 93          movc a,[a+dptr]
65C2 FD          mov  r5,a
65C3 EC          mov  a,r4
65C4 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb
65C7 F0          movx [dptr],a
65C8 ED          mov  a,r5
65C9 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb
65CC F0          movx [dptr],a
65CD 74 FC       mov  a,0FCh
65CF 25 37       add  a,[iram_tmp__37h]
65D1 F5 37       mov  [iram_tmp__37h],a
65D3 80 52       sjmp @@draw_volume_next
                ;--- ---
                @@_65D5h:
65D5 E5 37       mov  a,[iram_tmp__37h]
65D7 54 03       and  a,03h
65D9 F5 37       mov  [iram_tmp__37h],a
65DB 25 E0       add  a,a
65DD 24 7E       add  a,bar_tileno_284h_thru_287h and 0ffh
65DF F5 82       mov  dpl,a
65E1 E4          clr  a
65E2 34 5B       adc  a,bar_tileno_284h_thru_287h/100h
65E4 F5 83       mov  dph,a
65E6 E4          clr  a
65E7 93          movc a,[a+dptr]
65E8 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb
65EB F0          movx [dptr],a
65EC E5 37       mov  a,[iram_tmp__37h]
65EE 54 03       and  a,03h
65F0 F5 37       mov  [iram_tmp__37h],a
65F2 25 E0       add  a,a
65F4 24 7E       add  a,bar_tileno_284h_thru_287h and 0ffh
65F6 F5 82       mov  dpl,a
65F8 E4          clr  a
65F9 34 5B       adc  a,bar_tileno_284h_thru_287h/100h
65FB F5 83       mov  dph,a
65FD 74 01       mov  a,01h
65FF 93          movc a,[a+dptr]
6600 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb
6603 F0          movx [dptr],a
6604 E4          clr  a
6605 F5 37       mov  [iram_tmp__37h],a
6607 80 1E       sjmp @@draw_volume_next
                ;--- --- ---
                @@_6609h:
6609 E5 37       mov  a,[iram_tmp__37h]
660B 25 E0       add  a,a
660D 24 7E       add  a,bar_tileno_284h_thru_287h and 0ffh
660F F5 82       mov  dpl,a
6611 E4          clr  a
6612 34 5B       adc  a,bar_tileno_284h_thru_287h/100h
6614 F5 83       mov  dph,a
6616 E4          clr  a
6617 93          movc a,[a+dptr]
6618 FC          mov  r4,a
6619 74 01       mov  a,01h
661B 93          movc a,[a+dptr]
661C FD          mov  r5,a
661D EC          mov  a,r4
661E 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb
6621 F0          movx [dptr],a
6622 ED          mov  a,r5
6623 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb
6626 F0          movx [dptr],a
                ;- - -
                @@draw_volume_next:
6627 90 00 87    mov  dptr,xram_tmp__87h                ;\
662A E0          movx a,[dptr]                          ;
662B 04          inc  a           ;lsb                  ;
662C F0          movx [dptr],a                          ;
662D 70 06       jnz  a,@@_6635h                        ;
662F 90 00 86    mov  dptr,xram_tmp__86h                ;
6632 E0          movx a,[dptr]                          ;
6633 04          inc  a           ;msb                  ;
6634 F0          movx [dptr],a                          ;
                @@_6635h:                               ;/
6635 90 00 8B    mov  dptr,xram_tmp__8Bh                ;\
6638 E0          movx a,[dptr]                          ;
6639 04          inc  a           ;lsb                  ;
663A F0          movx [dptr],a                          ;
663B 70 06       jnz  a,@@_6643h                        ;
663D 90 00 8A    mov  dptr,xram_tmp__8Ah                ;
6640 E0          movx a,[dptr]                          ;
6641 04          inc  a           ;msb                  ;
6642 F0          movx [dptr],a                          ;
                @@_6643h:                               ;/
6643 90 00 8A    mov  dptr,xram_tmp__8Ah                ;\
6646 E0          movx a,[dptr]                          ;
6647 70 04       jnz  a,@@_664Dh                        ;
6649 A3          inc  dptr ;=xram_tmp__8Bh              ;
664A E0          movx a,[dptr]                          ;
664B 64 0C       xor  a,0Ch                             ;
                @@_664Dh:                               ;/
664D 60 03       jz   a,@@draw_volume_done
664F 02 65 A4    ljmp @@draw_volume_lop           ;......................lop
                ;---
                @@draw_volume_done:
6652 02 67 0A    jmp  @@_670Ah    ;----->     XXX skip lop2
                ;--- --- ---
                @@draw_normal_bar:
6655 E4          clr  a
6656 90 00 8A    mov  dptr,xram_tmp__8Ah
6659 F0          movx [dptr],a
665A A3          inc  dptr ;=xram_tmp__8Bh
665B F0          movx [dptr],a
                @@draw_normal_lop:            ;lop2............................
665C 90 00 86    mov  dptr,xram_tmp__86h
665F E0          movx a,[dptr]
6660 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
6663 F0          movx [dptr],a
6664 E5 37       mov  a,[iram_tmp__37h]
6666 D3          set  c
6667 94 00       sbc  a,00h
6669 40 56       jc   @@_66C1h    ;----->
666B E5 37       mov  a,[iram_tmp__37h]
666D 94 04       sbc  a,04h
666F 40 1C       jc   @@_668Dh
6671 90 5B 86    mov  dptr,bar_tileno_288h
6674 E4          clr  a
6675 93          movc a,[a+dptr]
6676 FC          mov  r4,a   ;msb (0288h/100h)
6677 74 01       mov  a,01h
6679 93          movc a,[a+dptr]
667A FD          mov  r5,a   ;lsb (0288h and FFh)
667B EC          mov  a,r4
667C 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb
667F F0          movx [dptr],a
6680 ED          mov  a,r5
6681 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb
6684 F0          movx [dptr],a
6685 74 FC       mov  a,0FCh
6687 25 37       add  a,[iram_tmp__37h]
6689 F5 37       mov  [iram_tmp__37h],a
668B 80 52       sjmp @@draw_normal_next
                ;---
                @@_668Dh:
668D E5 37       mov  a,[iram_tmp__37h]
668F 54 03       and  a,03h
6691 F5 37       mov  [iram_tmp__37h],a
6693 25 E0       add  a,a
6695 24 7E       add  a,bar_tileno_284h_thru_287h and 0ffh
6697 F5 82       mov  dpl,a
6699 E4          clr  a
669A 34 5B       adc  a,bar_tileno_284h_thru_287h/100h
669C F5 83       mov  dph,a
669E E4          clr  a
669F 93          movc a,[a+dptr]
66A0 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb
66A3 F0          movx [dptr],a
66A4 E5 37       mov  a,[iram_tmp__37h]
66A6 54 03       and  a,03h
66A8 F5 37       mov  [iram_tmp__37h],a
66AA 25 E0       add  a,a
66AC 24 7E       add  a,bar_tileno_284h_thru_287h and 0ffh
66AE F5 82       mov  dpl,a
66B0 E4          clr  a
66B1 34 5B       adc  a,bar_tileno_284h_thru_287h/100h
66B3 F5 83       mov  dph,a
66B5 74 01       mov  a,01h
66B7 93          movc a,[a+dptr]
66B8 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb
66BB F0          movx [dptr],a
66BC E4          clr  a
66BD F5 37       mov  [iram_tmp__37h],a
66BF 80 1E       sjmp @@draw_normal_next
                ;--- --- ---
                @@_66C1h:
66C1 E5 37       mov  a,[iram_tmp__37h]
66C3 25 E0       add  a,a
66C5 24 7E       add  a,bar_tileno_284h_thru_287h and 0ffh
66C7 F5 82       mov  dpl,a
66C9 E4          clr  a
66CA 34 5B       adc  a,bar_tileno_284h_thru_287h/100h
66CC F5 83       mov  dph,a
66CE E4          clr  a
66CF 93          movc a,[a+dptr]
66D0 FC          mov  r4,a
66D1 74 01       mov  a,01h
66D3 93          movc a,[a+dptr]
66D4 FD          mov  r5,a
66D5 EC          mov  a,r4
66D6 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb
66D9 F0          movx [dptr],a
66DA ED          mov  a,r5
66DB 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb
66DE F0          movx [dptr],a
                ;- - - -
                @@draw_normal_next:
66DF 90 00 87    mov  dptr,xram_tmp__87h                ;\
66E2 E0          movx a,[dptr]                          ;
66E3 04          inc  a           ;lsb                  ;
66E4 F0          movx [dptr],a                          ;
66E5 70 06       jnz  a,@@_66EDh                        ;
66E7 90 00 86    mov  dptr,xram_tmp__86h                ;
66EA E0          movx a,[dptr]                          ;
66EB 04          inc  a           ;msb                  ;
66EC F0          movx [dptr],a                          ;
                @@_66EDh:                               ;/
66ED 90 00 8B    mov  dptr,xram_tmp__8Bh                ;\
66F0 E0          movx a,[dptr]                          ;
66F1 04          inc  a           ;lsb                  ;
66F2 F0          movx [dptr],a                          ;
66F3 70 06       jnz  a,@@_66FBh                        ;
66F5 90 00 8A    mov  dptr,xram_tmp__8Ah                ;
66F8 E0          movx a,[dptr]                          ;
66F9 04          inc  a           ;msb                  ;
66FA F0          movx [dptr],a                          ;
                @@_66FBh:                               ;/
66FB 90 00 8A    mov  dptr,xram_tmp__8Ah                ;\
66FE E0          movx a,[dptr]                          ;
66FF 70 04       jnz  a,@@_6705h                        ;
6701 A3          inc  dptr ;=xram_tmp__8Bh              ;
6702 E0          movx a,[dptr]                          ;
6703 64 0E       xor  a,0Eh                             ;
                @@_6705h:                               ;/
6705 60 03       jz   a,@@draw_normal_done
6707 02 66 5C    ljmp @@draw_normal_lop      ;............................lop2
                ;---
                @@draw_normal_done:
                ;- - - - - -
                @@_670Ah:
670A 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb
670D 74 02       mov  a,02h
670F F0          movx [dptr],a
6710 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb
6713 74 89       mov  a,89h
6715 F0          movx [dptr],a
6716 90 00 88    mov  dptr,xram_tmp__88h
6719 E0          movx a,[dptr]
671A FC          mov  r4,a
671B A3          inc  dptr ;=xram_tmp__89h
671C E0          movx a,[dptr]
671D FD          mov  r5,a
671E EC          mov  a,r4
671F 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
6722 F0          movx [dptr],a
6723 ED          mov  a,r5
6724 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb
6727 F0          movx [dptr],a
6728 90 00 B8    mov  dptr,xram_current_menu
672B E0          movx a,[dptr]
672C 75 F0 03    mov  b,03h
672F A4          mul  a,b
6730 24 4C       add  a,gui_menu_list and 0ffh
6732 F5 82       mov  dpl,a
6734 E5 F0       mov  a,b
6736 34 2C       adc  a,gui_menu_list/100h
6738 F5 83       mov  dph,a
673A E4          clr  a
673B 93          movc a,[a+dptr]
673C FB          mov  r3,a
673D 74 01       mov  a,01h
673F 93          movc a,[a+dptr]
6740 FA          mov  r2,a
6741 74 02       mov  a,02h
6743 93          movc a,[a+dptr]
6744 F9          mov  r1,a
6745 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
6748 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
674B B4 13 04    jne  a,MenuID_13h_QuicklyVolume,@@_6752h       ;\
674E 7F 01       mov  r7,01h                                    ;
6750 80 02       sjmp @@_6754h                                  ;
                ;---                                            ;
                @@_6752h:                                       ;
6752 7F 00       mov  r7,00h                                    ;
                @@_6754h:                                       ;/
6754 EF          mov  a,r7
6755 60 05       jz   a,@@_675Ch                                ;\
6757 75 33 0E    mov  [iram_tmp__33h],0Eh                       ;
675A 80 03       sjmp @@_675Fh                                  ;
                ;---                                            ;
                @@_675Ch:                                       ;
675C 75 33 10    mov  [iram_tmp__33h],10h                       ;
                @@_675Fh:                                       ;/
                ;- - - -
                @@attr_lop:                             ;lop3................
675F E5 33       mov  a,[iram_tmp__33h]
6761 60 20       jz   a,@@attr_lop_done
6763 90 00 88    mov  dptr,xram_tmp__88h
6766 E0          movx a,[dptr]
6767 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
676A F0          movx [dptr],a
676B 90 FB 10    mov  dptr,IO_OSD_bgmap_data_attr
676E E5 35       mov  a,[iram_tmp__35h]    ;attr
6770 F0          movx [dptr],a         ;<--- output ;attr maybe?
6771 15 33       dec  [iram_tmp__33h]
6773 90 00 89    mov  dptr,xram_tmp__89h
6776 E0          movx a,[dptr]
6777 04          inc  a
6778 F0          movx [dptr],a
6779 70 E4       jnz  a,@@attr_lop                     ;.................lop3
677B 90 00 88    mov  dptr,xram_tmp__88h
677E E0          movx a,[dptr]
677F 04          inc  a
6780 F0          movx [dptr],a
6781 80 DC       sjmp @@attr_lop                       ;.................lop3
                ;---
                @@attr_lop_done:
6783 22          ret
                ;------------------
;:------------- ;:----------------- CRAP code (min/max/med)
                ;------------------
                get_min_max_med_for_brightness_contrast_saturation:
                 ;in: r7=param (0=brightness, 1=contrast, 2=saturation)
                 ;in: [xram_new_detected_video]
                 ;out: [iram_med_brightness]  ;\
                 ;out: [iram_med_contrast]    ; temp index (not used outside of this function)
                 ;out: [iram_med_saturation]  ;/
                 ;out: [xram_min_brightness] ;(MEDIUM-28h, min 00h)
                 ;out: [xram_max_brightness] ;(MEDIUM+28h, min FFh)
                 ;out: [xram_min_saturation] ;(fixed always 00h)
                 ;out: [xram_max_saturation] ;(MEDIUM+28h, max FFh)
                 ;out: [xram_min_contrast]   ;(MEDIUM-28h, min 00h)
                 ;out: [xram_max_contrast]   ;(MEDIUM+28h, min FFh)
                 ;out: r7      ;MEDIUM (depending on incoming r7)
                 ;- - -
6784 AD 07       mov  r5,r7(0)   ;param
6786 12 AE EF    call xlat_xram_sett_input_to_index_r7       ;---->
6789 90 00 91    mov  dptr,xram_tmp__91h
678C EF          mov  a,r7
678D F0          movx [dptr],a
678E 30 0A 03    jz   [iram_misc_flags].miscflg_2,@@do_search
6791 02 68 2D    jmp  @@skip_search           ;---> skip search (NEVER done) (could be done when it was already searched, using old [iram_med_brightness],[iram_med_contrast],[iram_med_saturation] values, but the [iram_misc_flags].miscflg_2 flag is never set)
                ;---
                @@do_search:
6794 E4          clr  a
6795 90 00 90    mov  dptr,xram_tmp__90h
6798 F0          movx [dptr],a
                @@search_lop:                    ;lop..........
6799 90 00 90    mov  dptr,xram_tmp__90h
679C E0          movx a,[dptr]
679D FF          mov  r7,a
679E C3          clr  c
679F 94 04       sbc  a,basic_calibration_io_list_num_entries
67A1 40 03       jc   @@search_lop_cont
67A3 02 68 2D    jmp  @@search_lop_done
                ;---
                @@search_lop_cont:
67A6 A3          inc  dptr
67A7 E0          movx a,[dptr]
67A8 75 F0 0A    mov  b,0Ah
67AB A4          mul  a,b
67AC 24 0F       add  a,indirect_basic_calibration_io_list and 0ffh
67AE F5 82       mov  dpl,a
67B0 E4          clr  a
67B1 34 62       adc  a,indirect_basic_calibration_io_list/100h
67B3 F5 83       mov  dph,a
67B5 E4          clr  a
67B6 93          movc a,[a+dptr]
67B7 FB          mov  r3,a
67B8 74 01       mov  a,01h
67BA 93          movc a,[a+dptr]
67BB FA          mov  r2,a
67BC 74 02       mov  a,02h
67BE 93          movc a,[a+dptr]
67BF F9          mov  r1,a
N/A             ;mov  dptr,xram_tmp__90h
N/A             ;movx a,[dptr]
67C0 75 F0 0A    mov  b,0Ah
67C3 EF          mov  a,r7
67C4 A4          mul  a,b
67C5 F5 82       mov  dpl,a
67C7 85 F0 83    mov  dph,b
67CA 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
67CD FF          mov  r7,a
67CE AE F0       mov  r6,b
67D0 BE FF 0B    jne  r6,IO_LCD_basic_brightness/100h    ,@@not_brightness ;\
67D3 BF D4 08    jne  r7,IO_LCD_basic_brightness and 0ffh,@@not_brightness ;/
67D6 90 00 90    mov  dptr,xram_tmp__90h
67D9 E0          movx a,[dptr]
67DA F5 11       mov  [iram_med_brightness],a     ;<--
67DC 80 46       sjmp @@search_lop_next
                ;---
                @@not_brightness:
67DE BE FF 0B    jne  r6,IO_LCD_basic_contrast/100h    ,@@not_contrast  ;\
67E1 BF D3 08    jne  r7,IO_LCD_basic_contrast and 0ffh,@@not_contrast  ;/
67E4 90 00 90    mov  dptr,xram_tmp__90h
67E7 E0          movx a,[dptr]
67E8 F5 12       mov  [iram_med_contrast],a     ;<--
67EA 80 38       sjmp @@search_lop_next
                ;---
                @@not_contrast:
67EC 90 00 91    mov  dptr,xram_tmp__91h
67EF E0          movx a,[dptr]
67F0 75 F0 0A    mov  b,0Ah
67F3 A4          mul  a,b
67F4 24 0F       add  a,indirect_basic_calibration_io_list and 0ffh
67F6 F5 82       mov  dpl,a
67F8 E4          clr  a
67F9 34 62       adc  a,indirect_basic_calibration_io_list/100h
67FB F5 83       mov  dph,a
67FD E4          clr  a
67FE 93          movc a,[a+dptr]
67FF FB          mov  r3,a
6800 74 01       mov  a,01h
6802 93          movc a,[a+dptr]
6803 FA          mov  r2,a
6804 74 02       mov  a,02h
6806 93          movc a,[a+dptr]
6807 F9          mov  r1,a
6808 90 00 90    mov  dptr,xram_tmp__90h
680B E0          movx a,[dptr]
680C FF          mov  r7,a          ;<---
680D 75 F0 0A    mov  b,0Ah
6810 A4          mul  a,b
6811 F5 82       mov  dpl,a
6813 85 F0 83    mov  dph,b
6816 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
6819 FB          mov  r3,a   ;\io.addr
681A AA F0       mov  r2,b   ;/
681C BA FF 05    jne  r2,IO_LCD_basic_saturation/100h    ,@@not_saturation ;\
681F BB D6 02    jne  r3,IO_LCD_basic_saturation and 0ffh,@@not_saturation ;/
6822 8F 13       mov  [iram_med_saturation],r7      ;<--- STORE saturation here
                @@not_saturation:
                @@search_lop_next:
6824 90 00 90    mov  dptr,xram_tmp__90h
6827 E0          movx a,[dptr]
6828 04          inc  a
6829 F0          movx [dptr],a
682A 02 67 99    ljmp @@search_lop
                ;---
                @@search_lop_done:
                @@skip_search:
                ;- - - - - - - - - - -
682D ED          mov  a,r5  ;param
682E 14          dec  a
682F 60 78       jz   a,@@param1_contrast
6831 14          dec  a
6832 70 03       jnz  a,@@param_not_2
6834 02 69 12    jmp  @@param2_saturation
                ;---
                @@param_not_2:
6837 24 02       add  a,02h
6839 60 03       jz   a,@@param0_brightness
683B 02 69 70    jmp  @@param_bad
                ;---
                @@param0_brightness:
683E 90 00 91    mov  dptr,xram_tmp__91h
6841 E0          movx a,[dptr]
6842 75 F0 0A    mov  b,0Ah
6845 A4          mul  a,b
6846 24 0F       add  a,indirect_basic_calibration_io_list and 0ffh
6848 F5 82       mov  dpl,a
684A E4          clr  a
684B 34 62       adc  a,indirect_basic_calibration_io_list/100h
684D F5 83       mov  dph,a
684F E4          clr  a
6850 93          movc a,[a+dptr]
6851 FB          mov  r3,a
6852 74 01       mov  a,01h
6854 93          movc a,[a+dptr]
6855 FA          mov  r2,a
6856 74 02       mov  a,02h
6858 93          movc a,[a+dptr]
6859 F9          mov  r1,a
685A E5 11       mov  a,[iram_med_brightness]           ;<---
685C 75 F0 0A    mov  b,0Ah
685F A4          mul  a,b
6860 FF          mov  r7,a
6861 E9          mov  a,r1
6862 2F          add  a,r7
6863 F9          mov  r1,a
6864 EA          mov  a,r2
6865 35 F0       adc  a,b
6867 FA          mov  r2,a
6868 E9          mov  a,r1
6869 24 02       add  a,02h             ;index 02h and up (=after 16bit port addr)
686B F9          mov  r1,a
686C E4          clr  a
686D 3A          adc  a,r2
686E FA          mov  r2,a
686F 90 00 BD    mov  dptr,xram_new_detected_video
6872 E0          movx a,[dptr]   ;<--- index 0..7 ?
6873 7E 00       mov  r6,00h
6875 29          add  a,r1
6876 F9          mov  r1,a
6877 EE          mov  a,r6
6878 3A          adc  a,r2
6879 FA          mov  r2,a
687A 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
687D FF          mov  r7,a
687E D3          set  c         ;<--            ;\
687F 94 28       sbc  a,28h                     ;
6881 40 05       jc   @@brightness_min_00h      ;
6883 EF          mov  a,r7                      ;
6884 24 D8       add  a,0D8h    ;aka -28h       ;
6886 80 01       sjmp @@brightness_min_this     ;
                ;---                            ;
                @@brightness_min_00h:           ;
6888 E4          clr  a                         ;
                @@brightness_min_this:          ;/
6889 90 00 3F    mov  dptr,xram_min_brightness
688C F0          movx [dptr],a
688D 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
6890 FF          mov  r7,a
6891 C3          clr  c
6892 94 D7       sbc  a,0D7h ;100h-29h
6894 50 0A       jnc  @@brightness_max_FFh
6896 EF          mov  a,r7
6897 24 28       add  a,28h      ;nnh..FFh
6899 90 00 40    mov  dptr,xram_max_brightness
689C F0          movx [dptr],a
689D 02 69 6B    jmp  @@param_done
                ;---
                @@brightness_max_FFh:  ;when n>=100h
68A0 90 00 40    mov  dptr,xram_max_brightness
68A3 74 FF       mov  a,0FFh
68A5 F0          movx [dptr],a
68A6 02 69 6B    jmp  @@param_done
                ;---
                @@param1_contrast:
68A9 90 00 91    mov  dptr,xram_tmp__91h
68AC E0          movx a,[dptr]
68AD 75 F0 0A    mov  b,0Ah
68B0 A4          mul  a,b
68B1 24 0F       add  a,indirect_basic_calibration_io_list and 0ffh
68B3 F5 82       mov  dpl,a
68B5 E4          clr  a
68B6 34 62       adc  a,indirect_basic_calibration_io_list/100h
68B8 F5 83       mov  dph,a
68BA E4          clr  a
68BB 93          movc a,[a+dptr]
68BC FB          mov  r3,a
68BD 74 01       mov  a,01h
68BF 93          movc a,[a+dptr]
68C0 FA          mov  r2,a
68C1 74 02       mov  a,02h
68C3 93          movc a,[a+dptr]
68C4 F9          mov  r1,a
68C5 E5 12       mov  a,[iram_med_contrast]           ;<----
68C7 75 F0 0A    mov  b,0Ah
68CA A4          mul  a,b
68CB FF          mov  r7,a
68CC E9          mov  a,r1
68CD 2F          add  a,r7
68CE F9          mov  r1,a
68CF EA          mov  a,r2
68D0 35 F0       adc  a,b
68D2 FA          mov  r2,a
68D3 E9          mov  a,r1
68D4 24 02       add  a,02h             ;index 02h and up (=after 16bit port addr)
68D6 F9          mov  r1,a
68D7 E4          clr  a
68D8 3A          adc  a,r2
68D9 FA          mov  r2,a
68DA 90 00 BD    mov  dptr,xram_new_detected_video
68DD E0          movx a,[dptr]   ;<--- index 0..7 ?
68DE 7E 00       mov  r6,00h
68E0 29          add  a,r1
68E1 F9          mov  r1,a
68E2 EE          mov  a,r6
68E3 3A          adc  a,r2
68E4 FA          mov  r2,a
68E5 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
68E8 FF          mov  r7,a
68E9 D3          set  c         ;<--            ;\
68EA 94 28       sbc  a,28h                     ;
68EC 40 05       jc   @@contrast_min_00h        ;
68EE EF          mov  a,r7                      ;
68EF 24 D8       add  a,0D8h    ;aka -28h       ;
68F1 80 01       sjmp @@contrast_min_this       ;
                ;---                            ;
                @@contrast_min_00h:             ;
68F3 E4          clr  a                         ;
                @@contrast_min_this:            ;/
68F4 90 00 4A    mov  dptr,xram_min_contrast
68F7 F0          movx [dptr],a
68F8 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
68FB FF          mov  r7,a
68FC C3          clr  c
68FD 94 D7       sbc  a,0D7h
68FF 50 09       jnc  @@contrast_max_FFh
6901 EF          mov  a,r7
6902 24 28       add  a,28h
6904 90 00 4B    mov  dptr,xram_max_contrast
6907 F0          movx [dptr],a
6908 80 06       sjmp @@to_param_done
                ;---
                @@contrast_max_FFh:
690A 90 00 4B    mov  dptr,xram_max_contrast
690D 74 FF       mov  a,0FFh
690F F0          movx [dptr],a
                @@to_param_done:
6910 80 59       sjmp @@param_done
                ;---
                @@param2_saturation:
6912 E4          clr  a                         ;\saturation MIN=00h (fixed)
6913 90 00 42    mov  dptr,xram_min_saturation  ; (unlike as for param0/1)
6916 F0          movx [dptr],a                  ;/
6917 90 00 91    mov  dptr,xram_tmp__91h
691A E0          movx a,[dptr]
691B 75 F0 0A    mov  b,0Ah
691E A4          mul  a,b
691F 24 0F       add  a,indirect_basic_calibration_io_list and 0ffh
6921 F5 82       mov  dpl,a
6923 E4          clr  a
6924 34 62       adc  a,indirect_basic_calibration_io_list/100h
6926 F5 83       mov  dph,a
6928 E4          clr  a
6929 93          movc a,[a+dptr]
692A FB          mov  r3,a
692B 74 01       mov  a,01h
692D 93          movc a,[a+dptr]
692E FA          mov  r2,a
692F 74 02       mov  a,02h
6931 93          movc a,[a+dptr]
6932 F9          mov  r1,a
6933 E5 13       mov  a,[iram_med_saturation]           ;<----
6935 75 F0 0A    mov  b,0Ah
6938 A4          mul  a,b
6939 FF          mov  r7,a
693A E9          mov  a,r1
693B 2F          add  a,r7
693C F9          mov  r1,a
693D EA          mov  a,r2
693E 35 F0       adc  a,b
6940 FA          mov  r2,a
6941 E9          mov  a,r1
6942 24 02       add  a,02h             ;index 02h and up (=after 16bit port addr)
6944 F9          mov  r1,a
6945 E4          clr  a
6946 3A          adc  a,r2
6947 FA          mov  r2,a
6948 90 00 BD    mov  dptr,xram_new_detected_video
694B E0          movx a,[dptr]   ;<--- index 0..7 ?
694C 7E 00       mov  r6,00h
694E 29          add  a,r1
694F F9          mov  r1,a
6950 EE          mov  a,r6
6951 3A          adc  a,r2
6952 FA          mov  r2,a
6953 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
6956 FF          mov  r7,a
6957 C3          clr  c
6958 94 D7       sbc  a,0D7h
695A 50 09       jnc  @@saturation_max_FFh
695C EF          mov  a,r7
695D 24 28       add  a,28h       ;MAX=MEDIUM+28h
695F 90 00 43    mov  dptr,xram_max_saturation
6962 F0          movx [dptr],a
6963 80 06       sjmp @@param_done
                ;---
                @@saturation_max_FFh:
6965 90 00 43    mov  dptr,xram_max_saturation
6968 74 FF       mov  a,0FFh      ;MAX=FFh
696A F0          movx [dptr],a
                @@param_done:
696B 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
696E FF          mov  r7,a        ;MEDIUM value
696F 22          ret
                ;---
                @@param_bad:
6970 7F 00       mov  r7,00h
6972 22          ret
                ;------------------
;:------------- ;:----------------- GUI data (customer etc)
                ;------------------
                .macro defdata_customer
                .if tech_version<ver11sep2017
6973 20 20 20..   txt_SFJT              db '    SFJT',00h    ;-unused (except by unused ptr)
697C 20 20 46..   txt_F                 db '  F',00h
                .else
6291 78 79 64..   txt_xyd03263          db 'xyd03263',00h  ;<-- instead SFJT ?
                .endif
                ;---
6980 20 4F 46.. txt_off               db ' OFF',00h        ;\
6985 20 20 4F.. txt_on                db '  ON',00h        ;
698A 53 41 56.. txt_SAVE              db 'SAVE',00h        ;/
                ;---
                .if tech_version<ver11sep2017
698F 43 75 73..   txt_CUSTOMER        db 'Customer:MT_35D',00h    ;\this, with lowercase ASCII
699F 54 69 6D..   txt_Time_DATE       db 'Time:Mar 07 2016',00h   ;/
                .else
62A9 43 75 73..   txt_CUSTOMER        db 'Customer:SK_43D',00h
62B9 54 69 6D..   txt_Time_DATE       db 'Time:Sep 11 2017',00h
                .endif
                ;---
69B0 20 20 20.. txt_31xSPACE          db '                               ',00h
69D0 56 43 4F.. txt_VCOM_AC           db 'VCOMAC',00h
69D7 56 43 4F.. txt_VCOM_DC           db 'VCOMDC',00h
69DE 50 4F 57.. txt_POWER             db 'POWER',00h
69E4 4B 45 59.. txt_KEY               db 'KEY',00h
69E8 4E 4F 53.. txt_NOSIGNAL          db 'NOSIGNAL',00h
69F1 20 42 4C.. txt_BLUE              db ' BLUE',00h       ;\
69F7 20 53 4E.. txt_SNOW              db ' SNOW',00h       ;
69FD 42 4C 41.. txt_BLACK             db 'BLACK',00h       ;/
                ;------------------
                .if tech_version<ver11sep2017
                indirect_txt_SFJT:  ;unused?   ;what is "SFJT" anyways???
6A03 FF 69 73    db   0FFh // dw txt_SFJT
                ;---
                indirect_txt_F:
6A06 FF 69 7C    db   0FFh // dw txt_F
                ;------------------
                gui_null_fMenuSource:
6A09 00          nop
6A0A 00          nop
6A0B 00          nop
6A0C 00          nop
6A0D 00          nop
                ;---
                gui_data_fMenuSource_show_txt_F:
6A0E 00          nop
6A0F 00          nop
6A10 02          db   02h
6A10 00          nop
6A10 02          db   02h
6A13 00          nop
6A14 00          nop
6A15 00          nop
6A16 00          nop
6A17 FF BC CC    db   0FFh // dw get_txt_F
6A1A 00 08       dw   0008h
                ;---
                gui_data_fMenuSource_show:
6A1C 00 00 00    db   000h // dw 0000h ;(show_num)
6A1F 00 00 00    db   000h // dw 0000h ;(show_bar)
6A22 FF 6A 0E    db   0FFh // dw gui_data_fMenuSource_show_txt_F
6A25 00 08       dw   0008h
                .endif
                ;------------------
                .if blah_version>=ver11sep2017
                  db   0FFh // dw txt_xyd03263
                .endif
                ;------------------
                txt_list_OFF_ON_SAVE:
6A27 FF 69 80    db   0FFh // dw txt_off
6A2A FF 69 85    db   0FFh // dw txt_on
6A2D FF 69 8A    db   0FFh // dw txt_SAVE
                ;------------------
                indirect_txt_CUSTOMER:
6A30 FF 69 8F    db   0FFh // dw txt_CUSTOMER
                ;---
                indirect_txt_Time_DATE:
6A33 FF 69 9F    db   0FFh // dw txt_Time_DATE
                ;---
                indirect_txt_31xSPACE:
6A36 FF 69 B0    db   0FFh // dw txt_31xSPACE
                ;------------------
                indirect_txt_VCOM_AC:
6A39 FF 69 D0    db   0FFh // dw txt_VCOM_AC
                ;---
                gui_data_FactoryMenu_show_VCOM_AC:
6A3C 02          db   02h
6A3D 0F          db   0Fh
6A3E 02          db   02h
6A3F 00          nop
6A40 02          db   02h
6A41 00          nop
6A42 FF BE EE    db   0FFh // dw get_settings_VCOM_AC
6A45 00 18       dw   0018h   ;<--!
                ;------------------
                indirect_txt_VCOM_DC:
6A47 FF 69 D7    db   0FFh // dw txt_VCOM_DC
                ;---
                gui_data_FactoryMenu_show_VCOM_DC:
6A4A 03          db   03h
6A4B 0F          db   0Fh
6A4C 02          db   02h
6A4D 00          nop
6A4E 02          db   02h
6A4F 00          nop
6A50 FF BE BD    db   0FFh // dw get_settings_VCOM_DC_16bit
6A53 00 18       dw   0018h   ;<--!
                ;------------------
                indirect_txt_POWER:
6A55 FF 69 DE    db   0FFh // dw txt_POWER
                ;------------------
                gui_data_FactoryMenu_show_POWER:  ;(OFF,ON,SAVE)
6A58 04          db   04h
6A59 0E          db   0Eh
6A5A 02          db   02h
6A5B 00          nop
6A5C 02          db   02h
6A5D 00          nop
6A5E 00          nop
6A5F 00          nop
6A60 00          nop
6A61 FF B4 B6    db   0FFh // dw get_txt_power_OFF_ON_SAVE
6A64 00 08       dw   0008h
                ;------------------
                indirect_txt_KEY:
6A66 FF 69 E4    db   0FFh // dw txt_KEY
                ;------------------
                gui_data_FactoryMenu_show_typekey:
6A69 06          db   06h
6A6A 07          db   07h
6A6B 02          db   02h
6A6C 00          nop
6A6D 02          db   02h
6A6E 00          nop
6A6F 00          nop
6A70 00          nop
6A71 00          nop
6A72 FF BF 66    db   0FFh // dw get_curr_keypadtype_text
6A75 00 08       dw   0008h
                ;------------------
                indirect_txt_NOSIGNAL:
6A77 FF 69 E8    db   0FFh // dw txt_NOSIGNAL
                ;---
                txt_list_BLUE_SNOW_BLACK:
6A7A FF 69 F1    db   0FFh // dw txt_BLUE
6A7D FF 69 F7    db   0FFh // dw txt_SNOW
6A80 FF 69 FD    db   0FFh // dw txt_BLACK
                ;------------------
                gui_data_FactoryMenu_show_NOSIGNAL: ;BLUE_SNOW_BLACK
6A83 07          db   07h
6A84 0D          db   0Dh
6A85 02          db   02h
6A86 00          nop
6A87 02          db   02h
6A88 00          nop
6A89 00          nop
6A8A 00          nop
6A8B 00          nop
6A8C FF B4 D8    db   0FFh // dw get_txt_no_signal_BLUE_SNOW_BLACK
6A8F 00 08       dw   0008h
                ;--- --- ---
                gui_null_FactoryMenu:
6A91 00          nop
6A92 00          nop
6A93 00          nop
6A94 00          nop
6A95 00          nop
                ;--- --- ---
                gui_data_FactoryMenu_show:   ;aka Time, VCOM, POWER, KEY, etc.
6A96 FF 6A 3C    db   0FFh // dw gui_data_FactoryMenu_show_VCOM_AC
6A99 00 00 00    db   000h // dw 0000h
6A9C 00 00 00    db   000h // dw 0000h
6A9F 00 00       dw   0000h
                 ;- - -
6AA1 FF 6A 4A    db   0FFh // dw gui_data_FactoryMenu_show_VCOM_DC
6AA4 00 00 00    db   000h // dw 0000h
6AA7 00 00 00    db   000h // dw 0000h
6AAA 00 00       dw   0000h
                 ;- - -
6AAC 00 00 00    db   000h // dw 0000h
6AAF 00 00 00    db   000h // dw 0000h
6AB2 00 00 00    db   000h // dw 0000h
6AB5 00 00       dw   0000h
                 ;- - -
6AB7 00 00 00    db   000h // dw 0000h
6ABA 00 00 00    db   000h // dw 0000h
6ABD FF 6A 58    db   0FFh // dw gui_data_FactoryMenu_show_POWER  ;(OFF,ON,SAVE)
6AC0 00 00       dw   0000h
                 ;- - -
6AC2 00 00 00    db   000h // dw 0000h
6AC5 00 00 00    db   000h // dw 0000h
6AC8 FF 6A 69    db   0FFh // dw gui_data_FactoryMenu_show_typekey
6ACB 00 00       dw   0000h
                 ;- - -
6ACD 00 00 00    db   000h // dw 0000h
6AD0 00 00 00    db   000h // dw 0000h
6AD3 FF 6A 83    db   0FFh // dw gui_data_FactoryMenu_show_NOSIGNAL ;BLUE_SNOW_BLACK
6AD6 00 08       dw   0008h
                ;------------------
                gui_data_FactoryMenu_name:  ;aka Time, VCOM, POWER, KEY, etc.
6AD8 01          db   01h
6AD9 02          db   02h
6ADA 02          db   02h
6ADB 00          nop
6ADC 04          db   04h
6ADD 00          nop
6ADE 01          db   01h
6ADF FF BC F9    db   0FFh // dw get_txt_Time_DATE
6AE2 00 00       dw   0000h
                 ;- - - cont more (no end yet)...
6AE4 02          db   02h
6AE5 01          db   01h
6AE6 02          db   02h
6AE7 00          nop
6AE8 02          db   02h
6AE9 00          nop
6AEA 01          db   01h
6AEB FF BD 08    db   0FFh // dw get_txt_VCOM_AC
6AEE 00 00       dw   0000h
                 ;- - - cont more (no end yet)...
6AF0 03          db   03h
6AF1 01          db   01h
6AF2 02          db   02h
6AF3 00          nop
6AF4 02          db   02h
6AF5 00          nop
6AF6 01          db   01h
6AF7 FF BD 17    db   0FFh // dw get_txt_VCOM_DC
6AFA 00 00       dw   0000h
                 ;- - - cont more (no end yet)...
6AFC 04          db   04h
6AFD 01          db   01h
6AFE 02          db   02h
6AFF 00          nop
6B00 02          db   02h
6B01 00          nop
6B02 01          db   01h
6B03 FF BD 26    db   0FFh // dw get_txt_POWER
6B06 00 00       dw   0000h
                 ;- - - cont more (no end yet)...
6B08 05          db   05h
6B09 01          db   01h
6B0A 00          nop
6B0B 00          nop
6B0C 00          nop
6B0D 00          nop
6B0E 01          db   01h
6B11 FF BC DB    db   0FFh // dw get_txt_31xSPACE
6B12 00 00       dw   0000h
                 ;- - - cont more (no end yet)...
6B14 06          db   06h
6B15 01          db   01h
6B16 02          db   02h
6B17 00          nop
6B18 02          db   02h
6B17 00          nop
6B18 01          db   01h
6B1B FF BD 35    db   0FFh // dw get_txt_KEY
6B1E 00 00       dw   0000h
                 ;- - - cont more (no end yet)...
6B20 07          db   07h
6B21 01          db   01h
6B22 02          db   02h
6B23 00          nop
6B24 02          db   02h
6B25 00          nop
6B26 01          db   01h
6B27 FF BD 44    db   0FFh // dw get_txt_NOSIGNAL
6B2A 00 08       dw   0008h
                ;------------------
                gui_xtra_FactoryMenu_get_txt_CUSTOMER:
6B2C 00          nop
6B2D 02          db   02h
6B2E 01          db   01h
6B2F 00          nop
6B30 00          nop
6B31 00          nop
6B32 01          db   01h
6B33 FF BC EA    db   0FFh // dw get_txt_CUSTOMER
6B36 00 08       dw   0008h
                ;------------------
                .endm ;defdata_customer
                ;------------------
                .if shuffle_version<ver11sep2017
                  defdata_customer
                .endif
                ;------------------
;:------------- ;:----------------- KEYPAD code (level3key)
                ;------------------
                do_level3key_stuff:
6B38 90 00 57    mov  dptr,xram_level3key_phase
6B3B E0          movx a,[dptr]
6B3C B4 0B 00    jne  a,0Bh,$+3
6B3F 40 03       jc   @@inrange
6B41 02 6C E3    jmp  @@return_01h
                ;---
                @@inrange:
6B44 90 6B 4B    mov  dptr,@@jumplist
6B47 F8          mov  r0,a   ;mul1
6B48 28          add  a,r0   ;mul2
6B49 28          add  a,r0   ;mul3
6B4A 73          jmp  a+dptr
                ;---
                @@jumplist:
6B4B 02 6B 6C    ljmp @@phase_00h
6B4E 02 6B 7C    ljmp @@phase_01h
6B51 02 6B 9C    ljmp @@phase_02h
6B54 02 6B C1    ljmp @@phase_03h
6B57 02 6C 05    ljmp @@phase_04h
6B5A 02 6C 20    ljmp @@phase_05h
6B5D 02 6C 50    ljmp @@phase_06h
6B60 02 6C A5    ljmp @@phase_07h
6B63 02 6C C5    ljmp @@phase_08h
6B66 02 6C 82    ljmp @@phase_09h
6B69 02 6C 31    ljmp @@phase_0Ah
                ;---
                @@phase_00h:
6B6C E4          clr  a
6B6D 90 00 58    mov  dptr,xram_level3key_time_A_msb
6B70 F0          movx [dptr],a
6B71 A3          inc  dptr ;=xram_level3key_time_A_lsb
6B72 F0          movx [dptr],a
6B73 A3          inc  dptr ;=xram_level3key_time_B_msb
6B74 F0          movx [dptr],a
6B75 A3          inc  dptr ;=xram_level3key_time_B_lsb
6B76 F0          movx [dptr],a
                @@set_phase_01h_and_continue_in_phase_01h:  ;in: a=00h
6B77 90 00 57    mov  dptr,xram_level3key_phase
6B7A 04          inc  a          ;=01h
6B7B F0          movx [dptr],a
                ;- - ---
                @@phase_01h:
6B7C 75 30 01    mov  [iram_tmp__30h],01h  ;area                  ;\
6B7F 75 31 00    mov  [iram_tmp__31h],xram_keybuf_2byte_A/100h    ; addr
6B82 75 32 5C    mov  [iram_tmp__32h],xram_keybuf_2byte_A and 0ffh;/
6B85 7B 01       mov  r3,01h     ;area                  ;\
6B87 7A 00       mov  r2,xram_keybuf_7byte_B/100h       ; xram:0077h
6B89 79 77       mov  r1,xram_keybuf_7byte_B and 0ffh   ;/
6B8B 12 05 A0    call xxx_05A0h
6B8E 40 03       jc   @@set_phase_02h_return_01h
6B90 02 6C E3    jmp  @@return_01h
                ;---
                @@set_phase_02h_return_01h:
6B93 90 00 57    mov  dptr,xram_level3key_phase
6B96 74 02       mov  a,02h
6B98 F0          movx [dptr],a
6B99 02 6C E3    jmp  @@return_01h
                ;--- ---
                @@phase_02h:
6B9C 90 00 5D    mov  dptr,xram_keybuf_2byte_A+1  ;<-- 2nd byte in 2-byte buf
6B9F E0          movx a,[dptr]
6BA0 B4 04 15    jne  a,04h,@@set_phase_01h_return_01h
6BA3 75 2D 01    mov  [iram_tmp__2Dh],01h     ;area               ;\
6BA6 75 2E 00    mov  [iram_tmp__2Eh],xram_keybuf_2byte_A/100h    ; addr
6BA9 75 2F 5C    mov  [iram_tmp__2Fh],xram_keybuf_2byte_A and 0ffh;/
6BAC 7B 01       mov  r3,01h        ;area               ;\
6BAE 7A 00       mov  r2,xram_keybuf_7byte_A/100h       ; addr
6BB0 79 70       mov  r1,xram_keybuf_7byte_A and 0ffh   ;/
6BB2 12 05 1A    call xxx_051Ah
6BB5 02 6C 40    jmp  @@set_phase_03h_return_01h
                ;---
                @@set_phase_01h_return_01h:
6BB8 90 00 57    mov  dptr,xram_level3key_phase
6BBB 74 01       mov  a,01h
6BBD F0          movx [dptr],a
6BBE 02 6C E3    jmp  @@return_01h
                ;--- ---
                @@phase_03h:
6BC1 75 30 01    mov  [iram_tmp__30h],01h      ;area              ;\
6BC4 75 31 00    mov  [iram_tmp__31h],xram_keybuf_2byte_B/100h    ; addr
6BC7 75 32 5E    mov  [iram_tmp__32h],xram_keybuf_2byte_B and 0ffh;/
6BCA 7B 01       mov  r3,01h         ;area              ;\
6BCC 7A 00       mov  r2,xram_keybuf_7byte_B/100h       ; xram:0077h
6BCE 79 77       mov  r1,xram_keybuf_7byte_B and 0ffh   ;/
6BD0 12 05 A0    call xxx_05A0h
6BD3 50 09       jnc  @@_6BDEh
                ;@@set_phase_04h_return_01h:
6BD5 90 00 57    mov  dptr,xram_level3key_phase
6BD8 74 04       mov  a,04h
6BDA F0          movx [dptr],a
6BDB 02 6C E3    jmp  @@return_01h
                ;---
                @@_6BDEh:
6BDE 90 00 59    mov  dptr,xram_level3key_time_A_lsb
6BE1 E0          movx a,[dptr]
6BE2 04          inc  a
6BE3 F0          movx [dptr],a
6BE4 70 06       jnz  a,@@_6BECh
6BE6 90 00 58    mov  dptr,xram_level3key_time_A_msb
6BE9 E0          movx a,[dptr]
6BEA 04          inc  a
6BEB F0          movx [dptr],a
                @@_6BECh:
6BEC 90 00 5C    mov  dptr,xram_keybuf_2byte_A+0   ;<----- FIRST byte in 2-byte buf !!!
6BEF E0          movx a,[dptr]
6BF0 FF          mov  r7,a
6BF1 12 AC B3    call xxx_ACB3h
6BF4 90 00 57    mov  dptr,xram_level3key_phase
6BF7 40 06       jc   @@set_phase_05h_return_01h  ;in: dptr
                ;@@set_phase_0Ah_return_01h:  ;in: dptr
6BF9 74 0A       mov  a,0Ah
6BFB F0          movx [dptr],a
6BFC 02 6C E3    jmp  @@return_01h
                ;---
                @@set_phase_05h_return_01h:  ;in: dptr
6BFF 74 05       mov  a,05h
6C01 F0          movx [dptr],a
6C02 02 6C E3    jmp  @@return_01h
                ;--- ---
                @@phase_04h:
6C05 90 00 5F    mov  dptr,xram_keybuf_2byte_B+1  ;<-- 2nd byte in 2-byte buf
6C08 E0          movx a,[dptr]
6C09 64 08       xor  a,08h
6C0B 60 02       jz   a,@@_6C0Fh
6C0D 80 31       sjmp @@set_phase_03h_return_01h
                ;---
                @@_6C0Fh:
6C0F 90 00 5F    mov  dptr,xram_keybuf_2byte_B+1  ;<-- 2nd byte in 2-byte buf
6C12 74 01       mov  a,01h
6C14 F0          movx [dptr],a
6C15 F5 2D       mov  [iram_tmp__2Dh],a       ;area=1              ;\
6C17 75 2E 00    mov  [iram_tmp__2Eh],xram_keybuf_2byte_B/100h     ;
6C1A 75 2F 5E    mov  [iram_tmp__2Fh],xram_keybuf_2byte_B and 0ffh ;/
6C1D FB          mov  r3,a  ;=01h
6C1E 80 77       sjmp @@_6C97h
                ;--- ---
                @@phase_05h:
6C20 C3          clr  c                                 ;\
6C21 90 00 59    mov  dptr,xram_level3key_time_A_lsb    ;
6C24 E0          movx a,[dptr]                          ;
                .if tech_version<ver11sep2017           ;
6C25 94 4B         sbc  a,4Bh   ;75 decimal             ;
                .else                                   ;
                   sbc  a,96h   ;150 decimal            ;
                .endif                                  ;
6C27 90 00 58    mov  dptr,xram_level3key_time_A_msb    ;
6C2A E0          movx a,[dptr]                          ;
6C2B 94 00       sbc  a,00h     ;msb                    ;
6C2D 50 1A       jnc  @@_6C49h                          ;/
6C2F 80 0F       sjmp @@set_phase_03h_return_01h        ;-
                ;--- ---
                @@phase_0Ah:
6C31 C3          clr  c
6C32 90 00 59    mov  dptr,xram_level3key_time_A_lsb
6C35 E0          movx a,[dptr]
6C36 94 14       sbc  a,14h   ;20 decimal
6C38 90 00 58    mov  dptr,xram_level3key_time_A_msb
6C3B E0          movx a,[dptr]
6C3C 94 00       sbc  a,00h
6C3E 50 09       jnc  @@_6C49h
                ;- - - - -
                @@set_phase_03h_return_01h:
6C40 90 00 57    mov  dptr,xram_level3key_phase
6C43 74 03       mov  a,03h
6C45 F0          movx [dptr],a
6C46 02 6C E3    jmp  @@return_01h
                ;---
                @@_6C49h:
6C49 90 00 5D    mov  dptr,xram_keybuf_2byte_A+1  ;<-- 2nd byte in 2-byte buf
6C4C 74 10       mov  a,10h
6C4E 80 7A       sjmp @@_6CCAh
                ;--- ---
                @@phase_06h:
6C50 75 30 01    mov  [iram_tmp__30h],01h     ;area               ;\
6C53 75 31 00    mov  [iram_tmp__31h],xram_keybuf_2byte_B/100h    ; addr
6C56 75 32 5E    mov  [iram_tmp__32h],xram_keybuf_2byte_B and 0ffh;/
6C59 7B 01       mov  r3,01h        ;area               ;\
6C5B 7A 00       mov  r2,xram_keybuf_7byte_B/100h       ; xram:0077h
6C5D 79 77       mov  r1,xram_keybuf_7byte_B and 0ffh   ;/
6C5F 12 05 A0    call xxx_05A0h
6C62 50 08       jnc  @@_6C6Ch
                ;- - -
                ;@@set_phase_09h_return_01h:
6C64 90 00 57    mov  dptr,xram_level3key_phase
6C67 74 09       mov  a,09h
6C69 F0          movx [dptr],a
6C6A 80 77       sjmp @@return_01h
                ;---
                @@_6C6Ch:
6C6C 90 00 5B    mov  dptr,xram_level3key_time_B_lsb
6C6F E0          movx a,[dptr]
6C70 04          inc  a
6C71 F0          movx [dptr],a
6C72 70 06       jnz  a,@@set_phase_07h_return_01h
6C74 90 00 5A    mov  dptr,xram_level3key_time_B_msb
6C77 E0          movx a,[dptr]
6C78 04          inc  a
6C79 F0          movx [dptr],a
                ;- - -
                @@set_phase_07h_return_01h:
6C7A 90 00 57    mov  dptr,xram_level3key_phase
6C7D 74 07       mov  a,07h
6C7F F0          movx [dptr],a
6C80 80 61       sjmp @@return_01h
                ;--- ---
                @@phase_09h:
6C82 90 00 5F    mov  dptr,xram_keybuf_2byte_B+1  ;<-- 2nd byte in 2-byte buf
6C85 E0          movx a,[dptr]
6C86 64 08       xor  a,08h
6C88 60 02       jz   a,@@_6C8Ch
6C8A 80 51       sjmp @@set_phase_08h_return_01h
                ;---
                @@_6C8Ch:
6C8C 75 2D 01    mov  [iram_tmp__2Dh],01h    ;area                ;\
6C8F 75 2E 00    mov  [iram_tmp__2Eh],xram_keybuf_2byte_B/100h    ; addr
6C92 75 2F 5E    mov  [iram_tmp__2Fh],xram_keybuf_2byte_B and 0ffh;/
6C95 7B 01       mov  r3,01h       ;area                ;\
                @@_6C97h:                               ;
6C97 7A 00       mov  r2,xram_keybuf_7byte_A/100h       ; addr
6C99 79 70       mov  r1,xram_keybuf_7byte_A and 0ffh   ;/
6C9B 12 05 1A    call xxx_051Ah
                ;@@set_phase_00h_return_zero:
6C9E E4          clr  a
6C9F 90 00 57    mov  dptr,xram_level3key_phase
6CA2 F0          movx [dptr],a  ;=00h
6CA3 FF          mov  r7,a      ;=00h   ;<-- return ZERO here
6CA4 22          ret
                ;--- ---
                @@phase_07h:
6CA5 C3          clr  c
6CA6 90 00 5B    mov  dptr,xram_level3key_time_B_lsb
6CA9 E0          movx a,[dptr]
6CAA 94 03       sbc  a,03h
6CAC 90 00 5A    mov  dptr,xram_level3key_time_B_msb
6CAF E0          movx a,[dptr]
6CB0 94 00       sbc  a,00h
6CB2 50 02       jnc  @@_6CB6h
6CB4 80 27       sjmp @@set_phase_08h_return_01h
                ;---
                @@_6CB6h:
6CB6 E4          clr  a
6CB7 90 00 5A    mov  dptr,xram_level3key_time_B_msb
6CBA F0          movx [dptr],a
6CBB A3          inc  dptr ;=xram_level3key_time_B_lsb
6CBC F0          movx [dptr],a
                ;@@set_phase_08h_return_01h:
6CBD 90 00 57    mov  dptr,xram_level3key_phase
6CC0 74 08       mov  a,08h
6CC2 F0          movx [dptr],a
6CC3 80 1E       sjmp @@return_01h
                ;--- ---
                @@phase_08h:
6CC5 90 00 5D    mov  dptr,xram_keybuf_2byte_A+1  ;<-- 2nd byte in 2-byte buf
6CC8 74 02       mov  a,02h
                @@_6CCAh:
6CCA F0          movx [dptr],a
6CCB 75 2D 01    mov  [iram_tmp__2Dh],01h      ;area              ;\
6CCE 75 2E 00    mov  [iram_tmp__2Eh],xram_keybuf_2byte_A/100h    ; addr
6CD1 75 2F 5C    mov  [iram_tmp__2Fh],xram_keybuf_2byte_A and 0ffh;/
6CD4 7B 01       mov  r3,01h         ;area              ;\
6CD6 7A 00       mov  r2,xram_keybuf_7byte_A/100h       ; addr
6CD8 79 70       mov  r1,xram_keybuf_7byte_A and 0ffh   ;/
6CDA 12 05 1A    call xxx_051Ah
                ;- - - -
                @@set_phase_08h_return_01h:
6CDD 90 00 57    mov  dptr,xram_level3key_phase
6CE0 74 06       mov  a,06h
6CE2 F0          movx [dptr],a
                @@return_01h:
6CE3 7F 01       mov  r7,01h
6CE5 22          ret
                ;------------------
;:------------- ;:----------------- FLASH code (detect)
                ;------------------
                .macro defcode_detect_flash_chiptype
                detect_flash_chiptype:
                .if flash_version<ver11sep2017
BF9C E4            clr  a                               ;\older firmware doesn't
BF9D 90 00 C1      mov  dptr,xram_flash_chiptype        ; detect type, just uses
BFA0 F0            movx [dptr],a                        ;/fixed setting
BFA1 22            ret
                .else ;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
60E4 7B 01         mov  r3,01h
60E6 7A 00         mov  r2,xram_tmp__7Fh/100h
60E8 79 86         mov  r1,xram_tmp__7Fh and 0ffh
60EA 12 87 0F      call flash_get_chip_id       ;---------> DETECT
60ED 90 00 87      mov  dptr,xram_tmp__80h
60F0 E0            movx a,[dptr] ;ID
60F1 FB            mov  r3,a     ;ID ;10h..19h,20h,xx
60F2 24 F0         add  a,0F0h       ;00h..09h,10h,xx
60F4 24 F6         add  a,0F6h       ;F6h..FFh,06h,xx
60F6 50 06         jnc  @@id_10h_thru_19h
60F8 24 FA         add  a,0FAh       ;--------,00h,xx
60FA 60 36         jz   a,@@id_20h       ;force type 0Ah
60FC 80 4B         sjmp @@id_unknown     ;force type 0
                  ;---
                  @@id_10h_thru_19h:
60FE 90 00 87      mov  dptr,xram_tmp__80h                       ;\
6101 E0            movx a,[dptr]                                 ;
6102 FE            mov  r6,a                                     ; type 0..9
6103 24 F0         add  a,0F0h   ;ID 10h..19h --> type 0..9      ;
6105 90 00 B2      mov  dptr,xram_flash_chiptype                 ;
6108 F0            movx [dptr],a                                 ;/
6109 75 F0 0C      mov  b,0Ch                                        ;\
610C EE            mov  a,r6   ;ID (aka type+10h)                    ;
610D A4            mul  a,b                                          ;
610E 24 39         add  a,(flash_chiptype_list+4-(10h*0Ch)) and 0ffh ;
6110 F5 82         mov  dpl,a                                        ; settings_1
6112 E5 F0         mov  a,b                                          ;
6114 34 93         adc  a,(flash_chiptype_list+4-(10h*0Ch))/100h     ;
6116 F5 83         mov  dph,a                                        ;
6118 12 4B A0      call read_r4r5r6r7_from_code_dptr                 ;
611B 90 00 AE      mov  dptr,xram_settings_1_addr                    ;
611E 12 4B B0      call store_r4r5r6r7_to_dptr                       ;/
6121 75 F0 0C      mov  b,0Ch                                        ;\
6124 EB            mov  a,r3   ;ID (aka type+10h)                    ;
6125 A4            mul  a,b                                          ;
6126 24 3D         add  a,(flash_chiptype_list+8-(10h*0Ch)) and 0ffh ; settings_2
6128 F5 82         mov  dpl,a                                        ;
612A E5 F0         mov  a,b                                          ;
612C 34 93         adc  a,(flash_chiptype_list+8-(10h*0Ch))/100h     ;
612E F5 83         mov  dph,a                                        ;
6130 80 2B         sjmp @@_615Dh                                     ;/
                  ;---
                  @@id_20h:
6132 90 00 B2      mov  dptr,xram_flash_chiptype         ;\
6135 74 0A         mov  a,0Ah                            ; type 0Ah
6137 F0            movx [dptr],a                         ;/
6138 90 94 71      mov  dptr,flash_chiptype_list+4+(0Ah*0Ch)     ;\
613B 12 4B A0      call read_r4r5r6r7_from_code_dptr             ; settings_1
613E 90 00 AE      mov  dptr,xram_settings_1_addr                ;
6141 12 4B B0      call store_r4r5r6r7_to_dptr                   ;/
6144 90 94 75      mov  dptr,flash_chiptype_list+8+(0Ah*0Ch)     ;\settings_2
6147 80 14         sjmp @@_615Dh                                 ;/
                  ;---
                  @@id_unknown:
6149 E4            clr  a                                ;\
614A 90 00 B2      mov  dptr,xram_flash_chiptype         ; FORCE type 0
614D F0            movx [dptr],a                         ;/
614E 90 93 F9      mov  dptr,flash_chiptype_list+4+(00h*0Ch)     ;\
6151 12 4B A0      call read_r4r5r6r7_from_code_dptr             ; settings_1
6154 90 00 AE      mov  dptr,xram_settings_1_addr                ;
6157 12 4B B0      call store_r4r5r6r7_to_dptr                   ;/
615A 90 93 FD      mov  dptr,flash_chiptype_list+8+(00h*0Ch)     ;\settings_2
                  ;- - -                                         ;/
                  @@_615Dh:                                      ;\
615D 12 4B A0      call read_r4r5r6r7_from_code_dptr             ; settings_2
6160 90 00 AA      mov  dptr,xram_settings_2_addr                ;
6163 12 4B B0      call store_r4r5r6r7_to_dptr                   ;/
6166 90 00 B2      mov  dptr,xram_flash_chiptype                 ;\
6169 E0            movx a,[dptr]                                 ;
616A FF            mov  r7,a                                     ;
616B 75 F0 0C      mov  b,0Ch                                    ;
616E A4            mul  a,b                                      ;
616F 24 F7         add  a,(flash_chiptype_list+2) and 0ffh       ; lock_all
6171 F5 82         mov  dpl,a                                    ;
6173 E4            clr  a   ;BUG: should "mov a,b"               ;
6174 34 93         adc  a,(flash_chiptype_list+2)/100h           ;
6176 F5 83         mov  dph,a                                    ;
6178 E4            clr  a                                        ;
6179 93            movc a,[a+dptr]                               ;
617A 90 00 0C      mov  dptr,xram_sett_lock_all                  ;
617D F0            movx [dptr],a                                 ;/
617E EF            mov  a,r7                                     ;\
617F 75 F0 0C      mov  b,0Ch                                    ;
6182 A4            mul  a,b                                      ;
6183 24 F6         add  a,(flash_chiptype_list+1) and 0ffh       ; lock_some
6185 F5 82         mov  dpl,a                                    ;
6187 E4            clr  a                                        ;
6188 34 93         adc  a,(flash_chiptype_list+1)/100h           ;
618A F5 83         mov  dph,a                                    ;
618C E4            clr  a                                        ;
618D 93            movc a,[a+dptr]                               ;
618E 90 00 0B      mov  dptr,xram_sett_lock_some                 ;
6191 F0            movx [dptr],a                                 ;/
6192 90 00 B2      mov  dptr,xram_flash_chiptype                 ;\
6195 E0            movx a,[dptr]                                 ;
6196 75 F0 0C      mov  b,0Ch                                    ;
6199 A4            mul  a,b                                      ;
619A 24 F8         add  a,(flash_chiptype_list+3) and 0ffh       ; cmd_erase
619C F5 82         mov  dpl,a                                    ;
619E E4            clr  a                                        ;
619F 34 93         adc  a,(flash_chiptype_list+3)/100h           ;
61A1 F5 83         mov  dph,a                                    ;
61A3 E4            clr  a                                        ;
61A4 93            movc a,[a+dptr]                               ;
61A5 90 00 0D      mov  dptr,xram_sett_cmd_erase                 ;
61A8 F0            movx [dptr],a                                 ;/
61A9 EF            mov  a,r7                                     ;\
61AA 75 F0 0C      mov  b,0Ch                                    ;
61AD A4            mul  a,b                                      ;
61AE 24 F5         add  a,(flash_chiptype_list+0) and 0ffh       ; chip_id
61B0 F5 82         mov  dpl,a                                    ;
61B2 E4            clr  a                                        ;
61B3 34 93         adc  a,(flash_chiptype_list+0)/100h           ;
61B5 F5 83         mov  dph,a                                    ;
61B7 E4            clr  a                                        ;
61B8 93            movc a,[a+dptr]                               ;
61B9 90 00 0A      mov  dptr,xram_sett_flash_id                  ;
61BC F0            movx [dptr],a                                 ;/
61BD 90 00 0C      mov  dptr,xram_sett_lock_all          ;\
61C0 E0            movx a,[dptr]                         ;
61C1 90 00 40      mov  dptr,xram_curr_lock_all          ;
61C4 F0            movx [dptr],a                         ;/
61C5 90 00 0B      mov  dptr,xram_sett_lock_some         ;\
61C8 E0            movx a,[dptr]                         ;
61C9 90 00 3E      mov  dptr,xram_curr_lock_some         ;
61CC F0            movx [dptr],a                         ;/
61CD 12 86 59      call read_flash_settings_1    ;<---
61D0 90 00 0E      mov  dptr,xram_sett_testburn          ;\
61D3 74 55         mov  a,55h                            ;
61D5 F0            movx [dptr],a                         ; set 55h for write-test
61D6 90 00 85      mov  dptr,xram_tmp__7Eh               ;
61D9 F0            movx [dptr],a                         ;/
61DA 12 A9 7F      call xxx_A97Fh           ;.......settings  WRITE ???
61DD 12 86 59      call read_flash_settings_1    ;<--- again settings_1 ?  try.readback
61E0 90 00 0E      mov  dptr,xram_sett_testburn          ;\
61E3 E0            movx a,[dptr]                         ;
61E4 FF            mov  r7,a         ;<--                ; verify if 55h was
61E5 90 00 85      mov  dptr,xram_tmp__7Eh               ; written & readback
61E8 E0            movx a,[dptr]                         ;   (can be 00h when NOT ERASED)
61E9 6F            xor  a,r7         ;<--                ;
61EA 70 03         jnz  a,@@_61EFh     ;---> uh, bad?    ;/
61EC 02 62 8A      jmp  @@_628Ah    ;---> done/okay
                  ;---
                  @@_61EFh:
61EF E4            clr  a                                ;\
61F0 90 00 B2      mov  dptr,xram_flash_chiptype         ; FORCE type 0
61F3 F0            movx [dptr],a                         ;/
61F4 E0            movx a,[dptr]                                 ;\
61F5 FF            mov  r7,a                                     ;
61F6 75 F0 0C      mov  b,0Ch                                    ;
61F9 A4            mul  a,b                                      ;
61FA 24 F7         add  a,(flash_chiptype_list+2) and 0ffh       ; lock_all
61FC F5 82         mov  dpl,a                                    ;
61FE E4            clr  a                                        ;
61FF 34 93         adc  a,(flash_chiptype_list+2)/100h           ;
6201 F5 83         mov  dph,a                                    ;
6203 E4            clr  a                                        ;
6204 93            movc a,[a+dptr]                               ;
6205 90 00 0C      mov  dptr,xram_sett_lock_all                  ;
6208 F0            movx [dptr],a                                 ;/
6209 EF            mov  a,r7                                     ;\
620A 75 F0 0C      mov  b,0Ch                                    ;
620D A4            mul  a,b                                      ;
620E 24 F6         add  a,(flash_chiptype_list+1) and 0ffh       ; lock_some
6210 F5 82         mov  dpl,a                                    ;
6212 E4            clr  a                                        ;
6213 34 93         adc  a,(flash_chiptype_list+1)/100h           ;
6215 F5 83         mov  dph,a                                    ;
6217 E4            clr  a                                        ;
6218 93            movc a,[a+dptr]                               ;
6219 90 00 0B      mov  dptr,xram_sett_lock_some                 ;
621C F0            movx [dptr],a                                 ;/
621D 90 00 B2      mov  dptr,xram_flash_chiptype                 ;\
6220 E0            movx a,[dptr]                                 ;
6221 75 F0 0C      mov  b,0Ch                                    ;
6224 A4            mul  a,b                                      ;
6225 24 F8         add  a,(flash_chiptype_list+3) and 0ffh       ; cmd_erase
6227 F5 82         mov  dpl,a                                    ;
6229 E4            clr  a                                        ;
622A 34 93         adc  a,(flash_chiptype_list+3)/100h           ;
622C F5 83         mov  dph,a                                    ;
622E E4            clr  a                                        ;
622F 93            movc a,[a+dptr]                               ;
6230 90 00 0D      mov  dptr,xram_sett_cmd_erase                 ;
6233 F0            movx [dptr],a                                 ;/
6234 EF            mov  a,r7                                     ;\
6235 75 F0 0C      mov  b,0Ch                                    ;
6238 A4            mul  a,b                                      ;
6239 24 F5         add  a,(flash_chiptype_list+0) and 0ffh       ;
623B F5 82         mov  dpl,a                                    ; chip_id
623D E4            clr  a                                        ;
623E 34 93         adc  a,(flash_chiptype_list+0)/100h           ;
6240 F5 83         mov  dph,a                                    ;
6242 E4            clr  a                                        ;
6243 93            movc a,[a+dptr]                               ;
6244 90 00 0A      mov  dptr,xram_sett_flash_id                  ;
6247 F0            movx [dptr],a                                 ;/
6248 90 00 B2      mov  dptr,xram_flash_chiptype                 ;\
624B E0            movx a,[dptr]                                 ;
624C FB            mov  r3,a                                     ;
624D 75 F0 0C      mov  b,0Ch                                    ;
6250 A4            mul  a,b                                      ; settings_1
6251 24 F9         add  a,(flash_chiptype_list+4) and 0ffh       ;
6253 F5 82         mov  dpl,a                                    ;
6255 E4            clr  a                                        ;
6256 34 93         adc  a,(flash_chiptype_list+4)/100h           ;
6258 F5 83         mov  dph,a                                    ;
625A 12 4B A0      call read_r4r5r6r7_from_code_dptr             ;
625D 90 00 AE      mov  dptr,xram_settings_1_addr                ;
6260 12 4B B0      call store_r4r5r6r7_to_dptr                   ;/
6263 EB            mov  a,r3                                     ;\
6264 75 F0 0C      mov  b,0Ch                                    ;
6267 A4            mul  a,b                                      ;
6268 24 FD         add  a,(flash_chiptype_list+8) and 0ffh       ;
626A F5 82         mov  dpl,a                                    ; settings_2
626C E4            clr  a                                        ;
626D 34 93         adc  a,(flash_chiptype_list+8)/100h           ;
626F F5 83         mov  dph,a                                    ;
6271 12 4B A0      call read_r4r5r6r7_from_code_dptr             ;
6274 90 00 AA      mov  dptr,xram_settings_2_addr                ;
6277 12 4B B0      call store_r4r5r6r7_to_dptr                   ;/
627A 90 00 0C      mov  dptr,xram_sett_lock_all          ;\
627D E0            movx a,[dptr]                         ;
627E 90 00 40      mov  dptr,xram_curr_lock_all          ;
6281 F0            movx [dptr],a                         ;/
6282 90 00 0B      mov  dptr,xram_sett_lock_some         ;\
6285 E0            movx a,[dptr]                         ;
6286 90 00 3E      mov  dptr,xram_curr_lock_some         ;
6289 F0            movx [dptr],a                         ;/
                  @@_628Ah:
628A 90 00 0E      mov  dptr,xram_sett_testburn          ;\
628D 74 AA         mov  a,0AAh                           ;
628F F0            movx [dptr],a                         ;/
6290 22            ret
                .endif
                .endm ;defcode_detect_flash_chiptype
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_detect_flash_chiptype
                  defdata_customer
                .endif
                ;------------------
;:------------- ;:----------------- CRAP code (xlat min/med/max)
                ;------------------
                xlat_bright_contrast_saturation_to_hex_values:
                 ;note: requires prior "get_min_max_med_for_brightness_contrast_saturation"
                 ;note: for Tint, see "xlat_tint_to_hex_values"
                 ;- - -
                 ;in: r7    = USER value in decimal 0..100
                 ;in: r5    = MEDIUM value in HEX
                 ;in: [iram_tmp__3Bh] = MIN value in HEX (usually MEDIUM-28h, min 00h) (always 00h for saturation)
                 ;in: [iram_tmp__3Ch] = MAX value in HEX (usually MEDIUM+28h, max FFh)
                 ;- - -
6CE6 8F 39       mov  [iram_tmp__39h],r7
6CE8 8D 3A       mov  [iram_tmp__3Ah],r5
6CEA E5 39       mov  a,[iram_tmp__39h]
6CEC C3          clr  c
6CED 94 00       sbc  a,00h     ;uh/blah
6CEF 40 3F       jc   @@not_0_thru_20
6CF1 E5 39       mov  a,[iram_tmp__39h]
6CF3 D3          set  c      ;<--
6CF4 94 14       sbc  a,14h  ;20 decimal
6CF6 50 38       jnc  @@not_0_thru_20
6CF8 C3          clr  c
6CF9 ED          mov  a,r5
6CFA 95 3B       sbc  a,[iram_tmp__3Bh]           ;??
6CFC FF          mov  r7,a
6CFD E4          clr  a
6CFE 94 00       sbc  a,00h
6D00 FE          mov  r6,a
6D01 AD 39       mov  r5,[iram_tmp__39h]
6D03 7C 00       mov  r4,00h
6D05 12 4A 94    call multiply_r6r7_by_r4r5
6D08 AC 06       mov  r4,r6(0) ;value.msb
6D0A AD 07       mov  r5,r7(0) ;value.lsb
6D0C E4          clr  a        ;sign
6D0D 12 48 37    call convert_a_r4r5_to_float
6D10 E4          clr  a
6D11 FB          mov  r3,a
6D12 FA          mov  r2,a
6D13 79 A0       mov  r1,0A0h
6D15 78 41       mov  r0,41h
6D17 12 47 95    call float_divide
6D1A E4          clr  a
6D1B FB          mov  r3,a
6D1C FA          mov  r2,a
6D1D F9          mov  r1,a
6D1E 78 3F       mov  r0,3Fh
6D20 12 46 8C    call float_multiply
6D23 C0 04       push r4(0)
6D25 C0 05       push r5(0)
6D27 C0 06       push r6(0)
6D29 C0 07       push r7(0)
6D2B AC 3B       mov  r4,[iram_tmp__3Bh]
6D2D 02 6D E4    jmp  @@final_convert_sub_sub
                ;---
                @@not_0_thru_20:
6D30 E5 39       mov  a,[iram_tmp__39h]
6D32 D3          set  c      ;<---
6D33 94 14       sbc  a,14h  ;20 decimal (blah)
6D35 40 64       jc   @@not_21_thru_50
6D37 E5 39       mov  a,[iram_tmp__39h]
6D39 D3          set  c      ;<---
6D3A 94 32       sbc  a,32h  ;50 decimal
6D3C 50 5D       jnc  @@not_21_thru_50
6D3E C3          clr  c
6D3F E5 3A       mov  a,[iram_tmp__3Ah]
6D41 95 3B       sbc  a,[iram_tmp__3Bh]
6D43 FF          mov  r7,a
6D44 E4          clr  a
6D45 94 00       sbc  a,00h
6D47 FE          mov  r6,a
6D48 E5 39       mov  a,[iram_tmp__39h]
6D4A 24 EC       add  a,0ECh
6D4C FD          mov  r5,a
6D4D E4          clr  a
6D4E 34 FF       adc  a,0FFh
6D50 FC          mov  r4,a
6D51 12 4A 94    call multiply_r6r7_by_r4r5
6D54 AC 06       mov  r4,r6(0) ;value.msb
6D56 AD 07       mov  r5,r7(0) ;value.lsb
6D58 E4          clr  a        ;sign
6D59 12 48 37    call convert_a_r4r5_to_float
6D5C E4          clr  a
6D5D FB          mov  r3,a
6D5E FA          mov  r2,a
6D5F 79 F0       mov  r1,0F0h
6D61 78 41       mov  r0,41h
6D63 12 47 95    call float_divide
6D66 E4          clr  a
6D67 FB          mov  r3,a
6D68 FA          mov  r2,a
6D69 F9          mov  r1,a
6D6A 78 3F       mov  r0,3Fh
6D6C 12 46 8C    call float_multiply
6D6F C0 04       push r4(0)
6D71 C0 05       push r5(0)
6D73 C0 06       push r6(0)
6D75 C0 07       push r7(0)
6D77 C3          clr  c
6D78 E5 3A       mov  a,[iram_tmp__3Ah]
6D7A 95 3B       sbc  a,[iram_tmp__3Bh]
6D7C FD          mov  r5,a      ;value.lsb
6D7D E4          clr  a
6D7E 94 00       sbc  a,00h
6D80 FC          mov  r4,a      ;value.msb
6D81 E4          clr  a         ;sign
6D82 12 48 37    call convert_a_r4r5_to_float
6D85 E4          clr  a
6D86 FB          mov  r3,a
6D87 FA          mov  r2,a
6D88 F9          mov  r1,a
6D89 78 3F       mov  r0,3Fh
6D8B 12 46 8C    call float_multiply
6D8E C0 04       push r4(0)
6D90 C0 05       push r5(0)
6D92 C0 06       push r6(0)
6D94 C0 07       push r7(0)
6D96 AC 3B       mov  r4,[iram_tmp__3Bh]
6D98 02 6E 55    jmp  @@final_sub_sub
                ;---
                @@not_21_thru_50:
6D9B E5 39       mov  a,[iram_tmp__39h]
6D9D D3          set  c      ;<---
6D9E 94 32       sbc  a,32h  ;50 decimal (blah)
6DA0 40 48       jc   @@not_51_thru_80
6DA2 E5 39       mov  a,[iram_tmp__39h]
6DA4 D3          set  c      ;<---
6DA5 94 50       sbc  a,50h  ;80 decimal
6DA7 50 41       jnc  @@not_51_thru_80
6DA9 C3          clr  c
6DAA E5 3C       mov  a,[iram_tmp__3Ch]
6DAC 95 3A       sbc  a,[iram_tmp__3Ah]
6DAE FF          mov  r7,a
6DAF E4          clr  a
6DB0 94 00       sbc  a,00h
6DB2 FE          mov  r6,a
6DB3 E5 39       mov  a,[iram_tmp__39h]
6DB5 24 CE       add  a,0CEh
6DB7 FD          mov  r5,a
6DB8 E4          clr  a
6DB9 34 FF       adc  a,0FFh
6DBB FC          mov  r4,a
6DBC 12 4A 94    call multiply_r6r7_by_r4r5
6DBF AC 06       mov  r4,r6(0) ;value.msb
6DC1 AD 07       mov  r5,r7(0) ;value.lsb
6DC3 E4          clr  a        ;sign
6DC4 12 48 37    call convert_a_r4r5_to_float
6DC7 E4          clr  a
6DC8 FB          mov  r3,a
6DC9 FA          mov  r2,a
6DCA 79 F0       mov  r1,0F0h
6DCC 78 41       mov  r0,41h
6DCE 12 47 95    call float_divide
6DD1 E4          clr  a
6DD2 FB          mov  r3,a
6DD3 FA          mov  r2,a
6DD4 F9          mov  r1,a
6DD5 78 3F       mov  r0,3Fh
6DD7 12 46 8C    call float_multiply
6DDA C0 04       push r4(0)
6DDC C0 05       push r5(0)
6DDE C0 06       push r6(0)
6DE0 C0 07       push r7(0)
6DE2 AC 3A       mov  r4,[iram_tmp__3Ah] ;value
                @@final_convert_sub_sub:
6DE4 E4          clr  a        ;sign
6DE5 12 48 3C    call convert_a_r4_to_float
6DE8 80 7A       sjmp @@final_sub
                ;---
                @@not_51_thru_80:
6DEA E5 39       mov  a,[iram_tmp__39h]
6DEC D3          set  c
6DED 94 50       sbc  a,50h  ;80 decimal (blah)
6DEF 50 03       jnc  @@cont
6DF1 02 6E 77    jmp  @@not_81_thru_100
                ;---
                @@cont:
6DF4 E5 39       mov  a,[iram_tmp__39h]
6DF6 D3          set  c
6DF7 94 64       sbc  a,64h  ;100 decimal
6DF9 50 7C       jnc  @@not_81_thru_100
6DFB C3          clr  c
6DFC E5 3C       mov  a,[iram_tmp__3Ch]
6DFE 95 3A       sbc  a,[iram_tmp__3Ah]
6E00 FF          mov  r7,a
6E01 E4          clr  a
6E02 94 00       sbc  a,00h
6E04 FE          mov  r6,a
6E05 E5 39       mov  a,[iram_tmp__39h]
6E07 24 B0       add  a,0B0h
6E09 FD          mov  r5,a
6E0A E4          clr  a
6E0B 34 FF       adc  a,0FFh
6E0D FC          mov  r4,a
6E0E 12 4A 94    call multiply_r6r7_by_r4r5
6E11 AC 06       mov  r4,r6(0) ;value.msb
6E13 AD 07       mov  r5,r7(0) ;value.lsb
6E15 E4          clr  a        ;sign
6E16 12 48 37    call convert_a_r4r5_to_float
6E19 E4          clr  a
6E1A FB          mov  r3,a
6E1B FA          mov  r2,a
6E1C 79 A0       mov  r1,0A0h
6E1E 78 41       mov  r0,41h
6E20 12 47 95    call float_divide
6E23 E4          clr  a
6E24 FB          mov  r3,a
6E25 FA          mov  r2,a
6E26 F9          mov  r1,a
6E27 78 3F       mov  r0,3Fh
6E29 12 46 8C    call float_multiply
6E2C C0 04       push r4(0)
6E2E C0 05       push r5(0)
6E30 C0 06       push r6(0)
6E32 C0 07       push r7(0)
6E34 C3          clr  c
6E35 E5 3C       mov  a,[iram_tmp__3Ch]
6E37 95 3A       sbc  a,[iram_tmp__3Ah]
6E39 FD          mov  r5,a      ;value.lsb
6E3A E4          clr  a
6E3B 94 00       sbc  a,00h
6E3D FC          mov  r4,a      ;value.msb
6E3E E4          clr  a         ;sign
6E3F 12 48 37    call convert_a_r4r5_to_float
6E42 E4          clr  a
6E43 FB          mov  r3,a
6E44 FA          mov  r2,a
6E45 F9          mov  r1,a
6E46 78 3F       mov  r0,3Fh
6E48 12 46 8C    call float_multiply
6E4B C0 04       push r4(0)
6E4D C0 05       push r5(0)
6E4F C0 06       push r6(0)
6E51 C0 07       push r7(0)
6E53 AC 3A       mov  r4,[iram_tmp__3Ah] ;value
                @@final_sub_sub:
6E55 E4          clr  a        ;sign
6E56 12 48 3C    call convert_a_r4_to_float
6E59 D0 03       pop  r3(0)
6E5B D0 02       pop  r2(0)
6E5D D0 01       pop  r1(0)
6E5F D0 00       pop  r0(0)
6E61 12 45 9B    call float_subtract_r4r5r6r7_r0r1r2r3
                @@final_sub:
6E64 D0 03       pop  r3(0)
6E66 D0 02       pop  r2(0)
6E68 D0 01       pop  r1(0)
6E6A D0 00       pop  r0(0)
6E6C 12 45 9B    call float_subtract_r4r5r6r7_r0r1r2r3
6E6F 12 48 70    call convert_float_to_r4r5r6r7
6E72 90 00 90    mov  dptr,xram_tmp__90h
6E75 EF          mov  a,r7
6E76 F0          movx [dptr],a
                @@not_81_thru_100:
6E77 90 00 90    mov  dptr,xram_tmp__90h
6E7A E0          movx a,[dptr]
6E7B FF          mov  r7,a
6E7C 22          ret
                ;------------------
;:------------- ;:----------------- GUI misc (misc code and language data)
                ;------------------
                xxx_6E7Dh:
6E7D 8F 28       mov  [iram_tmp__28h],r7            ;-
6E7F 90 00 47    mov  dptr,xram_keypad_flags_lsb    ;\
6E82 E0          movx a,[dptr]                      ; check if display ON
6E83 20 E0 03    jnz  a.0,@@display_is_on           ;/
6E86 02 6F F5    jmp  @@exit                        ;-refuse when display OFF
                ;---
                @@display_is_on:
6E89 90 00 B8    mov  dptr,xram_current_menu                        ;\
6E8C E0          movx a,[dptr]                                      ;
6E8D 75 F0 03    mov  b,03h                                         ;
6E90 A4          mul  a,b                                           ;
6E91 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
6E93 F5 82       mov  dpl,a                                         ; change
6E95 E4          clr  a                                             ; proc
6E96 34 2C       adc  a,gui_menu_list/100h                          ; exists
6E98 F5 83       mov  dph,a                                         ;
6E9A E4          clr  a                                             ;
6E9B 93          movc a,[a+dptr]                                    ;
6E9C FB          mov  r3,a                                          ;
6E9D 74 01       mov  a,01h                                         ;
6E9F 93          movc a,[a+dptr]                                    ;
6EA0 FA          mov  r2,a                                          ;
6EA1 74 02       mov  a,02h                                         ;
6EA3 93          movc a,[a+dptr]                                    ;
6EA4 F9          mov  r1,a                                          ;
6EA5 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
6EA8 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
6EAB 90 00 B9    mov  dptr,xram_current_item                        ;
6EAE E0          movx a,[dptr]                                      ;
6EAF 75 F0 20    mov  b,20h                                         ;
6EB2 A4          mul  a,b                                           ;
6EB3 FF          mov  r7,a                                          ;
6EB4 AE F0       mov  r6,b                                          ;
6EB6 29          add  a,r1                                          ;
6EB7 F9          mov  r1,a                                          ;
6EB8 EA          mov  a,r2                                          ;
6EB9 3E          adc  a,r6                                          ;
6EBA FA          mov  r2,a                                          ;
6EBB 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
6EBE 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
6EC1 EA          mov  a,r2                                          ;
6EC2 49          or   a,r1                                          ;
6EC3 4B          or   a,r3                                          ;
6EC4 60 3C       jz   a,@@no_change_proc                            ;/
6EC6 90 00 B8    mov  dptr,xram_current_menu                        ;\
6EC9 E0          movx a,[dptr]                                      ;
6ECA 75 F0 03    mov  b,03h                                         ;
6ECD A4          mul  a,b                                           ;
6ECE 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
6ED0 F5 82       mov  dpl,a                                         ; change
6ED2 E4          clr  a                                             ; proc
6ED3 34 2C       adc  a,gui_menu_list/100h                          ;
6ED5 F5 83       mov  dph,a                                         ;
6ED7 E4          clr  a                                             ;
6ED8 93          movc a,[a+dptr]                                    ;
6ED9 FB          mov  r3,a                                          ;
6EDA 74 01       mov  a,01h                                         ;
6EDC 93          movc a,[a+dptr]                                    ;
6EDD FA          mov  r2,a                                          ;
6EDE 74 02       mov  a,02h                                         ;
6EE0 93          movc a,[a+dptr]                                    ;
6EE1 F9          mov  r1,a                                          ;
6EE2 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
6EE5 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
6EE8 E9          mov  a,r1                                          ;
6EE9 2F          add  a,r7                                          ;
6EEA F9          mov  r1,a                                          ;
6EEB EA          mov  a,r2                                          ;
6EEC 3E          adc  a,r6                                          ;
6EED FA          mov  r2,a                                          ;
6EEE 90 00 14    mov  dptr,0014h ;idxItemProcChange                 ;
6EF1 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
6EF4 89 82       mov  dpl,r1                                        ;
6EF6 8A 83       mov  dph,r2                                        ;
6EF8 AF 28       mov  r7,[iram_tmp__28h]                            ;
6EFA 12 4D B5    call jmp_dptr          ;----->                     ;/
6EFD 50 03       jnc  @@_6F02h          ;<--
6EFF 12 82 95    call xxx_8295h         ;----->
                ;- - -
                @@_6F02h:
                @@no_change_proc:
6F02 90 00 B8    mov  dptr,xram_current_menu                        ;\
6F05 E0          movx a,[dptr]                                      ;
6F06 75 F0 03    mov  b,03h                                         ;
6F09 A4          mul  a,b                                           ;
6F0A 24 4C       add  a,gui_menu_list and 0ffh                      ; check if
6F0C F5 82       mov  dpl,a                                         ; apply
6F0E E4          clr  a                                             ; proc
6F0F 34 2C       adc  a,gui_menu_list/100h                          ; exists
6F11 F5 83       mov  dph,a                                         ;
6F13 E4          clr  a                                             ;
6F14 93          movc a,[a+dptr]                                    ;
6F15 FB          mov  r3,a                                          ;
6F16 74 01       mov  a,01h                                         ;
6F18 93          movc a,[a+dptr]                                    ;
6F19 FA          mov  r2,a                                          ;
6F1A 74 02       mov  a,02h                                         ;
6F1C 93          movc a,[a+dptr]                                    ;
6F1D F9          mov  r1,a                                          ;
6F1E 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
6F21 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
6F24 90 00 B9    mov  dptr,xram_current_item                        ;
6F27 E0          movx a,[dptr]                                      ;
6F28 75 F0 20    mov  b,20h                                         ;
6F2B A4          mul  a,b                                           ;
6F2C FF          mov  r7,a                                          ;
6F2D AE F0       mov  r6,b                                          ;
6F2F 29          add  a,r1                                          ;
6F30 F9          mov  r1,a                                          ;
6F31 EA          mov  a,r2                                          ;
6F32 3E          adc  a,r6                                          ;
6F33 FA          mov  r2,a                                          ;
6F34 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
6F37 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
6F3A EA          mov  a,r2                                          ;
6F3B 49          or   a,r1                                          ;
6F3C 4B          or   a,r3                                          ;
6F3D 60 31       jz   a,@@no_apply_proc                             ;/
6F3F 90 00 B8    mov  dptr,xram_current_menu                        ;\
6F42 E0          movx a,[dptr]                                      ;
6F43 75 F0 03    mov  b,03h                                         ;
6F46 A4          mul  a,b                                           ;
6F47 24 4C       add  a,gui_menu_list and 0ffh                      ; execute
6F49 F5 82       mov  dpl,a                                         ; apply
6F4B E4          clr  a                                             ; proc
6F4C 34 2C       adc  a,gui_menu_list/100h                          ;
6F4E F5 83       mov  dph,a                                         ;
6F50 E4          clr  a                                             ;
6F51 93          movc a,[a+dptr]                                    ;
6F52 FB          mov  r3,a                                          ;
6F53 74 01       mov  a,01h                                         ;
6F55 93          movc a,[a+dptr]                                    ;
6F56 FA          mov  r2,a                                          ;
6F57 74 02       mov  a,02h                                         ;
6F59 93          movc a,[a+dptr]                                    ;
6F5A F9          mov  r1,a                                          ;
6F5B 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
6F5E 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
6F61 E9          mov  a,r1                                          ;
6F62 2F          add  a,r7                                          ;
6F63 F9          mov  r1,a                                          ;
6F64 EA          mov  a,r2                                          ;
6F65 3E          adc  a,r6                                          ;
6F66 FA          mov  r2,a                                          ;
6F67 90 00 17    mov  dptr,0017h ;idxItemProcApply                  ;
6F6A 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
6F6D 12 4D B1    call jmp_r2r1  ;----->                             ;/
                @@no_apply_proc:
6F70 90 00 46    mov  dptr,xram_keypad_flags_msb
6F73 E0          movx a,[dptr]
6F74 FE          mov  r6,a
6F75 A3          inc  dptr ;=xram_keypad_flags_lsb
6F76 E0          movx a,[dptr]
6F77 78 03       mov  r0,03h  ;shift amount     ;\
                @@shift_lop:                    ;
6F79 CE          xchg a,r6                      ;
6F7A C3          clr  c                         ;
6F7B 13          rcr  a                         ;
6F7C CE          xchg a,r6                      ;
6F7D 13          rcr  a                         ;
6F7E D8 F9       djnz r0,@@shift_lop            ;/
6F80 FF          mov  r7,a
6F81 30 E0 03    jz   a.0,@@clear_cy
6F84 D3          set  c
6F85 80 01       sjmp @@this_cy
                @@clear_cy:
6F87 C3          clr  c
                @@this_cy:
6F88 40 6B       jc   @@exit
6F8A 90 00 B8    mov  dptr,xram_current_menu
6F8D E0          movx a,[dptr]
6F8E 75 F0 03    mov  b,03h
6F91 A4          mul  a,b
6F92 24 4C       add  a,gui_menu_list and 0ffh
6F94 F5 82       mov  dpl,a
6F96 E4          clr  a
6F97 34 2C       adc  a,gui_menu_list/100h
6F99 F5 83       mov  dph,a
6F9B E4          clr  a
6F9C 93          movc a,[a+dptr]
6F9D FB          mov  r3,a
6F9E 74 01       mov  a,01h
6FA0 93          movc a,[a+dptr]
6FA1 FA          mov  r2,a
6FA2 74 02       mov  a,02h
6FA4 93          movc a,[a+dptr]
6FA5 F9          mov  r1,a
6FA6 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
6FA9 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
6FAC B4 0F 04    jne  a,MenuID_0Fh_Reset,@@_6FB3h               ;\
6FAF 7D 01       mov  r5,01h                                    ;
6FB1 80 02       sjmp @@_6FB5h                                  ;
                ;---                                            ;
                @@_6FB3h:                                       ;
6FB3 7D 00       mov  r5,00h                                    ;
                @@_6FB5h:                                       ;
6FB5 ED          mov  a,r5                                      ;/
6FB6 60 0C       jz   a,@@_6FC4h
6FB8 EF          mov  a,r7
6FB9 30 E0 03    jz   a.0,@@clear_cy2                           ;\
6FBC D3          set  c                                         ;
6FBD 80 01       sjmp @@this_cy2                                ;
                ;---                                            ;
                @@clear_cy2:                                    ;
6FBF C3          clr  c                                         ;
                @@this_cy2:                                     ;/
6FC0 40 33       jc   @@exit
6FC2 80 2E       sjmp @@_6FF2h
                ;---
                @@_6FC4h:
6FC4 90 00 B8    mov  dptr,xram_current_menu
6FC7 E0          movx a,[dptr]
6FC8 75 F0 03    mov  b,03h
6FCB A4          mul  a,b
6FCC 24 4C       add  a,gui_menu_list and 0ffh
6FCE F5 82       mov  dpl,a
6FD0 E4          clr  a
6FD1 34 2C       adc  a,gui_menu_list/100h
6FD3 F5 83       mov  dph,a
6FD5 E4          clr  a
6FD6 93          movc a,[a+dptr]
6FD7 FB          mov  r3,a
6FD8 74 01       mov  a,01h
6FDA 93          movc a,[a+dptr]
6FDB FA          mov  r2,a
6FDC 74 02       mov  a,02h
6FDE 93          movc a,[a+dptr]
6FDF F9          mov  r1,a
6FE0 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
6FE3 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
6FE6 B4 07 04    jne  a,MenuID_07h_SelSource,@@_6FEDh           ;\
6FE9 7F 01       mov  r7,01h                                    ;
6FEB 80 02       sjmp @@_6FEFh                                  ;
                ;---                                            ;
                @@_6FEDh:                                       ;
6FED 7F 00       mov  r7,00h                                    ;
                @@_6FEFh:                                       ;
6FEF EF          mov  a,r7                                      ;/
6FF0 60 03       jz   a,@@exit
                @@_6FF2h:
6FF2 12 A5 FB    call do_select_menu_SourceMenu_and_whatever
                @@exit:
6FF5 22          ret
                ;------------------
6FF6 4C 41 4E.. txt_language_english   db 'LANG.',00h    ;also for french/italian
6FFC 23 2D 20.. txt_language_slang_01h db '#-  #% ',00h
7004 49 44 49.. txt_language_spanish   db 'IDIO.',00h
700A 53 50 52.. txt_language_german    db 'SPRA.',00h
7010 4C AD 4E.. txt_language_portugese db 'L',0ADh,'NG.',00h
7016 54 41 41.. txt_language_dutch     db 'TAAL ',00h
701C 1F 0D 1C.. txt_language_slang_08h db 1Fh,0Dh,1Ch,10h,' ',00h
7022 23 16 20.. txt_language_slang_09h db '#',16h,'  #',17h,' ',00h
702A 23 17 20.. txt_language_slang_0Ah db '#',17h,'  #',0C7h,' ',00h
7032 F2 20 20.. txt_language_slang_0Bh db 0F2h,'  #',17h,' ',00h
7039 0C 0D 0E.. txt_language_slang_0Ch db 0Ch,0Dh,0Eh,10h,' ',00h
703F 4A 06 5A.. txt_language_polish    db 'J',06h,'ZYK',00h
7045 44 49 4C.. txt_language_turkish   db 'DIL  ',00h
                ;------------------
704B 45 4E 47.. txt_english            db 'ENGLISH ',00h                  ;ENGLISH
7054 20 20 23.. txt_slang_01h          db '  #',0D0h,' #',0D1h,' #% ',00h ;
7060 46 52 41.. txt_french             db 'FRANCAIS',00h                  ;FRANCAIS
7069 49 54 41.. txt_italian            db 'ITALIANO',00h                  ;ITALIANO
7072 45 53 50.. txt_spanish            db 'ESPA',0C5h,'OL ',00h           ;ESPAnOL
707B 44 45 55.. txt_german             db 'DEUTSCH ',00h                  ;DEUTSCH
7084 50 4F 52.. txt_portugese          db 'PORTUGU.',00h                  ;PORTUGU.
708D 45 4E 47.. txt_dutch              db 'ENGELS  ',00h                  ;ENGELS  ;BUG (see Dutch?)
7096 25 24 26.. txt_slang_08h          db '%$&&',0Eh,1Fh,'  ',00h         ;
709F 20 20 23.. txt_slang_09h          db '  #',0A7h,' #',0A8h,'   ',00h  ;
70AA 23 71 20.. txt_slang_0Ah          db '#q #',0C6h,' #',0C7h,'   ',00h ;B/|\#  (japanese)
70B6 20 20 F3.. txt_slang_0Bh          db '  ',0F3h,' ',0F4h,'   ',00h    ;POCCnr
70BF 08 29 11.. txt_slang_0Ch          db 08h,')',11h,0Ah,07h,'%&.',00h   ;
70C8 50 4F 4C.. txt_polish             db 'POLSKI  ',00h                  ;POLSKI
70D1 54 A8 52.. txt_turkish            db 'T',0A8h,'RK     ',00h          ;TuRK
                ;------------------
                language_re_order_list:   ;(00h..0Eh)   ;used 2x
70DB 00          db   00h      ;00h --> 00h ;English
70DC 09          db   09h      ;01h --> 09h ;  jpn/chn/kor?
70DD 0A          db   0Ah      ;02h --> 0Ah ;  jpn/chn/kor?       JAPAN
70DE 0B          db   0Bh      ;03h --> 0Bh ;  jpn/chn/kor?
70DF 01          db   01h      ;04h --> 01h ;  jpn/chn/kor?
70E0 02          db   02h      ;05h --> 02h ;French
70E1 03          db   03h      ;06h --> 03h ;Italian
70E2 04          db   04h      ;07h --> 04h ;Spanish
70E3 05          db   05h      ;08h --> 05h ;German
70E4 06          db   06h      ;09h --> 06h ;Portugese
70E5 07          db   07h      ;0Ah --> 07h ;Dutch "Engels???"
70E6 08          db   08h      ;0Bh --> 08h ;  cyrillic?   POCCNR
70E7 0C          db   0Ch      ;0Ch --> 0Ch ;  cyrillic?   greek? bulgarian?
70E8 0D          db   0Dh      ;0Dh --> 0Dh ;Polish
70E9 0E          db   0Eh      ;0Eh --> 0Eh ;Turkish
                ;------------------
                localized_txtlist_language:
70EA FF 6F F6    db   0FFh // dw txt_language_english   ;LANG. ;00h ;English
70ED FF 6F FC    db   0FFh // dw txt_language_slang_01h ;?     ;01h ;  jpn/chn/kor?
70F0 FF 6F F6    db   0FFh // dw txt_language_english   ;LANG. ;02h ;French
70F3 FF 6F F6    db   0FFh // dw txt_language_english   ;LANG. ;03h ;Italian
70F6 FF 70 04    db   0FFh // dw txt_language_spanish   ;IDIO. ;04h ;Spanish
70F9 FF 70 0A    db   0FFh // dw txt_language_german    ;SPRA. ;05h ;German
70FC FF 70 10    db   0FFh // dw txt_language_portugese ;LiNG. ;06h ;Portugese
70FF FF 70 16    db   0FFh // dw txt_language_dutch     ;TAAL  ;07h ;Dutch "Engels???"
7102 FF 70 1C    db   0FFh // dw txt_language_slang_08h ;?     ;08h ;  jpn/chn/kor?
7105 FF 70 22    db   0FFh // dw txt_language_slang_09h ;?     ;09h ;  jpn/chn/kor?
7108 FF 70 2A    db   0FFh // dw txt_language_slang_0Ah ;?     ;0Ah ;  jpn/chn/kor?
710B FF 70 32    db   0FFh // dw txt_language_slang_0Bh ;?     ;0Bh ;  cyrillic?
710E FF 70 39    db   0FFh // dw txt_language_slang_0Ch ;?     ;0Ch ;  cyrillic?
7111 FF 70 3F    db   0FFh // dw txt_language_polish    ;JeZYK ;0Dh ;Polish
7114 FF 70 45    db   0FFh // dw txt_language_turkish   ;DIL   ;0Eh ;Turkish
                ;------------------
                localized_txtlist_language_name:
7117 FF 70 4B    db   0FFh // dw txt_english    ;00h ;English
711A FF 70 54    db   0FFh // dw txt_slang_01h  ;01h ;?
711D FF 70 60    db   0FFh // dw txt_french     ;02h ;French
7120 FF 70 69    db   0FFh // dw txt_italian    ;03h ;Italian
7123 FF 70 72    db   0FFh // dw txt_spanish    ;04h ;Spanish
7126 FF 70 7B    db   0FFh // dw txt_german     ;05h ;German
7129 FF 70 84    db   0FFh // dw txt_portugese  ;06h ;Portugese
712C FF 70 8D    db   0FFh // dw txt_dutch      ;07h ;Dutch "Engels???"  BUG: maybe this is Dutch (whereas, Engels is the Dutch word for ENGLISH) (apparently somebody was told to "translate ALL english words" to dutch, including for doing translating "english" to the dutch word for english)
712F FF 70 96    db   0FFh // dw txt_slang_08h  ;08h ;?
7132 FF 70 9F    db   0FFh // dw txt_slang_09h  ;09h ;?
7135 FF 70 AA    db   0FFh // dw txt_slang_0Ah  ;0Ah ;?  Japanese
7138 FF 70 B6    db   0FFh // dw txt_slang_0Bh  ;0Bh ;?  Russian
713B FF 70 BF    db   0FFh // dw txt_slang_0Ch  ;0Ch ;?
713E FF 70 C8    db   0FFh // dw txt_polish     ;0Dh ;Polish
7141 FF 70 D1    db   0FFh // dw txt_turkish    ;0Eh ;Turkish
                ;------------------
                gui_null_Language:
7144 00          nop
7145 00          nop
7146 00          nop
7147 00          nop
7148 00          nop
                ;---
                gui_data_Language_name:
7149 01          db   01h
714A 00          nop
714B 01          db   01h
714C 00          nop
714D 01          db   01h
714E 00          nop
714F 01          db   01h
7150 FF B5 1C    db   0FFh // dw get_localized_txt_language
7153 00 00       dw   0000h
                 ;- - -
7155 01          db   01h
7156 07          db   07h
7157 01          db   01h
7158 00          nop
7159 01          db   01h
715A 00          nop
715B 01          db   01h
714C FF B5 3E    db   0FFh // dw get_localized_txt_language_name
715F 00 08       dw   0008h
                ;------------------
                xxx_7161h:
7161 7D 80       mov  r5,80h
                ;- - - - - - ------
                xxx_7163h:
7163 7C 00       mov  r4,00h
                ;- - - - - - ------
                xxx_7165h:
7165 90 00 B8    mov  dptr,xram_current_menu
7168 E0          movx a,[dptr]
7169 75 F0 03    mov  b,03h
716C A4          mul  a,b
716D 24 4C       add  a,gui_menu_list and 0ffh
716F F5 82       mov  dpl,a
7171 E4          clr  a
7172 34 2C       adc  a,gui_menu_list/100h
7174 F5 83       mov  dph,a
7176 E4          clr  a
7177 93          movc a,[a+dptr]
7178 FB          mov  r3,a
7179 74 01       mov  a,01h
717B 93          movc a,[a+dptr]
717C FA          mov  r2,a
717D 74 02       mov  a,02h
717F 93          movc a,[a+dptr]
7180 F9          mov  r1,a
7181 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
7184 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7187 90 00 B9    mov  dptr,xram_current_item
                ;- - - - - --------
                xxx_718Ah:  ;in: r3r2r1=item, dptr, r4,r5
718A E0          movx a,[dptr]   ;xram_current_item (for Nth item)
718B 75 F0 20    mov  b,20h            ;XXXXXXXXXXX...
718E A4          mul  a,b
718F 29          add  a,r1      ;\
7190 F9          mov  r1,a      ;
7191 EA          mov  a,r2      ;
7192 35 F0       adc  a,b       ;
7194 FA          mov  r2,a      ;/
                ;- - - - - --------
                xxx_7195h:
                 ;in: r3r2r1 = item ptr
                 ;in: r4     = (r4=00h)     ;?
                 ;in: r5     = (r5=40h/80h) ;highlight flags? for Attr/Attr2 select?
                 ;in: ...    = ?
                 ;- - -
7195 15 49       dec  [iram_heap_ptr]
7197 15 49       dec  [iram_heap_ptr]
7199 A8 49       mov  r0,[iram_heap_ptr]  ;\
719B A6 04       mov  [r0],r4(0)          ; store r4,r5
719D 08          inc  r0                  ; (later accessed as iram_heap_ptr+8) (after subtracting 3+5 from iram_heap_ptr)
719E A6 05       mov  [r0],r5(0)          ;/
71A0 15 49       dec  [iram_heap_ptr]             ;<-- heap/queue ptr or whatever?
71A2 15 49       dec  [iram_heap_ptr]
71A4 15 49       dec  [iram_heap_ptr]
71A6 A8 49       mov  r0,[iram_heap_ptr]
71A8 A6 03       mov  [r0],r3(0)              ;\
71AA 08          inc  r0                      ; store ... ;idxItemTxtName ?
71AB A6 02       mov  [r0],r2(0)              ;  or rather idxItem BASE !!!
71AD 08          inc  r0                      ;  (later accessed as iram_heap_ptr+5) (after subtracting 5 from iram_heap_ptr)
71AE A6 01       mov  [r0],r1(0)              ;/
71B0 E5 49       mov  a,[iram_heap_ptr]         ;\
71B2 24 FB       add  a,0FBh  ;aka -5           ;
71B4 F5 49       mov  [iram_heap_ptr],a         ; alloc?
71B6 24 05       add  a,05h                     ;
71B8 F8          mov  r0,a                      ;/
71B9 86 03       mov  r3(0),[r0]
71BB 08          inc  r0
71BC E6          mov  a,[r0]
71BD FA          mov  r2,a
71BE 08          inc  r0
71BF E6          mov  a,[r0]
71C0 F9          mov  r1,a
71C1 90 00 05    mov  dptr,0005h ;idxItem_05h      ...MAYBE?
71C4 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
71C7 EA          mov  a,r2
71C8 49          or   a,r1
71C9 4B          or   a,r3
71CA 60 23       jz   a,@@_71EFh
71CC E5 49       mov  a,[iram_heap_ptr]
71CE 24 05       add  a,05h
71D0 F8          mov  r0,a
71D1 86 03       mov  r3(0),[r0]
71D3 08          inc  r0
71D4 E6          mov  a,[r0]
71D5 FA          mov  r2,a
71D6 08          inc  r0
71D7 E6          mov  a,[r0]
71D8 F9          mov  r1,a
71D9 90 00 05    mov  dptr,0005h ;idxItem_05h      ...MAYBE?
71DC 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
71DF 12 4D B1    call jmp_r2r1  ;----->
71E2 A8 49       mov  r0,[iram_heap_ptr] ;dst.lsb
71E4 7C 00       mov  r4,00h             ;dst.msb
71E6 7D 00       mov  r5,00h             ;dst.area
71E8 7E 00       mov  r6,00h  ;\len 5
71EA 7F 05       mov  r7,05h  ;/
71EC 12 49 C1    call anymem_generic_memcopy
                @@_71EFh:
71EF E5 49       mov  a,[iram_heap_ptr]                             ;\
71F1 24 05       add  a,05h                                         ;
71F3 F8          mov  r0,a                                          ;
71F4 86 03       mov  r3(0),[r0]                                    ;
71F6 08          inc  r0                                            ;
71F7 E6          mov  a,[r0]                                        ;
71F8 FA          mov  r2,a                                          ;
71F9 08          inc  r0                                            ;
71FA E6          mov  a,[r0]                                        ;
71FB F9          mov  r1,a                                          ;
71FC 90 00 08    mov  dptr,0008h ;idxItemProcClear                  ;
71FF 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
7202 EA          mov  a,r2                                          ;
7203 49          or   a,r1                                          ;
7204 4B          or   a,r3                                          ;
7205 60 16       jz   a,@@no_clear_proc                             ;/
7207 E5 49       mov  a,[iram_heap_ptr]                             ;\
7209 24 05       add  a,05h                                         ;
720B F8          mov  r0,a                                          ;
720C 86 03       mov  r3(0),[r0]                                    ;
720E 08          inc  r0                                            ;
720F E6          mov  a,[r0]                                        ;
7210 FA          mov  r2,a                                          ;
7211 08          inc  r0                                            ;
7212 E6          mov  a,[r0]                                        ;
7213 F9          mov  r1,a                                          ;
7214 90 00 08    mov  dptr,0008h ;idxItemProcClear                  ;
7217 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
721A 12 4D B1    call jmp_r2r1  ;----->                             ;/
                @@no_clear_proc:
                ;- - -
721D E5 49       mov  a,[iram_heap_ptr]
721F 24 05       add  a,05h
7221 F8          mov  r0,a
7222 86 03       mov  r3(0),[r0]
7224 08          inc  r0
7225 E6          mov  a,[r0]
7226 FA          mov  r2,a
7227 08          inc  r0
7228 E6          mov  a,[r0]
7229 F9          mov  r1,a
722A 90 00 0B    mov  dptr,000Bh ;idxItem_0Bh      ...MAYBE?
722D 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7230 EA          mov  a,r2
7231 49          or   a,r1
7232 4B          or   a,r3
7233 60 20       jz   a,@@_7255h
7235 E5 49       mov  a,[iram_heap_ptr]
7237 24 05       add  a,05h
7239 F8          mov  r0,a
723A 86 03       mov  r3(0),[r0]
723C 08          inc  r0
723D E6          mov  a,[r0]
723E FA          mov  r2,a
723F 08          inc  r0
7240 E6          mov  a,[r0]
7241 F9          mov  r1,a
7242 90 00 0B    mov  dptr,000Bh ;idxItem_0Bh      ...MAYBE?
7245 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7248 E5 49       mov  a,[iram_heap_ptr]
724A 24 08       add  a,08h
724C F8          mov  r0,a
724D E6          mov  a,[r0]
724E FC          mov  r4,a
724F 08          inc  r0
7250 E6          mov  a,[r0]
7251 FD          mov  r5,a
7252 12 90 2C    call xxx_902Ch
                @@_7255h:
                ;- - -
7255 E5 49       mov  a,[iram_heap_ptr]
7257 24 05       add  a,05h
7259 F8          mov  r0,a
725A 86 03       mov  r3(0),[r0]
725C 08          inc  r0
725D E6          mov  a,[r0]
725E FA          mov  r2,a
725F 08          inc  r0
7260 E6          mov  a,[r0]
7261 F9          mov  r1,a
7262 90 00 0E    mov  dptr,000Eh ;idxItemDataName      ...MAYBE?
7265 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7268 EA          mov  a,r2
7269 49          or   a,r1
726A 4B          or   a,r3
726B 60 20       jz   a,@@_728Dh
726D E5 49       mov  a,[iram_heap_ptr]
726F 24 05       add  a,05h
7271 F8          mov  r0,a
7272 86 03       mov  r3(0),[r0]
7274 08          inc  r0
7275 E6          mov  a,[r0]
7276 FA          mov  r2,a
7277 08          inc  r0
7278 E6          mov  a,[r0]
7279 F9          mov  r1,a
727A 90 00 0E    mov  dptr,000Eh ;idxItemDataName      ...MAYBE?
727D 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7280 E5 49       mov  a,[iram_heap_ptr]
7282 24 08       add  a,08h
7284 F8          mov  r0,a
7285 E6          mov  a,[r0]
7286 FC          mov  r4,a
7287 08          inc  r0
7288 E6          mov  a,[r0]
7289 FD          mov  r5,a
728A 12 8C 9B    call osd_write_string_type_A
                @@_728Dh:
                ;- - -
728D E5 49       mov  a,[iram_heap_ptr]
728F 24 05       add  a,05h
7291 F8          mov  r0,a
7292 86 03       mov  r3(0),[r0]
7294 08          inc  r0
7295 E6          mov  a,[r0]
7296 FA          mov  r2,a
7297 08          inc  r0
7298 E6          mov  a,[r0]
7299 F9          mov  r1,a
729A 90 00 11    mov  dptr,0011h ;idxItemDataShow
729D 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
72A0 E5 49       mov  a,[iram_heap_ptr]
72A2 24 08       add  a,08h
72A4 F8          mov  r0,a
72A5 E6          mov  a,[r0]
72A6 FC          mov  r4,a
72A7 08          inc  r0
72A8 E6          mov  a,[r0]
72A9 FD          mov  r5,a
72AA 12 82 CF    call xxx_82CFh      ;... show injump
72AD E5 49       mov  a,[iram_heap_ptr]         ;\
72AF 24 0A       add  a,0Ah                     ; dealloc
72B1 F5 49       mov  [iram_heap_ptr],a         ;/
72B3 22          ret
                ;------------------
                .macro defcode_xxx_801Fh
                xxx_801Fh:                ;in: r7=ID_event_(keycode)
801F 8F 26       mov  [iram_tmp__26h],r7
8021 E4          clr  a
8022 F5 27       mov  [iram_tmp__27h],a
8024 E5 26       mov  a,[iram_tmp__26h]
8026 24 E1       add  a,-ID_event_1Fh_secret      ;=[iram_tmp__26h]-1Fh   ;? index   ;somewhat negative
8028 60 31       jz   a,@@_805Bh
802A 24 18       add  a,+ID_event_1Fh_secret-07h  ;=[iram_tmp__26h]-07h   ;? index   ;somewhat...
802C B4 07 00    jne  a,07h,$+3         ;\range (0..7)  (aka [iram_tmp__26h]=07h..0Eh) ?
802F 40 03       jc   @@_8034h          ;/
8031 02 80 CD    jmp  @@_80CDh
                ;---
                @@_8034h:
8034 90 80 42    mov  dptr,@@jumplist
8037 75 F0 03    mov  b,03h
803A A4          mul  a,b          ;index*3  (aka [iram_tmp__26h]=07h..0Eh) ?
803B C5 83       xchg a,dph
803D 25 F0       add  a,b
803F C5 83       xchg a,dph
8041 73          jmp  a+dptr
                ;---
                @@jumplist:
8042 02 80 59    ljmp @@func_07h        ;0 aka 07h
8045 02 80 59    ljmp @@func_08h        ;1 aka 08h
8048 02 80 5D    ljmp @@func_09h_handle ;2 aka 09h
804B 02 80 59    ljmp @@func_0Ah        ;3 aka 0Ah
804E 02 80 59    ljmp @@func_0Bh        ;4 aka 0Bh
8051 02 80 59    ljmp @@func_0Ch_special;5 aka 0Ch
8054 02 80 59    ljmp @@func_0Dh_special;6 aka 0Dh
8057 80 71       sjmp @@func_0Eh_blah   ;7 aka 0Eh
                ;---
                .if tech_version<ver11sep2017
                  @@func_07h:         ;\
                  @@func_08h:         ;/
                  @@func_0Ah:         ;\
                  @@func_0Bh:         ;
                  @@func_0Ch_special: ;
                  @@func_0Dh_special: ;/
8059 80 6F         sjmp @@_80CAh
                .endif
                ;---
                @@_805Bh:
805B 80 6D       sjmp @@_80CAh
                ;---
                @@func_09h_handle:
805D 12 BF DB    call dummy_ret6
8060 7F 04       mov  r7,04h
8062 12 AC B3    call xxx_ACB3h
8065 50 11       jnc  @@_8078h
8067 90 00 45    mov  dptr,xram_keypad_whatever
806A E0          movx a,[dptr]
                .if tech_version<ver11sep2017
806B FF            mov  r7,a
806C 64 01         xor  a,01h
806E 60 13         jz   a,@@_8083h
8070 EF            mov  a,r7
8071 64 10         xor  a,10h
8073 60 0E         jz   a,@@_8083h
                .else
6A49 B4 01 04      jne  a,01h,@@_6A50h
6A4C 64 10         xor  a,10h
6A4E 60 0E         jz   a,@@_8083h
                  @@_6A50h:
                .endif
8075 7F 00       mov  r7,ID_func_00h_nul
8077 22          ret
                ;---
                @@_8078h:
8078 90 00 45    mov  dptr,xram_keypad_whatever
807B E0          movx a,[dptr]
807C 64 01       xor  a,01h
807E 60 03       jz   a,@@_8083h
8080 7F 00       mov  r7,ID_func_00h_nul
8082 22          ret
                ;---
                @@_8083h:
8083 90 00 B8    mov  dptr,xram_current_menu
8086 E0          movx a,[dptr]
8087 75 F0 03    mov  b,03h
808A A4          mul  a,b
808B 24 4C       add  a,gui_menu_list and 0ffh
808D F5 82       mov  dpl,a
808F E4          clr  a
8090 34 2C       adc  a,gui_menu_list/100h
8092 F5 83       mov  dph,a
8094 E4          clr  a
8095 93          movc a,[a+dptr]
8096 FB          mov  r3,a
8097 74 01       mov  a,01h
8099 93          movc a,[a+dptr]
809A FA          mov  r2,a
809B 74 02       mov  a,02h
809D 93          movc a,[a+dptr]
809E F9          mov  r1,a
809F 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
80A2 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
80A5 B4 24 04    jne  a,MenuID_24h_FactoryPic,@@_80ACh          ;\
80A8 7F 01       mov  r7,01h                                    ;
80AA 80 02       sjmp @@_80AEh                                  ;
                ;---                                            ;
                @@_80ACh:                                       ;
80AC 7F 00       mov  r7,00h                                    ;
                @@_80AEh:                                       ;
80AE EF          mov  a,r7                                      ;/
                .if tech_version<ver11sep2017
80AF 60 1C         jz   a,@@_80CDh
                .else
6A8A 70 03         jnz  a,@@_6A8Fh
6A8C 02 6B 22      jmp  @@_80CDh
                  ;---
                  @@_6A8Fh:
                .endif
80B1 90 00 45    mov  dptr,xram_keypad_whatever
80B4 E0          movx a,[dptr]
                .if tech_version<ver11sep2017
80B5 B4 01 15      jne  a,01h,@@_80CDh
                .else
6A93 64 01         xor  a,01h
6A95 60 03         jz   a,@@_6A9Ah
6A97 02 6B 22      jmp  @@_80CDh
                  ;---
                  @@_6A9Ah:
                .endif
80B8 90 00 1E    mov  dptr,001Eh ;idxMenuNumItems
80BB 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
80BE 14          dec  a
80BF FF          mov  r7,a
80C0 90 00 B9    mov  dptr,xram_current_item
80C3 E0          movx a,[dptr]
                .if tech_version<ver11sep2017
80C4 B5 07 06      jne  a,r7(0),@@_80CDh
                .else
6AA6 6F            xor  a,r7
6AA7 70 79         jnz  a,@@_80CDh
                .endif
80C7 7F 2E       mov  r7,ID_func_2Eh_xxx ;...display BLUE,SNOW,BLACK (no signal)
80C9 22          ret
                ;--- --- ---
                @@func_0Eh_blah:
                @@_80CAh:
                 .if tech_version>=ver11sep2017
                   @@func_07h: ;\
                   @@func_08h: ;/
                   @@func_0Ah: ;\
                   @@func_0Bh: ;/
                 .endif
80CA 12 BF DB    call dummy_ret6
                .if tech_version>=ver11sep2017
                   sjmp @@_80CDh
                .endif
                ;--- --- ---
                .if tech_version>=ver11sep2017
                  @@func_0Ch_special:
                  @@func_0Dh_special:
6AB1 12 B9 23      call dummy_ret6
6AB4 90 00 30      mov  dptr,xram_sett_no_signal        ;\
6AB7 E0            movx a,[dptr]                        ;
6AB8 64 02         xor  a,02h                           ;
6ABA 70 66         jnz  a,@@_80CDh                      ;/
6ABC 90 00 0F      mov  dptr,xram_sett_input            ;\
6ABF E0            movx a,[dptr]                        ;
6AC0 64 02         xor  a,02h                           ;
6AC2 70 2E         jnz  a,@@_6AF2h                      ;/
                  ;- - -
6AC4 90 FE D7      mov  dptr,IO_AV_video_on_off         ;\
6AC7 E0            movx a,[dptr]                        ;
6AC8 54 E7         and  a,0E7h                          ;
6ACA F0            movx [dptr],a                        ;/
6ACB A3            inc  dptr ;=IO_AV_input_select_reg_0 ;\
6ACC E0            movx a,[dptr]                        ;
6ACD 44 80         or   a,80h                           ;
6ACF F0            movx [dptr],a                        ;
6AD0 E0            movx a,[dptr]                        ;
6AD1 54 BF         and  a,0BFh                          ;
6AD3 F0            movx [dptr],a                        ;/
6AD4 90 FE D7      mov  dptr,IO_AV_video_on_off         ;\
6AD7 E0            movx a,[dptr]                        ;
6AD8 44 18         or   a,18h                           ;
6ADA F0            movx [dptr],a                        ;/
6ADB 7F 0A         mov  r7,0Ah                                  ;\
6ADD 7E 00         mov  r6,00h                                  ; delay 10
6ADF 12 B4 CC      call slow_delay_r6r7                         ;/
6AE2 90 FE 2A      mov  dptr,IO_AV_stat_signal_detect   ;\
6AE5 E0            movx a,[dptr]                        ;
6AE6 30 E6 03      jz   a.6,@@_6AECh                    ;
6AE9 D3            set  c                               ;
6AEA 80 01         sjmp @@_6AEDh                        ;
                  ;---                                  ;
                  @@_6AECh:                             ;
6AEC C3            clr  c                               ;
                  @@_6AEDh:                             ;/
6AED 40 33         jc   @@_80CDh                        ;-
6AEF 7F 00         mov  r7,00h
6AF1 22            ret
                  ;---
                  @@_6AF2h:
6AF2 90 00 0F      mov  dptr,xram_sett_input            ;\
6AF5 E0            movx a,[dptr]                        ;
6AF6 FF            mov  r7,a                            ;
6AF7 12 99 4B      call apply_av_input_r7               ;/
6AFA 7F 0A         mov  r7,0Ah                                  ;\
6AFC 7E 00         mov  r6,00h                                  ; delay 10
6AFE 12 B4 CC      call slow_delay_r6r7                         ;/
6B01 90 FE 2A      mov  dptr,IO_AV_stat_signal_detect   ;\
6B04 E0            movx a,[dptr]                        ;
6B05 30 E6 17      jz   a.6,@@_6B1Fh                    ;/
6B08 7F 1E         mov  r7,1Eh                                  ;\
6B0A 7E 00         mov  r6,00h                                  ; delay 30
6B0C 12 B4 CC      call slow_delay_r6r7                         ;/
6B0F 90 FE 2A      mov  dptr,IO_AV_stat_signal_detect   ;\
6B12 E0            movx a,[dptr]                        ;
6B13 30 E6 03      jz   a.6,@@_6B19h                    ;
6B16 D3            set  c                               ;
6B17 80 01         sjmp @@_6B1Ah                        ;
                  ;---                                  ;
                  @@_6B19h:                             ;
6B19 C3            clr  c                               ;
                  @@_6B1Ah:                             ;/
6B1A 40 06         jc   @@_80CDh                        ;-
6B1C 7F 00         mov  r7,00h
6B1E 22            ret
                  ;---
                  @@_6B1Fh:
6B1F 7F 00         mov  r7,00h
6B21 22            ret
                .endif
                ;--- --- ---
                @@_80CDh:
                ;- - - - - - - - -
80CD 90 00 46    mov  dptr,xram_keypad_flags_msb
80D0 E0          movx a,[dptr]
80D1 FE          mov  r6,a
80D2 A3          inc  dptr ;=xram_keypad_flags_lsb
80D3 E0          movx a,[dptr]
80D4 78 03       mov  r0,03h  ;shift amount     ;\
                @@shift_lop:                    ;
80D6 CE          xchg a,r6                      ;
80D7 C3          clr  c                         ;
80D8 13          rcr  a                         ;
80D9 CE          xchg a,r6                      ;
80DA 13          rcr  a                         ;
80DB D8 F9       djnz r0,@@shift_lop            ;/
80DD 30 E0 09    jz   a.0,@@_80E9h
80E0 90 00 44    mov  dptr,xram_keypad_was_read ;\
80E3 E0          movx a,[dptr]                  ;
80E4 30 E0 09    jz   a.0,@@_80F0h              ;/
80E7 80 00       sjmp @@_80E9h    ;blah
                ;---
                @@_80E9h:
80E9 AF 26       mov  r7,[iram_tmp__26h]                  ;\
80EB 12 73 E7    call xlat_key_quad_to_func_XXh           ; ... keyboard quad
80EE 8F 27       mov  [iram_tmp__27h],r7 ;ID_func_XXh_xxx ;/
                @@_80F0h:
80F0 AF 27       mov  r7,[iram_tmp__27h] ;ID_func_XXh_xxx
80F2 22          ret
                .endm ;defcode_xxx_801Fh
                ;------------------
;:------------- ;:----------------- code (events)
                ;------------------
                .macro defcode_handle_event____misc
                handle_event____misc:
                               ;... apply detected/selected input ?  ;in: r7=17h,18h,19h,1Ah,1Bh
80F3 EF          mov  a,r7
80F4 24 E9       add  a,-ID_event_17h
80F6 60 63       jz   a,@@is_ID_event_17h  ;
80F8 14          dec  a
80F9 60 23       jz   a,@@is_ID_event_18h  ;--> source KEEP/COPY resume (or use SELECTED PRIMARY input?)
80FB 14          dec  a
80FC 60 41       jz   a,@@is_ID_event_19h  ;
80FE 24 FE       add  a,-2
8100 60 7C       jz   a,@@is_ID_event_1Bh  ;--> switch ON
8102 04          inc  a
8103 60 03       jz   a,@@is_ID_event_1Ah  ;--> switch OFF
8105 02 81 C4    jmp  @@exit      ;oops, other
                ;---
                @@is_ID_event_1Ah:
8108 90 00 4D    mov  dptr,xram_whatever_pwr_input      ;\
810B 74 01       mov  a,01h                             ;
810D F0          movx [dptr],a                          ;/
810E 90 00 2D    mov  dptr,xram_sett___2Dh              ;\
8111 E0          movx a,[dptr]                          ; copy !!!
8112 90 00 0C    mov  dptr,xram_sett_input              ;
8115 F0          movx [dptr],a                          ;/
8116 12 BF 26    call osd_disable_all_windows_and_whatever       ;------->
8119 7F 1D       mov  r7,ID_func_1Dh_PowerOff           ;\
811B 02 2C 8E    jmp  execute_func_r7    ;---->         ;/
                ;--- --- ---
                @@is_ID_event_18h:
811E E4          clr  a                                 ;\
811F 90 00 4D    mov  dptr,xram_whatever_pwr_input      ;
8122 F0          movx [dptr],a                          ;/
8123 90 00 2D    mov  dptr,xram_sett___2Dh              ;\
8126 E0          movx a,[dptr]                          ; copy !!! resume SELECTED input?
8127 90 00 0C    mov  dptr,xram_sett_input              ;
812A F0          movx [dptr],a                          ;/
812B 7F 30       mov  r7,ID_func_30h_xxx                ;\  ----->
812D 12 2C 8E    call execute_func_r7                   ;/
8130 43 48 02    or   [iram_menu_flags],02h             ;-
8133 7F 19       mov  r7,ID_func_19h_SourceMenu         ;\  -->
8135 12 2C 8E    call execute_func_r7                   ;
8138 40 03       jc   @@to_finish                   ;\  ;
813A 02 81 C4    jmp  @@exit                        ;   ;
                ;---                                ;   ;
                @@to_finish:                        ;   ;
813D 80 58       sjmp @@finish                      ;/  ;/
                ;---
                @@is_ID_event_19h:
813F 90 00 4D    mov  dptr,xram_whatever_pwr_input      ;\
8142 74 03       mov  a,03h                             ;
8144 F0          movx [dptr],a                          ;/
8145 90 00 0C    mov  dptr,xram_sett_input              ;\
8148 14          dec  a   ;=02h (CVBS3)                 ;  force AV2 ??!!!
8149 F0          movx [dptr],a                          ;/
814A 7F 31       mov  r7,ID_func_31h_xxx                ;\switch on
814C 12 2C 8E    call execute_func_r7                   ;/
814F 43 48 02    or   [iram_menu_flags],02h             ;-
8152 7F 19       mov  r7,ID_func_19h_SourceMenu         ;\
8154 12 2C 8E    call execute_func_r7                   ;
8157 50 6B       jnc  @@exit                            ;
8159 80 3C       sjmp @@finish                          ;/
                ;---
                @@is_ID_event_17h:
815B 90 00 4D    mov  dptr,xram_whatever_pwr_input
815E E0          movx a,[dptr]
815F 64 02       xor  a,02h
8161 60 61       jz   a,@@exit      ;--> already tried av2 ?     ;--->
8163 74 02       mov  a,02h        ;mark as trying av2 ?
8165 F0          movx [dptr],a
8166 90 00 0C    mov  dptr,xram_sett_input              ;\set AV2 ??!!!
8169 F0          movx [dptr],a   ;=02h (CVBS3)          ;/
816A 12 BF 26    call osd_disable_all_windows_and_whatever
816D 7F 31       mov  r7,ID_func_31h_xxx                ;\switch on
816F 12 2C 8E    call execute_func_r7                   ;/
8172 43 48 02    or   [iram_menu_flags],02h             ;-
8175 7F 19       mov  r7,ID_func_19h_SourceMenu         ;\
8177 12 2C 8E    call execute_func_r7                   ;
817A 50 48       jnc  @@exit                            ;
817C 80 19       sjmp @@finish                          ;/
                ;---
                @@is_ID_event_1Bh:
817E 90 00 0C    mov  dptr,xram_sett_input
8181 74 02       mov  a,02h
8183 F0          movx [dptr],a
8184 90 00 4D    mov  dptr,xram_whatever_pwr_input
8187 F0          movx [dptr],a
8188 7F 32       mov  r7,ID_func_32h_screen_on          ;\switch ON
818A 12 2C 8E    call execute_func_r7                   ;/
                .if tech_version<ver11sep2017
818D 43 48 02      or   [iram_menu_flags],02h           ;-
                .endif
8190 7F 19       mov  r7,ID_func_19h_SourceMenu         ;\
8192 12 2C 8E    call execute_func_r7                   ;
8195 50 2D       jnc  @@exit                            ;/
                @@finish:
                ;- - - - - -
8197 90 00 B8    mov  dptr,xram_current_menu
819A E0          movx a,[dptr]
819B 75 F0 03    mov  b,03h
819E A4          mul  a,b
819F 24 4C       add  a,gui_menu_list and 0ffh
81A1 F5 82       mov  dpl,a
81A3 E5 F0       mov  a,b
81A5 34 2C       adc  a,gui_menu_list/100h
81A7 F5 83       mov  dph,a
81A9 E4          clr  a
81AA 93          movc a,[a+dptr]
81AB FB          mov  r3,a
81AC 74 01       mov  a,01h
81AE 93          movc a,[a+dptr]
81AF FA          mov  r2,a
81B0 74 02       mov  a,02h
81B2 93          movc a,[a+dptr]
81B3 F9          mov  r1,a
81B4 90 00 22    mov  dptr,0022h ;idxMenu___22h
81B7 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
81BA FF          mov  r7,a
81BB 90 00 3A    mov  dptr,xram_backtoroot_offhold_msb
81BE E5 F0       mov  a,b
81C0 F0          movx [dptr],a
81C1 A3          inc  dptr ;=xram_backtoroot_offhold_lsb
81C2 EF          mov  a,r7
81C3 F0          movx [dptr],a
                @@exit:
81C4 22          ret
                .endm ;defcode_handle_event____misc
                ;------------------
;:------------- ;:----------------- FLASH code (erase)
                ;------------------
                .macro defcode_flash_erase_block
                flash_erase_block:
                 ;note: this is exactly same as "flash_write_enable", with
                 ;only two small differences:
                 ; w.enable has extra "call flash_set_wprot_to_unprotected"
                 ; w.enable uses "xram_sett_lock_all"(not "xram_sett_cmd_erase")
                 ;- - -
8EC3 8F 47       mov  [iram_tmp__47h],r7
8EC5 8E 46       mov  [iram_tmp__46h],r6
8EC7 8D 45       mov  [iram_tmp__45h],r5
8EC9 8C 44       mov  [iram_tmp__44h],r4
                @@retry_endless_lop:
                .if flash_version<ver11sep2017
8ECB E4            clr  a
8ECC FF            mov  r7,a
8ECD 7E E0         mov  r6,0E000h/100h
8ECF FD            mov  r5,a
8ED0 FC            mov  r4,a
                .else
6B50 90 00 AE      mov  dptr,xram_settings_1_addr
6B53 E0            movx a,[dptr]
6B54 FC            mov  r4,a
6B55 A3            inc  dptr
6B56 E0            movx a,[dptr]
6B57 FD            mov  r5,a
6B58 A3            inc  dptr
6B59 E0            movx a,[dptr]
6B5A FE            mov  r6,a
6B5B A3            inc  dptr
6B5C E0            movx a,[dptr]
6B5D FF            mov  r7,a
                .endif
8ED1 AB 47       mov  r3,[iram_tmp__47h]
8ED3 AA 46       mov  r2,[iram_tmp__46h]
8ED5 A9 45       mov  r1,[iram_tmp__45h]
8ED7 A8 44       mov  r0,[iram_tmp__44h]
8ED9 C3          clr  c
8EDA 12 4C 9F    call compare_r4r5r6r7_equal_r0r1r2r3
8EDD 60 11       jz   a,@@valid_address_region
                .if flash_version<ver11sep2017
8EDF E4            clr  a
8EE0 FF            mov  r7,a
8EE1 7E F0         mov  r6,0F000h/100h
8EE3 FD            mov  r5,a
8EE4 FC            mov  r4,a
                .else
6B6C 90 00 AA      mov  dptr,xram_settings_2_addr
6B6F E0            movx a,[dptr]
6B70 FC            mov  r4,a
6B71 A3            inc  dptr
6B72 E0            movx a,[dptr]
6B73 FD            mov  r5,a
6B74 A3            inc  dptr
6B75 E0            movx a,[dptr]
6B76 FE            mov  r6,a
6B77 A3            inc  dptr
6B78 E0            movx a,[dptr]
6B79 FF            mov  r7,a
                .endif
8EE5 A8 44       mov  r0,[iram_tmp__44h]
8EE7 C3          clr  c
8EE8 12 4C 9F    call compare_r4r5r6r7_equal_r0r1r2r3
8EEB 60 03       jz   a,@@valid_address_region
8EED 00          nop                       ;uh?
8EEE 80 DB       sjmp @@retry_endless_lop  ;uh, retry compare? (=loop endless?)
                ;---
                @@valid_address_region:  ;okay, it's addr = E000h or F000h
                ;- - - - -
                .if flash_version<ver11sep2017
8EF0 E4            clr  a                                       ;\
8EF1 FF            mov  r7,a                                    ;
8EF2 7E E0         mov  r6,0E000h/100h                          ;
8EF4 FD            mov  r5,a                                    ;
8EF5 FC            mov  r4,a                                    ;
8EF6 AB 47         mov  r3,[iram_tmp__47h]                      ;
8EF8 AA 46         mov  r2,[iram_tmp__46h]                      ;
8EFA A9 45         mov  r1,[iram_tmp__45h]                      ;
8EFC A8 44         mov  r0,[iram_tmp__44h]                      ;
                .else                                           ;
6B85 AF 47         mov  r7,[iram_tmp__47h]                      ;
6B87 AE 46         mov  r6,[iram_tmp__46h]                      ;
6B89 AD 45         mov  r5,[iram_tmp__45h]                      ;
6B8B AC 44         mov  r4,[iram_tmp__44h]                      ;
6B8D 90 00 AE      mov  dptr,xram_settings_1_addr               ;
6B90 E0            movx a,[dptr]                                ;
6B91 F8            mov  r0,a                                    ;
6B92 A3            inc  dptr                                    ;
6B93 E0            movx a,[dptr]                                ;
6B94 F9            mov  r1,a                                    ;
6B95 A3            inc  dptr                                    ;
6B96 E0            movx a,[dptr]                                ;
6B97 FA            mov  r2,a                                    ;
6B98 A3            inc  dptr                                    ;
6B99 E0            movx a,[dptr]                                ;
6B9A FB            mov  r3,a                                    ;
                .endif                                          ;
8EFE C3          clr  c                                         ;
8EFF 12 4C 9F    call compare_r4r5r6r7_equal_r0r1r2r3           ;
8F02 70 30       jnz  a,@@not_region_E000h                      ;/
N/A             ;(erase step 1 has "call flash_set_wprot_to_unprotected" here)
8F04 12 BE CE    call general_flash_wait                ;-wait
8F07 90 FD DE    mov  dptr,IO_SPI_kick_stop_reset       ;\
8F0A 74 80       mov  a,80h                             ;
8F0C F0          movx [dptr],a                          ;/
8F0D 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;\
8F10 E4          clr  a                                 ;
8F11 F0          movx [dptr],a                          ;/
                .if flash_version<ver11sep2017
8F12 90 FD D6      mov  dptr,IO_SPI_flash_addr_lsb        ;\
8F15 F0            movx [dptr],a      ;addr.lsb           ;
8F16 A3            inc  dptr ;=IO_SPI_flash_addr_mid      ;
8F17 74 E0         mov  a,0E000h/100h                     ;
8F19 F0            movx [dptr],a      ;addr.mid           ;
8F1A A3            inc  dptr ;=IO_SPI_flash_addr_msb      ;
8F1B E4            clr  a                                 ;
8F1C F0            movx [dptr],a      ;addr.msb           ;/
                .else
6BAF 90 00 AE      mov  dptr,xram_settings_1_addr
6BB2 A3            inc  dptr
6BB3 A3            inc  dptr
6BB4 A3            inc  dptr
6BB5 E0            movx a,[dptr]
6BB6 90 FD D6      mov  dptr,IO_SPI_flash_addr_lsb
6BB9 F0            movx [dptr],a
6BBA 90 00 AE      mov  dptr,xram_settings_1_addr
6BBD E0            movx a,[dptr]
6BBE FC            mov  r4,a
6BBF A3            inc  dptr
6BC0 E0            movx a,[dptr]
6BC1 FD            mov  r5,a
6BC2 A3            inc  dptr
6BC3 E0            movx a,[dptr]
6BC4 FE            mov  r6,a
6BC5 A3            inc  dptr
6BC6 E0            movx a,[dptr]
6BC7 FF            mov  r7,a
6BC8 78 08         mov  r0,08h
6BCA 12 4B 8D      call shift_right_r4r5r6r7_by_r0
6BCD 90 FD D7      mov  dptr,IO_SPI_flash_addr_mid
6BD0 EF            mov  a,r7
6BD1 F0            movx [dptr],a
6BD2 90 00 AE      mov  dptr,xram_settings_1_addr
6BD5 E0            movx a,[dptr]
6BD6 FC            mov  r4,a
6BD7 A3            inc  dptr
6BD8 E0            movx a,[dptr]
6BD9 FD            mov  r5,a
6BDA A3            inc  dptr
6BDB E0            movx a,[dptr]
6BDC FE            mov  r6,a
6BDD A3            inc  dptr
6BDE E0            movx a,[dptr]
6BDF FF            mov  r7,a
6BE0 78 10         mov  r0,10h
6BE2 12 4B 8D      call shift_right_r4r5r6r7_by_r0
6BE5 90 FD D8      mov  dptr,IO_SPI_flash_addr_msb
6BE8 EF            mov  a,r7
6BE9 F0            movx [dptr],a
                .endif
8F1D 90 00 0B    mov  dptr,xram_sett_cmd_erase          ;\
8F20 E0          movx a,[dptr]                          ; cmd_erase  (20h=ERASE?)
8F21 90 FD E4    mov  dptr,IO_SPI_command_write         ;
8F24 F0          movx [dptr],a                          ;/
8F25 90 FD D0    mov  dptr,IO_SPI_transfer_mode         ;\
8F28 74 08       mov  a,08h                             ; FlashCmd08h
8F2A F0          movx [dptr],a                          ;/
                @@wait_lop1:                            ;\
8F2B 90 FD DD    mov  dptr,IO_SPI_ready_flags           ; wait
8F2E E0          movx a,[dptr]                          ;
                .if flash_version<ver11sep2017          ;
8F2F 60 FA         jz   a,@@wait_lop1                   ;
                .else                                   ;
6BFC 30 E3 F9      jz   a.3,@@wait_lop1                 ;
                .endif                                  ;/
8F31 12 BE CE    call general_flash_wait                ;-wait
                @@not_region_E000h:
                ;- - - - -
                .if flash_version<ver11sep2017
8F34 E4            clr  a
8F35 FF            mov  r7,a
8F36 7E F0         mov  r6,0F000h/100h
8F38 FD            mov  r5,a
8F39 FC            mov  r4,a
8F3A AB 47         mov  r3,[iram_tmp__47h]
8F3C AA 46         mov  r2,[iram_tmp__46h]
8F3E A9 45         mov  r1,[iram_tmp__45h]
8F40 A8 44         mov  r0,[iram_tmp__44h]
                .else
6C02 AF 47         mov  r7,[iram_tmp__47h]
6C04 AE 46         mov  r6,[iram_tmp__46h]
6C06 AD 45         mov  r5,[iram_tmp__45h]
6C08 AC 44         mov  r4,[iram_tmp__44h]
6C0A 90 00 AA      mov  dptr,xram_settings_2_addr
6C0D E0            movx a,[dptr]
6C0E F8            mov  r0,a
6C0F A3            inc  dptr
6C10 E0            movx a,[dptr]
6C11 F9            mov  r1,a
6C12 A3            inc  dptr
6C13 E0            movx a,[dptr]
6C14 FA            mov  r2,a
6C15 A3            inc  dptr
6C16 E0            movx a,[dptr]
6C17 FB            mov  r3,a
                .endif
8F42 C3          clr  c
8F43 12 4C 9F    call compare_r4r5r6r7_equal_r0r1r2r3
8F46 70 30       jnz  a,@@not_region_F000h
N/A             ;(erase step 1 has "call flash_set_wprot_to_unprotected" here)
8F48 12 BE CE    call general_flash_wait                ;-wait
8F4B 90 FD DE    mov  dptr,IO_SPI_kick_stop_reset       ;\
8F4E 74 80       mov  a,80h                             ;
8F50 F0          movx [dptr],a                          ;/
8F51 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;\
8F54 E4          clr  a                                 ;
8F55 F0          movx [dptr],a                          ;/
                .if flash_version<ver11sep2017
8F56 90 FD D6      mov  dptr,IO_SPI_flash_addr_lsb        ;\
8F59 F0            movx [dptr],a      ;addr.lsb           ;
8F5A A3            inc  dptr ;=IO_SPI_flash_addr_mid      ;
8F5B 74 F0         mov  a,0F000h/100h                     ;
8F5D F0            movx [dptr],a      ;addr.mid           ;
8F5E A3            inc  dptr ;=IO_SPI_flash_addr_msb      ;
8F5F E4            clr  a                                 ;
8F60 F0            movx [dptr],a      ;addr.msb           ;/
                .else
6C2C 90 00 AA      mov  dptr,xram_settings_2_addr
6C2F A3            inc  dptr
6C30 A3            inc  dptr
6C31 A3            inc  dptr
6C32 E0            movx a,[dptr]
6C33 90 FD D6      mov  dptr,IO_SPI_flash_addr_lsb
6C36 F0            movx [dptr],a
6C37 90 00 AA      mov  dptr,xram_settings_2_addr
6C3A E0            movx a,[dptr]
6C3B FC            mov  r4,a
6C3C A3            inc  dptr
6C3D E0            movx a,[dptr]
6C3E FD            mov  r5,a
6C3F A3            inc  dptr
6C40 E0            movx a,[dptr]
6C41 FE            mov  r6,a
6C42 A3            inc  dptr
6C43 E0            movx a,[dptr]
6C44 FF            mov  r7,a
6C45 78 08         mov  r0,08h
6C47 12 4B 8D      call shift_right_r4r5r6r7_by_r0
6C4A 90 FD D7      mov  dptr,IO_SPI_flash_addr_mid
6C4D EF            mov  a,r7
6C4E F0            movx [dptr],a
6C4F 90 00 AA      mov  dptr,xram_settings_2_addr
6C52 E0            movx a,[dptr]
6C53 FC            mov  r4,a
6C54 A3            inc  dptr
6C55 E0            movx a,[dptr]
6C56 FD            mov  r5,a
6C57 A3            inc  dptr
6C58 E0            movx a,[dptr]
6C59 FE            mov  r6,a
6C5A A3            inc  dptr
6C5B E0            movx a,[dptr]
6C5C FF            mov  r7,a
6C5D 78 10         mov  r0,10h
6C5F 12 4B 8D      call shift_right_r4r5r6r7_by_r0
6C62 90 FD D8      mov  dptr,IO_SPI_flash_addr_msb
6C65 EF            mov  a,r7
6C66 F0            movx [dptr],a
                .endif
8F61 90 00 0B    mov  dptr,xram_sett_cmd_erase          ;\
8F64 E0          movx a,[dptr]                          ; cmd_erase  (20h=ERASE?)
8F65 90 FD E4    mov  dptr,IO_SPI_command_write         ;
8F68 F0          movx [dptr],a                          ;/
8F69 90 FD D0    mov  dptr,IO_SPI_transfer_mode         ;\
8F6C 74 08       mov  a,08h                             ; FlashCmd08h
8F6E F0          movx [dptr],a                          ;/
                @@wait_lop2:                            ;\
8F6F 90 FD DD    mov  dptr,IO_SPI_ready_flags           ; wait
8F72 E0          movx a,[dptr]                          ;
                .if flash_version<ver11sep2017          ;
8F73 60 FA         jz   a,@@wait_lop2                   ;
                .else                                   ;
6C79 30 E3 F9      jz   a.3,@@wait_lop2                 ;
                .endif                                  ;/
8F75 12 BE CE    call general_flash_wait                ;-wait
                @@not_region_F000h:
8F78 22          ret
                .endm ;defcode_flash_erase_block
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_xxx_801Fh
                  defcode_flash_erase_block
                .endif
                ;------------------
;:------------- ;:----------------- OSD code (bugged color or so)
                ;------------------
                xxx_72B4h:            ;osd_XXXXXX       ...?  maybe bitmap?
                 ;in: r3    = size.x
                 ;in: r5    = xloc
                 ;in: r7    = yloc
                 ;in: [iram_tmp__32h] = size.y
                 ;in: [iram_tmp__33h] = mode (0..6)      color ???
                 ;in: [iram_tmp__34h] = src.area  ;\
                 ;in: [iram_tmp__35h] = src.msb   ;
                 ;in: [iram_tmp__36h] = src.lsb   ;/
                 ;- - -
72B4 8F 2F       mov  [iram_tmp__2Fh],r7 ;base.yloc
72B6 8D 30       mov  [iram_tmp__30h],r5 ;base.xloc
72B8 8B 31       mov  [iram_tmp__31h],r3 ;size.x
72BA E5 36       mov  a,[iram_tmp__36h]  ;src.lsb
72BC 45 35       or   a,[iram_tmp__35h]  ;src.msb
72BE 45 34       or   a,[iram_tmp__34h]  ;src.area
72C0 70 03       jnz  a,@@cont
72C2 02 73 E6    jmp  @@exit
                ;---
                @@cont:
72C5 E5 33       mov  a,[iram_tmp__33h]                 ;\
72C7 70 09       jnz  a,@@not_0                         ;
                ;@@is_0:            ;--> --h,--h        ;
72C9 90 FB 78    mov  dptr,IO_OSD_xyflip                ; xlat [iram_tmp__33h] to I/O
72CC E0          movx a,[dptr]                          ;
72CD 54 BF       and  a,0BFh          ;<-- special      ;  <-- NO FLIP ??
72CF F0          movx [dptr],a                          ;
72D0 80 52       sjmp @@this                            ;
                ;---                                    ;
                @@not_0:                                ;
72D2 90 FB 78    mov  dptr,IO_OSD_xyflip                ;
72D5 E0          movx a,[dptr]                          ;
72D6 44 40       or   a,40h           ;<-- special      ;  <-- YFLIP TILES ????
72D8 F0          movx [dptr],a                          ;
72D9 E5 33       mov  a,[iram_tmp__33h]                 ;
72DB 24 FE       add  a,0FEh    ;aka -2                 ;
72DD 60 17       jz   a,@@is_2                          ;
72DF 14          dec  a                                 ;
72E0 60 1B       jz   a,@@is_3                          ;
72E2 14          dec  a                                 ;
72E3 60 1E       jz   a,@@is_4                          ;
72E5 14          dec  a                                 ;
72E6 60 26       jz   a,@@is_5                          ;
72E8 14          dec  a                                 ;
72E9 60 2F       jz   a,@@is_6                          ;
72EB 24 05       add  a,05h                             ;
72ED 70 35       jnz  a,@@not_1 ;invalid                ;
                ;@@is_1:            ;--> 0Fh,00h        ;
72EF 90 FB C6    mov  dptr,IO_OSD_bugged_color_lsb      ;
72F2 74 0F       mov  a,0Fh                             ;
72F4 80 12       sjmp @@this_1_2_4                      ;
                ;---                                    ;
                @@is_2:             ;--> F0h,00h        ;
72F6 90 FB C6    mov  dptr,IO_OSD_bugged_color_lsb      ;
72F9 74 F0       mov  a,0F0h                            ;
72FB 80 0B       sjmp @@this_1_2_4                      ;
                ;---                                    ;
                @@is_3:             ;--> 00h,0Fh        ;
72FD 90 FB C6    mov  dptr,IO_OSD_bugged_color_lsb      ;
7300 E4          clr  a                                 ;
7301 80 1C       sjmp @@this_3_6                        ;
                ;---                                    ;
                @@is_4:             ;--> FFh,00h        ;
7303 90 FB C6    mov  dptr,IO_OSD_bugged_color_lsb      ;
7306 74 FF       mov  a,0FFh                            ;
                @@this_1_2_4:                           ;
7308 F0          movx [dptr],a                          ;
7309 A3          inc  dptr ;=IO_OSD_bugged_color_msb    ;
730A E4          clr  a                                 ;
730B F0          movx [dptr],a  ;=00h                   ;
730C 80 16       sjmp @@this                            ;
                ;---                                    ;
                @@is_5:             ;--> 88h,08h gray?  ;
730E 90 FB C6    mov  dptr,IO_OSD_bugged_color_lsb      ;
7311 74 88       mov  a,88h                             ;
7313 F0          movx [dptr],a                          ;
7314 A3          inc  dptr ;=IO_OSD_bugged_color_msb    ;
7315 74 08       mov  a,08h                             ;
7317 F0          movx [dptr],a                          ;
7318 80 0A       sjmp @@this                            ;
                ;---                                    ;
                @@is_6:             ;--> FFh,0Fh white? ;
731A 90 FB C6    mov  dptr,IO_OSD_bugged_color_lsb      ;
731D 74 FF       mov  a,0FFh                            ;
                @@this_3_6:                             ;
731F F0          movx [dptr],a                          ;
7320 A3          inc  dptr ;=IO_OSD_bugged_color_msb    ;
7321 74 0F       mov  a,0Fh                             ;
7323 F0          movx [dptr],a                          ;
                @@not_1:                                ;
                @@this:                                 ;/
                ;- - - - - - -
7324 90 00 8A    mov  dptr,xram_tmp__8Ah ;curr.yloc
7327 E5 2F       mov  a,[iram_tmp__2Fh]    ;base.yloc
7329 F0          movx [dptr],a   ;curr.yloc
                @@outer_lop:                           ;lop..............
732A E5 2F       mov  a,[iram_tmp__2Fh]    ;base.yloc
732C 25 32       add  a,[iram_tmp__32h]    ;size.y
732E FF          mov  r7,a       ;end.yloc
732F E4          clr  a
7330 33          rcl  a
7331 FE          mov  r6,a       ;end.yloc.msb?
7332 90 00 8A    mov  dptr,xram_tmp__8Ah ;curr.yloc
7335 E0          movx a,[dptr]   ;curr.yloc
7336 C3          clr  c
7337 9F          sbc  a,r7
7338 EE          mov  a,r6
7339 64 80       xor  a,80h
733B F8          mov  r0,a
733C 74 80       mov  a,80h
733E 98          sbc  a,r0
733F 40 03       jc   @@outer_lop_cont
7341 02 73 E6    jmp  @@exit
                ;---
                @@outer_lop_cont:
7344 12 7B D8    call get_window_addr   ;out:r6r7
7347 90 00 85    mov  dptr,xram_tmp__85h
734A 12 AC 70    call get_window_width  ;out:[dptr]=addr, r6r7=width
734D 90 00 8A    mov  dptr,xram_tmp__8Ah ;curr.yloc
7350 E0          movx a,[dptr]   ;curr.yloc
7351 FD          mov  r5,a       ;curr.yloc
7352 7C 00       mov  r4,00h
7354 12 4A 94    call multiply_r6r7_by_r4r5
7357 EF          mov  a,r7
7358 25 30       add  a,[iram_tmp__30h]    ;base.xloc
735A FF          mov  r7,a
735B EC          mov  a,r4
735C 3E          adc  a,r6
735D FE          mov  r6,a
735E 90 00 87    mov  dptr,xram_tmp__87h
7361 F0          movx [dptr],a
7362 A3          inc  dptr ;=xram_tmp__88h
7363 EF          mov  a,r7
7364 F0          movx [dptr],a
7365 90 00 86    mov  dptr,xram_tmp__86h
7368 E0          movx a,[dptr]
7369 2F          add  a,r7
736A F0          movx [dptr],a
736B 90 00 85    mov  dptr,xram_tmp__85h
736E E0          movx a,[dptr]
736F 3E          adc  a,r6
7370 F0          movx [dptr],a
7371 E0          movx a,[dptr]
7372 FC          mov  r4,a
7373 A3          inc  dptr ;=xram_tmp__86h
7374 E0          movx a,[dptr]
7375 FD          mov  r5,a
7376 EC          mov  a,r4
7377 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
737A F0          movx [dptr],a
737B ED          mov  a,r5
737C 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb
737F F0          movx [dptr],a
7380 90 00 89    mov  dptr,xram_tmp__89h ;curr.xloc
7383 E5 30       mov  a,[iram_tmp__30h]    ;base.xloc
7385 F0          movx [dptr],a   ;curr.xloc
                @@inner_lop:
7386 E5 30       mov  a,[iram_tmp__30h]    ;base.xloc
7388 25 31       add  a,[iram_tmp__31h]    ;size.x
738A FF          mov  r7,a       ;end.xloc
738B E4          clr  a
738C 33          rcl  a
738D FE          mov  r6,a       ;end.xloc.msb?
738E 90 00 89    mov  dptr,xram_tmp__89h ;curr.xloc
7391 E0          movx a,[dptr]   ;curr.xloc
7392 C3          clr  c
7393 9F          sbc  a,r7       ;end.xloc
7394 EE          mov  a,r6
7395 64 80       xor  a,80h
7397 F8          mov  r0,a
7398 74 80       mov  a,80h
739A 98          sbc  a,r0
739B 50 40       jnc  @@inner_lop_done
739D AB 34       mov  r3,[iram_tmp__34h]  ;src.area
739F AA 35       mov  r2,[iram_tmp__35h]  ;src.msb
73A1 A9 36       mov  r1,[iram_tmp__36h]  ;src.lsb
73A3 12 4B 11    call anymem_read_16bit_ba_from_mem_r3r2r1
73A6 FF          mov  r7,a
73A7 90 00 8B    mov  dptr,xram_tmp__8Bh
73AA E5 F0       mov  a,b
73AC F0          movx [dptr],a
73AD A3          inc  dptr ;=xram_tmp__8Ch
73AE EF          mov  a,r7
73AF F0          movx [dptr],a
73B0 90 00 85    mov  dptr,xram_tmp__85h
73B3 E0          movx a,[dptr]
73B4 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
73B7 F0          movx [dptr],a
73B8 90 00 8B    mov  dptr,xram_tmp__8Bh
73BB E0          movx a,[dptr]
73BC FC          mov  r4,a
73BD A3          inc  dptr ;=xram_tmp__8Ch
73BE E0          movx a,[dptr]
73BF FD          mov  r5,a
73C0 EC          mov  a,r4
73C1 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb
73C4 F0          movx [dptr],a
73C5 ED          mov  a,r5
73C6 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb
73C9 F0          movx [dptr],a
73CA 74 02       mov  a,02h
73CC 25 36       add  a,[iram_tmp__36h]  ;src.lsb
73CE F5 36       mov  [iram_tmp__36h],a  ;src.lsb
73D0 E4          clr  a
73D1 35 35       adc  a,[iram_tmp__35h]  ;src.msb
73D3 F5 35       mov  [iram_tmp__35h],a  ;src.msb
73D5 90 00 89    mov  dptr,xram_tmp__89h ;curr.xloc
73D8 E0          movx a,[dptr]   ;curr.xloc
73D9 04          inc  a          ;curr.xloc
73DA F0          movx [dptr],a   ;curr.xloc
73DB 80 A9       sjmp @@inner_lop
                ;---
                @@inner_lop_done:
73DD 90 00 8A    mov  dptr,xram_tmp__8Ah ;curr.yloc
73E0 E0          movx a,[dptr]   ;curr.yloc
73E1 04          inc  a          ;curr.yloc
73E2 F0          movx [dptr],a   ;curr.yloc
73E3 02 73 2A    ljmp @@outer_lop               ;...............lop
                ;---
                @@exit:
73E6 22          ret
                ;------------------
;:------------- ;:----------------- KEYPAD code (quad)
                ;------------------
                xlat_key_quad_to_func_XXh:         ;... keyboard quad
                 ;in: [xram_current_menu]
                 ;in: r7 =
                 ;out: r7 = ID_func_XXh_xxx
                 ;- - -
73E7 8F 28       mov  [iram_tmp__28h],r7
73E9 E4          clr  a
73EA 90 00 7E    mov  dptr,xram_tmp__7Eh
73ED F0          movx [dptr],a
73EE A3          inc  dptr ;=xram_tmp__7Fh
73EF F0          movx [dptr],a
                @@lop:                          ;lop...................
73F0 90 00 B8    mov  dptr,xram_current_menu
73F3 E0          movx a,[dptr]
73F4 75 F0 03    mov  b,03h
73F7 A4          mul  a,b
73F8 24 4C       add  a,gui_menu_list and 0ffh
73FA F5 82       mov  dpl,a
73FC E4          clr  a
73FD 34 2C       adc  a,gui_menu_list/100h
73FF F5 83       mov  dph,a
7401 E4          clr  a
7402 93          movc a,[a+dptr]
7403 FB          mov  r3,a
7404 74 01       mov  a,01h
7406 93          movc a,[a+dptr]
7407 FA          mov  r2,a
7408 74 02       mov  a,02h
740A 93          movc a,[a+dptr]
740B F9          mov  r1,a
740C 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
740F 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7412 90 00 B9    mov  dptr,xram_current_item
7415 E0          movx a,[dptr]
7416 75 F0 20    mov  b,20h
7419 A4          mul  a,b
741A 29          add  a,r1
741B F9          mov  r1,a
741C EA          mov  a,r2
741D 35 F0       adc  a,b
741F FA          mov  r2,a
7420 90 00 1D    mov  dptr,001Dh ;idxItemNumKeys
7423 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
7426 FF          mov  r7,a
7427 90 00 7F    mov  dptr,xram_tmp__7Fh
742A E0          movx a,[dptr]
742B C3          clr  c
742C 9F          sbc  a,r7
742D 40 03       jc   @@cont
742F 02 75 09    jmp  @@return_zero
                ;---
                @@cont:
7432 90 00 1A    mov  dptr,001Ah ;idxItemKeys        ;------> keyboard quad
7435 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7438 90 00 7F    mov  dptr,xram_tmp__7Fh
743B E0          movx a,[dptr]
743C 75 F0 04    mov  b,04h
743F A4          mul  a,b
7440 29          add  a,r1
7441 F9          mov  r1,a
7442 EA          mov  a,r2
7443 35 F0       adc  a,b
7445 FA          mov  r2,a
7446 90 00 02    mov  dptr,0002h ;idx...
7449 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
744C 65 28       xor  a,[iram_tmp__28h]
744E 60 03       jz   a,@@_7453h
7450 02 75 00    jmp  @@lop_next
                ;---
                @@_7453h:
7453 90 00 03    mov  dptr,0003h ;idx...
7456 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
7459 FF          mov  r7,a
745A 90 00 0C    mov  dptr,xram_sett_input
745D E0          movx a,[dptr]
745E 6F          xor  a,r7
745F 60 07       jz   a,@@_7468h
7461 EF          mov  a,r7
7462 F4          cpl  a
7463 60 03       jz   a,@@_7468h
7465 02 75 00    jmp  @@lop_next
                ;---
                @@_7468h:
7468 90 00 B8    mov  dptr,xram_current_menu
746B E0          movx a,[dptr]
746C 75 F0 03    mov  b,03h
746F A4          mul  a,b
7470 24 4C       add  a,gui_menu_list and 0ffh
7472 F5 82       mov  dpl,a
7474 E4          clr  a
7475 34 2C       adc  a,gui_menu_list/100h
7477 F5 83       mov  dph,a
7479 E4          clr  a
747A 93          movc a,[a+dptr]
747B FB          mov  r3,a
747C 74 01       mov  a,01h
747E 93          movc a,[a+dptr]
747F FA          mov  r2,a
7480 74 02       mov  a,02h
7482 93          movc a,[a+dptr]
7483 F9          mov  r1,a
7484 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
7487 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
748A 90 00 B9    mov  dptr,xram_current_item
748D E0          movx a,[dptr]
748E 75 F0 20    mov  b,20h
7491 A4          mul  a,b
7492 FF          mov  r7,a
7493 AE F0       mov  r6,b
7495 29          add  a,r1
7496 F9          mov  r1,a
7497 EA          mov  a,r2
7498 3E          adc  a,r6
7499 FA          mov  r2,a
                ;with idx=0  ;aka key.repeat flag maybe?
749A 90 00 1A    mov  dptr,001Ah ;idxItemKeys        ;------> keyboard quad
749D 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
74A0 90 00 7F    mov  dptr,xram_tmp__7Fh
74A3 E0          movx a,[dptr]
74A4 75 F0 04    mov  b,04h
74A7 A4          mul  a,b
74A8 F5 82       mov  dpl,a
74AA 85 F0 83    mov  dph,b
74AD 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
74B0 FD          mov  r5,a
74B1 90 00 45    mov  dptr,xram_keypad_whatever
74B4 E0          movx a,[dptr]
74B5 5D          and  a,r5
74B6 60 48       jz   a,@@lop_next              ;<--??
                ;- - -
74B8 90 00 B8    mov  dptr,xram_current_menu
74BB E0          movx a,[dptr]
74BC 75 F0 03    mov  b,03h
74BF A4          mul  a,b
74C0 24 4C       add  a,gui_menu_list and 0ffh
74C2 F5 82       mov  dpl,a
74C4 E4          clr  a
74C5 34 2C       adc  a,gui_menu_list/100h
74C7 F5 83       mov  dph,a
74C9 E4          clr  a
74CA 93          movc a,[a+dptr]
74CB FB          mov  r3,a
74CC 74 01       mov  a,01h
74CE 93          movc a,[a+dptr]
74CF FA          mov  r2,a
74D0 74 02       mov  a,02h
74D2 93          movc a,[a+dptr]
74D3 F9          mov  r1,a
74D4 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
74D7 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
74DA E9          mov  a,r1
74DB 2F          add  a,r7
74DC F9          mov  r1,a
74DD EA          mov  a,r2
74DE 3E          adc  a,r6
74DF FA          mov  r2,a
74E0 90 00 1A    mov  dptr,001Ah ;idxItemKeys        ;------> keyboard quad
74E3 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
74E6 90 00 7F    mov  dptr,xram_tmp__7Fh
74E9 E0          movx a,[dptr]
74EA 75 F0 04    mov  b,04h
74ED A4          mul  a,b
74EE 29          add  a,r1
74EF F9          mov  r1,a
74F0 EA          mov  a,r2
74F1 35 F0       adc  a,b
74F3 FA          mov  r2,a
74F4 90 00 01    mov  dptr,0001h ;idx...
74F7 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
74FA FF          mov  r7,a          ;ID_func_XXh_xxx
74FB 90 00 7E    mov  dptr,xram_tmp__7Eh
74FE F0          movx [dptr],a
74FF 22          ret              ;out: r7    ;<----
                ;---
                @@lop_next:
7500 90 00 7F    mov  dptr,xram_tmp__7Fh
7503 E0          movx a,[dptr]
7504 04          inc  a
7505 F0          movx [dptr],a
7506 02 73 F0    ljmp @@lop                     ;..............lop
                ;---
                @@return_zero:
7509 7F 00       mov  r7,ID_func_00h_nul      ;<-- NOT EXIST
750B 22          ret              ;out: r7
                ;------------------
;:------------- ;:----------------- FLASH code (write)
                ;------------------
                .macro defcode_write_flash
                write_flash:         ;WRITE FLASH
                 ;in: r4 = flash.addr.bla (00h) (UPPER of 32bit) (compiler/nonsense since actual flash addr is only 24bit)
                 ;in: r5 = flash.addr.msb (00h)
                 ;in: r6 = flash.addr.mid (E0h or F0h)
                 ;in: r7 = flash.addr.lsb (00h)
                 ;in: [iram_tmp__3Ch] = ram.addr.msb (00h) ;\XRAM 0008h
                 ;in: [iram_tmp__3Dh] = ram.addr.lsb (08h) ;/
                 ;in: [iram_tmp__3Eh] = len.msb (00h)      ;\len 31h
                 ;in: [iram_tmp__3Fh] = len.lsb (31h)      ;/
                 ;- - -
7D9A 8F 3B       mov  [iram_tmp__3Bh],r7  ;flash.addr.lsb
7D9C 8E 3A       mov  [iram_tmp__3Ah],r6  ;flash.addr.mid
7D9E 8D 39       mov  [iram_tmp__39h],r5  ;flash.addr.msb
7DA0 8C 38       mov  [iram_tmp__38h],r4  ;flash.addr.bla
7DA2 74 FF       mov  a,0FFh
7DA4 F5 42       mov  [iram_tmp__42h],a
7DA6 F5 43       mov  [iram_tmp__43h],a
                .if flash_version>=ver11sep2017
                  @@retry_endless_lop:
6EE6 90 00 AE      mov  dptr,xram_settings_1_addr
6EE9 E0            movx a,[dptr]
6EEA FC            mov  r4,a
6EEB A3            inc  dptr
6EEC E0            movx a,[dptr]
6EED FD            mov  r5,a
6EEE A3            inc  dptr
6EEF E0            movx a,[dptr]
6EF0 FE            mov  r6,a
6EF1 A3            inc  dptr
6EF2 E0            movx a,[dptr]
6EF3 FF            mov  r7,a
6EF4 AB 3B         mov  r3,[iram_tmp__3Bh]
6EF6 AA 3A         mov  r2,[iram_tmp__3Ah]
6EF8 A9 39         mov  r1,[iram_tmp__39h]
6EFA A8 38         mov  r0,[iram_tmp__38h]
6EFC C3            clr  c
6EFD 12 4B 7C      call compare_r4r5r6r7_equal_r0r1r2r3
6F00 60 19         jz   a,@@valid_address_region
6F02 90 00 AA      mov  dptr,xram_settings_2_addr
6F05 E0            movx a,[dptr]
6F06 FC            mov  r4,a
6F07 A3            inc  dptr
6F08 E0            movx a,[dptr]
6F09 FD            mov  r5,a
6F0A A3            inc  dptr
6F0B E0            movx a,[dptr]
6F0C FE            mov  r6,a
6F0D A3            inc  dptr
6F0E E0            movx a,[dptr]
6F0F FF            mov  r7,a
6F10 A8 38         mov  r0,[iram_tmp__38h]
6F12 C3            clr  c
6F13 12 4B 7C      call compare_r4r5r6r7_equal_r0r1r2r3
6F16 60 03         jz   a,@@valid_address_region
6F18 00            nop
6F19 80 CB         sjmp @@retry_endless_lop  ;uh, retry compare? (=loop endless?)
                  ;---
                  @@valid_address_region:
                .endif
7DA8 12 8B DF    call flash_write_enable                        ;-wren
7DAB AF 3B       mov  r7,[iram_tmp__3Bh]  ;flash.addr.lsb       ;\
7DAD AE 3A       mov  r6,[iram_tmp__3Ah]  ;flash.addr.mid       ;
7DAF AD 39       mov  r5,[iram_tmp__39h]  ;flash.addr.msb       ; erase
7DB1 AC 38       mov  r4,[iram_tmp__38h]  ;flash.addr.bla       ;
7DB3 12 8E C3    lcall flash_erase_block                        ;/
                @@page_lop:     ;write 100h-byte page(s)...
7DB6 D3          set  c    ;<--
7DB7 E5 3F       mov  a,[iram_tmp__3Fh]   ;len.lsb=31h ?
7DB9 94 00       sbc  a,00h
7DBB E5 3E       mov  a,[iram_tmp__3Eh]
7DBD 94 00       sbc  a,00h
7DBF 50 03       jnc  @@cont
7DC1 02 7E 6E    jmp  @@page_lop_done
                ;---
                @@cont:
7DC4 12 BE CE    call general_flash_wait                ;-wait
7DC7 90 FD DE    mov  dptr,IO_SPI_kick_stop_reset       ;\
7DCA 74 80       mov  a,80h                             ;
7DCC F0          movx [dptr],a                          ;/
7DCD 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;\
7DD0 E4          clr  a                                 ;
7DD1 F0          movx [dptr],a                          ;/
7DD2 90 FD D6    mov  dptr,IO_SPI_flash_addr_lsb        ;\
7DD5 E5 3B       mov  a,[iram_tmp__3Bh]                 ;
7DD7 F0          movx [dptr],a  ;OUT.LSW                ;
7DD8 FF          mov  r7,a                              ;
7DD9 AE 3A       mov  r6,[iram_tmp__3Ah]                ;
7DDB AD 39       mov  r5,[iram_tmp__39h]                ;
7DDD AC 38       mov  r4,[iram_tmp__38h]                ;
7DDF 78 08       mov  r0,08h                            ; 24bit FLASH addr (dst)
7DE1 12 4C B0    call shift_right_r4r5r6r7_by_r0        ;
7DE4 A3          inc  dptr ;=IO_SPI_flash_addr_mid      ;
7DE5 EF          mov  a,r7                              ;
7DE6 F0          movx [dptr],a  ;OUT.MID                ;
7DE7 AF 3B       mov  r7,[iram_tmp__3Bh]                ;
7DE9 AE 3A       mov  r6,[iram_tmp__3Ah]                ;
7DEB AD 39       mov  r5,[iram_tmp__39h]                ;
7DED AC 38       mov  r4,[iram_tmp__38h]                ;
7DEF 78 10       mov  r0,10h                            ;
7DF1 12 4C B0    call shift_right_r4r5r6r7_by_r0        ;
7DF4 A3          inc  dptr ;=IO_SPI_flash_addr_msb      ;
7DF5 EF          mov  a,r7                              ;
7DF6 F0          movx [dptr],a  ;OUT.MSW                ;/
7DF7 A3          inc  dptr ;=IO_SPI_dma_ram_addr_lsb    ;\
7DF8 E5 3D       mov  a,[iram_tmp__3Dh]                 ;
7DFA F0          movx [dptr],a  ;OUT.ram.lsb            ; CPU.RAM addr (src)
7DFB E5 3C       mov  a,[iram_tmp__3Ch]                 ;
7DFD A3          inc  dptr ;=IO_SPI_dma_ram_addr_msb    ;
7DFE F0          movx [dptr],a  ;OUT.ram.msb            ;/
7DFF E0          movx a,[dptr]  ;READBACK!!
7E00 44 80       or   a,80h                        ;<-- maybe region=CPU.RAM (vs VRAM), or direction=TO_FLASH ?
7E02 F0          movx [dptr],a  ;OUT.ram.msb+80h
7E03 D3          set  c                                 ;\
7E04 E5 3F       mov  a,[iram_tmp__3Fh]  ;len.lsb=31h ? ;
7E06 95 43       sbc  a,[iram_tmp__43h]                 ;
7E08 E5 3E       mov  a,[iram_tmp__3Eh]                 ;
7E0A 95 42       sbc  a,[iram_tmp__42h]                 ;
7E0C 50 08       jnc  @@_7E16h                          ;
7E0E 85 3E 40    mov  [iram_tmp__40h],[iram_tmp__3Eh]   ;
7E11 85 3F 41    mov  [iram_tmp__41h],[iram_tmp__3Fh] ;len.lsb
7E14 80 06       sjmp @@_7E1Ch                          ;
                ;---                                    ;
                @@_7E16h:                               ;
7E16 85 42 40    mov  [iram_tmp__40h],[iram_tmp__42h]   ;
7E19 85 43 41    mov  [iram_tmp__41h],[iram_tmp__43h]   ;
                @@_7E1Ch:                               ;/
7E1C C3          clr  c                                 ;\
7E1D E5 40       mov  a,[iram_tmp__40h]     ;msb        ;
7E1F 94 01       sbc  a,01h                             ;
7E21 40 06       jc   @@_7E29h                          ;
7E23 75 40 01    mov  [iram_tmp__40h],01h   ;\max 100h  ;
7E26 75 41 00    mov  [iram_tmp__41h],00h   ;/          ;
                @@_7E29h:                               ;/
7E29 E5 41       mov  a,[iram_tmp__41h]     ;len.lsb
7E2B 14          dec  a                   ;MINUS ONE !!!
7E2C 90 FD DB    mov  dptr,IO_SPI_dma_length_lsb
7E2F F0          movx [dptr],a  ;OUT.len.lsb
7E30 A3          inc  dptr ;=IO_SPI_dma_length_msb
7E31 E4          clr  a
7E32 F0          movx [dptr],a  ;OUT.len.msb
7E33 90 FD D0    mov  dptr,IO_SPI_transfer_mode         ;\
7E36 74 80       mov  a,80h                             ; FlashCmd80h
7E38 F0          movx [dptr],a  ;OUT.xx                 ;/
                .if flash_version>=ver11sep2017
                  @@wait_lop:                           ;\
6FAC 90 FD DD      mov  dptr,IO_SPI_ready_flags         ;
6FAF E0            movx a,[dptr]                        ;
6FB0 30 E7 F9      jz   a.7,@@wait_lop                  ;/
                .endif
7E39 E4          clr  a
7E3A FC          mov  r4,a
7E3B FD          mov  r5,a
7E3C E5 3B       mov  a,[iram_tmp__3Bh]
7E3E 25 41       add  a,[iram_tmp__41h]
7E40 F5 3B       mov  [iram_tmp__3Bh],a
7E42 E5 3A       mov  a,[iram_tmp__3Ah]
7E44 35 40       adc  a,[iram_tmp__40h]
7E46 F5 3A       mov  [iram_tmp__3Ah],a
7E48 ED          mov  a,r5
7E49 35 39       adc  a,[iram_tmp__39h]
7E4B F5 39       mov  [iram_tmp__39h],a
7E4D EC          mov  a,r4
7E4E 35 38       adc  a,[iram_tmp__38h]
7E50 F5 38       mov  [iram_tmp__38h],a
7E52 E5 41       mov  a,[iram_tmp__41h]
7E54 25 3D       add  a,[iram_tmp__3Dh]
7E56 F5 3D       mov  [iram_tmp__3Dh],a
7E58 E5 40       mov  a,[iram_tmp__40h]
7E5A 35 3C       adc  a,[iram_tmp__3Ch]
7E5C F5 3C       mov  [iram_tmp__3Ch],a
7E5E C3          clr  c
7E5F E5 3F       mov  a,[iram_tmp__3Fh]   ;len.lsb=31h ?
7E61 95 41       sbc  a,[iram_tmp__41h]
7E63 F5 3F       mov  [iram_tmp__3Fh],a   ;len.lsb=31h ?
7E65 E5 3E       mov  a,[iram_tmp__3Eh]
7E67 95 40       sbc  a,[iram_tmp__40h]
7E69 F5 3E       mov  [iram_tmp__3Eh],a
7E6B 02 7D B6    ljmp @@page_lop
                ;---
                @@page_lop_done:
                .if flash_version<ver11sep2017
7E6E 12 B6 4E      call flash_set_wprot_to_bugged_protected  ;aka leave WRITE mode?
                .endif
7E71 02 BB 45    jmp  flash_write_disable
                .endm ;defcode_write_flash
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_write_flash
                .endif
                ;------------------
;:------------- ;:----------------- code (reset settings)
                ;------------------
                hard_reset_all_settings:   ;(when flash load failure)
750C 90 00 09    mov  dptr,xram_sett_curr_power         ;\
750F 74 01       mov  a,01h                             ;
7511 F0          movx [dptr],a                          ;/
7512 E4          clr  a
7513 90 00 0C    mov  dptr,xram_sett_input              ;\
7516 F0          movx [dptr],a                          ;/
7517 90 00 2D    mov  dptr,xram_sett___2Dh              ;\
751A F0          movx [dptr],a                          ;/
751B 90 00 0D    mov  dptr,xram_sett_detected_v         ;\
751E F0          movx [dptr],a                          ;/
751F A3          inc  dptr ;=xram_sett___0Eh            ;\
7520 74 11       mov  a,11h                             ;
7522 F0          movx [dptr],a                          ;/
7523 90 00 12    mov  dptr,xram_sett_brightness         ;\
7526 74 32       mov  a,32h  ;50 decimal                ;
7528 F0          movx [dptr],a                          ;
7529 90 00 14    mov  dptr,xram_sett_saturation         ;
752C F0          movx [dptr],a                          ;
752D 90 00 13    mov  dptr,xram_sett_contrast           ;
7530 F0          movx [dptr],a                          ;
7531 90 00 15    mov  dptr,xram_sett_tint               ;
7534 F0          movx [dptr],a                          ;/
7535 E4          clr  a                                 ;\
7536 90 00 17    mov  dptr,xram_sett_blankcolor         ;
7539 F0          movx [dptr],a                          ;/
753A 90 00 16    mov  dptr,xram_sett___16h              ;\
753D F0          movx [dptr],a                          ;/
753E 90 00 10    mov  dptr,xram_sett_vcom_dc_hi         ;\
7541 F0          movx [dptr],a                          ;
7542 A3          inc  dptr ;=xram_sett_vcom_dc_lo       ;
7543 74 4F       mov  a,4Fh                             ;
7545 F0          movx [dptr],a                          ;/
7546 90 62 12    mov  dptr,vcom_ac_table                ;\  VCOM_AC
7549 E4          clr  a                                 ;
754A 93          movc a,[a+dptr]          ;<--- table !!! with index a=0 ?
754B 90 00 0F    mov  dptr,xram_sett_vcom_ac            ;
754E F0          movx [dptr],a                          ;/
754F 90 00 18    mov  dptr,xram_sett_volume             ;\
7552 74 32       mov  a,32h                             ;
7554 F0          movx [dptr],a                          ;/
7555 E4          clr  a                                 ;\
7556 A3          inc  dptr ;=xram_sett_blah1            ;
7557 F0          movx [dptr],a                          ;/
7558 90 00 25    mov  dptr,xram_sett_mode               ;\
755B F0          movx [dptr],a                          ;/
755C A3          inc  dptr ;=xram_sett_rotate           ;\
755D 74 03       mov  a,03h                             ;
755F F0          movx [dptr],a                          ;/
7560 E4          clr  a
                .if tech_version>=ver11sep2017
                   inc  dptr ;=xram_sett_zero_A         ;\
                   movx [dptr],a                        ;/
                .endif
7561 A3          inc  dptr ;=xram_sett_req_reset        ;\
7562 F0          movx [dptr],a                          ;/
7563 90 00 1A    mov  dptr,xram_sett_language           ;\
7566 F0          movx [dptr],a                          ;/
7567 90 00 2E    mov  dptr,xram_sett_blah3              ;\
756A F0          movx [dptr],a                          ;/
756B 90 00 2A    mov  dptr,xram_sett_blah2              ;\
756E F0          movx [dptr],a                          ;/
756F 90 00 28    mov  dptr,xram_sett_ir                 ;\
7572 F0          movx [dptr],a                          ;/
7573 A3          inc  dptr ;=xram_sett_quicklysys       ;\
7574 04          inc  a    ;=01h                        ;
7575 F0          movx [dptr],a                          ;/
7576 90 00 2B    mov  dptr,xram_sett_power_up           ;\ (OFF,ON,SAVE)
7579 04          inc  a    ;=02h                        ;
757A F0          movx [dptr],a                          ;/
                .if tech_version<ver11sep2017
757B 90 00 36      mov  dptr,xram_sett_keypadtype       ;\
757E 74 16         mov  a,16h              ;U_3KEY      ;
7580 F0            movx [dptr],a  ;=16h    ;U_3KEY      ;
7581 90 00 4E      mov  dptr,xram_curr_keypadtype       ;
7584 F0            movx [dptr],a  ;=16h    ;U_3KEY      ;/
7585 90 00 2C      mov  dptr,xram_sett_no_signal        ;\
7588 74 02         mov  a,02h              ;BLACK       ;
758A F0            movx [dptr],a  ;=02h    ;BLACK       ;/
                .else
705C E4            clr  a                               ;\
705D 90 00 3A      mov  dptr,xram_sett_keypadtype       ;
7060 F0            movx [dptr],a  ;=00h    ;U_3KEY      ;
7061 90 00 55      mov  dptr,xram_curr_keypadtype       ;
7064 F0            movx [dptr],a  ;=00h    ;U_3KEY      ;/
7065 90 00 30      mov  dptr,xram_sett_no_signal        ;\
7068 F0            movx [dptr],a  ;=00h    ;BLUE        ;/
                .endif
                ;- - - - -
758B 7F 04       mov  r7,04h       ;FIXED but, below implements only 0..3 ?
                .if tech_version<ver11sep2017  ;(when A wasn't already 0)
758D E4            clr  a          ;FIXED
                .endif
758E 70 78       jnz  a,@@vcom_dc_done
7590 EF          mov  a,r7
7591 14          dec  a
7592 60 25       jz   a,@@vcom_dc_pwm_1
7594 14          dec  a
7595 60 3D       jz   a,@@vcom_dc_pwm_2
7597 14          dec  a
7598 60 55       jz   a,@@vcom_dc_pwm_3
759A 24 03       add  a,03h
759C 70 6A       jnz  a,@@vcom_dc_pwm_not_0   ;FIXED, always jumps here
                ;- - - ;@@vcom_dc_pwm_0
                @@vcom_dc_pwm_0:
759E 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
75A1 A3          inc  dptr ;=xram_sett_vcom_dc_lo
75A2 E0          movx a,[dptr]
75A3 F5 3D       mov  [iram_tmp__3Dh],a
75A5 7F 28       mov  r7,28h
75A7 7E 0A       mov  r6,0Ah
75A9 7D 00       mov  r5,00h
75AB 7C 00       mov  r4,00h
75AD 12 84 FE    call pwm_set_duty_pwm0
75B0 90 FD 1F    mov  dptr,IO_PWM_enable_flags
75B3 E0          movx a,[dptr]
75B4 44 01       or   a,01h
75B6 F0          movx [dptr],a
75B7 80 4F       sjmp @@vcom_dc_done
                ;---
                @@vcom_dc_pwm_1:
75B9 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
75BC A3          inc  dptr ;=xram_sett_vcom_dc_lo
75BD E0          movx a,[dptr]
75BE F5 3D       mov  [iram_tmp__3Dh],a
75C0 7F 28       mov  r7,28h
75C2 7E 0A       mov  r6,0Ah
75C4 7D 00       mov  r5,00h
75C6 7C 00       mov  r4,00h
75C8 12 85 C5    call pwm_set_duty_pwm1
75CB 90 FD 1F    mov  dptr,IO_PWM_enable_flags
75CE E0          movx a,[dptr]
75CF 44 02       or   a,02h
75D1 F0          movx [dptr],a
75D2 80 34       sjmp @@vcom_dc_done
                ;---
                @@vcom_dc_pwm_2:
75D4 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
75D7 A3          inc  dptr ;=xram_sett_vcom_dc_lo
75D8 E0          movx a,[dptr]
75D9 F5 3D       mov  [iram_tmp__3Dh],a
75DB 7F 28       mov  r7,28h
75DD 7E 0A       mov  r6,0Ah
75DF 7D 00       mov  r5,00h
75E1 7C 00       mov  r4,00h
75E3 12 86 8C    call pwm_set_duty_pwm2
75E6 90 FD 1F    mov  dptr,IO_PWM_enable_flags
75E9 E0          movx a,[dptr]
75EA 44 04       or   a,04h
75EC F0          movx [dptr],a
75ED 80 19       sjmp @@vcom_dc_done
                ;---
                @@vcom_dc_pwm_3:
75EF 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
75F2 A3          inc  dptr ;=xram_sett_vcom_dc_lo
75F3 E0          movx a,[dptr]
75F4 F5 3D       mov  [iram_tmp__3Dh],a
75F6 7F 28       mov  r7,28h
75F8 7E 0A       mov  r6,0Ah
75FA 7D 00       mov  r5,00h
75FC 7C 00       mov  r4,00h
75FE 12 87 53    call pwm_set_duty_pwm3
7601 90 FD 1F    mov  dptr,IO_PWM_enable_flags
7604 E0          movx a,[dptr]
7605 44 08       or   a,08h
7607 F0          movx [dptr],a
                @@vcom_dc_pwm_not_0:
                @@vcom_dc_done:
                ;- - - - -
7608 E4          clr  a
7609 90 00 1B    mov  dptr,xram_sett_zero_0
760C F0          movx [dptr],a
760D A3          inc  dptr  ;=xram_sett_zero_1
760E F0          movx [dptr],a
760F A3          inc  dptr  ;=xram_sett_zero_2
7610 F0          movx [dptr],a
7611 A3          inc  dptr  ;=xram_sett_zero_3
7612 F0          movx [dptr],a
7613 A3          inc  dptr  ;=xram_sett_zero_4
7614 F0          movx [dptr],a
7615 A3          inc  dptr  ;=xram_sett_zero_5
7616 F0          movx [dptr],a
7617 A3          inc  dptr  ;=xram_sett_zero_6
7618 F0          movx [dptr],a
7619 A3          inc  dptr  ;=xram_sett_zero_7
761A F0          movx [dptr],a
761B A3          inc  dptr  ;=xram_sett_zero_8
761C F0          movx [dptr],a
761D A3          inc  dptr  ;=xram_sett_zero_9
761E F0          movx [dptr],a
761F 22          ret
                ;------------------
;:------------- ;:----------------- code (apply settings)
                ;------------------
                apply_settings_to_IO_ports:
7620 E4          clr  a
7621 FF          mov  r7,a  ;=00h
7622 12 67 84    call get_min_max_med_for_brightness_contrast_saturation
7625 AD 07       mov  r5,r7(0)  ;MEDIUM
7627 C0 05       push r5(0)     ;MEDIUM
7629 78 3B       mov  r0,iram_tmp__3Bh and 0ffh  ;\        min   max
762B 7C 00       mov  r4,iram_tmp__3Bh/100h      ; dst --> [iram_tmp__3Bh],[iram_tmp__3Ch]
762D 7D 00       mov  r5,00h          ;area      ;/
762F 7B 01       mov  r3,01h       ;<-- memarea 01h !       ;\
7631 7A 00       mov  r2,(xram_min_brightness+0)/100h       ;
7633 79 3F       mov  r1,(xram_min_brightness+0) and 0ffh   ;/
7635 7E 00       mov  r6,00h  ;\len 2
7637 7F 02       mov  r7,02h  ;/
7639 12 49 C1    call anymem_generic_memcopy
763C 90 00 12    mov  dptr,xram_sett_brightness               ;<------
763F E0          movx a,[dptr]
7640 FF          mov  r7,a
7641 D0 05       pop  r5(0)  ;MEDIUM
7643 12 6C E6    call xlat_bright_contrast_saturation_to_hex_values
7646 90 FF D4    mov  dptr,IO_LCD_basic_brightness              ;\
7649 EF          mov  a,r7                                      ; issue I/O
764A F0          movx [dptr],a                                  ;/
                ;- - - - -
764B 7F 01       mov  r7,01h
764D 12 67 84    call get_min_max_med_for_brightness_contrast_saturation
7650 AD 07       mov  r5,r7(0)  ;MEDIUM
7652 C0 05       push r5(0)     ;MEDIUM
7654 78 3B       mov  r0,iram_tmp__3Bh and 0ffh  ;\        min,max
7656 7C 00       mov  r4,iram_tmp__3Bh/100h      ; dst --> [iram_tmp__3Bh],[iram_tmp__3Ch]
7658 7D 00       mov  r5,00h          ;area      ;/
765A 7B 01       mov  r3,01h       ;<-- memarea 01h !   ;\
765C 7A 00       mov  r2,(xram_min_contrast+0)/100h     ; src 004Ah..004Bh
765E 79 4A       mov  r1,(xram_min_contrast+0) and 0ffh ;/xram_min_contrast
7660 7E 00       mov  r6,00h  ;\len 2
7662 7F 02       mov  r7,02h  ;/
7664 12 49 C1    call anymem_generic_memcopy
7667 90 00 13    mov  dptr,xram_sett_contrast               ;<------
766A E0          movx a,[dptr]
766B FF          mov  r7,a
766C D0 05       pop  r5(0)     ;MEDIUM
766E 12 6C E6    call xlat_bright_contrast_saturation_to_hex_values
7671 90 FF D3    mov  dptr,IO_LCD_basic_contrast                ;\
7674 EF          mov  a,r7                                      ; issue I/O
7675 F0          movx [dptr],a                                  ;/
                ;- - - - -
7676 7F 02       mov  r7,02h
7678 12 67 84    call get_min_max_med_for_brightness_contrast_saturation
767B AD 07       mov  r5,r7(0)  ;MEDIUM
767D C0 05       push r5(0)     ;MEDIUM
767F 78 3B       mov  r0,iram_tmp__3Bh and 0ffh   ;\
7681 7C 00       mov  r4,iram_tmp__3Bh/100h       ; dst --> [iram_tmp__3Bh],[iram_tmp__3Ch]
7683 7D 00       mov  r5,00h          ;area       ;/
7685 7B 01       mov  r3,01h       ;<-- memarea 01h !       ;\
7687 7A 00       mov  r2,(xram_min_saturation+0)/100h       ; src 0042h..0043h
7689 79 42       mov  r1,(xram_min_saturation+0) and 0ffh   ;/xram_min_saturation
768B 7E 00       mov  r6,00h  ;\len 2
768D 7F 02       mov  r7,02h  ;/
768F 12 49 C1    call anymem_generic_memcopy       ;another !?!!
7692 90 00 14    mov  dptr,xram_sett_saturation               ;<------
7695 E0          movx a,[dptr]
7696 FF          mov  r7,a
7697 D0 05       pop  r5(0)     ;MEDIUM
7699 12 6C E6    call xlat_bright_contrast_saturation_to_hex_values
769C 90 FF D6    mov  dptr,IO_LCD_basic_saturation              ;\
769F EF          mov  a,r7                                      ; issue I/O
76A0 F0          movx [dptr],a                                  ;/
                ;- - - - -
76A1 90 00 15    mov  dptr,xram_sett_tint               ;<------
76A4 E0          movx a,[dptr]
76A5 FF          mov  r7,a
76A6 12 A7 A4    call xlat_tint_to_hex_values    ;xlat TINT 0..100 to HEX values
76A9 90 FF D5    mov  dptr,IO_LCD_basic_tint                    ;\
76AC EF          mov  a,r7                                      ; issue I/O
76AD F0          movx [dptr],a                                  ;/
                ;- - - - -
76AE 7F 04       mov  r7,04h       ;FIXED but, below implements only 0..3 ?
76B0 E4          clr  a            ;FIXED
76B1 70 75       jnz  a,@@vcom_dc_done
76B3 EF          mov  a,r7
76B4 14          dec  a
76B5 60 24       jz   a,@@vcom_dc_pwm_1
76B7 14          dec  a
76B8 60 3B       jz   a,@@vcom_dc_pwm_2
76BA 14          dec  a
76BB 60 52       jz   a,@@vcom_dc_pwm_3
76BD 24 03       add  a,03h
76BF 70 67       jnz  a,@@vcom_dc_pwm_not_0   ;FIXED, always jumps here
                ;- - - ;@@vcom_dc_pwm_0
                @@vcom_dc_pwm_0:
76C1 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
76C4 A3          inc  dptr ;=xram_sett_vcom_dc_lo
76C5 E0          movx a,[dptr]
76C6 F5 3D       mov  [iram_tmp__3Dh],a
76C8 7F 28       mov  r7,28h
76CA 7E 0A       mov  r6,0Ah
76CC 7D 00       mov  r5,00h
76CE 7C 00       mov  r4,00h
76D0 12 84 FE    call pwm_set_duty_pwm0
76D3 90 FD 1F    mov  dptr,IO_PWM_enable_flags
76D6 E0          movx a,[dptr]
76D7 44 01       or   a,01h
76D9 F0          movx [dptr],a
76DA 22          ret
                ;---
                @@vcom_dc_pwm_1:
76DB 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
76DE A3          inc  dptr ;=xram_sett_vcom_dc_lo
76DF E0          movx a,[dptr]
76E0 F5 3D       mov  [iram_tmp__3Dh],a
76E2 7F 28       mov  r7,28h
76E4 7E 0A       mov  r6,0Ah
76E6 7D 00       mov  r5,00h
76E8 7C 00       mov  r4,00h
76EA 12 85 C5    call pwm_set_duty_pwm1
76ED 90 FD 1F    mov  dptr,IO_PWM_enable_flags
76F0 E0          movx a,[dptr]
76F1 44 02       or   a,02h
76F3 F0          movx [dptr],a
76F4 22          ret
                ;---
                @@vcom_dc_pwm_2:
76F5 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
76F8 A3          inc  dptr ;=xram_sett_vcom_dc_lo
76F9 E0          movx a,[dptr]
76FA F5 3D       mov  [iram_tmp__3Dh],a
76FC 7F 28       mov  r7,28h
76FE 7E 0A       mov  r6,0Ah
7700 7D 00       mov  r5,00h
7702 7C 00       mov  r4,00h
7704 12 86 8C    call pwm_set_duty_pwm2
7707 90 FD 1F    mov  dptr,IO_PWM_enable_flags
770A E0          movx a,[dptr]
770B 44 04       or   a,04h
770D F0          movx [dptr],a
770E 22          ret
                ;---
                @@vcom_dc_pwm_3:
770F 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
7712 A3          inc  dptr ;=xram_sett_vcom_dc_lo
7713 E0          movx a,[dptr]
7714 F5 3D       mov  [iram_tmp__3Dh],a
7716 7F 28       mov  r7,28h
7718 7E 0A       mov  r6,0Ah
771A 7D 00       mov  r5,00h
771C 7C 00       mov  r4,00h
771E 12 87 53    call pwm_set_duty_pwm3
7721 90 FD 1F    mov  dptr,IO_PWM_enable_flags
7724 E0          movx a,[dptr]
7725 44 08       or   a,08h
7727 F0          movx [dptr],a
                @@vcom_dc_pwm_not_0:
                @@vcom_dc_done:
7728 22          ret
                ;------------------
;:------------- ;:----------------- OSD code (draw string, manual upload font)
                ;------------------
                osd_draw_string:
                 ;in: [iram_tmp__40h..42h] = src.string
                 ;in: r3         = attr
                 ;in: r5         = xloc
                 ;in: r7         = yloc
                 ;---
7729 8D 3E       mov  [iram_tmp__3Eh],r5   ;xloc
772B 8B 3F       mov  [iram_tmp__3Fh],r3   ;attr
772D AC 07       mov  r4,r7(0)   ;yloc
772F E5 42       mov  a,[iram_tmp__42h]  ;\
7731 45 41       or   a,[iram_tmp__41h]  ; src.string
7733 45 40       or   a,[iram_tmp__40h]  ;/
7735 70 03       jnz  a,@@cont
7737 02 78 2A    jmp  @@done
                ;---
                @@cont:
773A 12 7B D8    call get_window_addr   ;out:r6r7
773D 90 00 90    mov  dptr,xram_tmp__90h
7740 12 AC 70    call get_window_width  ;out:[dptr]=addr, r6r7=width
7743 EC          mov  a,r4      ;yloc
7744 FD          mov  r5,a      ;yloc.lsb
7745 7C 00       mov  r4,00h    ;yloc.msb (and src.index=0)
7747 12 4A 94    call multiply_r6r7_by_r4r5
774A EF          mov  a,r7      ;yloc*width
774B 25 3E       add  a,[iram_tmp__3Eh]   ;addr.lsb = yloc*width+xloc
774D FF          mov  r7,a      ;addr.lsb = yloc*width+xloc
774E EC          mov  a,r4      ;src.index  (aka ZERO here)
774F 3E          adc  a,r6      ;addr.msb
7750 FE          mov  r6,a      ;addr.msb
7751 90 00 94    mov  dptr,xram_tmp__94h
7754 F0          movx [dptr],a
7755 A3          inc  dptr ;=xram_tmp__95h
7756 EF          mov  a,r7
7757 F0          movx [dptr],a
7758 90 00 91    mov  dptr,xram_tmp__91h
775B E0          movx a,[dptr]
775C 2F          add  a,r7
775D F0          movx [dptr],a
775E 90 00 90    mov  dptr,xram_tmp__90h
7761 E0          movx a,[dptr]
7762 3E          adc  a,r6
7763 F0          movx [dptr],a
7764 E0          movx a,[dptr]
7765 FE          mov  r6,a
7766 A3          inc  dptr ;=xram_tmp__91h
7767 E0          movx a,[dptr]
7768 FF          mov  r7,a
7769 A3          inc  dptr ;=xram_tmp__92h
776A EE          mov  a,r6
776B F0          movx [dptr],a
776C A3          inc  dptr ;=xram_tmp__93h
776D EF          mov  a,r7
776E F0          movx [dptr],a
776F EE          mov  a,r6
7770 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
7773 F0          movx [dptr],a
7774 90 00 90    mov  dptr,xram_tmp__90h           ;\
7777 A3          inc  dptr ;=xram_tmp__91h         ;
7778 E0          movx a,[dptr]                     ; apply yloc to I/O
7779 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb   ;
777C F0          movx [dptr],a                     ;/
777D E4          clr  a         ;\len.drawn=00h
777E F5 3E       mov  [iram_tmp__3Eh],a   ;/
                ;- - - - - - - - -
                @@char_out_lop:
7780 AB 40       mov  r3,[iram_tmp__40h]  ;\                    ;\
7782 AA 41       mov  r2,[iram_tmp__41h]  ; src.string          ;
7784 A9 42       mov  r1,[iram_tmp__42h]  ;/                    ; read char,
7786 8C 82       mov  dpl,r4    ;src.index                      ; and
7788 75 83 00    mov  dph,00h                                   ; check if eol
778B 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
778E FD          mov  r5,a                                      ;
778F 60 63       jz   a,@@eol         ;chr(00h)                 ;/
7791 90 00 90    mov  dptr,xram_tmp__90h           ;\apply xloc to I/O
7794 E0          movx a,[dptr]                     ;  MSB needs manual update?
7795 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb   ;  LSB is auto-incrementing?
7798 F0          movx [dptr],a                     ;/
7799 ED          mov  a,r5
779A 64 23       xor  a,23h         ;char "#" ... (prefix)
779C 70 16       jnz  a,@@no_prefix
779E 0C          inc  r4        ;src.index
779F 8C 82       mov  dpl,r4    ;src.index
77A1 F5 83       mov  dph,a   ;=00h
77A3 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
77A6 75 F0 02    mov  b,02h
77A9 A4          mul  a,b
77AA 24 59       add  a,prefixed_char_xlat_table and 0ffh ;\
77AC F5 82       mov  dpl,a                               ; char xlat for "#x" (prefixed)
77AE E5 F0       mov  a,b                                 ;
77B0 34 59       adc  a,prefixed_char_xlat_table/100h     ;/
77B2 80 1A       sjmp @@this_char
                ;---
                @@no_prefix:
77B4 AB 40       mov  r3,[iram_tmp__40h]  ;\
77B6 AA 41       mov  r2,[iram_tmp__41h]  ; src.string
77B8 A9 42       mov  r1,[iram_tmp__42h]  ;/
77BA 8C 82       mov  dpl,r4    ;src.index
77BC 75 83 00    mov  dph,00h
77BF 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
77C2 75 F0 02    mov  b,02h
77C5 A4          mul  a,b
77C6 24 59       add  a,normal_char_xlat_table and 0ffh   ;\
77C8 F5 82       mov  dpl,a                               ; char xlat for "x" (normal)
77CA E5 F0       mov  a,b                                 ;
77CC 34 57       adc  a,normal_char_xlat_table/100h       ;/
                @@this_char:
77CE F5 83       mov  dph,a
77D0 E4          clr  a
77D1 93          movc a,[a+dptr]                ;\
77D2 FA          mov  r2,a                      ;
77D3 74 01       mov  a,01h                     ; xlat char to r2r3
77D5 93          movc a,[a+dptr]                ;
77D6 FB          mov  r3,a                      ;/
77D7 EA          mov  a,r2                         ;\
77D8 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb   ;
77DB F0          movx [dptr],a     ;dat.msb        ; output r2r3 to I/O or so??
77DC EB          mov  a,r3                         ;
77DD 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb   ;
77E0 F0          movx [dptr],a     ;dat.lsb        ;/
77E1 90 00 91    mov  dptr,xram_tmp__91h        ;\
77E4 E0          movx a,[dptr]                  ; raise xloc? (addr.lsb)
77E5 04          inc  a                         ;
77E6 F0          movx [dptr],a                  ;/
77E7 70 06       jnz  a,@@keep_msb
77E9 90 00 90    mov  dptr,xram_tmp__90h        ;\
77EC E0          movx a,[dptr]                  ; yloc? or MSB of LINEAR vram addr?
77ED 04          inc  a                         ;
77EE F0          movx [dptr],a                  ;/
                @@keep_msb:
77EF 0C          inc  r4        ;src.index
77F0 05 3E       inc  [iram_tmp__3Eh]     ;len.drawn
77F2 80 8C       sjmp @@char_out_lop
                ;- - - - - -
                @@eol:
77F4 90 00 92    mov  dptr,xram_tmp__92h
77F7 E0          movx a,[dptr]
77F8 FC          mov  r4,a
77F9 A3          inc  dptr ;=xram_tmp__93h
77FA E0          movx a,[dptr]
77FB FD          mov  r5,a
77FC EC          mov  a,r4
77FD 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
7800 F0          movx [dptr],a          ;xloc?
7801 ED          mov  a,r5
7802 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb
7805 F0          movx [dptr],a
                @@attr_lop:             ;color ATTR lop... or so?
7806 E5 3E       mov  a,[iram_tmp__3Eh]   ;len.drawn
7808 60 20       jz   a,@@done
780A 90 00 92    mov  dptr,xram_tmp__92h
780D E0          movx a,[dptr]          ;?
780E 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
7811 F0          movx [dptr],a         ;<--- output addr.msw
7812 90 FB 10    mov  dptr,IO_OSD_bgmap_data_attr
7815 E5 3F       mov  a,[iram_tmp__3Fh]           ;?
7817 F0          movx [dptr],a         ;<--- output ;attr maybe?
7818 15 3E       dec  [iram_tmp__3Eh]     ;len.drawn
781A 90 00 93    mov  dptr,xram_tmp__93h
781D E0          movx a,[dptr]
781E 04          inc  a
781F F0          movx [dptr],a
7820 70 E4       jnz  a,@@attr_lop     ;... lop
7822 90 00 92    mov  dptr,xram_tmp__92h
7825 E0          movx a,[dptr]
7826 04          inc  a
7827 F0          movx [dptr],a
7828 80 DC       sjmp @@attr_lop       ;... lop
                ;---
                @@done:
782A 22          ret
                ;------------------
                osd_upload_font_characters_manually:   ;non-DMA upload
782B 8F 26       mov  [iram_tmp__26h],r7  ;vram.dest.index
782D 8D 27       mov  [iram_tmp__27h],r5  ;len???    ;... NOT func here?
782F 8B 28       mov  [iram_tmp__28h],r3  ;src.area
7831 8A 29       mov  [iram_tmp__29h],r2  ;src.msb
7833 89 2A       mov  [iram_tmp__2Ah],r1  ;src.lsb
7835 E9          mov  a,r1    ;src.lsb
7836 4A          or   a,r2    ;src.msb
7837 4B          or   a,r3    ;src.area
7838 70 03       jnz  a,@@cont
783A 02 79 18    jmp  @@exit
                ;---
                @@cont:            ;first, compute INNER.LEN (words per char)
783D 90 FB 76    mov  dptr,IO_OSD_char_xsiz             ;\
7840 E0          movx a,[dptr]                          ; get char.xsiz
7841 90 00 81    mov  dptr,xram_tmp__81h                ;
7844 F0          movx [dptr],a                          ;/
7845 90 FB 77    mov  dptr,IO_OSD_char_ysiz             ;\
7848 E0          movx a,[dptr]                          ; get char.ysiz
7849 90 00 82    mov  dptr,xram_tmp__82h                ;
784C F0          movx [dptr],a                          ;/
784D 90 00 81    mov  dptr,xram_tmp__81h
7850 E0          movx a,[dptr]
7851 D3          set  c       ;<--
7852 94 10       sbc  a,10h
7854 50 04       jnc  @@more_than_16pix   ;... 17bit or more? (max 24bit?)
7856 A3          inc  dptr ;=xram_tmp__82h
7857 E0          movx a,[dptr]          ;num 16bit words
7858 80 24       sjmp @@this_char_size
                ;---
                @@more_than_16pix:
785A 90 00 82    mov  dptr,xram_tmp__82h
785D E0          movx a,[dptr]
785E 20 E0 0D    jnz  a.0,@@more_than_16pix_and_odd_ysiz   ;ysiz.lsb
7861 75 F0 03    mov  b,03h
7864 A4          mul  a,b        ;mul3
7865 FF          mov  r7,a
7866 E5 F0       mov  a,b
7868 C3          clr  c
7869 13          rcr  a          ;mul3,div2
786A EF          mov  a,r7
786B 13          rcr  a
786C 80 10       sjmp @@this_char_size
                ;---
                @@more_than_16pix_and_odd_ysiz:
786E 90 00 82    mov  dptr,xram_tmp__82h
7871 E0          movx a,[dptr]
7872 75 F0 03    mov  b,03h
7875 A4          mul  a,b        ;mul3
7876 FF          mov  r7,a
7877 E5 F0       mov  a,b
7879 C3          clr  c
787A 13          rcr  a          ;mul3,div2
787B EF          mov  a,r7
787C 13          rcr  a
787D 04          inc  a       ;<-- roundup (padding at ODD ysiz)
                @@this_char_size:
787E 90 00 80    mov  dptr,xram_tmp__80h      ;INNER.LEN (words per character)
7881 F0          movx [dptr],a
                ;- - - - - - - - -
7882 90 00 80    mov  dptr,xram_tmp__80h      ;INNER.LEN
7885 E0          movx a,[dptr]
7886 85 26 F0    mov  b,[iram_tmp__26h]   ;dest.index
7889 A4          mul  a,b
788A 90 FB 02    mov  dptr,IO_OSD_font_addr_lsb
788D F0          movx [dptr],a
788E E4          clr  a                                 ;\
788F 90 00 7E    mov  dptr,xram_tmp__7Eh   ;outer.index ;
7892 F0          movx [dptr],a                          ;/
                @@outer_lop:                               ;lop...
7893 90 00 7E    mov  dptr,xram_tmp__7Eh   ;outer.index ;\
7896 E0          movx a,[dptr]     ;outer.index         ;
7897 C3          clr  c                                 ;
7898 95 27       sbc  a,[iram_tmp__27h]                 ; <--- len???
789A 50 7C       jnc  @@outer_lop_done                  ;/
789C E4          clr  a                                 ;\
789D A3          inc  dptr ;=xram_tmp__7Fh ;inner.index ;
789E F0          movx [dptr],a                          ;/
                @@inner_lop:                               ;lop...
789F 90 00 80    mov  dptr,xram_tmp__80h      ;INNER.LEN
78A2 E0          movx a,[dptr]
78A3 FF          mov  r7,a
78A4 90 00 7F    mov  dptr,xram_tmp__7Fh   ;inner.index
78A7 E0          movx a,[dptr]
78A8 C3          clr  c
78A9 9F          sbc  a,r7
78AA 50 4E       jnc  @@inner_lop_done
                ;- - -
78AC EF          mov  a,r7
78AD 85 26 F0    mov  b,[iram_tmp__26h]   ;dest.index
78B0 A4          mul  a,b
78B1 FF          mov  r7,a
78B2 E0          movx a,[dptr]
78B3 7C 00       mov  r4,00h
78B5 2F          add  a,r7
78B6 EC          mov  a,r4
78B7 35 F0       adc  a,b
78B9 FF          mov  r7,a
78BA 33          rcl  a     ;blah
78BB 95 E0       sbc  a,a   ;blah
78BD 90 FB 0F    mov  dptr,IO_OSD_font_addr_msb
78C0 EF          mov  a,r7
78C1 F0          movx [dptr],a
78C2 AB 28       mov  r3,[iram_tmp__28h]
78C4 AA 29       mov  r2,[iram_tmp__29h]
78C6 A9 2A       mov  r1,[iram_tmp__2Ah]
78C8 90 00 7F    mov  dptr,xram_tmp__7Fh   ;inner.index
78CB E0          movx a,[dptr]
78CC FF          mov  r7,a
78CD 75 F0 02    mov  b,02h
78D0 A4          mul  a,b
78D1 F5 82       mov  dpl,a
78D3 85 F0 83    mov  dph,b
78D6 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
78D9 90 FB 04    mov  dptr,IO_OSD_font_data_msb
78DC F0          movx [dptr],a
78DD EF          mov  a,r7
78DE 75 F0 02    mov  b,02h
78E1 A4          mul  a,b
78E2 29          add  a,r1
78E3 F9          mov  r1,a
78E4 EA          mov  a,r2
78E5 35 F0       adc  a,b
78E7 FA          mov  r2,a
78E8 90 00 01    mov  dptr,0001h ;idx...
78EB 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
78EE 90 FB 03    mov  dptr,IO_OSD_font_data_lsb
78F1 F0          movx [dptr],a
78F2 90 00 7F    mov  dptr,xram_tmp__7Fh   ;inner.index
78F5 E0          movx a,[dptr]
78F6 04          inc  a
78F7 F0          movx [dptr],a
78F8 80 A5       sjmp @@inner_lop                        ;...lop
                ;---
                @@inner_lop_done:
78FA 90 00 80    mov  dptr,xram_tmp__80h      ;INNER.LEN
78FD E0          movx a,[dptr]
78FE 75 F0 02    mov  b,02h
7901 A4          mul  a,b
7902 AE F0       mov  r6,b
7904 25 2A       add  a,[iram_tmp__2Ah]
7906 F5 2A       mov  [iram_tmp__2Ah],a
7908 EE          mov  a,r6
7909 35 29       adc  a,[iram_tmp__29h]
790B F5 29       mov  [iram_tmp__29h],a
790D 05 26       inc  [iram_tmp__26h]    ;dest.index (next outer block)
790F 90 00 7E    mov  dptr,xram_tmp__7Eh   ;outer.index
7912 E0          movx a,[dptr]
7913 04          inc  a
7914 F0          movx [dptr],a
7915 02 78 93    ljmp @@outer_lop                        ;...lop
                ;---
                @@outer_lop_done:
                @@exit:
7918 22          ret
                ;------------------
;:------------- ;:----------------- GUI code (next/prev menu/item)
                ;------------------
                search_next_menu:       ;NEXT MENU
7919 90 00 B8    mov  dptr,xram_current_menu
791C E0          movx a,[dptr]
791D FF          mov  r7,a
791E 75 F0 03    mov  b,03h
7921 A4          mul  a,b
7922 24 4C       add  a,gui_menu_list and 0ffh
7924 F5 82       mov  dpl,a
7926 E4          clr  a
7927 34 2C       adc  a,gui_menu_list/100h
7929 F5 83       mov  dph,a
792B E4          clr  a
792C 93          movc a,[a+dptr]
792D FB          mov  r3,a
792E 74 01       mov  a,01h
7930 93          movc a,[a+dptr]
7931 FA          mov  r2,a
7932 74 02       mov  a,02h
7934 93          movc a,[a+dptr]
7935 F9          mov  r1,a
7936 90 00 0E    mov  dptr,000Eh ;idxMenuNextMenu
7939 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
793C 90 00 7E    mov  dptr,xram_tmp__7Eh
793F F0          movx [dptr],a
7940 A3          inc  dptr ;=xram_tmp__7Fh
7941 EF          mov  a,r7
7942 F0          movx [dptr],a
                @@lop:
7943 90 00 B8    mov  dptr,xram_current_menu            ;\
7946 E0          movx a,[dptr]                          ;
7947 C3          clr  c                                 ;
7948 94 16       sbc  a,gui_menu_list_num_entries       ;
794A 50 05       jnc  @@wrap                            ;
794C E0          movx a,[dptr]                          ; increase NEXT
794D 04          inc  a        ;--> increase NEXT       ;
794E F0          movx [dptr],a                          ;
794F 80 05       sjmp @@this                            ;
                ;---                                    ;
                @@wrap:                                 ;
7951 E4          clr  a  ;=00h                          ;
7952 90 00 B8    mov  dptr,xram_current_menu            ;
7955 F0          movx [dptr],a                          ;
                @@this:                                 ;/
7956 90 00 B8    mov  dptr,xram_current_menu
7959 E0          movx a,[dptr]
795A 75 F0 03    mov  b,03h
795D A4          mul  a,b
795E 24 4C       add  a,gui_menu_list and 0ffh
7960 F5 82       mov  dpl,a
7962 E4          clr  a
7963 34 2C       adc  a,gui_menu_list/100h
7965 F5 83       mov  dph,a
7967 E4          clr  a
7968 93          movc a,[a+dptr]
7969 FB          mov  r3,a
796A 74 01       mov  a,01h
796C 93          movc a,[a+dptr]
796D FA          mov  r2,a
796E 74 02       mov  a,02h
7970 93          movc a,[a+dptr]
7971 F9          mov  r1,a
7972 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
7975 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
7978 FF          mov  r7,a
7979 90 00 7E    mov  dptr,xram_tmp__7Eh
797C E0          movx a,[dptr]
797D 6F          xor  a,r7
797E 70 6B       jnz  a,@@_79EBh
7980 90 00 24    mov  dptr,0024h ;idxMenu___24h
7983 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
7986 30 E1 62    jz   a.1,@@_79EBh
                ;- - -
7989 90 00 0F    mov  dptr,000Fh ;idxMenu___0Fh
798C 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
798F EA          mov  a,r2
7990 49          or   a,r1
7991 4B          or   a,r3
7992 60 55       jz   a,@@to_@@_79FFh
                ;- - -
7994 90 00 B8    mov  dptr,xram_current_menu
7997 E0          movx a,[dptr]
7998 75 F0 03    mov  b,03h
799B A4          mul  a,b
799C 24 4C       add  a,gui_menu_list and 0ffh
799E F5 82       mov  dpl,a
79A0 E4          clr  a
79A1 34 2C       adc  a,gui_menu_list/100h
79A3 F5 83       mov  dph,a
79A5 E4          clr  a
79A6 93          movc a,[a+dptr]
79A7 FB          mov  r3,a
79A8 74 01       mov  a,01h
79AA 93          movc a,[a+dptr]
79AB FA          mov  r2,a
79AC 74 02       mov  a,02h
79AE 93          movc a,[a+dptr]
79AF F9          mov  r1,a
79B0 90 00 0F    mov  dptr,000Fh ;idxMenu___0Fh
79B3 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
79B6 12 4D B1    call jmp_r2r1  ;----->
79B9 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
79BC 30 E1 02    jz   a.1,@@menu_disabled_go_to_next_next
79BF 80 3E       sjmp @@_79FFh
                ;---
                @@menu_disabled_go_to_next_next:
79C1 90 00 B8    mov  dptr,xram_current_menu
79C4 E0          movx a,[dptr]
79C5 75 F0 03    mov  b,03h
79C8 A4          mul  a,b
79C9 24 4C       add  a,gui_menu_list and 0ffh
79CB F5 82       mov  dpl,a
79CD E4          clr  a
79CE 34 2C       adc  a,gui_menu_list/100h
79D0 F5 83       mov  dph,a
79D2 E4          clr  a
79D3 93          movc a,[a+dptr]
79D4 FB          mov  r3,a
79D5 74 01       mov  a,01h
79D7 93          movc a,[a+dptr]
79D8 FA          mov  r2,a
79D9 74 02       mov  a,02h
79DB 93          movc a,[a+dptr]
79DC F9          mov  r1,a
79DD 90 00 0E    mov  dptr,000Eh ;idxMenuNextMenu
79E0 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
79E3 90 00 7E    mov  dptr,xram_tmp__7Eh
79E6 F0          movx [dptr],a
79E7 80 02       sjmp @@_79EBh
                ;---
                @@to_@@_79FFh:
79E9 80 14       sjmp @@_79FFh
                ;---
                @@_79EBh:
79EB 90 00 7F    mov  dptr,xram_tmp__7Fh
79EE E0          movx a,[dptr]
79EF FF          mov  r7,a        ;<---
79F0 90 00 B8    mov  dptr,xram_current_menu
79F3 E0          movx a,[dptr]
79F4 6F          xor  a,r7
79F5 60 03       jz   a,@@_79FAh     ;--->
79F7 02 79 43    ljmp @@lop
                ;---
                @@_79FAh:
79FA 7F 10       mov  r7,MenuID_10h_SourceMenu          ;\
79FC 12 BC 9D    call select_menu_r7                    ;/
                @@_79FFh:
79FF 90 00 B8    mov  dptr,xram_current_menu
7A02 E0          movx a,[dptr]
7A03 FF          mov  r7,a
7A04 22          ret
                ;------------------
                search_prev_item:       ;PREV ITEM
7A05 90 00 B9    mov  dptr,xram_current_item
7A08 E0          movx a,[dptr]
7A09 90 00 7E    mov  dptr,xram_tmp__7Eh
7A0C F0          movx [dptr],a
7A0D A3          inc  dptr ;=xram_tmp__7Fh
7A0E F0          movx [dptr],a
                @@lop:                         ;lop....
7A0F 90 00 B9    mov  dptr,xram_current_item
7A12 E0          movx a,[dptr]
7A13 D3          set  c                 ;\check MIN
7A14 94 00       sbc  a,00h             ;/
7A16 40 05       jc   @@wrap
7A18 E0          movx a,[dptr]
7A19 14          dec  a                 ;-DECREASE
7A1A F0          movx [dptr],a
7A1B 80 27       sjmp @@this
                ;---
                @@wrap:
7A1D 90 00 B8    mov  dptr,xram_current_menu
7A20 E0          movx a,[dptr]
7A21 75 F0 03    mov  b,03h
7A24 A4          mul  a,b
7A25 24 4C       add  a,gui_menu_list and 0ffh
7A27 F5 82       mov  dpl,a
7A29 E4          clr  a
7A2A 34 2C       adc  a,gui_menu_list/100h
7A2C F5 83       mov  dph,a
7A2E E4          clr  a
7A2F 93          movc a,[a+dptr]
7A30 FB          mov  r3,a
7A31 74 01       mov  a,01h
7A33 93          movc a,[a+dptr]
7A34 FA          mov  r2,a
7A35 74 02       mov  a,02h
7A37 93          movc a,[a+dptr]
7A38 F9          mov  r1,a
7A39 90 00 1E    mov  dptr,001Eh ;idxMenuNumItems
7A3C 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
7A3F 14          dec  a
7A40 90 00 B9    mov  dptr,xram_current_item
7A43 F0          movx [dptr],a
                @@this:
7A44 90 00 B8    mov  dptr,xram_current_menu
7A47 E0          movx a,[dptr]
7A48 75 F0 03    mov  b,03h
7A4B A4          mul  a,b
7A4C 24 4C       add  a,gui_menu_list and 0ffh
7A4E F5 82       mov  dpl,a
7A50 E4          clr  a
7A51 34 2C       adc  a,gui_menu_list/100h
7A53 F5 83       mov  dph,a
7A55 E4          clr  a
7A56 93          movc a,[a+dptr]
7A57 FB          mov  r3,a
7A58 74 01       mov  a,01h
7A5A 93          movc a,[a+dptr]
7A5B FA          mov  r2,a
7A5C 74 02       mov  a,02h
7A5E 93          movc a,[a+dptr]
7A5F F9          mov  r1,a
7A60 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
7A63 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7A66 90 00 B9    mov  dptr,xram_current_item
7A69 E0          movx a,[dptr]
7A6A 75 F0 20    mov  b,20h
7A6D A4          mul  a,b
7A6E 29          add  a,r1
7A6F F9          mov  r1,a
7A70 EA          mov  a,r2
7A71 35 F0       adc  a,b
7A73 FA          mov  r2,a
7A74 90 00 1E    mov  dptr,001Eh ;idxItemEndFlags
7A77 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
7A7A 30 E6 5E    jz   a.6,@@_7ADBh
7A7D 90 00 05    mov  dptr,0005h
7A80 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7A83 EA          mov  a,r2
7A84 49          or   a,r1
7A85 4B          or   a,r3
7A86 60 41       jz   a,@@_7AC9h
7A88 90 00 B8    mov  dptr,xram_current_menu                        ;\
7A8B E0          movx a,[dptr]                                      ;
7A8C 75 F0 03    mov  b,03h                                         ;
7A8F A4          mul  a,b                                           ;
7A90 24 4C       add  a,gui_menu_list and 0ffh                      ;
7A92 F5 82       mov  dpl,a                                         ;
7A94 E4          clr  a                                             ;
7A95 34 2C       adc  a,gui_menu_list/100h                          ;
7A97 F5 83       mov  dph,a                                         ;
7A99 E4          clr  a                                             ;
7A9A 93          movc a,[a+dptr]                                    ;
7A9B FB          mov  r3,a                                          ;
7A9C 74 01       mov  a,01h                                         ;
7A9E 93          movc a,[a+dptr]                                    ;
7A9F FA          mov  r2,a                                          ;
7AA0 74 02       mov  a,02h                                         ;
7AA2 93          movc a,[a+dptr]                                    ;
7AA3 F9          mov  r1,a                                          ;
7AA4 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
7AA7 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
7AAA 90 00 B9    mov  dptr,xram_current_item                        ;
7AAD E0          movx a,[dptr]                                      ;
7AAE 75 F0 20    mov  b,20h                                         ;
7AB1 A4          mul  a,b                                           ;
7AB2 29          add  a,r1                                          ;
7AB3 F9          mov  r1,a                                          ;
7AB4 EA          mov  a,r2                                          ;
7AB5 35 F0       adc  a,b                                           ;
7AB7 FA          mov  r2,a                                          ;
7AB8 90 00 05    mov  dptr,0005h ;idxItem_05h                       ;
7ABB 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
7ABE 12 4D B1    call jmp_r2r1  ;----->                             ;/
7AC1 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
7AC4 30 E1 14    jz   a.1,@@_7ADBh
7AC7 80 00       sjmp @@_7AC9h    ;blah
                @@_7AC9h:
7AC9 90 00 B9    mov  dptr,xram_current_item
7ACC E0          movx a,[dptr]
7ACD FF          mov  r7,a
7ACE 90 00 7F    mov  dptr,xram_tmp__7Fh
7AD1 F0          movx [dptr],a
7AD2 90 00 7E    mov  dptr,xram_tmp__7Eh
7AD5 E0          movx a,[dptr]
7AD6 90 00 B9    mov  dptr,xram_current_item
7AD9 F0          movx [dptr],a
7ADA 22          ret
                ;---
                @@_7ADBh:
7ADB 90 00 B9    mov  dptr,xram_current_item
7ADE E0          movx a,[dptr]
7ADF FF          mov  r7,a
7AE0 90 00 7E    mov  dptr,xram_tmp__7Eh
7AE3 E0          movx a,[dptr]
7AE4 6F          xor  a,r7
7AE5 60 03       jz   a,@@_7AEAh
7AE7 02 7A 0F    ljmp @@lop                    ;....lop
                ;---
                @@_7AEAh:
7AEA 90 00 7F    mov  dptr,xram_tmp__7Fh
7AED E0          movx a,[dptr]
7AEE FF          mov  r7,a
7AEF 22          ret
                ;------------------
                search_prev_menu:    ;PREV MENU
7AF0 90 00 B8    mov  dptr,xram_current_menu
7AF3 E0          movx a,[dptr]
7AF4 FF          mov  r7,a
7AF5 75 F0 03    mov  b,03h
7AF8 A4          mul  a,b
7AF9 24 4C       add  a,gui_menu_list and 0ffh
7AFB F5 82       mov  dpl,a
7AFD E4          clr  a
7AFE 34 2C       adc  a,gui_menu_list/100h
7B00 F5 83       mov  dph,a
7B02 E4          clr  a
7B03 93          movc a,[a+dptr]
7B04 FB          mov  r3,a
7B05 74 01       mov  a,01h
7B07 93          movc a,[a+dptr]
7B08 FA          mov  r2,a
7B09 74 02       mov  a,02h
7B0B 93          movc a,[a+dptr]
7B0C F9          mov  r1,a
7B0D 90 00 0C    mov  dptr,000Ch ;idxMenuPrevMenu
7B10 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
7B13 90 00 7E    mov  dptr,xram_tmp__7Eh
7B16 F0          movx [dptr],a
7B17 A3          inc  dptr ;=xram_tmp__7Fh
7B18 EF          mov  a,r7
7B19 F0          movx [dptr],a
                @@lop:
7B1A 90 00 B8    mov  dptr,xram_current_menu
7B1D E0          movx a,[dptr]
7B1E D3          set  c
7B1F 94 00       sbc  a,00h
7B21 40 05       jc   @@wrap
7B23 E0          movx a,[dptr]
7B24 14          dec  a
7B25 F0          movx [dptr],a
7B26 80 06       sjmp @@this
                ;---
                @@wrap:
7B28 90 00 B8    mov  dptr,xram_current_menu            ;\
7B2B 74 15       mov  a,MenuID_15h_QuicklyRotate        ;
7B2D F0          movx [dptr],a                          ;/
                @@this:
7B2E 90 00 B8    mov  dptr,xram_current_menu
7B31 E0          movx a,[dptr]
7B32 75 F0 03    mov  b,03h
7B35 A4          mul  a,b
7B36 24 4C       add  a,gui_menu_list and 0ffh
7B38 F5 82       mov  dpl,a
7B3A E4          clr  a
7B3B 34 2C       adc  a,gui_menu_list/100h
7B3D F5 83       mov  dph,a
7B3F E4          clr  a
7B40 93          movc a,[a+dptr]
7B41 FB          mov  r3,a
7B42 74 01       mov  a,01h
7B44 93          movc a,[a+dptr]
7B45 FA          mov  r2,a
7B46 74 02       mov  a,02h
7B48 93          movc a,[a+dptr]
7B49 F9          mov  r1,a
7B4A 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
7B4D 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
7B50 FF          mov  r7,a
7B51 90 00 7E    mov  dptr,xram_tmp__7Eh
7B54 E0          movx a,[dptr]
7B55 6F          xor  a,r7
7B56 70 6F       jnz  a,@@_7BC7h
7B58 90 00 24    mov  dptr,0024h ;idxMenu___24h
7B5B 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
7B5E 30 E1 66    jz   a.1,@@_7BC7h
7B61 90 00 0F    mov  dptr,000Fh ;idxMenu___0Fh
7B64 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7B67 EA          mov  a,r2
7B68 49          or   a,r1
7B69 4B          or   a,r3
7B6A 60 55       jz   a,@@_7BC1h
7B6C 90 00 B8    mov  dptr,xram_current_menu
7B6F E0          movx a,[dptr]
7B70 75 F0 03    mov  b,03h
7B73 A4          mul  a,b
7B74 24 4C       add  a,gui_menu_list and 0ffh
7B76 F5 82       mov  dpl,a
7B78 E4          clr  a
7B79 34 2C       adc  a,gui_menu_list/100h
7B7B F5 83       mov  dph,a
7B7D E4          clr  a
7B7E 93          movc a,[a+dptr]
7B7F FB          mov  r3,a
7B80 74 01       mov  a,01h
7B82 93          movc a,[a+dptr]
7B83 FA          mov  r2,a
7B84 74 02       mov  a,02h
7B86 93          movc a,[a+dptr]
7B87 F9          mov  r1,a
7B88 90 00 0F    mov  dptr,000Fh ;idxMenu___0Fh
7B8B 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
7B8E 12 4D B1    call jmp_r2r1  ;----->
7B91 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
7B94 30 E1 02    jz   a.1,@@menu_disabled_go_to_prev_prev
7B97 80 28       sjmp @@_7BC1h
                ;---
                @@menu_disabled_go_to_prev_prev:
7B99 90 00 B8    mov  dptr,xram_current_menu
7B9C E0          movx a,[dptr]
7B9D 75 F0 03    mov  b,03h
7BA0 A4          mul  a,b
7BA1 24 4C       add  a,gui_menu_list and 0ffh
7BA3 F5 82       mov  dpl,a
7BA5 E4          clr  a
7BA6 34 2C       adc  a,gui_menu_list/100h
7BA8 F5 83       mov  dph,a
7BAA E4          clr  a
7BAB 93          movc a,[a+dptr]
7BAC FB          mov  r3,a
7BAD 74 01       mov  a,01h
7BAF 93          movc a,[a+dptr]
7BB0 FA          mov  r2,a
7BB1 74 02       mov  a,02h
7BB3 93          movc a,[a+dptr]
7BB4 F9          mov  r1,a
7BB5 90 00 0C    mov  dptr,000Ch ;idxMenuPrevMenu
7BB8 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
7BBB 90 00 7E    mov  dptr,xram_tmp__7Eh
7BBE F0          movx [dptr],a
7BBF 80 06       sjmp @@_7BC7h
                ;---
                @@_7BC1h:
7BC1 90 00 B8    mov  dptr,xram_current_menu
7BC4 E0          movx a,[dptr]
7BC5 FF          mov  r7,a
7BC6 22          ret
                ;---
                @@_7BC7h:
7BC7 90 00 7F    mov  dptr,xram_tmp__7Fh
7BCA E0          movx a,[dptr]
7BCB FE          mov  r6,a
7BCC 90 00 B8    mov  dptr,xram_current_menu
7BCF E0          movx a,[dptr]
7BD0 FF          mov  r7,a
7BD1 6E          xor  a,r6
7BD2 60 03       jz   a,@@_7BD7h
7BD4 02 7B 1A    ljmp @@lop
                ;---
                @@_7BD7h:
7BD7 22          ret
                ;------------------
;:------------- ;:----------------- OSD code (get window addr)
                ;------------------
                get_window_addr:  ;in: [xram_current_window], out: r6r7=addr
7BD8 E4          clr  a
7BD9 90 00 96    mov  dptr,xram_tmp__96h
7BDC F0          movx [dptr],a
7BDD A3          inc  dptr ;=xram_tmp__97h
7BDE F0          movx [dptr],a
7BDF 90 00 98    mov  dptr,xram_current_window
7BE2 E0          movx a,[dptr]
                ;- - - -
                ;window_0 isn't used here
                ;- - - -
7BE3 F9          mov  r1,a                                      ;\
7BE4 64 01       xor  a,01h                                     ;
7BE6 70 2F       jnz  a,@@not_window_1                          ;
7BE8 90 FB 14    mov  dptr,IO_OSD_window_1_xyloc_msb            ;
7BEB E0          movx a,[dptr]    ;addr.msb in bit7             ;
7BEC 54 80       and  a,80h      ;\                             ;
7BEE C4          swap a          ;                              ;
7BEF 13          rcr  a          ; bizarre                      ;
7BF0 13          rcr  a          ; shr a,7                      ;
7BF1 13          rcr  a          ;                              ;
7BF2 54 01       and  a,01h      ;/                             ;
7BF4 FF          mov  r7,a                      ;\              ;
7BF5 90 00 96    mov  dptr,xram_tmp__96h        ;               ;
7BF8 E4          clr  a                         ; bizarre       ;
7BF9 F0          movx [dptr],a                  ; temp=a+0000h  ;
7BFA A3          inc  dptr ;=xram_tmp__97h      ;               ;
7BFB EF          mov  a,r7                      ;               ;
7BFC F0          movx [dptr],a                  ;/              ;
7BFD E0          movx a,[dptr]                  ;\              ;
7BFE 7F 00       mov  r7,00h                    ;               ;
7C00 FE          mov  r6,a                      ; bizarre       ;
7C01 90 00 96    mov  dptr,xram_tmp__96h        ; temp=temp*100h;
7C04 F0          movx [dptr],a                  ;               ;
7C05 A3          inc  dptr ;=xram_tmp__97h      ;               ;
7C06 EF          mov  a,r7                      ;               ;
7C07 F0          movx [dptr],a                  ;/              ;
7C08 90 FB 17    mov  dptr,IO_OSD_window_1_vramaddr_lsb         ;
7C0B E0          movx a,[dptr]    ;addr.lsb in bit0-7           ;
7C0C FD          mov  r5,a                      ;\              ;
7C0D ED          mov  a,r5                      ;               ;
7C0E FF          mov  r7,a                      ; bizarre       ;
7C0F 90 00 96    mov  dptr,xram_tmp__96h        ; temp=temp+1   ;
7C12 EE          mov  a,r6                      ;               ;
7C13 F0          movx [dptr],a                  ;               ;
7C14 A3          inc  dptr ;=xram_tmp__97h      ;               ;
7C15 EF          mov  a,r7                      ;               ;
7C16 F0          movx [dptr],a                  ;/              ;
                @@not_window_1:                                 ;/
                ;- - - -
7C17 E9          mov  a,r1                                      ;\
7C18 64 02       xor  a,02h                                     ;
7C1A 70 2F       jnz  a,@@not_window_2                          ;
7C1C 90 FB 1A    mov  dptr,IO_OSD_window_2_xyloc_msb            ;
7C1F E0          movx a,[dptr]    ;addr.msb in bit7             ;
7C20 54 80       and  a,80h      ;\                             ;
7C22 C4          swap a          ;                              ;
7C23 13          rcr  a          ; bizarre                      ;
7C24 13          rcr  a          ; shr a,7                      ;
7C25 13          rcr  a          ;                              ;
7C26 54 01       and  a,01h      ;/                             ;
7C28 FF          mov  r7,a                      ;\              ;
7C29 90 00 96    mov  dptr,xram_tmp__96h        ;               ;
7C2C E4          clr  a                         ; bizarre       ;
7C2D F0          movx [dptr],a                  ; temp=a+0000h  ;
7C2E A3          inc  dptr ;=xram_tmp__97h      ;               ;
7C2F EF          mov  a,r7                      ;               ;
7C30 F0          movx [dptr],a                  ;/              ;
7C31 E0          movx a,[dptr]                  ;\              ;
7C32 7F 00       mov  r7,00h                    ;               ;
7C34 FE          mov  r6,a                      ; bizarre       ;
7C35 90 00 96    mov  dptr,xram_tmp__96h        ; temp=temp*100h;
7C38 F0          movx [dptr],a                  ;               ;
7C39 A3          inc  dptr ;=xram_tmp__97h      ;               ;
7C3A EF          mov  a,r7                      ;               ;
7C3B F0          movx [dptr],a                  ;/              ;
7C3C 90 FB 1D    mov  dptr,IO_OSD_window_2_vramaddr_lsb         ;
7C3F E0          movx a,[dptr]    ;addr.lsb in bit0-7           ;
7C40 FD          mov  r5,a                      ;\              ;
7C41 ED          mov  a,r5                      ;               ;
7C42 FF          mov  r7,a  ;lsb                ; bizarre       ;
7C43 90 00 96    mov  dptr,xram_tmp__96h        ; temp=temp+1   ;
7C46 EE          mov  a,r6                      ;               ;
7C47 F0          movx [dptr],a                  ;               ;
7C48 A3          inc  dptr ;=xram_tmp__97h      ;               ;
7C49 EF          mov  a,r7  ;msb                ;               ;
7C4A F0          movx [dptr],a                  ;/              ;
                @@not_window_2:                                 ;/
                ;- - - -
7C4B E9          mov  a,r1                                      ;\
7C4C 64 03       xor  a,03h                                     ;
7C4E 70 2F       jnz  a,@@not_window_3                          ;
7C50 90 FB 20    mov  dptr,IO_OSD_window_3_xyloc_msb            ;
7C53 E0          movx a,[dptr]    ;addr.msb in bit7             ;
7C54 54 80       and  a,80h      ;\                             ;
7C56 C4          swap a          ;                              ;
7C57 13          rcr  a          ; bizarre                      ;
7C58 13          rcr  a          ; shr a,7                      ;
7C59 13          rcr  a          ;                              ;
7C5A 54 01       and  a,01h      ;/                             ;
7C5C FF          mov  r7,a                      ;\              ;
7C5D 90 00 96    mov  dptr,xram_tmp__96h        ;               ;
7C60 E4          clr  a                         ; bizarre       ;
7C61 F0          movx [dptr],a                  ; temp=a+0000h  ;
7C62 A3          inc  dptr ;=xram_tmp__97h      ;               ;
7C63 EF          mov  a,r7                      ;               ;
7C64 F0          movx [dptr],a                  ;/              ;
7C65 E0          movx a,[dptr]                  ;\              ;
7C66 7F 00       mov  r7,00h                    ;               ;
7C68 FE          mov  r6,a                      ; bizarre       ;
7C69 90 00 96    mov  dptr,xram_tmp__96h        ; temp=temp*100h;
7C6C F0          movx [dptr],a                  ;               ;
7C6D A3          inc  dptr ;=xram_tmp__97h      ;               ;
7C6E EF          mov  a,r7                      ;               ;
7C6F F0          movx [dptr],a                  ;/              ;
7C70 90 FB 23    mov  dptr,IO_OSD_window_3_vramaddr_lsb         ;
7C73 E0          movx a,[dptr]    ;addr.lsb in bit0-7           ;
7C74 FD          mov  r5,a                      ;\              ;
7C75 ED          mov  a,r5                      ;               ;
7C76 FF          mov  r7,a                      ; bizarre       ;
7C77 90 00 96    mov  dptr,xram_tmp__96h        ; temp=temp+1   ;
7C7A EE          mov  a,r6                      ;               ;
7C7B F0          movx [dptr],a                  ;               ;
7C7C A3          inc  dptr ;=xram_tmp__97h      ;               ;
7C7D EF          mov  a,r7                      ;               ;
7C7E F0          movx [dptr],a                  ;/              ;
                @@not_window_3:                                 ;/
                ;- - - -
7C7F E9          mov  a,r1                                      ;\
7C80 64 04       xor  a,04h                                     ;
7C82 70 2F       jnz  a,@@not_window_4                          ;
7C84 90 FB 26    mov  dptr,IO_OSD_window_4_xyloc_msb            ;
7C87 E0          movx a,[dptr]    ;addr.msb in bit7             ;
7C88 54 80       and  a,80h      ;\                             ;
7C8A C4          swap a          ;                              ;
7C8B 13          rcr  a          ; bizarre                      ;
7C8C 13          rcr  a          ; shr a,7                      ;
7C8D 13          rcr  a          ;                              ;
7C8E 54 01       and  a,01h      ;/                             ;
7C90 FF          mov  r7,a                      ;\              ;
7C91 90 00 96    mov  dptr,xram_tmp__96h        ;               ;
7C94 E4          clr  a                         ; bizarre       ;
7C95 F0          movx [dptr],a                  ; temp=a+0000h  ;
7C96 A3          inc  dptr ;=xram_tmp__97h      ;               ;
7C97 EF          mov  a,r7                      ;               ;
7C98 F0          movx [dptr],a                  ;/              ;
7C99 E0          movx a,[dptr]                  ;\              ;
7C9A 7F 00       mov  r7,00h                    ;               ;
7C9C FE          mov  r6,a                      ; bizarre       ;
7C9D 90 00 96    mov  dptr,xram_tmp__96h        ; temp=temp*100h;
7CA0 F0          movx [dptr],a                  ;               ;
7CA1 A3          inc  dptr ;=xram_tmp__97h      ;               ;
7CA2 EF          mov  a,r7                      ;               ;
7CA3 F0          movx [dptr],a                  ;/              ;
7CA4 90 FB 29    mov  dptr,IO_OSD_window_4_vramaddr_lsb         ;
7CA7 E0          movx a,[dptr]    ;addr.lsb in bit0-7           ;
7CA8 FD          mov  r5,a                      ;\              ;
7CA9 ED          mov  a,r5                      ;               ;
7CAA FF          mov  r7,a                      ; bizarre       ;
7CAB 90 00 96    mov  dptr,xram_tmp__96h        ; temp=temp+1   ;
7CAE EE          mov  a,r6                      ;               ;
7CAF F0          movx [dptr],a                  ;               ;
7CB0 A3          inc  dptr ;=xram_tmp__97h      ;               ;
7CB1 EF          mov  a,r7                      ;               ;
7CB2 F0          movx [dptr],a                  ;/              ;
                @@not_window_4:                                 ;/
                ;- - - -
7CB3 90 00 96    mov  dptr,xram_tmp__96h
7CB6 E0          movx a,[dptr]
7CB7 FE          mov  r6,a
7CB8 A3          inc  dptr ;=xram_tmp__97h
7CB9 E0          movx a,[dptr]
7CBA FF          mov  r7,a
7CBB 22          ret
                ;------------------
;:------------- ;:----------------- code (force valid settings)
                ;------------------
                force_valid_settings:
                 ;settings range checks... (force default if invalid)
                 ;---
7CBC 90 00 0C    mov  dptr,xram_sett_input              ;\
7CBF E0          movx a,[dptr]                          ;
7CC0 C3          clr  c                                 ;
7CC1 94 03       sbc  a,03h                             ;
7CC3 40 02       jc   @@input_okay                      ;
7CC5 E4          clr  a                                 ;
7CC6 F0          movx [dptr],a                          ;
                @@input_okay:                           ;/
7CC7 90 00 2D    mov  dptr,xram_sett___2Dh              ;\
7CCA E0          movx a,[dptr]                          ;
7CCB C3          clr  c                                 ;
7CCC 94 03       sbc  a,03h                             ;
7CCE 40 02       jc   @@sett___2Dh_okay                 ;
7CD0 E4          clr  a                                 ;
7CD1 F0          movx [dptr],a                          ;
                @@sett___2Dh_okay:                      ;/
7CD2 90 00 12    mov  dptr,xram_sett_brightness         ;\
7CD5 E0          movx a,[dptr]                          ;
7CD6 D3          set  c                                 ;
7CD7 94 64       sbc  a,64h  ;100 decimal               ;
7CD9 40 03       jc   @@brightness_okay                 ;
7CDB 74 32       mov  a,32h  ;50 decimal                ;
7CDD F0          movx [dptr],a                          ;
                @@brightness_okay:                      ;/
7CDE 90 00 14    mov  dptr,xram_sett_saturation         ;\
7CE1 E0          movx a,[dptr]                          ;
7CE2 D3          set  c                                 ;
7CE3 94 64       sbc  a,64h  ;100 decimal               ;
7CE5 40 03       jc   @@saturation_okay                 ;
7CE7 74 32       mov  a,32h  ;50 decimal                ;
7CE9 F0          movx [dptr],a                          ;
                @@saturation_okay:                      ;/
7CEA 90 00 13    mov  dptr,xram_sett_contrast           ;\
7CED E0          movx a,[dptr]                          ;
7CEE D3          set  c                                 ;
7CEF 94 64       sbc  a,64h  ;100 decimal               ;
7CF1 40 03       jc   @@contrast_okay                   ;
7CF3 74 32       mov  a,32h  ;50 decimal                ;
7CF5 F0          movx [dptr],a                          ;
                @@contrast_okay:                        ;/
7CF6 90 00 15    mov  dptr,xram_sett_tint               ;\
7CF9 E0          movx a,[dptr]                          ;
7CFA D3          set  c                                 ;
7CFB 94 64       sbc  a,64h  ;100 decimal               ;
7CFD 40 03       jc   @@tint_okay                       ;
7CFF 74 32       mov  a,32h  ;50 decimal                ;
7D01 F0          movx [dptr],a                          ;
                @@tint_okay:                            ;/
7D02 90 00 18    mov  dptr,xram_sett_volume             ;\
7D05 E0          movx a,[dptr]                          ;
7D06 D3          set  c                                 ;
7D07 94 64       sbc  a,64h  ;100 decimal               ;
7D09 40 03       jc   @@volume_okay                     ;
7D0B 74 32       mov  a,32h  ;50 decimal                ;
7D0D F0          movx [dptr],a                          ;
                @@volume_okay:                          ;/
7D0E 90 00 25    mov  dptr,xram_sett_mode               ;\
7D11 E0          movx a,[dptr]                          ;
7D12 D3          set  c                                 ;
7D13 94 01       sbc  a,01h                             ;
7D15 40 02       jc   @@mode_okay                       ;
7D17 E4          clr  a                                 ;
7D18 F0          movx [dptr],a                          ;
                @@mode_okay:                            ;/
7D19 90 00 1A    mov  dptr,xram_sett_language           ;\
7D1C E0          movx a,[dptr]                          ;
7D1D D3          set  c                                 ;
7D1E 94 0E       sbc  a,0Eh                             ;
7D20 40 02       jc   @@language_okay                   ;
7D22 E4          clr  a                                 ;
7D23 F0          movx [dptr],a                          ;
                @@language_okay:                        ;/
7D24 90 00 28    mov  dptr,xram_sett_ir                 ;\
7D27 E0          movx a,[dptr]                          ;
7D28 D3          set  c                                 ;
7D29 94 02       sbc  a,02h                             ;
7D2B 40 02       jc   @@infrared_okay                   ;
7D2D E4          clr  a                                 ;
7D2E F0          movx [dptr],a                          ;
                @@infrared_okay:                        ;/
7D2F 90 00 28    mov  dptr,xram_sett_ir    ;again?      ;\
7D32 E0          movx a,[dptr]                          ;
7D33 D3          set  c                                 ; blah/again
7D34 94 02       sbc  a,02h                             ;
7D36 40 02       jc   @@infrared_okay_dupe              ;
7D38 E4          clr  a                                 ;
7D39 F0          movx [dptr],a                          ;
                @@infrared_okay_dupe:                   ;/
7D3A 90 00 19    mov  dptr,xram_sett_blah1              ;\
7D3D E0          movx a,[dptr]                          ;
7D3E D3          set  c                                 ;
7D3F 94 01       sbc  a,01h                             ;
7D41 40 02       jc   @@blah1_okay                      ;
7D43 E4          clr  a                                 ;
7D44 F0          movx [dptr],a                          ;
                @@blah1_okay:                           ;/
7D45 90 00 29    mov  dptr,xram_sett_quicklysys         ;\
7D48 E0          movx a,[dptr]                          ;
7D49 D3          set  c                                 ;
7D4A 94 01       sbc  a,01h                             ;
7D4C 40 03       jc   @@quicklysys_okay                 ;
7D4E 74 01       mov  a,01h                             ;
7D50 F0          movx [dptr],a                          ;
                @@quicklysys_okay:                      ;/
7D51 90 00 2A    mov  dptr,xram_sett_blah2              ;\
7D54 E0          movx a,[dptr]                          ;
7D55 D3          set  c                                 ;
7D56 94 01       sbc  a,01h                             ;
7D58 40 03       jc   @@blah2_okay                      ;
7D5A 74 01       mov  a,01h                             ;
7D5C F0          movx [dptr],a                          ;
                @@blah2_okay:                           ;/
7D5D 90 00 09    mov  dptr,xram_sett_curr_power         ;\
7D60 E0          movx a,[dptr]                          ;
7D61 D3          set  c                                 ;
7D62 94 01       sbc  a,01h                             ;
7D64 40 03       jc   @@sett___09h_okay                 ;
7D66 74 01       mov  a,01h                             ;
7D68 F0          movx [dptr],a                          ;
                @@sett___09h_okay:                      ;/
7D69 90 00 2B    mov  dptr,xram_sett_power_up           ;\  (OFF,ON,SAVE)
7D6C E0          movx a,[dptr]                          ;
7D6D D3          set  c                                 ;
7D6E 94 02       sbc  a,02h                             ;
7D70 40 03       jc   @@power_okay                      ;
7D72 74 02       mov  a,02h                             ;
7D74 F0          movx [dptr],a                          ;
                @@power_okay:                           ;/
7D75 90 00 2E    mov  dptr,xram_sett_blah3              ;\
7D78 E0          movx a,[dptr]                          ;
7D79 D3          set  c                                 ;
7D7A 94 04       sbc  a,04h                             ;
7D7C 40 03       jc   @@blah3_okay                      ;
7D7E 74 04       mov  a,04h      ;force MAXX ?          ;
7D80 F0          movx [dptr],a                          ;
                @@blah3_okay:                           ;/
7D81 90 00 17    mov  dptr,xram_sett_blankcolor         ;\
7D84 E0          movx a,[dptr]                          ;
7D85 D3          set  c                                 ;
7D86 94 06       sbc  a,06h                             ;
7D88 40 03       jc   @@sett___17h_okay                 ;
7D8A 74 06       mov  a,06h   ;force black here (!)     ;
7D8C F0          movx [dptr],a                          ;
                @@sett___17h_okay:                      ;/
7D8D 90 00 36    mov  dptr,xram_sett_keypadtype         ;\
7D90 E0          movx a,[dptr]                          ;
7D91 C3          clr  c                                 ;
7D92 94 17       sbc  a,typekey_list_num_entries        ;
7D94 40 03       jc   @@keypad_okay                     ;
                .if tech_version<ver11sep2017           ;
7D96 74 16         mov  a,16h      ;U_3KEY              ;
                .else                                   ;
                   clr  a          ;U_3KEY              ;
                .endif                                  ;
7D98 F0          movx [dptr],a                          ;
                @@keypad_okay:                          ;/
7D99 22          ret
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_write_flash
                .endif
                ;------------------
;:------------- ;:----------------- code (init part 4)
                ;------------------
                .macro defcode_init_part_4
                main_init_part_4:    ;init VARIOUS stuff
7E74 12 AA C0    call init_part_4_subfunc       ;...init I/O
7E77 12 BF C6    call to_init_OSD_window_vram_allocation
7E7A 12 A3 6C    call init_OSD_hardware
                .if infrared_version>=ver11sep2017
                   call init_IR_hardware
                .endif
7E7D 12 AB 58    call init_ADC_analog_hardware
7E80 12 B2 12    call xxx_B212h      ;...init/copy some XRAM stuff
7E83 12 B0 6A    call init_AV_stuff       ;...init I/O   ;AV
                ;- - - - - - - -
                .if tech_version<ver11sep2017
7E86 90 FF D8      mov  dptr,IO_LCD_whatever_FFD8h      ;\
7E89 E0            movx a,[dptr]                        ;
7E8A 54 7F         and  a,7Fh           ;bit7=0         ;
7E8C F0            movx [dptr],a                        ;/
                .endif
7E8D 90 00 2C    mov  dptr,xram_sett_no_signal
7E90 E0          movx a,[dptr]
7E91 FF          mov  r7,a
7E92 64 02       xor  a,02h
7E94 70 18       jnz  a,@@not_2_black
                ;- - -
                .if tech_version<ver11sep2017
7E96 90 FF B0      mov  dptr,IO_LCD_snow_enable_and_misc;\              ;\
7E99 E0            movx a,[dptr]                        ;               ;
7E9A 54 7F         and  a,7Fh      ;bit7=0 (snow off)   ;               ;
7E9C F0            movx [dptr],a                        ;               ; BLACK
7E9D E0            movx a,[dptr]   ;re-read?            ;               ;
7E9E 44 20         or   a,20h      ;bit5=1              ;               ;
7EA0 F0            movx [dptr],a                        ;/              ;
7EA1 90 FF CE      mov  dptr,IO_LCD_backdrop_color_Y    ;\              ;
7EA4 E4            clr  a                               ;               ;
7EA5 F0            movx [dptr],a                        ;               ;
7EA6 A3            inc  dptr ;=IO_LCD_backdrop_color_Cb ;               ;
7EA7 74 80         mov  a,80h                           ;               ;
7EA9 F0            movx [dptr],a                        ;               ;
7EAA A3            inc  dptr ;=IO_LCD_backdrop_color_Cr ;               ;
7EAB F0            movx [dptr],a                        ;/              ;/
7EAC 80 22         sjmp @@BLUE_SNOW_BLACK_done
                .else
                   sjmp @@not_1_snow                                    ;-BLACK
                .endif
                ;---
                @@not_2_black:
7EAE EF          mov  a,r7
7EAF B4 01 05    jne  a,01h,@@not_1_snow
7EB2 12 B4 6F    call lcd_display_snow                                  ;\SNOW
7EB5 80 19       sjmp @@BLUE_SNOW_BLACK_done                            ;/
                ;---
                @@not_1_snow:
7EB7 90 FF B0    mov  dptr,IO_LCD_snow_enable_and_misc  ;\              ;\
7EBA E0          movx a,[dptr]                          ;               ;
7EBB 54 7F       and  a,7Fh      ;bit7=0 (snow off)     ;               ;
7EBD F0          movx [dptr],a                          ;               ; BLUE
7EBE E0          movx a,[dptr]   ;re-read?              ;               ;
7EBF 44 20       or   a,20h      ;bit5=1                ;               ;
7EC1 F0          movx [dptr],a                          ;/              ;
                .if tech_version<ver11sep2017                           ;
7EC2 90 FF CE      mov  dptr,IO_LCD_backdrop_color_Y    ;\              ;
7EC5 74 13         mov  a,13h                           ;               ;
7EC7 F0            movx [dptr],a                        ;               ;
7EC8 A3            inc  dptr ;=IO_LCD_backdrop_color_Cb ; BLUE          ;
7EC9 74 DD         mov  a,0DDh                          ;               ;
7ECB F0            movx [dptr],a                        ;               ;
7ECC A3            inc  dptr ;=IO_LCD_backdrop_color_Cr ;               ;
7ECD 74 72         mov  a,72h                           ;               ;
7ECF F0            movx [dptr],a                        ;/              ;
                .else                                                   ;
                   mov  dptr,IO_LCD_backdrop_color_Y    ;\              ;
                   clr  a                               ;               ;
                   movx [dptr],a                        ;               ;
                   inc  dptr ;=IO_LCD_backdrop_color_Cb ; BLACK         ;
                   mov  a,80h                           ;               ;
                   movx [dptr],a                        ;               ;
                   inc  dptr ;=IO_LCD_backdrop_color_Cr ;               ;
                   movx [dptr],a                        ;/              ;
                .endif                                                  ;/
                @@BLUE_SNOW_BLACK_done:
                ;- - - - - - - -
7ED0 7F 04       mov  r7,04h       ;FIXED but, below implements only 0..3 ?
7ED2 E4          clr  a            ;FIXED
7ED3 70 75       jnz  a,@@vcom_dc_done
7ED5 EF          mov  a,r7
7ED6 14          dec  a
7ED7 60 24       jz   a,@@vcom_dc_pwm_1
7ED9 14          dec  a
7EDA 60 3B       jz   a,@@vcom_dc_pwm_2
7EDC 14          dec  a
7EDD 60 52       jz   a,@@vcom_dc_pwm_3
7EDF 24 03       add  a,03h
7EE1 70 67       jnz  a,@@vcom_dc_pwm_not_0   ;FIXED, always jumps here
                ;- - - ;@@vcom_dc_pwm_0
                @@vcom_dc_pwm_0:
7EE3 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
7EE6 A3          inc  dptr ;=xram_sett_vcom_dc_lo
7EE7 E0          movx a,[dptr]
7EE8 F5 3D       mov  [iram_tmp__3Dh],a
7EEA 7F 28       mov  r7,28h
7EEC 7E 0A       mov  r6,0Ah
7EEE 7D 00       mov  r5,00h
7EF0 7C 00       mov  r4,00h
7EF2 12 84 FE    call pwm_set_duty_pwm0
7EF5 90 FD 1F    mov  dptr,IO_PWM_enable_flags
7EF8 E0          movx a,[dptr]
7EF9 44 01       or   a,01h
7EFB F0          movx [dptr],a
7EFC 22          ret
                ;---
                @@vcom_dc_pwm_1:
7EFD 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
7F00 A3          inc  dptr ;=xram_sett_vcom_dc_lo
7F01 E0          movx a,[dptr]
7F02 F5 3D       mov  [iram_tmp__3Dh],a
7F04 7F 28       mov  r7,28h
7F06 7E 0A       mov  r6,0Ah
7F08 7D 00       mov  r5,00h
7F0A 7C 00       mov  r4,00h
7F0C 12 85 C5    call pwm_set_duty_pwm1
7F0F 90 FD 1F    mov  dptr,IO_PWM_enable_flags
7F12 E0          movx a,[dptr]
7F13 44 02       or   a,02h
7F15 F0          movx [dptr],a
7F16 22          ret
                ;---
                @@vcom_dc_pwm_2:
7F17 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
7F1A A3          inc  dptr ;=xram_sett_vcom_dc_lo
7F1B E0          movx a,[dptr]
7F1C F5 3D       mov  [iram_tmp__3Dh],a
7F1E 7F 28       mov  r7,28h
7F20 7E 0A       mov  r6,0Ah
7F22 7D 00       mov  r5,00h
7F24 7C 00       mov  r4,00h
7F26 12 86 8C    call pwm_set_duty_pwm2
7F29 90 FD 1F    mov  dptr,IO_PWM_enable_flags
7F2C E0          movx a,[dptr]
7F2D 44 04       or   a,04h
7F2F F0          movx [dptr],a
7F30 22          ret
                ;---
                @@vcom_dc_pwm_3:
7F31 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
7F34 A3          inc  dptr ;=xram_sett_vcom_dc_lo
7F35 E0          movx a,[dptr]
7F36 F5 3D       mov  [iram_tmp__3Dh],a
7F38 7F 28       mov  r7,28h
7F3A 7E 0A       mov  r6,0Ah
7F3C 7D 00       mov  r5,00h
7F3E 7C 00       mov  r4,00h
7F40 12 87 53    call pwm_set_duty_pwm3
7F43 90 FD 1F    mov  dptr,IO_PWM_enable_flags
7F46 E0          movx a,[dptr]
7F47 44 08       or   a,08h
7F49 F0          movx [dptr],a
                @@vcom_dc_pwm_not_0:
                @@vcom_dc_done:
7F4A 22          ret
                .endm ;defcode_init_part_4
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_init_part_4
                .endif
                ;------------------
;:------------- ;:----------------- OSD code (set window xyloc)
                ;------------------
                set_window_position_x_y:
                 ;in: r6r7  = xloc (11bit)
                 ;in: r4r5  = yloc (11bit)
                 ;in: [xram_current_window]
                 ;- - -
7F4B 8E 2A       mov  [iram_tmp__2Ah],r6  ;xloc.msb
7F4D 8F 2B       mov  [iram_tmp__2Bh],r7  ;xloc.lsb
                ;- - - -
7F4F 90 00 98    mov  dptr,xram_current_window
7F52 E0          movx a,[dptr]
7F53 70 21       jnz  a,@@not_window_0
7F55 90 FB 0A    mov  dptr,IO_OSD_window_0_xloc_lsb             ;\
7F58 EF          mov  a,r7                                      ;
7F59 F0          movx [dptr],a                                  ;/
7F5A A3          inc  dptr ;=IO_OSD_window_0_yloc_lsb           ;\
7F5B ED          mov  a,r5                                      ;
7F5C F0          movx [dptr],a                                  ;/
7F5D 90 FB 09    mov  dptr,IO_OSD_window_0_xyloc_msb    ;\
7F60 E0          movx a,[dptr]                          ;
7F61 54 88       and  a,88h             ;  ;<-- old extra bits (unrelated to new 2x3bit)
7F63 F0          movx [dptr],a  ;glitch?;  <-- temporarily crash value? or wanted "strobe"???
7F64 E0          movx a,[dptr]  ;blah?  ;
7F65 FB          mov  r3,a              ;
7F66 EC          mov  a,r4  ;yloc.msb   ;
7F67 54 07       and  a,07h             ;  ;\
7F69 C4          swap a                 ;  ; MSBs of 1st value (yloc.msb)
7F6A 54 F0       and  a,0F0h            ;  ;/
7F6C FA          mov  r2,a              ;
7F6D E5 2A       mov  a,[iram_tmp__2Ah] ;  ;\
7F6F 54 07       and  a,07h             ;  ; MSBs of 2nd value (xloc.msb)
7F71 4A          or   a,r2              ;  ;/
7F72 FF          mov  r7,a              ;
7F73 EB          mov  a,r3              ;
7F74 4F          or   a,r7                              ;
7F75 F0          movx [dptr],a                          ;/
                @@not_window_0:
                ;- - - -
7F76 90 00 98    mov  dptr,xram_current_window
7F79 E0          movx a,[dptr]
7F7A 64 01       xor  a,01h
7F7C 70 22       jnz  a,@@not_window_1
7F7E 90 FB 15    mov  dptr,IO_OSD_window_1_xloc_lsb
7F81 E5 2B       mov  a,[iram_tmp__2Bh]
7F83 F0          movx [dptr],a
7F84 A3          inc  dptr ;=IO_OSD_window_1_yloc_lsb
7F85 ED          mov  a,r5
7F86 F0          movx [dptr],a
7F87 90 FB 14    mov  dptr,IO_OSD_window_1_xyloc_msb
7F8A E0          movx a,[dptr]
7F8B 54 88       and  a,88h
7F8D F0          movx [dptr],a
7F8E E0          movx a,[dptr]
7F8F FB          mov  r3,a
7F90 EC          mov  a,r4
7F91 54 07       and  a,07h
7F93 C4          swap a
7F94 54 F0       and  a,0F0h
7F96 FA          mov  r2,a
7F97 E5 2A       mov  a,[iram_tmp__2Ah]
7F99 54 07       and  a,07h
7F9B 4A          or   a,r2
7F9C FF          mov  r7,a
7F9D EB          mov  a,r3
7F9E 4F          or   a,r7
7F9F F0          movx [dptr],a
                @@not_window_1:
                ;- - - -
7FA0 90 00 98    mov  dptr,xram_current_window
7FA3 E0          movx a,[dptr]
7FA4 64 02       xor  a,02h
7FA6 70 22       jnz  a,@@not_window_2
7FA8 90 FB 1B    mov  dptr,IO_OSD_window_2_xloc_lsb
7FAB E5 2B       mov  a,[iram_tmp__2Bh]
7FAD F0          movx [dptr],a
7FAE A3          inc  dptr ;=IO_OSD_window_2_yloc_lsb
7FAF ED          mov  a,r5
7FB0 F0          movx [dptr],a
7FB1 90 FB 1A    mov  dptr,IO_OSD_window_2_xyloc_msb
7FB4 E0          movx a,[dptr]
7FB5 54 88       and  a,88h
7FB7 F0          movx [dptr],a
7FB8 E0          movx a,[dptr]
7FB9 FB          mov  r3,a
7FBA EC          mov  a,r4
7FBB 54 07       and  a,07h
7FBD C4          swap a
7FBE 54 F0       and  a,0F0h
7FC0 FA          mov  r2,a
7FC1 E5 2A       mov  a,[iram_tmp__2Ah]
7FC3 54 07       and  a,07h
7FC5 4A          or   a,r2
7FC6 FF          mov  r7,a
7FC7 EB          mov  a,r3
7FC8 4F          or   a,r7
7FC9 F0          movx [dptr],a
                @@not_window_2:
                ;- - - -
7FCA 90 00 98    mov  dptr,xram_current_window
7FCD E0          movx a,[dptr]
7FCE 64 03       xor  a,03h
7FD0 70 22       jnz  a,@@not_window_3
7FD2 90 FB 21    mov  dptr,IO_OSD_window_3_xloc_lsb
7FD5 E5 2B       mov  a,[iram_tmp__2Bh]
7FD7 F0          movx [dptr],a
7FD8 A3          inc  dptr ;=IO_OSD_window_3_yloc_lsb
7FD9 ED          mov  a,r5
7FDA F0          movx [dptr],a
7FDB 90 FB 20    mov  dptr,IO_OSD_window_3_xyloc_msb
7FDE E0          movx a,[dptr]
7FDF 54 88       and  a,88h
7FE1 F0          movx [dptr],a
7FE2 E0          movx a,[dptr]
7FE3 FB          mov  r3,a
7FE4 EC          mov  a,r4
7FE5 54 07       and  a,07h
7FE7 C4          swap a
7FE8 54 F0       and  a,0F0h
7FEA FA          mov  r2,a
7FEB E5 2A       mov  a,[iram_tmp__2Ah]
7FED 54 07       and  a,07h
7FEF 4A          or   a,r2
7FF0 FF          mov  r7,a
7FF1 EB          mov  a,r3
7FF2 4F          or   a,r7
7FF3 F0          movx [dptr],a
                @@not_window_3:
                ;- - - -
7FF4 90 00 98    mov  dptr,xram_current_window
7FF7 E0          movx a,[dptr]
7FF8 64 04       xor  a,04h
7FFA 70 22       jnz  a,@@not_window_4
7FFC 90 FB 27    mov  dptr,IO_OSD_window_4_xloc_lsb
7FFF E5 2B       mov  a,[iram_tmp__2Bh]
8001 F0          movx [dptr],a
8002 A3          inc  dptr ;=IO_OSD_window_4_yloc_lsb
8003 ED          mov  a,r5
8004 F0          movx [dptr],a
8005 90 FB 26    mov  dptr,IO_OSD_window_4_xyloc_msb
8008 E0          movx a,[dptr]
8009 54 88       and  a,88h
800B F0          movx [dptr],a
800C E0          movx a,[dptr]
800D FB          mov  r3,a
800E EC          mov  a,r4
800F 54 07       and  a,07h
8011 C4          swap a
8012 54 F0       and  a,0F0h
8014 FD          mov  r5,a
8015 E5 2A       mov  a,[iram_tmp__2Ah]
8017 54 07       and  a,07h
8019 4D          or   a,r5
801A FF          mov  r7,a
801B EB          mov  a,r3
801C 4F          or   a,r7
801D F0          movx [dptr],a
                @@not_window_4:
801E 22          ret
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_xxx_801Fh
                  defcode_handle_event____misc
                .endif
                ;------------------
;:------------- ;:----------------- GUI misc (code/data)
                ;------------------
81C5 42 52 49.. txt_brightness_english   db 'BRIGHTNESS',00h
81D0 23 28 20.. txt_brightness_slang_01h db '#( #!',00h
81D6 4C 55 4D.. txt_brightness_french    db 'LUMINOSIT',0A2h,00h
81E1 4C 55 4D.. txt_brightness_italian   db 'LUMINOSIT',9Ah,00h
81EC 42 52 49.. txt_brightness_spanish   db 'BRILHO',00h               ;<-- also portugese
81F3 48 45 4C.. txt_brightness_german    db 'HELLIGKEIT',00h
81FE 48 45 4C.. txt_brightness_dutch     db 'HELDER',00h
8205 1F 25 10.. txt_brightness_slang_08h db 1Fh,'%',10h,'$&'')',00h
820D 23 3E 20.. txt_brightness_slang_09h db '#> #',82h,00h   ;<-- also slang_0Bh
8213 23 56 20.. txt_brightness_slang_0Ah db '#V #',0BFh,' #',0C0h,00h
821C 1F 25 10.. txt_brightness_slang_0Ch db 1Fh,'%',10h,'$&''',00h
8223 4A 41 53.. txt_brightness_polish    db 'JASNO',01h,02h,00h
822B 50 41 52.. txt_brightness_turkish   db 'PARlAKlIK',00h
                ;------------------
                localized_txtlist_brightness:
8235 FF 81 C5    db   0FFh // dw txt_brightness_english      ;00h ;English
8238 FF 81 D0    db   0FFh // dw txt_brightness_slang_01h    ;01h ;?
823B FF 81 D6    db   0FFh // dw txt_brightness_french       ;02h ;French
823E FF 81 E1    db   0FFh // dw txt_brightness_italian      ;03h ;Italian
8241 FF 81 EC    db   0FFh // dw txt_brightness_spanish      ;04h ;Spanish
8244 FF 81 F3    db   0FFh // dw txt_brightness_german       ;05h ;German
8247 FF 81 EC    db   0FFh // dw txt_brightness_spanish   ;* ;06h ;Portugese
824A FF 81 FE    db   0FFh // dw txt_brightness_dutch        ;07h ;Dutch
824D FF 82 05    db   0FFh // dw txt_brightness_slang_08h    ;08h ;?
8250 FF 82 0D    db   0FFh // dw txt_brightness_slang_09h    ;09h ;?
8253 FF 82 13    db   0FFh // dw txt_brightness_slang_0Ah    ;0Ah ;?
8256 FF 82 0D    db   0FFh // dw txt_brightness_slang_09h ;* ;0Bh ;?
8259 FF 82 1C    db   0FFh // dw txt_brightness_slang_0Ch    ;0Ch ;?
825C FF 82 23    db   0FFh // dw txt_brightness_polish       ;0Dh ;Polish
825F FF 82 2B    db   0FFh // dw txt_brightness_turkish      ;0Eh ;Turkish
                ;------------------
                gui_null_Brightness:
8262 00          nop
8263 00          nop
8264 00          nop
8265 00          nop
8266 00          nop
                ;---
                gui_data_Brightness_show_decimal:
8267 00          nop
8268 0D          db   0Dh
8269 01          db   01h
826A 00          nop
826B 01          db   01h
826C 00          nop
826D FF BE DE    db   0FFh // dw get_settings_brightness
8270 00 18       dw   0018h   ;<--!
                ;---
                gui_data_Brightness_show_bar:
8272 01          db   01h
8273 00          nop
8274 05          db   05h
8275 00          nop
8276 05          db   05h
8277 00          nop
8278 64          db   64h
8279 FF BE DE    db   0FFh // dw get_settings_brightness
827C 00 08       dw   0008h
                ;---
                gui_data_Brightness_show:
827E FF 82 67    db   0FFh // dw gui_data_Brightness_show_decimal ;00h ;idxShowValue
8281 FF 82 72    db   0FFh // dw gui_data_Brightness_show_bar     ;03h ;idxShowBar
8284 00 00 00    db   000h // dw 0000h ;(show_txt)                ;06h ;idxShowText
8287 00 08       dw   0008h                                       ;09h ;idxShowEndFlags
                ;---
                gui_data_Brightness_name:
8289 00          nop
828A 00          nop
828B 01          db   01h
828C 00          nop
828D 01          db   01h
828E 00          nop
828F 01          db   01h
8290 FF B9 73    db   0FFh // dw get_localized_txt_brightness
8293 00 08       dw   0008h
                ;------------------
                xxx_8295h:
8295 90 00 B8    mov  dptr,xram_current_menu
8298 E0          movx a,[dptr]
8299 75 F0 03    mov  b,03h
829C A4          mul  a,b
829D 24 4C       add  a,gui_menu_list and 0ffh
829F F5 82       mov  dpl,a
82A1 E4          clr  a
82A2 34 2C       adc  a,gui_menu_list/100h
82A4 F5 83       mov  dph,a
82A6 E4          clr  a
82A7 93          movc a,[a+dptr]
82A8 FB          mov  r3,a
82A9 74 01       mov  a,01h
82AB 93          movc a,[a+dptr]
82AC FA          mov  r2,a
82AD 74 02       mov  a,02h
82AF 93          movc a,[a+dptr]
82B0 F9          mov  r1,a
82B1 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
82B4 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
82B7 90 00 B9    mov  dptr,xram_current_item
82BA E0          movx a,[dptr]
82BB 75 F0 20    mov  b,20h
82BE A4          mul  a,b
82BF 29          add  a,r1
82C0 F9          mov  r1,a
82C1 EA          mov  a,r2
82C2 35 F0       adc  a,b
82C4 FA          mov  r2,a
82C5 90 00 11    mov  dptr,0011h ;idxItemDataShow
82C8 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
82CB 7D 40       mov  r5,40h
82CD 7C 00       mov  r4,00h
                ;- - - - - --------
                xxx_82CFh:
                                        ;<--------- injump
82CF 8B 2A       mov  [iram_tmp__2Ah],r3  ;\
82D1 8A 2B       mov  [iram_tmp__2Bh],r2  ; gui_data_Xxx_show
82D3 89 2C       mov  [iram_tmp__2Ch],r1  ;/
82D5 8C 2D       mov  [iram_tmp__2Dh],r4
82D7 8D 2E       mov  [iram_tmp__2Eh],r5
82D9 E9          mov  a,r1
82DA 4A          or   a,r2
82DB 4B          or   a,r3
82DC 70 03       jnz  a,@@cont
82DE 02 83 64    jmp  @@exit
                ;---
                @@cont:
                @@lop:                                         ;lop...
82E1 AB 2A       mov  r3,[iram_tmp__2Ah]  ;\                            ;\
82E3 AA 2B       mov  r2,[iram_tmp__2Bh]  ; gui_data_Xxx_show           ;
82E5 A9 2C       mov  r1,[iram_tmp__2Ch]  ;/                            ;
                ;with index=0  ;idxShowValue                            ;
82E7 12 4C EC    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1          ;
82EA EA          mov  a,r2                                              ;
82EB 49          or   a,r1                                              ; Value
82EC 4B          or   a,r3                                              ;
82ED 60 10       jz   a,@@skip_value                                    ;
82EF AB 2A       mov  r3,[iram_tmp__2Ah]  ;\                            ;
82F1 AA 2B       mov  r2,[iram_tmp__2Bh]  ; gui_data_Xxx_show           ;
82F3 A9 2C       mov  r1,[iram_tmp__2Ch]  ;/                            ;
                ;with index=0  ;idxShowValue                            ;
82F5 12 4C EC    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1          ;
82F8 AD 2E       mov  r5,[iram_tmp__2Eh]                                ;
82FA AC 2D       mov  r4,[iram_tmp__2Dh]                                ;
82FC 12 8A 61    call osd_write_hex_or_decimal                          ;
                @@skip_value:                                           ;/
                ;- - -
82FF AB 2A       mov  r3,[iram_tmp__2Ah]  ;\                            ;\
8301 AA 2B       mov  r2,[iram_tmp__2Bh]  ; gui_data_Xxx_show           ;
8303 A9 2C       mov  r1,[iram_tmp__2Ch]  ;/                            ;
8305 90 00 03    mov  dptr,0003h ;idxShowBar                            ;
8308 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr      ;
830B EA          mov  a,r2                                              ;
830C 49          or   a,r1                                              ; Bar
830D 4B          or   a,r3                                              ;
830E 60 13       jz   a,@@skip_bar                                      ;
8310 AB 2A       mov  r3,[iram_tmp__2Ah]  ;\                            ;
8312 AA 2B       mov  r2,[iram_tmp__2Bh]  ; gui_data_Xxx_show           ;
8314 A9 2C       mov  r1,[iram_tmp__2Ch]  ;/                            ;
8316 90 00 03    mov  dptr,0003h ;idxShowBar                            ;
8319 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr      ;
831C AD 2E       mov  r5,[iram_tmp__2Eh]                                ;
831E AC 2D       mov  r4,[iram_tmp__2Dh]                                ;
8320 12 97 1D    call show_bar                                          ;
                @@skip_bar:                                             ;/
                ;- - -
8323 AB 2A       mov  r3,[iram_tmp__2Ah]  ;\                            ;\
8325 AA 2B       mov  r2,[iram_tmp__2Bh]  ; gui_data_Xxx_show           ;
8327 A9 2C       mov  r1,[iram_tmp__2Ch]  ;/                            ;
8329 90 00 06    mov  dptr,0006h ;idxShowText                           ;
832C 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr      ;
832F EA          mov  a,r2                                              ;
8330 49          or   a,r1                                              ; Text
8331 4B          or   a,r3                                              ;
8332 60 13       jz   a,@@skip_text                                     ;
8334 AB 2A       mov  r3,[iram_tmp__2Ah]  ;\                            ;
8336 AA 2B       mov  r2,[iram_tmp__2Bh]  ; gui_data_Xxx_show           ;
8338 A9 2C       mov  r1,[iram_tmp__2Ch]  ;/                            ;
833A 90 00 06    mov  dptr,0006h ;idxShowText                           ;
833D 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr      ;
8340 AD 2E       mov  r5,[iram_tmp__2Eh]                                ;
8342 AC 2D       mov  r4,[iram_tmp__2Dh]                                ;
8344 12 98 3D    call osd_write_string_type_B                           ;
                @@skip_text:                                            ;/
                ;- - -
8347 AB 2A       mov  r3,[iram_tmp__2Ah]  ;\
8349 AA 2B       mov  r2,[iram_tmp__2Bh]  ; gui_data_Xxx_show
834B A9 2C       mov  r1,[iram_tmp__2Ch]  ;/
834D 90 00 09    mov  dptr,0009h ;idxShowEndFlags
8350 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
8353 20 E3 0E    jnz  a.3,@@exit
                ;- - -
8356 74 0B       mov  a,0Bh    ;lsb             ;\
8358 25 2C       add  a,[iram_tmp__2Ch]         ;
835A F5 2C       mov  [iram_tmp__2Ch],a         ; raise +002Bh
835C E4          clr  a        ;msb             ;
835D 35 2B       adc  a,[iram_tmp__2Bh]         ;
835F F5 2B       mov  [iram_tmp__2Bh],a         ;/
8361 02 82 E1    ljmp @@lop                                    ;...lop
                ;---
                @@exit:
8364 22          ret
                ;------------------
                search_next_item:    ;NEXT ITEM
8365 90 00 B9    mov  dptr,xram_current_item
8368 E0          movx a,[dptr]
8369 90 00 7E    mov  dptr,xram_tmp__7Eh
836C F0          movx [dptr],a
836D A3          inc  dptr ;=xram_tmp__7Fh
836E F0          movx [dptr],a
                @@lop:
836F 90 00 B8    mov  dptr,xram_current_menu
8372 E0          movx a,[dptr]
8373 75 F0 03    mov  b,03h
8376 A4          mul  a,b
8377 24 4C       add  a,gui_menu_list and 0ffh
8379 F5 82       mov  dpl,a
837B E4          clr  a
837C 34 2C       adc  a,gui_menu_list/100h
837E F5 83       mov  dph,a
8380 E4          clr  a
8381 93          movc a,[a+dptr]
8382 FB          mov  r3,a
8383 74 01       mov  a,01h
8385 93          movc a,[a+dptr]
8386 FA          mov  r2,a
8387 74 02       mov  a,02h
8389 93          movc a,[a+dptr]
838A F9          mov  r1,a
838B 90 00 1E    mov  dptr,001Eh ;idxMenuNumItems
838E 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
8391 14          dec  a
8392 FF          mov  r7,a              ;MAX
8393 90 00 B9    mov  dptr,xram_current_item            ;\
8396 E0          movx a,[dptr]                          ;
8397 C3          clr  c                                 ;
8398 9F          sbc  a,r7              ;check MAX      ;
8399 50 05       jnc  @@wrap                            ; increase/next item
839B E0          movx a,[dptr]                          ;
839C 04          inc  a                 ;INCREASE       ;
839D F0          movx [dptr],a                          ;
839E 80 05       sjmp @@this                            ;
                ;---                                    ;
                @@wrap:                                 ;
83A0 E4          clr  a                                 ;
83A1 90 00 B9    mov  dptr,xram_current_item            ;
83A4 F0          movx [dptr],a                          ;
                @@this:                                 ;/
83A5 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
83A8 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
83AB 90 00 B9    mov  dptr,xram_current_item
83AE E0          movx a,[dptr]
83AF 75 F0 20    mov  b,20h
83B2 A4          mul  a,b
83B3 29          add  a,r1
83B4 F9          mov  r1,a
83B5 EA          mov  a,r2
83B6 35 F0       adc  a,b
83B8 FA          mov  r2,a
83B9 90 00 1E    mov  dptr,001Eh ;idxItemEndFlags
83BC 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
83BF 30 E6 5E    jz   a.6,@@lop_next
83C2 90 00 05    mov  dptr,0005h
83C5 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
83C8 EA          mov  a,r2
83C9 49          or   a,r1
83CA 4B          or   a,r3
83CB 60 41       jz   a,@@_840Eh
83CD 90 00 B8    mov  dptr,xram_current_menu                        ;\
83D0 E0          movx a,[dptr]                                      ;
83D1 75 F0 03    mov  b,03h                                         ;
83D4 A4          mul  a,b                                           ;
83D5 24 4C       add  a,gui_menu_list and 0ffh                      ;
83D7 F5 82       mov  dpl,a                                         ;
83D9 E4          clr  a                                             ;
83DA 34 2C       adc  a,gui_menu_list/100h                          ;
83DC F5 83       mov  dph,a                                         ;
83DE E4          clr  a                                             ;
83DF 93          movc a,[a+dptr]                                    ;
83E0 FB          mov  r3,a                                          ;
83E1 74 01       mov  a,01h                                         ;
83E3 93          movc a,[a+dptr]                                    ;
83E4 FA          mov  r2,a                                          ;
83E5 74 02       mov  a,02h                                         ;
83E7 93          movc a,[a+dptr]                                    ;
83E8 F9          mov  r1,a                                          ;
83E9 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem                    ;
83EC 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
83EF 90 00 B9    mov  dptr,xram_current_item                        ;
83F2 E0          movx a,[dptr]                                      ;
83F3 75 F0 20    mov  b,20h                                         ;
83F6 A4          mul  a,b                                           ;
83F7 29          add  a,r1                                          ;
83F8 F9          mov  r1,a                                          ;
83F9 EA          mov  a,r2                                          ;
83FA 35 F0       adc  a,b                                           ;
83FC FA          mov  r2,a                                          ;
83FD 90 00 05    mov  dptr,0005h ;idxItem_05h                       ;
8400 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr  ;
8403 12 4D B1    call jmp_r2r1  ;----->                             ;/
8406 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
8409 30 E1 14    jz   a.1,@@lop_next
840C 80 00       sjmp @@_840Eh    ;blah
                ;- - - -
                @@_840Eh:
840E 90 00 B9    mov  dptr,xram_current_item
8411 E0          movx a,[dptr]
8412 FF          mov  r7,a
8413 90 00 7F    mov  dptr,xram_tmp__7Fh
8416 F0          movx [dptr],a
8417 90 00 7E    mov  dptr,xram_tmp__7Eh
841A E0          movx a,[dptr]
841B 90 00 B9    mov  dptr,xram_current_item
841E F0          movx [dptr],a
841F 22          ret                    ;--->
                ;---
                @@lop_next:
8420 90 00 B9    mov  dptr,xram_current_item
8423 E0          movx a,[dptr]
8424 FF          mov  r7,a
8425 90 00 7E    mov  dptr,xram_tmp__7Eh
8428 E0          movx a,[dptr]  ;<--
8429 6F          xor  a,r7      ;<--
842A 60 03       jz   a,@@_842Fh
842C 02 83 6F    ljmp @@lop
                ;---
                @@_842Fh:
842F 90 00 7F    mov  dptr,xram_tmp__7Fh
8432 E0          movx a,[dptr]
8433 FF          mov  r7,a
8434 22          ret                    ;--->
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_handle_event____misc
                .endif
                ;------------------
8435 53 41 54.. txt_saturation_english    db   'SATURATION',00h     ;used 3x (also french/turkish)
8440 23 29 20.. txt_saturation_slang_01h  db   '#) #!',00h
8446 53 41 54.. txt_saturation_italian    db   'SATURAZIONE',00h
8452 53 41 54.. txt_saturation_spanish    db   'SATURACI',0B3h,'N',00h
845D 53 9E 54.. txt_saturation_german     db   'S',9Eh,'TTIGUNG',00h
8467 53 41 54.. txt_saturation_portugese  db   'SATURA',0C4h,9Dh,'O',00h
8471 4B 4C 45.. txt_saturation_dutch      db   'KLEUR',00h
                .if slang_version<ver11sep2017
8477 13 07 xx..   txt_saturation_slang_08h  db   13h,07h,'&',1Ch,1Ah,0Ch,13h,13h,'$&'')#= #',82h,00h
                .else
7CCB 13 07 xx..   txt_saturation_slang_08h  db   13h,07h,'&)',14h,17h,0Ch,13h,13h,'$&'')',00h
7CD9 23 3D 20..   txt_saturation_slang_09h  db   '#= #',82h,00h   ;<-- add MISSING
                .endif
8489 23 9C 20.. txt_saturation_slang_0Ah  db   '#',9Ch,' #',82h,00h
848F 23 3D 20.. txt_saturation_slang_0Bh  db   '#= #',82h,' ',00h
8496 17 09 1F.. txt_saturation_slang_0Ch  db   17h,09h,1Fh,'''',00h
849B 4B 4F 4C.. txt_saturation_slang_0Dh  db   'KOLOR',00h
                ;------------------
                localized_txtlist_saturation:
84A1 FF 84 35    db   0FFh // dw txt_saturation_english    ;00h ;English
84A4 FF 84 40    db   0FFh // dw txt_saturation_slang_01h  ;01h ;?
84A7 FF 84 35    db   0FFh // dw txt_saturation_english  ;*;02h ;French
84AA FF 84 46    db   0FFh // dw txt_saturation_italian    ;03h ;Italian
84AD FF 84 52    db   0FFh // dw txt_saturation_spanish    ;04h ;Spanish
84B0 FF 84 5D    db   0FFh // dw txt_saturation_german     ;05h ;German
84B3 FF 84 67    db   0FFh // dw txt_saturation_portugese  ;06h ;Portugese
84B6 FF 84 71    db   0FFh // dw txt_saturation_dutch      ;07h ;Dutch
84B9 FF 84 77    db   0FFh // dw txt_saturation_slang_08h  ;08h ;?
                .if slang_version<ver11sep2017
N/A ?             ;BUG: one missing entry here!!!          ;09h ;
                .else
                   db   0FFh // dw txt_saturation_slang_09h ;09h ;???  ;<-- INSERT missing
                .endif
84BC FF 84 89    db   0FFh // dw txt_saturation_slang_0Ah  ;0Ah ;?
84BF FF 84 8F    db   0FFh // dw txt_saturation_slang_0Bh  ;0Bh ;?
84C2 FF 84 96    db   0FFh // dw txt_saturation_slang_0Ch  ;0Ch ;?
84C5 FF 84 9B    db   0FFh // dw txt_saturation_slang_0Dh  ;0Dh ;Polish
84C8 FF 84 35    db   0FFh // dw txt_saturation_english  ;*;0Eh ;Turkish
                ;------------------
                gui_null_Saturation:
84CB 00          nop
84CC 00          nop
84CD 00          nop
84CE 00          nop
84CF 00          nop
                ;---
                gui_data_Saturation_show_decimal:
84D0 00          nop
84D1 0D          db   0Dh
84D2 01          db   01h
84D3 00          nop
84D4 01          db   01h
84D5 00          nop
84D6 FF BF 3E    db   0FFh // dw get_settings_saturation
84D9 00 18       dw   0018h   ;<--!
                ;---
                gui_data_Saturation_show_bar:
84DB 01          db   01h
84DC 00          nop
84DD 05          db   05h
84DE 00          nop
84DF 05          db   05h
84E0 00          nop
84E1 64          db   64h
84E2 FF BF 3E    db   0FFh // dw get_settings_saturation
84E5 00 08       dw   0008h
                ;---
                gui_data_Saturation_show:
84E7 FF 84 D0    db   0FFh // dw gui_data_Saturation_show_decimal
84EA FF 84 DB    db   0FFh // dw gui_data_Saturation_show_bar
84ED 00 00 00    db   000h // dw 0000h ;(show_txt)
84F0 00 08       dw   0008h
                ;---
                gui_data_Saturation_name:
84F2 00          nop
84F3 00          nop
84F4 01          db   01h
84F5 00          nop
84F6 01          db   01h
84F7 00          nop
84F8 01          db   01h
84F9 FF BA 21    db   0FFh // dw get_localized_txt_saturation
84FC 00 08       dw   0008h
                ;------------------
;:------------- ;:----------------- PWM code (pulse-width-modulation)
                ;------------------
                pwm_set_duty_pwm0:      ;PWM0
                 ;in: [iram_tmp__3Dh] = [xram_sett_vcom_dc_lo]
                 ;in: r7    = 28h   ;\0A28h (2600 decimal)
                 ;in: r6    = 0Ah   ;/
                 ;in: r5    = 00h
                 ;in: r4    = 00h
                 ;- - -
84FE AB 07       mov  r3,r7(0)   ;\                             ;\
8500 AA 06       mov  r2,r6(0)   ; 00000A28h (2600 Hz)          ;
8502 A9 05       mov  r1,r5(0)   ;                              ;
8504 A8 04       mov  r0,r4(0)   ;/                             ; C=27MHz/2.6kHz
8506 7F C0       mov  r7,0C0h ;\                                ;
8508 7E FC       mov  r6,0FCh ; 019BFCC0h (27000000 aka 27MHz)  ;
850A 7D 9B       mov  r5,9Bh  ;                                 ;
850C 7C 01       mov  r4,01h  ;/                                ;
850E 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3               ;
8511 E4          clr  a                                         ;
8512 FC          mov  r4,a                                      ;
8513 FD          mov  r5,a                                      ;
8514 90 00 90    mov  dptr,xram_tmp__90h                        ;
8517 12 4C C3    call store_r4r5r6r7_to_dptr                    ;/
851A AF 3D       mov  r7,[iram_tmp__3Dh]    ;\                  ;\
851C E4          clr  a                     ;                   ;
851D FC          mov  r4,a                  ; duty              ;
851E FD          mov  r5,a                  ;                   ;
851F FE          mov  r6,a                  ;/                  ;
8520 90 00 90    mov  dptr,xram_tmp__90h    ;\                  ;
8523 E0          movx a,[dptr]              ;                   ; C*duty
8524 F8          mov  r0,a                  ;                   ;
8525 A3          inc  dptr ;=xram_tmp__91h  ;                   ;
8526 E0          movx a,[dptr]              ; 27MHz/2.6kHz      ;
8527 F9          mov  r1,a                  ;                   ;
8528 A3          inc  dptr ;=xram_tmp__92h  ;                   ;
8529 E0          movx a,[dptr]              ;                   ;
852A FA          mov  r2,a                  ;                   ;
852B A3          inc  dptr ;=xram_tmp__93h  ;                   ;
852C E0          movx a,[dptr]              ;                   ;
852D FB          mov  r3,a                  ;/                  ;
852E 12 4B 74    call multiply_r4r5r6r7_by_r0r1r2r3             ;/
8531 E4          clr  a                                         ;\
8532 7B 64       mov  r3,64h       ;\                           ;
8534 FA          mov  r2,a   ;=00h ; 00000064h (100 decimal)    ;
8535 F9          mov  r1,a   ;=00h ;                            ;
8536 F8          mov  r0,a   ;=00h ;/                           ; C*duty/100
8537 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3               ;
853A C0 04       push r4(0)        ;\                           ;
853C C0 05       push r5(0)        ; C*duty/100                 ;
853E C0 06       push r6(0)        ;                            ;
8540 C0 07       push r7(0)        ;/                           ;/
8542 E4          clr  a                                         ;\
8543 7B C8       mov  r3,0C8h      ;\                           ;
8545 FA          mov  r2,a   ;=00h ; 000000C8h (200 decimal)    ;
8546 F9          mov  r1,a   ;=00h ;                            ;
8547 F8          mov  r0,a   ;=00h ;/                           ;
8548 90 00 90    mov  dptr,xram_tmp__90h    ;\                  ;
854B E0          movx a,[dptr]              ;                   ;
854C FC          mov  r4,a                  ;                   ; C/200
854D A3          inc  dptr ;=xram_tmp__91h  ;                   ;
854E E0          movx a,[dptr]              ; 27MHz/2.6kHz      ;
854F FD          mov  r5,a                  ;                   ;
8550 A3          inc  dptr ;=xram_tmp__92h  ;                   ;
8551 E0          movx a,[dptr]              ;                   ;
8552 FE          mov  r6,a                  ;                   ;
8553 A3          inc  dptr ;=xram_tmp__93h  ;                   ;
8554 E0          movx a,[dptr]              ;                   ;
8555 FF          mov  r7,a                  ;/                  ;
8556 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3               ;/
8559 D0 03       pop  r3(0)        ;\                           ;\
855B D0 02       pop  r2(0)        ; C*duty/100                 ;
855D D0 01       pop  r1(0)        ;                            ;
855F D0 00       pop  r0(0)        ;/                           ;
8561 EB          mov  a,r3         ;\                           ;
8562 2F          add  a,r7         ;                            ; C*duty/100
8563 FF          mov  r7,a         ;                            ;    + C/200
8564 EA          mov  a,r2         ;                            ;
8565 3E          adc  a,r6         ; C*duty/100 + C/200         ;
8566 FE          mov  r6,a         ;                            ;
8567 E9          mov  a,r1         ;                            ;
8568 3D          adc  a,r5         ;                            ;
8569 FD          mov  r5,a         ;                            ;
856A E8          mov  a,r0         ;                            ;
856B 3C          adc  a,r4         ;                            ;
856C FC          mov  r4,a         ;/                           ;
856D 90 00 94    mov  dptr,xram_tmp__94h                        ;
8570 12 4C C3    call store_r4r5r6r7_to_dptr                    ;/
                ;- - -
8573 90 FD 42    mov  dptr,IO_PIN_P35_P36_pwm                   ;\
8576 E0          movx a,[dptr]                                  ; OUTPUT
8577 44 03       or   a,03h                                     ;
8579 F0          movx [dptr],a                                  ;/
                ;- - -
857A 90 00 90    mov  dptr,xram_tmp__90h                        ;\
857D A3          inc  dptr ;=xram_tmp__91h                      ;
857E A3          inc  dptr ;=xram_tmp__92h                      ;
857F A3          inc  dptr ;=xram_tmp__93h                      ; OUTPUT
8580 E0          movx a,[dptr]    ;bit0-7                       ;
8581 FF          mov  r7,a                                      ; C*duty/100
8582 90 FD 20    mov  dptr,IO_PWM0_duty_total_lsb       ;\      ;
8585 EF          mov  a,r7                              ; LSB   ;
8586 F0          movx [dptr],a                          ;/      ;
8587 90 00 90    mov  dptr,xram_tmp__90h                        ;
858A E0          movx a,[dptr]    ;bit24-31 ;<-- blah           ;
858B FC          mov  r4,a                                      ;
858C A3          inc  dptr ;=xram_tmp__91h                      ;
858D E0          movx a,[dptr]    ;bit16-23 ;<-- blah           ;
858E FD          mov  r5,a                                      ;
858F A3          inc  dptr ;=xram_tmp__92h                      ;
8590 E0          movx a,[dptr]    ;bit8-15  ;<-- wanted         ;
8591 FE          mov  r6,a                                      ;
8592 A3          inc  dptr ;=xram_tmp__93h                      ;
8593 E0          movx a,[dptr]    ;bit0-7   ;<-- blah           ;
8594 FF          mov  r7,a                                      ;
8595 78 08       mov  r0,08h                                    ;
8597 12 4C B0    call shift_right_r4r5r6r7_by_r0                ;
859A 90 FD 21    mov  dptr,IO_PWM0_duty_total_msb       ;\      ;
859D EF          mov  a,r7                              ; MSB   ;
859E F0          movx [dptr],a                          ;/      ;/
                ;- - -
859F 90 00 94    mov  dptr,xram_tmp__94h                        ;\
85A2 A3          inc  dptr ;=xram_tmp__95h                      ;
85A3 A3          inc  dptr ;=xram_tmp__96h                      ;
85A4 A3          inc  dptr ;=xram_tmp__97h                      ; OUTPUT
85A5 E0          movx a,[dptr]    ;bit0-7                       ;
85A6 FF          mov  r7,a                                      ; C*duty/100
85A7 90 FD 28    mov  dptr,IO_PWM0_duty_high_lsb        ;\      ;    + C/200
85AA EF          mov  a,r7                              ; LSB   ;
85AB F0          movx [dptr],a                          ;/      ;
85AC 90 00 94    mov  dptr,xram_tmp__94h                        ;
85AF E0          movx a,[dptr]    ;bit24-31 ;<-- blah           ;
85B0 FC          mov  r4,a                                      ;
85B1 A3          inc  dptr ;=xram_tmp__95h                      ;
85B2 E0          movx a,[dptr]    ;bit16-23 ;<-- blah           ;
85B3 FD          mov  r5,a                                      ;
85B4 A3          inc  dptr ;=xram_tmp__96h                      ;
85B5 E0          movx a,[dptr]    ;bit8-15  ;<-- wanted         ;
85B6 FE          mov  r6,a                                      ;
85B7 A3          inc  dptr ;=xram_tmp__97h                      ;
85B8 E0          movx a,[dptr]    ;bit0-7   ;<-- blah           ;
85B9 FF          mov  r7,a                                      ;
85BA 78 08       mov  r0,08h                                    ;
85BC 12 4C B0    call shift_right_r4r5r6r7_by_r0                ;
85BF 90 FD 29    mov  dptr,IO_PWM0_duty_high_msb        ;\      ;
85C2 EF          mov  a,r7                              ; MSB   ;
85C3 F0          movx [dptr],a                          ;/      ;/
85C4 22          ret
                ;------------------
                pwm_set_duty_pwm1:      ;PWM1
                 ;in: [iram_tmp__3Dh] = [xram_sett_vcom_dc_lo]
                 ;in: r7    = 28h   ;\0A28h (2600 decimal)
                 ;in: r6    = 0Ah   ;/
                 ;in: r5    = 00h
                 ;in: r4    = 00h
                 ;- - -
85C5 AB 07       mov  r3,r7(0)
85C7 AA 06       mov  r2,r6(0)
85C9 A9 05       mov  r1,r5(0)
85CB A8 04       mov  r0,r4(0)
85CD 7F C0       mov  r7,0C0h ;\
85CF 7E FC       mov  r6,0FCh ; 019BFCC0h (27,000,000 aka 27MHz)
85D1 7D 9B       mov  r5,9Bh  ;
85D3 7C 01       mov  r4,01h  ;/
85D5 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3
85D8 E4          clr  a
85D9 FC          mov  r4,a
85DA FD          mov  r5,a
85DB 90 00 90    mov  dptr,xram_tmp__90h
85DE 12 4C C3    call store_r4r5r6r7_to_dptr
85E1 AF 3D       mov  r7,[iram_tmp__3Dh]
85E3 E4          clr  a
85E4 FC          mov  r4,a
85E5 FD          mov  r5,a
85E6 FE          mov  r6,a
85E7 90 00 90    mov  dptr,xram_tmp__90h
85EA E0          movx a,[dptr]
85EB F8          mov  r0,a
85EC A3          inc  dptr ;=xram_tmp__91h
85ED E0          movx a,[dptr]
85EE F9          mov  r1,a
85EF A3          inc  dptr ;=xram_tmp__92h
85F0 E0          movx a,[dptr]
85F1 FA          mov  r2,a
85F2 A3          inc  dptr ;=xram_tmp__93h
85F3 E0          movx a,[dptr]
85F4 FB          mov  r3,a
85F5 12 4B 74    call multiply_r4r5r6r7_by_r0r1r2r3
85F8 E4          clr  a
85F9 7B 64       mov  r3,64h
85FB FA          mov  r2,a
85FC F9          mov  r1,a
85FD F8          mov  r0,a
85FE 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3
8601 C0 04       push r4(0)
8603 C0 05       push r5(0)
8605 C0 06       push r6(0)
8607 C0 07       push r7(0)
8609 E4          clr  a
860A 7B C8       mov  r3,0C8h
860C FA          mov  r2,a
860D F9          mov  r1,a
860E F8          mov  r0,a
860F 90 00 90    mov  dptr,xram_tmp__90h
8612 E0          movx a,[dptr]
8613 FC          mov  r4,a
8614 A3          inc  dptr ;=xram_tmp__91h
8615 E0          movx a,[dptr]
8616 FD          mov  r5,a
8617 A3          inc  dptr ;=xram_tmp__92h
8618 E0          movx a,[dptr]
8619 FE          mov  r6,a
861A A3          inc  dptr ;=xram_tmp__93h
861B E0          movx a,[dptr]
861C FF          mov  r7,a
861D 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3
8620 D0 03       pop  r3(0)
8622 D0 02       pop  r2(0)
8624 D0 01       pop  r1(0)
8626 D0 00       pop  r0(0)
8628 EB          mov  a,r3
8629 2F          add  a,r7
862A FF          mov  r7,a
862B EA          mov  a,r2
862C 3E          adc  a,r6
862D FE          mov  r6,a
862E E9          mov  a,r1
862F 3D          adc  a,r5
8630 FD          mov  r5,a
8631 E8          mov  a,r0
8632 3C          adc  a,r4
8633 FC          mov  r4,a
8634 90 00 94    mov  dptr,xram_tmp__94h
8637 12 4C C3    call store_r4r5r6r7_to_dptr
863A 90 FD 42    mov  dptr,IO_PIN_P35_P36_pwm
863D E0          movx a,[dptr]
863E 44 30       or   a,30h
8640 F0          movx [dptr],a
8641 90 00 90    mov  dptr,xram_tmp__90h
8644 A3          inc  dptr ;=xram_tmp__91h
8645 A3          inc  dptr ;=xram_tmp__92h
8646 A3          inc  dptr ;=xram_tmp__93h
8647 E0          movx a,[dptr]
8648 FF          mov  r7,a
8649 90 FD 22    mov  dptr,IO_PWM1_duty_total_lsb
864C EF          mov  a,r7
864D F0          movx [dptr],a
864E 90 00 90    mov  dptr,xram_tmp__90h
8651 E0          movx a,[dptr]
8652 FC          mov  r4,a
8653 A3          inc  dptr ;=xram_tmp__91h
8654 E0          movx a,[dptr]
8655 FD          mov  r5,a
8656 A3          inc  dptr ;=xram_tmp__92h
8657 E0          movx a,[dptr]
8658 FE          mov  r6,a
8659 A3          inc  dptr ;=xram_tmp__93h
865A E0          movx a,[dptr]
865B FF          mov  r7,a
865C 78 08       mov  r0,08h
865E 12 4C B0    call shift_right_r4r5r6r7_by_r0
8661 90 FD 23    mov  dptr,IO_PWM1_duty_total_msb
8664 EF          mov  a,r7
8665 F0          movx [dptr],a
                ;- - -
8666 90 00 94    mov  dptr,xram_tmp__94h
8669 A3          inc  dptr ;=xram_tmp__95h
866A A3          inc  dptr ;=xram_tmp__96h
866B A3          inc  dptr ;=xram_tmp__97h
866C E0          movx a,[dptr]
866D FF          mov  r7,a
866E 90 FD 2A    mov  dptr,IO_PWM1_duty_high_lsb
8671 EF          mov  a,r7
8672 F0          movx [dptr],a
8673 90 00 94    mov  dptr,xram_tmp__94h
8676 E0          movx a,[dptr]
8677 FC          mov  r4,a
8678 A3          inc  dptr ;=xram_tmp__95h
8679 E0          movx a,[dptr]
867A FD          mov  r5,a
867B A3          inc  dptr ;=xram_tmp__96h
867C E0          movx a,[dptr]
867D FE          mov  r6,a
867E A3          inc  dptr ;=xram_tmp__97h
867F E0          movx a,[dptr]
8680 FF          mov  r7,a
8681 78 08       mov  r0,08h
8683 12 4C B0    call shift_right_r4r5r6r7_by_r0
8686 90 FD 2B    mov  dptr,IO_PWM1_duty_high_msb
8689 EF          mov  a,r7
868A F0          movx [dptr],a
868B 22          ret
                ;------------------
                pwm_set_duty_pwm2:      ;PWM2
868C AB 07       mov  r3,r7(0)
868E AA 06       mov  r2,r6(0)
8690 A9 05       mov  r1,r5(0)
8692 A8 04       mov  r0,r4(0)
8694 7F C0       mov  r7,0C0h ;\
8696 7E FC       mov  r6,0FCh ; 019BFCC0h (27000000 aka 27MHz)
8698 7D 9B       mov  r5,9Bh  ;
869A 7C 01       mov  r4,01h  ;/
869C 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3
869F E4          clr  a
86A0 FC          mov  r4,a
86A1 FD          mov  r5,a
86A2 90 00 90    mov  dptr,xram_tmp__90h
86A5 12 4C C3    call store_r4r5r6r7_to_dptr
86A8 AF 3D       mov  r7,[iram_tmp__3Dh]
86AA E4          clr  a
86AB FC          mov  r4,a
86AC FD          mov  r5,a
86AD FE          mov  r6,a
86AE 90 00 90    mov  dptr,xram_tmp__90h
86B1 E0          movx a,[dptr]
86B2 F8          mov  r0,a
86B3 A3          inc  dptr ;=xram_tmp__91h
86B4 E0          movx a,[dptr]
86B5 F9          mov  r1,a
86B6 A3          inc  dptr ;=xram_tmp__92h
86B7 E0          movx a,[dptr]
86B8 FA          mov  r2,a
86B9 A3          inc  dptr ;=xram_tmp__93h
86BA E0          movx a,[dptr]
86BB FB          mov  r3,a
86BC 12 4B 74    call multiply_r4r5r6r7_by_r0r1r2r3
86BF E4          clr  a
86C0 7B 64       mov  r3,64h
86C2 FA          mov  r2,a
86C3 F9          mov  r1,a
86C4 F8          mov  r0,a
86C5 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3
86C8 C0 04       push r4(0)
86CA C0 05       push r5(0)
86CC C0 06       push r6(0)
86CE C0 07       push r7(0)
86D0 E4          clr  a
86D1 7B C8       mov  r3,0C8h
86D3 FA          mov  r2,a
86D4 F9          mov  r1,a
86D5 F8          mov  r0,a
86D6 90 00 90    mov  dptr,xram_tmp__90h
86D9 E0          movx a,[dptr]
86DA FC          mov  r4,a
86DB A3          inc  dptr ;=xram_tmp__91h
86DC E0          movx a,[dptr]
86DD FD          mov  r5,a
86DE A3          inc  dptr ;=xram_tmp__92h
86DF E0          movx a,[dptr]
86E0 FE          mov  r6,a
86E1 A3          inc  dptr ;=xram_tmp__93h
86E2 E0          movx a,[dptr]
86E3 FF          mov  r7,a
86E4 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3
86E7 D0 03       pop  r3(0)
86E9 D0 02       pop  r2(0)
86EB D0 01       pop  r1(0)
86ED D0 00       pop  r0(0)
86EF EB          mov  a,r3
86F0 2F          add  a,r7
86F1 FF          mov  r7,a
86F2 EA          mov  a,r2
86F3 3E          adc  a,r6
86F4 FE          mov  r6,a
86F5 E9          mov  a,r1
86F6 3D          adc  a,r5
86F7 FD          mov  r5,a
86F8 E8          mov  a,r0
86F9 3C          adc  a,r4
86FA FC          mov  r4,a
86FB 90 00 94    mov  dptr,xram_tmp__94h
86FE 12 4C C3    call store_r4r5r6r7_to_dptr
8701 90 FD 43    mov  dptr,IO_PIN_P37_xxx_pwm
8704 E0          movx a,[dptr]
8705 44 03       or   a,03h
8707 F0          movx [dptr],a
8708 90 00 90    mov  dptr,xram_tmp__90h
870B A3          inc  dptr ;=xram_tmp__91h
870C A3          inc  dptr ;=xram_tmp__92h
870D A3          inc  dptr ;=xram_tmp__93h
870E E0          movx a,[dptr]
870F FF          mov  r7,a
8710 90 FD 24    mov  dptr,IO_PWM2_duty_total_lsb
8713 EF          mov  a,r7
8714 F0          movx [dptr],a
8715 90 00 90    mov  dptr,xram_tmp__90h
8718 E0          movx a,[dptr]
8719 FC          mov  r4,a
871A A3          inc  dptr ;=xram_tmp__91h
871B E0          movx a,[dptr]
871C FD          mov  r5,a
871D A3          inc  dptr ;=xram_tmp__92h
871E E0          movx a,[dptr]
871F FE          mov  r6,a
8720 A3          inc  dptr ;=xram_tmp__93h
8721 E0          movx a,[dptr]
8722 FF          mov  r7,a
8723 78 08       mov  r0,08h
8725 12 4C B0    call shift_right_r4r5r6r7_by_r0
8728 90 FD 25    mov  dptr,IO_PWM2_duty_total_msb
872B EF          mov  a,r7
872C F0          movx [dptr],a
                ;- - -
872D 90 00 94    mov  dptr,xram_tmp__94h
8730 A3          inc  dptr ;=xram_tmp__95h
8731 A3          inc  dptr ;=xram_tmp__96h
8732 A3          inc  dptr ;=xram_tmp__97h
8733 E0          movx a,[dptr]
8734 FF          mov  r7,a
8735 90 FD 2C    mov  dptr,IO_PWM2_duty_high_lsb
8738 EF          mov  a,r7
8739 F0          movx [dptr],a
873A 90 00 94    mov  dptr,xram_tmp__94h
873D E0          movx a,[dptr]
873E FC          mov  r4,a
873F A3          inc  dptr ;=xram_tmp__95h
8740 E0          movx a,[dptr]
8741 FD          mov  r5,a
8742 A3          inc  dptr ;=xram_tmp__96h
8743 E0          movx a,[dptr]
8744 FE          mov  r6,a
8745 A3          inc  dptr ;=xram_tmp__97h
8746 E0          movx a,[dptr]
8747 FF          mov  r7,a
8748 78 08       mov  r0,08h
874A 12 4C B0    call shift_right_r4r5r6r7_by_r0
874D 90 FD 2D    mov  dptr,IO_PWM2_duty_high_msb
8750 EF          mov  a,r7
8751 F0          movx [dptr],a
8752 22          ret
                ;------------------
                pwm_set_duty_pwm3:      ;PWM3
8753 AB 07       mov  r3,r7(0)
8755 AA 06       mov  r2,r6(0)
8757 A9 05       mov  r1,r5(0)
8759 A8 04       mov  r0,r4(0)
875B 7F C0       mov  r7,0C0h ;\
875D 7E FC       mov  r6,0FCh ; 019BFCC0h (27000000 aka 27MHz)
875F 7D 9B       mov  r5,9Bh  ;
8761 7C 01       mov  r4,01h  ;/
8763 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3
8766 E4          clr  a
8767 FC          mov  r4,a
8768 FD          mov  r5,a
8769 90 00 90    mov  dptr,xram_tmp__90h
876C 12 4C C3    call store_r4r5r6r7_to_dptr
876F AF 3D       mov  r7,[iram_tmp__3Dh]
8771 E4          clr  a
8772 FC          mov  r4,a
8773 FD          mov  r5,a
8774 FE          mov  r6,a
8775 90 00 90    mov  dptr,xram_tmp__90h
8778 E0          movx a,[dptr]
8779 F8          mov  r0,a
877A A3          inc  dptr ;=xram_tmp__91h
877B E0          movx a,[dptr]
877C F9          mov  r1,a
877D A3          inc  dptr ;=xram_tmp__92h
877E E0          movx a,[dptr]
877F FA          mov  r2,a
8780 A3          inc  dptr ;=xram_tmp__93h
8781 E0          movx a,[dptr]
8782 FB          mov  r3,a
8783 12 4B 74    call multiply_r4r5r6r7_by_r0r1r2r3
8786 E4          clr  a
8787 7B 64       mov  r3,64h
8789 FA          mov  r2,a
878A F9          mov  r1,a
878B F8          mov  r0,a
878C 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3
878F C0 04       push r4(0)
8791 C0 05       push r5(0)
8793 C0 06       push r6(0)
8795 C0 07       push r7(0)
8797 E4          clr  a
8798 7B C8       mov  r3,0C8h
879A FA          mov  r2,a
879B F9          mov  r1,a
879C F8          mov  r0,a
879D 90 00 90    mov  dptr,xram_tmp__90h
87A0 E0          movx a,[dptr]
87A1 FC          mov  r4,a
87A2 A3          inc  dptr ;=xram_tmp__91h
87A3 E0          movx a,[dptr]
87A4 FD          mov  r5,a
87A5 A3          inc  dptr ;=xram_tmp__92h
87A6 E0          movx a,[dptr]
87A7 FE          mov  r6,a
87A8 A3          inc  dptr ;=xram_tmp__93h
87A9 E0          movx a,[dptr]
87AA FF          mov  r7,a
87AB 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3
87AE D0 03       pop  r3(0)
87B0 D0 02       pop  r2(0)
87B2 D0 01       pop  r1(0)
87B4 D0 00       pop  r0(0)
87B6 EB          mov  a,r3
87B7 2F          add  a,r7
87B8 FF          mov  r7,a
87B9 EA          mov  a,r2
87BA 3E          adc  a,r6
87BB FE          mov  r6,a
87BC E9          mov  a,r1
87BD 3D          adc  a,r5
87BE FD          mov  r5,a
87BF E8          mov  a,r0
87C0 3C          adc  a,r4
87C1 FC          mov  r4,a
87C2 90 00 94    mov  dptr,xram_tmp__94h
87C5 12 4C C3    call store_r4r5r6r7_to_dptr
87C8 90 FD 31    mov  dptr,IO_PIN_P06_P07_pwm
87CB E0          movx a,[dptr]
87CC 44 30       or   a,30h
87CE F0          movx [dptr],a
87CF 90 00 90    mov  dptr,xram_tmp__90h
87D2 A3          inc  dptr ;=xram_tmp__91h
87D3 A3          inc  dptr ;=xram_tmp__92h
87D4 A3          inc  dptr ;=xram_tmp__93h
87D5 E0          movx a,[dptr]
87D6 FF          mov  r7,a
87D7 90 FD 26    mov  dptr,IO_PWM3_duty_total_lsb
87DA EF          mov  a,r7
87DB F0          movx [dptr],a
87DC 90 00 90    mov  dptr,xram_tmp__90h
87DF E0          movx a,[dptr]
87E0 FC          mov  r4,a
87E1 A3          inc  dptr ;=xram_tmp__91h
87E2 E0          movx a,[dptr]
87E3 FD          mov  r5,a
87E4 A3          inc  dptr ;=xram_tmp__92h
87E5 E0          movx a,[dptr]
87E6 FE          mov  r6,a
87E7 A3          inc  dptr ;=xram_tmp__93h
87E8 E0          movx a,[dptr]
87E9 FF          mov  r7,a
87EA 78 08       mov  r0,08h
87EC 12 4C B0    call shift_right_r4r5r6r7_by_r0
87EF 90 FD 27    mov  dptr,IO_PWM3_duty_total_msb
87F2 EF          mov  a,r7
87F3 F0          movx [dptr],a
                ;- - -
87F4 90 00 94    mov  dptr,xram_tmp__94h
87F7 A3          inc  dptr ;=xram_tmp__95h
87F8 A3          inc  dptr ;=xram_tmp__96h
87F9 A3          inc  dptr ;=xram_tmp__97h
87FA E0          movx a,[dptr]
87FB FF          mov  r7,a
87FC 90 FD 2E    mov  dptr,IO_PWM3_duty_high_lsb
87FF EF          mov  a,r7
8800 F0          movx [dptr],a
8801 90 00 94    mov  dptr,xram_tmp__94h
8804 E0          movx a,[dptr]
8805 FC          mov  r4,a
8806 A3          inc  dptr ;=xram_tmp__95h
8807 E0          movx a,[dptr]
8808 FD          mov  r5,a
8809 A3          inc  dptr ;=xram_tmp__96h
880A E0          movx a,[dptr]
880B FE          mov  r6,a
880C A3          inc  dptr ;=xram_tmp__97h
880D E0          movx a,[dptr]
880E FF          mov  r7,a
880F 78 08       mov  r0,08h
8811 12 4C B0    call shift_right_r4r5r6r7_by_r0
8814 90 FD 2F    mov  dptr,IO_PWM3_duty_high_msb
8817 EF          mov  a,r7
8818 F0          movx [dptr],a
8819 22          ret
                ;------------------
;:------------- ;:----------------- code .........
                ;------------------
                osd_write_decimal:
881A 8F 32       mov  [iram_tmp__32h],r7  ;yloc
881C 8D 33       mov  [iram_tmp__33h],r5  ;xloc
881E 8B 34       mov  [iram_tmp__34h],r3  ;attr
8820 78 86       mov  r0,xram_tmp__86h and 0ffh ;\
8822 7C 00       mov  r4,xram_tmp__86h/100h     ; dst
8824 7D 01       mov  r5,01h           ;area    ;/
8826 7B FF       mov  r3,0FFh
8828 7A 5B       mov  r2,decimal_initial_zero_variables/100h
882A 79 65       mov  r1,decimal_initial_zero_variables and 0ffh
882C 7E 00       mov  r6,00h  ;\len 4
882E 7F 04       mov  r7,04h  ;/
8830 12 49 C1    call anymem_generic_memcopy
8833 C3          clr  c
8834 E5 35       mov  a,[iram_tmp__35h]
8836 94 00       sbc  a,00h
8838 40 0C       jc   @@negative    ;uh, unsigned compare below 0 ???
883A 90 00 8A    mov  dptr,xram_tmp__8Ah
883D E5 35       mov  a,[iram_tmp__35h]
883F F0          movx [dptr],a
8840 A3          inc  dptr ;=xram_tmp__8Bh
8841 E5 36       mov  a,[iram_tmp__36h]
8843 F0          movx [dptr],a
8844 80 15       sjmp @@positive
                ;---
                @@negative:
8846 E5 36       mov  a,[iram_tmp__36h]
8848 F4          cpl  a
8849 FF          mov  r7,a
884A E5 35       mov  a,[iram_tmp__35h]
884C F4          cpl  a
884D FE          mov  r6,a
884E EF          mov  a,r7
884F 24 01       add  a,01h
8851 FF          mov  r7,a
8852 E4          clr  a
8853 3E          adc  a,r6
8854 90 00 8A    mov  dptr,xram_tmp__8Ah
8857 F0          movx [dptr],a
8858 A3          inc  dptr ;=xram_tmp__8Bh
8859 EF          mov  a,r7
885A F0          movx [dptr],a
                @@positive:
885B 90 00 8A    mov  dptr,xram_tmp__8Ah
885E E0          movx a,[dptr]
885F FA          mov  r2,a
8860 A3          inc  dptr ;=xram_tmp__8Bh
8861 E0          movx a,[dptr]
8862 FB          mov  r3,a
8863 7C 00       mov  r4,00h  ;\100 decimal
8865 7D 64       mov  r5,64h  ;/
8867 FF          mov  r7,a
8868 AE 02       mov  r6,r2(0)
886A 12 4A A6    call divide_r6r7_by_r4r5
886D 74 5B       mov  a,decimal_chars and 0ffh
886F 2F          add  a,r7
8870 F5 82       mov  dpl,a
8872 74 5B       mov  a,decimal_chars/100h
8874 3E          adc  a,r6
8875 F5 83       mov  dph,a
8877 E4          clr  a
8878 93          movc a,[a+dptr]
8879 90 00 86    mov  dptr,xram_tmp__86h
887C F0          movx [dptr],a
887D 7C 00       mov  r4,00h  ;\100 decimal
887F 7D 64       mov  r5,64h  ;/
8881 AF 03       mov  r7,r3(0)
8883 AE 02       mov  r6,r2(0)
8885 12 4A A6    call divide_r6r7_by_r4r5
8888 AA 04       mov  r2,r4(0)
888A AB 05       mov  r3,r5(0)
888C 7D 0A       mov  r5,0Ah  ;\10 decimal
888E 7C 00       mov  r4,00h  ;/
8890 AF 03       mov  r7,r3(0)
8892 AE 02       mov  r6,r2(0)
8894 12 4A A6    call divide_r6r7_by_r4r5
8897 74 5B       mov  a,decimal_chars and 0ffh
8899 2F          add  a,r7
889A F5 82       mov  dpl,a
889C 74 5B       mov  a,decimal_chars/100h
889E 3E          adc  a,r6
889F F5 83       mov  dph,a
88A1 E4          clr  a
88A2 93          movc a,[a+dptr]
88A3 90 00 87    mov  dptr,xram_tmp__87h
88A6 F0          movx [dptr],a
88A7 7D 0A       mov  r5,0Ah  ;\10 decimal
88A9 7C 00       mov  r4,00h  ;/
88AB AF 03       mov  r7,r3(0)
88AD AE 02       mov  r6,r2(0)
88AF 12 4A A6    call divide_r6r7_by_r4r5
88B2 74 5B       mov  a,decimal_chars and 0ffh
88B4 2D          add  a,r5
88B5 F5 82       mov  dpl,a
88B7 74 5B       mov  a,decimal_chars/100h
88B9 3C          adc  a,r4
88BA F5 83       mov  dph,a
88BC E4          clr  a
88BD 93          movc a,[a+dptr]
88BE 90 00 88    mov  dptr,xram_tmp__88h
88C1 F0          movx [dptr],a
88C2 90 00 86    mov  dptr,xram_tmp__86h
88C5 E0          movx a,[dptr]
88C6 B4 30 03    jne  a,30h,@@no_zero  ;"0" (leading zero)
88C9 74 20       mov  a,20h            ;" "
88CB F0          movx [dptr],a
                @@no_zero:
88CC 75 40 01    mov  [iram_tmp__40h],01h           ;area       ;\
88CF 75 41 00    mov  [iram_tmp__41h],xram_tmp__86h/100h        ;
88D2 75 42 86    mov  [iram_tmp__42h],xram_tmp__86h and 0ffh    ;/
88D5 AB 34       mov  r3,[iram_tmp__34h]  ;attr
88D7 AD 33       mov  r5,[iram_tmp__33h]  ;xloc
88D9 AF 32       mov  r7,[iram_tmp__32h]  ;yloc
88DB 02 77 29    jmp  osd_draw_string
                ;------------------
                osd_upload_font_ONE_character_manually:
                ;(unused)  ;similar to "osd_upload_font_characters_manually"
88DE 8F 0D       mov  [iram_tmp_upload_dst],r7          ;-dst?
88E0 8B 0E       mov  [iram_tmp_upload_src_area],r3 ;\
88E2 8A 0F       mov  [iram_tmp_upload_src_msb],r2  ; src
88E4 89 10       mov  [iram_tmp_upload_src_lsb],r1  ;/
88E6 E9          mov  a,r1
88E7 4A          or   a,r2
88E8 4B          or   a,r3
88E9 70 03       jnz  a,@@cont
88EB 02 89 9F    jmp  @@exit
                ;---
                @@cont:
88EE 90 FB 76    mov  dptr,IO_OSD_char_xsiz
88F1 E0          movx a,[dptr]
88F2 90 00 B5    mov  dptr,xram_tmp_osd_char_xsiz  ;char.xsiz
88F5 F0          movx [dptr],a    ;char.xsiz
88F6 90 FB 77    mov  dptr,IO_OSD_char_ysiz
88F9 E0          movx a,[dptr]
88FA 90 00 B6    mov  dptr,xram_tmp_osd_char_ysiz  ;char.ysiz
88FD F0          movx [dptr],a    ;char.ysiz
88FE 90 00 B5    mov  dptr,xram_tmp_osd_char_xsiz  ;char.xsiz
8901 E0          movx a,[dptr]    ;char.xsiz
8902 D3          set  c           ;<--
8903 94 10       sbc  a,10h       ;char.xsiz-11h
8905 50 04       jnc  @@more_than_16pix
8907 A3          inc  dptr ;=xram_tmp_osd_char_ysiz ;char.ysiz
8908 E0          movx a,[dptr]     ;char.ysiz
8909 80 24       sjmp @@this_char_size
                ;---
                @@more_than_16pix:
890B 90 00 B6    mov  dptr,xram_tmp_osd_char_ysiz   ;char.ysiz
890E E0          movx a,[dptr]     ;char.ysiz
890F 20 E0 0D    jnz  a.0,@@more_than_16pix_and_odd_ysiz
8912 75 F0 03    mov  b,03h
8915 A4          mul  a,b
8916 FF          mov  r7,a
8917 E5 F0       mov  a,b
8919 C3          clr  c
891A 13          rcr  a
891B EF          mov  a,r7
891C 13          rcr  a
891D 80 10       sjmp @@this_char_size
                ;---
                @@more_than_16pix_and_odd_ysiz:
891F 90 00 B6    mov  dptr,xram_tmp_osd_char_ysiz   ;char.ysiz
8922 E0          movx a,[dptr]     ;char.ysiz
8923 75 F0 03    mov  b,03h
8926 A4          mul  a,b
8927 FF          mov  r7,a
8928 E5 F0       mov  a,b
892A C3          clr  c
892B 13          rcr  a
892C EF          mov  a,r7
892D 13          rcr  a
892E 04          inc  a
                @@this_char_size:
892F 90 00 B4    mov  dptr,xram_tmp_osd_char_size   ;char.size   ;INNER.LEN (words per character)
8932 F0          movx [dptr],a     ;char.size
                ;- - - - - - - - -
8933 90 00 B4    mov  dptr,xram_tmp_osd_char_size   ;char.size
8936 E0          movx a,[dptr]     ;char.size
8937 85 0D F0    mov  b,[iram_tmp_upload_dst]      ;tile
893A A4          mul  a,b          ;tile*size
893B 90 FB 02    mov  dptr,IO_OSD_font_addr_lsb
893E F0          movx [dptr],a     ;tile*size.lsb
893F E4          clr  a
8940 90 00 B3    mov  dptr,xram_tmp_osd_char_yy   ;char.yy
8943 F0          movx [dptr],a     ;char.yy
                @@lop:
8944 90 00 B4    mov  dptr,xram_tmp_osd_char_size   ;char.size
8947 E0          movx a,[dptr]     ;char.size
8948 FF          mov  r7,a         ;char.size
8949 90 00 B3    mov  dptr,xram_tmp_osd_char_yy   ;char.yy
894C E0          movx a,[dptr]     ;char.yy
894D C3          clr  c
894E 9F          sbc  a,r7         ;yy-size
894F 50 4E       jnc  @@exit
8951 EF          mov  a,r7         ;char.size
8952 85 0D F0    mov  b,[iram_tmp_upload_dst]      ;tile
8955 A4          mul  a,b          ;tile*size
8956 FF          mov  r7,a         ;tile*size.lsb
8957 E0          movx a,[dptr]     ;char.yy
8958 7C 00       mov  r4,00h       ;00
895A 2F          add  a,r7         ;yy+tile*size.lsb
895B EC          mov  a,r4         ;00
895C 35 F0       adc  a,b          ;00+tile*size.msb+cy
895E FF          mov  r7,a         ;00+tile*size.msb+cy
895F 33          rcl  a     ;blah
8960 95 E0       sbc  a,a   ;blah
8962 90 FB 0F    mov  dptr,IO_OSD_font_addr_msb
8965 EF          mov  a,r7         ;00+tile*size.msb+cy
8966 F0          movx [dptr],a
8967 AB 0E       mov  r3,[iram_tmp_upload_src_area]
8969 AA 0F       mov  r2,[iram_tmp_upload_src_msb]
896B A9 10       mov  r1,[iram_tmp_upload_src_lsb]
896D 90 00 B3    mov  dptr,xram_tmp_osd_char_yy   ;char.yy
8970 E0          movx a,[dptr]     ;char.yy
8971 FF          mov  r7,a
8972 75 F0 02    mov  b,02h
8975 A4          mul  a,b
8976 F5 82       mov  dpl,a
8978 85 F0 83    mov  dph,b
897B 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
897E 90 FB 04    mov  dptr,IO_OSD_font_data_msb
8981 F0          movx [dptr],a
8982 EF          mov  a,r7
8983 75 F0 02    mov  b,02h
8986 A4          mul  a,b
8987 29          add  a,r1
8988 F9          mov  r1,a
8989 EA          mov  a,r2
898A 35 F0       adc  a,b
898C FA          mov  r2,a
898D 90 00 01    mov  dptr,0001h ;idx...    ;<-- plus 1
8990 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
8993 90 FB 03    mov  dptr,IO_OSD_font_data_lsb
8996 F0          movx [dptr],a
8997 90 00 B3    mov  dptr,xram_tmp_osd_char_yy   ;char.yy
899A E0          movx a,[dptr]     ;char.yy
899B 04          inc  a            ;char.yy
899C F0          movx [dptr],a     ;char.yy
899D 80 A5       sjmp @@lop
                ;---
                @@exit:
899F 22          ret
                ;------------------
;:------------- ;:----------------- GUI misc
                ;------------------
                .macro defdata_contrast
89A0 43 4F 4E.. txt_contrast_english    db 'CONTRAST',00h       ;<-- also dutch
89A9 23 23 20.. txt_contrast_slang_01h  db '## #"',00h
89AF 43 4F 4E.. txt_contrast_french     db 'CONTRASTE',00h      ;<-- also spanish/portugese
89B9 43 4F 4E.. txt_contrast_italian    db 'CONTRASTO',00h
89C3 4B 4F 4E.. txt_contrast_german     db 'KONTRAST',00h       ;<-- also polish/turkish
                .if slang_version<ver11sep2017
89CC 10 xx 13..   txt_contrast_slang_08h db 10h,'$',13h,'''%',07h,'&''',13h,'$&'')',00h
                .else
                  txt_contrast_slang_08h db 10h,'$',13h,'''%',07h,'&''',00h
                .endif
89DA 23 9D 20.. txt_contrast_slang_09h  db '#',9Dh,' #',9Eh,' #',82h,00h
89E3 23 BB 23.. txt_contrast_slang_0Ah  db '#',0BBh,'#',0BCh,'#',0BDh,'#',86h,'#',0BEh,'#',0BDh,00h
89F0 F0 20 23.. txt_contrast_slang_0Bh  db 0F0h,' #',9Eh,' #',82h,00h
                .if slang_version<ver11sep2017
89F8 10 xx 13..   txt_contrast_slang_0Ch db 10h,'$',13h,'''%',07h,'&''',00h  ;as above (but shorter)?
                .else
                  txt_contrast_slang_0Ch equ txt_contrast_slang_08h
                .endif
                ;------------------
                localized_txtlist_contrast:
8A01 FF 89 A0    db   0FFh // dw txt_contrast_english       ;00h ;English
8A04 FF 89 A9    db   0FFh // dw txt_contrast_slang_01h     ;01h ;?
8A07 FF 89 AF    db   0FFh // dw txt_contrast_french        ;02h ;French
8A0A FF 89 B9    db   0FFh // dw txt_contrast_italian       ;03h ;Italian
8A0D FF 89 AF    db   0FFh // dw txt_contrast_french     ;* ;04h ;Spanish
8A10 FF 89 C3    db   0FFh // dw txt_contrast_german        ;05h ;German
8A13 FF 89 AF    db   0FFh // dw txt_contrast_french     ;* ;06h ;Portugese
8A16 FF 89 A0    db   0FFh // dw txt_contrast_english    ;* ;07h ;Dutch
8A19 FF 89 CC    db   0FFh // dw txt_contrast_slang_08h     ;08h ;?
8A1C FF 89 DA    db   0FFh // dw txt_contrast_slang_09h     ;09h ;?
8A1F FF 89 E3    db   0FFh // dw txt_contrast_slang_0Ah     ;0Ah ;?
8A22 FF 89 F0    db   0FFh // dw txt_contrast_slang_0Bh     ;0Bh ;?
8A25 FF 89 F8    db   0FFh // dw txt_contrast_slang_0Ch     ;0Ch ;?
8A28 FF 89 C3    db   0FFh // dw txt_contrast_german     ;* ;0Dh ;Polish
8A2B FF 89 C3    db   0FFh // dw txt_contrast_german     ;* ;0Eh ;Turkish
                ;------------------
                gui_null_Contrast:
8A2E 00          nop
8A2F 00          nop
8A30 00          nop
8A31 00          nop
8A32 00          nop
                ;---
                gui_data_Contrast_show_decimal:
8A33 00          nop
8A34 0D          db   0Dh
8A35 01          db   01h
8A36 00          nop
8A37 01          db   01h
8A38 00          nop
8A39 FF BE E6    db   0FFh // dw get_settings_contrast
8A3C 00 18       dw   0018h   ;<--!
                ;---
                gui_data_Contrast_show_bar:
8A3E 01          db   01h
8A3F 00          nop
8A40 05          db   05h
8A41 00          nop
8A42 05          db   05h
8A43 00          nop
8A44 64          db   64h
8A45 FF BE E6    db   0FFh // dw get_settings_contrast
8A48 00 08       dw   0008h
                ;---
                gui_data_Contrast_show:
8A4A FF 8A 33    db   0FFh // dw gui_data_Contrast_show_decimal
8A4D FF 8A 3E    db   0FFh // dw gui_data_Contrast_show_bar
8A50 00 00 00    db   000h // dw 0000h ;(show_txt)
8A53 00 08       dw   0008h
                ;---
                gui_data_Contrast_name:
8A55 00          nop
8A56 00          nop
8A57 01          db   01h
8A58 00          nop
8A59 01          db   01h
8A5A 00          nop
8A5B 01          db   01h
8A5C FF B9 90    db   0FFh // dw get_localized_txt_contrast
8A5F 00 08       dw   0008h
                ;------------------
                .endm ;defdata_contrast
                ;------------------
                .if shuffle_version<ver11sep2017
                  defdata_contrast
                .endif
                ;------------------
                osd_write_hex_or_decimal:
8A61 8B 2F       mov  [iram_tmp__2Fh],r3
8A63 8A 30       mov  [iram_tmp__30h],r2
8A65 89 31       mov  [iram_tmp__31h],r1
8A67 E9          mov  a,r1
8A68 4A          or   a,r2
8A69 4B          or   a,r3
8A6A 70 03       jnz  a,@@cont
8A6C 02 8B 21    jmp  @@exit
                ;---
                @@cont:
8A6F ED          mov  a,r5
8A70 30 E7 14    jz   a.7,@@_8A87h        ;maybe HIGHLIGHT flag or so?
                ;- - -
8A73 90 00 02    mov  dptr,0002h ;idxNumeric_
8A76 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
8A79 90 00 84    mov  dptr,xram_tmp__84h ;attr.lsb
8A7C F0          movx [dptr],a
8A7D 90 00 03    mov  dptr,0003h ;idx...
8A80 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
8A83 90 00 85    mov  dptr,xram_tmp__85h ;attr.msb
8A86 F0          movx [dptr],a
                @@_8A87h:
8A87 ED          mov  a,r5
8A88 30 E6 1A    jz   a.6,@@_8AA5h
                ;- - -
8A8B AB 2F       mov  r3,[iram_tmp__2Fh]
8A8D AA 30       mov  r2,[iram_tmp__30h]
8A8F A9 31       mov  r1,[iram_tmp__31h]
8A91 90 00 04    mov  dptr,0004h ;idx...
8A94 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
8A97 90 00 84    mov  dptr,xram_tmp__84h ;attr.lsb
8A9A F0          movx [dptr],a
8A9B 90 00 05    mov  dptr,0005h
8A9E 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
8AA1 90 00 85    mov  dptr,xram_tmp__85h ;attr.msb
8AA4 F0          movx [dptr],a
                @@_8AA5h:
8AA5 AB 2F       mov  r3,[iram_tmp__2Fh]                                ;\
8AA7 AA 30       mov  r2,[iram_tmp__30h]                                ;
8AA9 A9 31       mov  r1,[iram_tmp__31h]                                ;
8AAB 90 00 09    mov  dptr,0009h ;idx...                                ;
8AAE 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr          ;DECIMAL
8AB1 30 E4 2F    jz   a.4,@@not_decimal                                 ;
                ;- - -                                                  ;
8AB4 90 00 06    mov  dptr,0006h ;idx...                                ;
8AB7 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr      ;
8ABA 12 4D B1    call jmp_r2r1  ;----->                                 ;
8ABD 8E 35       mov  [iram_tmp__35h],r6                                ;
8ABF 8F 36       mov  [iram_tmp__36h],r7                                ;
8AC1 AB 2F       mov  r3,[iram_tmp__2Fh]                                ;
8AC3 AA 30       mov  r2,[iram_tmp__30h]                                ;
8AC5 A9 31       mov  r1,[iram_tmp__31h]                                ;
                ;with idx=0                                             ;
8AC7 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1                ;
8ACA FF          mov  r7,a      ;yloc                                   ;
8ACB 90 00 01    mov  dptr,0001h ;idx...                                ;
8ACE 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr            ;
8AD1 FD          mov  r5,a      ;xloc                                   ;
8AD2 90 00 85    mov  dptr,xram_tmp__85h ;attr.msb                      ;
8AD5 E0          movx a,[dptr]                                          ;
8AD6 C4          swap a                                                 ;
8AD7 54 F0       and  a,0F0h                                            ;
8AD9 FE          mov  r6,a                                              ;
8ADA 90 00 84    mov  dptr,xram_tmp__84h ;attr.lsb                      ;
8ADD E0          movx a,[dptr]                                          ;
8ADE 4E          or   a,r6                                              ;
8ADF FB          mov  r3,a      ;attr                                   ;
8AE0 12 88 1A    lcall osd_write_decimal        ;<------------- DECIMAL ;
                @@not_decimal:                                          ;/
                ;- - -
8AE3 AB 2F       mov  r3,[iram_tmp__2Fh]                                ;\
8AE5 AA 30       mov  r2,[iram_tmp__30h]                                ;
8AE7 A9 31       mov  r1,[iram_tmp__31h]                                ;
8AE9 90 00 09    mov  dptr,0009h ;idx...                                ;
8AEC 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr          ; HEX
8AEF 30 E5 2F    jz   a.5,@@not_hex                                     ;
                ;- - -                                                  ;
8AF2 90 00 06    mov  dptr,0006h ;idx...                                ;
8AF5 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr      ;
8AF8 12 4D B1    call jmp_r2r1  ;----->                                 ;
8AFB 8E 35       mov  [iram_tmp__35h],r6                                ;
8AFD 8F 36       mov  [iram_tmp__36h],r7                                ;
8AFF AB 2F       mov  r3,[iram_tmp__2Fh]                                ;
8B01 AA 30       mov  r2,[iram_tmp__30h]                                ;
8B03 A9 31       mov  r1,[iram_tmp__31h]                                ;
                ;with idx=0                                             ;
8B05 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1                ;
8B08 FF          mov  r7,a                                              ;
8B09 90 00 01    mov  dptr,0001h ;idx...                                ;
8B0C 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr            ;
8B0F FD          mov  r5,a                                              ;
8B10 90 00 85    mov  dptr,xram_tmp__85h ;attr.msb                      ;
8B13 E0          movx a,[dptr]                                          ;
8B14 C4          swap a                                                 ;
8B15 54 F0       and  a,0F0h                                            ;
8B17 FE          mov  r6,a                                              ;
8B18 90 00 84    mov  dptr,xram_tmp__84h ;attr.lsb                      ;
8B1B E0          movx a,[dptr]                                          ;
8B1C 4E          or   a,r6                                              ;
8B1D FB          mov  r3,a                                              ;
8B1E 12 99 56    call osd_write_hex16bit         ;<------------- HEX    ;
                @@not_hex:                                              ;/
                @@exit:
8B21 22          ret
                ;------------------
;:------------- ;:----------------- OSD code (clear window)
                ;------------------
                osd_clear_window_text:    ;outputs words with data=0000h
                 ;in: r3    = 01h or 03h or often 00h/01h   ;?
                 ;in: r5    = 08h or 03h or often 00h       ;?
                 ;in: r7    = 01h or 03h or often 00h       ;?
                 ;in: [iram_tmp__3Bh] = 1Eh or 1Dh or often 0Fh       ;?
                 ;- - -
8B22 8F 38       mov  [iram_tmp__38h],r7   ;R7
8B24 AA 05       mov  r2,r5(0)
8B26 90 00 93    mov  dptr,xram_tmp__93h
8B29 E5 38       mov  a,[iram_tmp__38h]    ;R7
8B2B F0          movx [dptr],a   ;curr.R7
                @@outer_lop:
8B2C EB          mov  a,r3              ;R3             ;\
8B2D C3          clr  c                                 ;
8B2E 95 38       sbc  a,[iram_tmp__38h] ;R3-R7   (lsb)  ; bizarre sub?
8B30 FF          mov  r7,a              ;R3-R7   (lsb)  ;
8B31 E4          clr  a                 ;0              ;
8B32 94 00       sbc  a,00h             ;R3-R7   (msb)  ;
8B34 FE          mov  r6,a              ;R3-R7   (msb)  ;/
8B35 7C 00       mov  r4,00h            ;0              ;\
8B37 EF          mov  a,r7              ;R3-R7   (lsb)  ;
8B38 25 38       add  a,[iram_tmp__38h] ;R3      (lsb)  ; bizarre UNDO sub???
8B3A FF          mov  r7,a              ;R3      (lsb)  ;
8B3B EC          mov  a,r4              ;0              ;
8B3C 3E          adc  a,r6              ;R3      (msb)  ;
8B3D FE          mov  r6,a              ;R3      (msb)  ;/
8B3E 90 00 93    mov  dptr,xram_tmp__93h
8B41 E0          movx a,[dptr]   ;curr.R7
8B42 D3          set  c
8B43 9F          sbc  a,r7       ;curr.R7 - R3
8B44 EE          mov  a,r6
8B45 64 80       xor  a,80h
8B47 F8          mov  r0,a
8B48 74 80       mov  a,80h
8B4A 98          sbc  a,r0
8B4B 40 03       jc   @@cont
8B4D 02 8B DE    jmp  @@outer_lop_end
                ;---
                @@cont:
8B50 12 7B D8    call get_window_addr   ;out:r6r7
8B53 90 00 8E    mov  dptr,xram_tmp__8Eh
8B56 12 AC 70    call get_window_width  ;out:[dptr]=addr, r6r7=width
8B59 90 00 93    mov  dptr,xram_tmp__93h
8B5C E0          movx a,[dptr]
8B5D FD          mov  r5,a
                 ;(r4 is still 00h from above)
8B5E 12 4A 94    call multiply_r6r7_by_r4r5
8B61 EA          mov  a,r2
8B62 2F          add  a,r7
8B63 FF          mov  r7,a
8B64 EC          mov  a,r4
8B65 3E          adc  a,r6
8B66 FE          mov  r6,a
8B67 90 00 90    mov  dptr,xram_tmp__90h
8B6A F0          movx [dptr],a
8B6B A3          inc  dptr ;=xram_tmp__91h
8B6C EF          mov  a,r7
8B6D F0          movx [dptr],a
8B6E 90 00 8F    mov  dptr,xram_tmp__8Fh
8B71 E0          movx a,[dptr]
8B72 2F          add  a,r7
8B73 F0          movx [dptr],a
8B74 90 00 8E    mov  dptr,xram_tmp__8Eh
8B77 E0          movx a,[dptr]
8B78 3E          adc  a,r6
8B79 F0          movx [dptr],a
8B7A E0          movx a,[dptr]
8B7B FC          mov  r4,a
8B7C A3          inc  dptr ;=xram_tmp__8Fh
8B7D E0          movx a,[dptr]
8B7E FD          mov  r5,a
8B7F EC          mov  a,r4
8B80 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
8B83 F0          movx [dptr],a
8B84 ED          mov  a,r5
8B85 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb
8B88 F0          movx [dptr],a
8B89 90 00 92    mov  dptr,xram_tmp__92h
8B8C EA          mov  a,r2
8B8D F0          movx [dptr],a
                @@inner_lop:                           ;lop...
8B8E EA          mov  a,r2
8B8F FF          mov  r7,a
8B90 C3          clr  c
8B91 E5 3B       mov  a,[iram_tmp__3Bh]
8B93 9F          sbc  a,r7
8B94 FF          mov  r7,a
8B95 E4          clr  a
8B96 94 00       sbc  a,00h
8B98 FE          mov  r6,a
8B99 EA          mov  a,r2
8B9A 7C 00       mov  r4,00h
8B9C 2F          add  a,r7
8B9D FF          mov  r7,a
8B9E EC          mov  a,r4
8B9F 3E          adc  a,r6
8BA0 FE          mov  r6,a
8BA1 90 00 92    mov  dptr,xram_tmp__92h
8BA4 E0          movx a,[dptr]
8BA5 D3          set  c
8BA6 9F          sbc  a,r7
8BA7 EE          mov  a,r6
8BA8 64 80       xor  a,80h
8BAA F8          mov  r0,a
8BAB 74 80       mov  a,80h
8BAD 98          sbc  a,r0
8BAE 50 25       jnc  @@inner_lop_end
                ;- - -
8BB0 90 00 8E    mov  dptr,xram_tmp__8Eh                ;\
8BB3 E0          movx a,[dptr]                          ;
8BB4 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb        ;
8BB7 F0          movx [dptr],a                          ;/
8BB8 A3          inc  dptr ;=IO_OSD_bgmap_data_msb      ;\
8BB9 E4          clr  a                                 ; output
8BBA F0          movx [dptr],a                          ; data = 0000h
8BBB 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb        ;
8BBE F0          movx [dptr],a                          ;/
8BBF 90 00 92    mov  dptr,xram_tmp__92h
8BC2 E0          movx a,[dptr]
8BC3 04          inc  a
8BC4 F0          movx [dptr],a
8BC5 90 00 8F    mov  dptr,xram_tmp__8Fh
8BC8 E0          movx a,[dptr]
8BC9 04          inc  a
8BCA F0          movx [dptr],a
8BCB 70 C1       jnz  a,@@inner_lop             ;... lop
8BCD 90 00 8E    mov  dptr,xram_tmp__8Eh
8BD0 E0          movx a,[dptr]
8BD1 04          inc  a
8BD2 F0          movx [dptr],a
8BD3 80 B9       sjmp @@inner_lop               ;... lop
                ;---
                @@inner_lop_end:
8BD5 90 00 93    mov  dptr,xram_tmp__93h
8BD8 E0          movx a,[dptr]
8BD9 04          inc  a
8BDA F0          movx [dptr],a
8BDB 02 8B 2C    ljmp @@outer_lop
                ;---
                @@outer_lop_end:
8BDE 22          ret
                ;------------------
;:------------- ;:----------------- FLASH code (write enable)
                ;------------------
                .macro defcode_flash_write_enable
                flash_write_enable:
                .if flash_version>=ver11sep2017  ;NEWER
8C23 12 BE CE      call general_flash_wait                ;-wait
8C26 90 FD DE      mov  dptr,IO_SPI_kick_stop_reset       ;\
8C29 74 80         mov  a,80h                             ;
8C2B F0            movx [dptr],a                          ;/
8C2C 90 FD DD      mov  dptr,IO_SPI_ready_flags           ;\
8C2F E4            clr  a                                 ;
8C30 F0            movx [dptr],a                          ;/
AB46 90 FD D6      mov  dptr,IO_SPI_flash_addr_lsb        ;\
AB49 74 FF         mov  a,0FFh                            ;
AB4B F0            movx [dptr],a                          ;
AB4C A3            inc  dptr ;=IO_SPI_flash_addr_mid      ; addr=FFFFFFh
AB4D F0            movx [dptr],a                          ;        ;NEW: const
AB4E A3            inc  dptr ;=IO_SPI_flash_addr_msb      ;
AB4F F0            movx [dptr],a                          ;/
AB50 90 FD E4      mov  dptr,IO_SPI_command_write         ;\
AB53 74 06         mov  a,06h                             ; WREN   ;NEW: const
AB55 F0            movx [dptr],a                          ;/
8C44 90 FD D0      mov  dptr,IO_SPI_transfer_mode         ;\
8C47 74 08         mov  a,08h                             ; FlashCmd08h
8C49 F0            movx [dptr],a                          ;/
                  @@wait_lop:                             ;\
8C4A 90 FD DD      mov  dptr,IO_SPI_ready_flags           ; wait
8C4D E0            movx a,[dptr]                          ;
AB60 30 E3 F9      jz   a.3,@@wait_lop                    ;/       ;NEW: a.3
8C50 12 BE CE      jmp  general_flash_wait                ;-wait   ;NEW: jmp
                .else ;- - - - - - - - - - - - - OLDER - - - - - - - - -
8BDF 8F 47         mov  [iram_tmp__47h],r7
8BE1 8E 46         mov  [iram_tmp__46h],r6
8BE3 8D 45         mov  [iram_tmp__45h],r5
8BE5 8C 44         mov  [iram_tmp__44h],r4
                  @@retry_endless_lop:
8BE7 E4            clr  a
8BE8 FF            mov  r7,a
8BE9 7E E0         mov  r6,0E000h/100h
8BEB FD            mov  r5,a
8BEC FC            mov  r4,a
8BED AB 47         mov  r3,[iram_tmp__47h]
8BEF AA 46         mov  r2,[iram_tmp__46h]
8BF1 A9 45         mov  r1,[iram_tmp__45h]
8BF3 A8 44         mov  r0,[iram_tmp__44h]
8BF5 C3            clr  c
8BF6 12 4C 9F      call compare_r4r5r6r7_equal_r0r1r2r3
8BF9 60 11         jz   a,@@valid_address_region
8BFB E4            clr  a
8BFC FF            mov  r7,a
8BFD 7E F0         mov  r6,0F000h/100h
8BFF FD            mov  r5,a
8C00 FC            mov  r4,a
8C01 A8 44         mov  r0,[iram_tmp__44h]
8C03 C3            clr  c
8C04 12 4C 9F      call compare_r4r5r6r7_equal_r0r1r2r3
8C07 60 03         jz   a,@@valid_address_region
8C09 00            nop                       ;uh?
8C0A 80 DB         sjmp @@retry_endless_lop  ;uh, retry compare? (=loop endless?)
                  ;---
                  @@valid_address_region:  ;okay, it's addr = E000h or F000h
                  ;- - - - -
8C0C E4            clr  a                                         ;\
8C0D FF            mov  r7,a                                      ;
8C0E 7E E0         mov  r6,0E000h/100h                            ;
8C10 FD            mov  r5,a                                      ;
8C11 FC            mov  r4,a                                      ;
8C12 AB 47         mov  r3,[iram_tmp__47h]                        ;
8C14 AA 46         mov  r2,[iram_tmp__46h]                        ;
8C16 A9 45         mov  r1,[iram_tmp__45h]                        ;
8C18 A8 44         mov  r0,[iram_tmp__44h]                        ;
8C1A C3            clr  c                                         ;
8C1B 12 4C 9F      call compare_r4r5r6r7_equal_r0r1r2r3           ;
8C1E 70 33         jnz  a,@@not_region_E000h                      ;/
8C20 12 B8 3D      call flash_set_wprot_to_unprotected   ;-unprotect
8C23 12 BE CE      call general_flash_wait               ;-wait
8C26 90 FD DE      mov  dptr,IO_SPI_kick_stop_reset      ;\
8C29 74 80         mov  a,80h                            ;
8C2B F0            movx [dptr],a                         ;/
8C2C 90 FD DD      mov  dptr,IO_SPI_ready_flags          ;\
8C2F E4            clr  a                                ;
8C30 F0            movx [dptr],a                         ;/
8C31 90 FD D6      mov  dptr,IO_SPI_flash_addr_lsb       ;\
8C34 F0            movx [dptr],a      ;addr.lsb          ;
8C35 A3            inc  dptr ;=IO_SPI_flash_addr_mid     ;
8C36 74 E0         mov  a,0E000h/100h                    ;
8C38 F0            movx [dptr],a      ;addr.mid          ;
8C39 A3            inc  dptr ;=IO_SPI_flash_addr_msb     ;
8C3A E4            clr  a                                ;
8C3B F0            movx [dptr],a      ;addr.msb          ;/
8C3C 90 00 0A      mov  dptr,xram_sett_cmd_wren          ;\
8C3F E0            movx a,[dptr]                         ; cmd_wren (06h=WREN)
8C40 90 FD E4      mov  dptr,IO_SPI_command_write        ;
8C43 F0            movx [dptr],a                         ;/
8C44 90 FD D0      mov  dptr,IO_SPI_transfer_mode        ;\
8C47 74 08         mov  a,08h                            ; FlashCmd08h
8C49 F0            movx [dptr],a                         ;/
                  @@wait_lop1:                           ;\
8C4A 90 FD DD      mov  dptr,IO_SPI_ready_flags          ; wait
8C4D E0            movx a,[dptr]                         ;
8C4E 60 FA         jz   a,@@wait_lop1                    ;/
8C50 12 BE CE      call general_flash_wait               ;-wait
                  @@not_region_E000h:
                  ;- - - - -
8C53 E4            clr  a                                         ;\
8C54 FF            mov  r7,a                                      ;
8C55 7E F0         mov  r6,0F000h/100h                            ;
8C57 FD            mov  r5,a                                      ;
8C58 FC            mov  r4,a                                      ;
8C59 AB 47         mov  r3,[iram_tmp__47h]                        ;
8C5B AA 46         mov  r2,[iram_tmp__46h]                        ;
8C5D A9 45         mov  r1,[iram_tmp__45h]                        ;
8C5F A8 44         mov  r0,[iram_tmp__44h]                        ;
8C61 C3            clr  c                                         ;
8C62 12 4C 9F      call compare_r4r5r6r7_equal_r0r1r2r3           ;
8C65 70 33         jnz  a,@@not_region_F000h                      ;/
8C67 12 B8 3D      call flash_set_wprot_to_unprotected    ;-unprotect
8C6A 12 BE CE      call general_flash_wait                ;-wait
8C6D 90 FD DE      mov  dptr,IO_SPI_kick_stop_reset       ;\
8C70 74 80         mov  a,80h                             ;
8C72 F0            movx [dptr],a                          ;/
8C73 90 FD DD      mov  dptr,IO_SPI_ready_flags           ;\
8C76 E4            clr  a                                 ;
8C77 F0            movx [dptr],a                          ;/
8C78 90 FD D6      mov  dptr,IO_SPI_flash_addr_lsb        ;\
8C7B F0            movx [dptr],a      ;addr.lsb           ;
8C7C A3            inc  dptr ;=IO_SPI_flash_addr_mid      ;
8C7D 74 F0         mov  a,0F000h/100h                     ;
8C7F F0            movx [dptr],a      ;addr.mid           ;
8C80 A3            inc  dptr ;=IO_SPI_flash_addr_msb      ;
8C81 E4            clr  a                                 ;
8C82 F0            movx [dptr],a      ;addr.msb           ;/
8C83 90 00 0A      mov  dptr,xram_sett_cmd_wren           ;\
8C86 E0            movx a,[dptr]                          ; cmd_wren (06h=WREN)
8C87 90 FD E4      mov  dptr,IO_SPI_command_write         ;
8C8A F0            movx [dptr],a                          ;/
8C8B 90 FD D0      mov  dptr,IO_SPI_transfer_mode         ;\
8C8E 74 08         mov  a,08h                             ; FlashCmd08h
8C90 F0            movx [dptr],a                          ;/
                  @@wait_lop2:                            ;\
8C91 90 FD DD      mov  dptr,IO_SPI_ready_flags           ; wait
8C94 E0            movx a,[dptr]                          ;
8C95 60 FA         jz   a,@@wait_lop2                     ;/
8C97 12 BE CE      call general_flash_wait                ;-wait
                  @@not_region_F000h:
8C9A 22            ret
                .endif ;flash_version<ver11sep2017
                .endm ;defcode_flash_write_enable
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_init_part_4
                .endif
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_flash_write_enable
                .endif
                ;------------------
;:------------- ;:----------------- GUI code ()
                ;------------------
                osd_write_string_type_A:      ;used 3x
8C9B 8B 38       mov  [iram_tmp__38h],r3      ;\
8C9D 8A 39       mov  [iram_tmp__39h],r2      ; src
8C9F 89 3A       mov  [iram_tmp__3Ah],r1      ;/
8CA1 8C 3B       mov  [iram_tmp__3Bh],r4      ;-
8CA3 8D 3C       mov  [iram_tmp__3Ch],r5      ;-highlight flags? for Attr/Attr2 select?
                @@lop:       ;"ylop" for multiple strings (till 16bit end flag)
8CA5 E5 3A       mov  a,[iram_tmp__3Ah]
8CA7 45 39       or   a,[iram_tmp__39h]
8CA9 45 38       or   a,[iram_tmp__38h]
8CAB 70 03       jnz  a,@@cont
8CAD 02 8D 53    jmp  @@exit
                ;---
                @@cont:
8CB0 E5 3C       mov  a,[iram_tmp__3Ch]                         ;\
8CB2 30 E7 1A    jz   a.7,@@_8CCFh                              ;
8CB5 AB 38       mov  r3,[iram_tmp__38h]                        ;
8CB7 AA 39       mov  r2,[iram_tmp__39h]                        ;
8CB9 A9 3A       mov  r1,[iram_tmp__3Ah]                        ;
8CBB 90 00 02    mov  dptr,0002h ;idxNameAttrLsb                ;
8CBE 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
8CC1 90 00 8E    mov  dptr,xram_tmp__8Eh                        ;
8CC4 F0          movx [dptr],a                                  ;
8CC5 90 00 03    mov  dptr,0003h ;idxNameAttrMsb                ;
8CC8 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
8CCB 90 00 8F    mov  dptr,xram_tmp__8Fh                        ;
8CCE F0          movx [dptr],a                                  ;
                @@_8CCFh:                                       ;/
8CCF E5 3C       mov  a,[iram_tmp__3Ch]                         ;\
8CD1 30 E6 1A    jz   a.6,@@_8CEEh                              ;
8CD4 AB 38       mov  r3,[iram_tmp__38h]                        ;
8CD6 AA 39       mov  r2,[iram_tmp__39h]                        ;
8CD8 A9 3A       mov  r1,[iram_tmp__3Ah]                        ;
8CDA 90 00 04    mov  dptr,0004h ;idxNameAttrLsb2               ;
8CDD 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
8CE0 90 00 8E    mov  dptr,xram_tmp__8Eh ;attr.lsb              ;
8CE3 F0          movx [dptr],a                                  ;
8CE4 90 00 05    mov  dptr,0005h ;idxNameAttrMsb2               ;
8CE7 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
8CEA 90 00 8F    mov  dptr,xram_tmp__8Fh ;attr.msb              ;
8CED F0          movx [dptr],a                                  ;
                @@_8CEEh:                                       ;/
8CEE AB 38       mov  r3,[iram_tmp__38h]
8CF0 AA 39       mov  r2,[iram_tmp__39h]
8CF2 A9 3A       mov  r1,[iram_tmp__3Ah]
8CF4 90 00 07    mov  dptr,0007h ;idxNameTxtProc
8CF7 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
8CFA EA          mov  a,r2
8CFB 49          or   a,r1
8CFC 4B          or   a,r3
8CFD 60 37       jz   a,@@lop_next
                ;- - -
8CFF AB 38       mov  r3,[iram_tmp__38h]
8D01 AA 39       mov  r2,[iram_tmp__39h]
8D03 A9 3A       mov  r1,[iram_tmp__3Ah]
8D05 90 00 07    mov  dptr,0007h ;idxNameTxtProc
8D08 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
8D0B 12 4D B1    call jmp_r2r1  ;----->
8D0E 8B 40       mov  [iram_tmp__40h],r3
8D10 8A 41       mov  [iram_tmp__41h],r2
8D12 89 42       mov  [iram_tmp__42h],r1
8D14 AB 38       mov  r3,[iram_tmp__38h]
8D16 AA 39       mov  r2,[iram_tmp__39h]
8D18 A9 3A       mov  r1,[iram_tmp__3Ah]
                ;with idx=0      ;idxNameYloc
8D1A 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
8D1D FF          mov  r7,a       ;yloc
8D1E 90 00 01    mov  dptr,0001h ;idxNameXloc
8D21 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
8D24 FD          mov  r5,a       ;xloc
8D25 90 00 8F    mov  dptr,xram_tmp__8Fh ;attr.msb
8D28 E0          movx a,[dptr]
8D29 C4          swap a
8D2A 54 F0       and  a,0F0h
8D2C FE          mov  r6,a
8D2D 90 00 8E    mov  dptr,xram_tmp__8Eh ;attr.lsb
8D30 E0          movx a,[dptr]
8D31 4E          or   a,r6
8D32 FB          mov  r3,a       ;attr
8D33 12 77 29    call osd_draw_string       ;------------>
                @@lop_next:
8D36 AB 38       mov  r3,[iram_tmp__38h]
8D38 AA 39       mov  r2,[iram_tmp__39h]
8D3A A9 3A       mov  r1,[iram_tmp__3Ah]
8D3C 90 00 0A    mov  dptr,000Ah ;idxNameFlags
8D3F 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
8D42 20 E3 0E    jnz  a.3,@@exit            ;<---- end flag
8D45 74 0C       mov  a,0Ch         ;raise
8D47 25 3A       add  a,[iram_tmp__3Ah]
8D49 F5 3A       mov  [iram_tmp__3Ah],a
8D4B E4          clr  a
8D4C 35 39       adc  a,[iram_tmp__39h]
8D4E F5 39       mov  [iram_tmp__39h],a
8D50 02 8C A5    ljmp @@lop
                ;---
                @@exit:
8D53 22          ret
                ;------------------
                gui_data_FactoryPic_VCOM_AC_show_value:
8D54 02          db   02h
8D55 0F          db   0Fh
8D56 02          db   02h
8D57 00          nop
8D58 04          db   04h
8D59 00          nop
8D5A FF BE EE    db   0FFh // dw get_settings_VCOM_AC
8D5D 00 18       dw   0018h   ;<--!
                ;---
                gui_data_FactoryPic_VCOM_AC_show:
8D5F FF 8D 54    db   0FFh // dw gui_data_FactoryPic_VCOM_AC_show_value
8D62 00 00 00    db   000h // dw 0000h
8D65 00 00 00    db   000h // dw 0000h
8D68 00 08       dw   0008h
                ;---
                gui_data_FactoryPic_VCOM_AC_name:
8D6A 02          db   02h
8D6B 01          db   01h
8D6C 02          db   02h
8D6D 00          nop
8D6E 04          db   04h
8D6F 00          nop
8D70 01          db   01h
8D71 FF BD 08    db   0FFh // dw get_txt_VCOM_AC
8D74 00 08       dw   0008h
                ;------------------
                gui_data_FactoryPic_VCOM_DC_show_value:
8D76 03          db   03h
8D77 0F          db   0Fh
8D78 02          db   02h
8D79 00          nop
8D7A 04          db   04h
8D7B 00          nop
8D7C FF BE BD    db   0FFh // dw get_settings_VCOM_DC_16bit
8D7F 00 18       dw   0018h   ;<--!
                ;---
                gui_data_FactoryPic_VCOM_DC_show:
8D81 FF 8D 76    db   0FFh // dw gui_data_FactoryPic_VCOM_DC_show_value
8D84 00 00 00    db   000h // dw 0000h
8D87 00 00 00    db   000h // dw 0000h
8D8A 00 08       dw   0008h
                ;---
                gui_data_FactoryPic_VCOM_DC_name:
8D8C 03          db   03h
8D8D 01          db   01h
8D8E 02          db   02h
8D8F 00          nop
8D90 04          db   04h
8D91 00          nop
8D92 01          db   01h
8D93 FF BD 17    db   0FFh // dw get_txt_VCOM_DC
8D96 00 08       dw   0008h
                ;------------------
                gui_data_FactoryPic_POWER_show_setting:
8D98 04          db   04h
8D99 0E          db   0Eh
8D9A 02          db   02h
8D9B 00          nop
8D9C 04          db   04h
8D9D 00          nop
8D9E 00          nop
8D9F 00          nop
8DA0 00          nop
8DA1 FF B4 B6    db   0FFh // dw get_txt_power_OFF_ON_SAVE
8DA4 00 08       dw   0008h
                ;---
                gui_data_FactoryPic_POWER_show:
8DA6 00 00 00    db   000h // dw 0000h
8DA9 00 00 00    db   000h // dw 0000h
8DAC FF 8D 98    db   0FFh // dw gui_data_FactoryPic_POWER_show_setting
8DAF 00 08       dw   0008h
                ;---
                gui_data_FactoryPic_POWER_name:
8DB1 04          db   04h
8DB2 01          db   01h
8DB3 02          db   02h
8DB4 00          nop
8DB5 04          db   04h
8DB6 00          nop
8DB7 01          db   01h
8DB8 FF BD 26    db   0FFh // dw get_txt_POWER
8DBB 00 08       dw   0008h
                ;------------------
                gui_data_FactoryPic_KEY_show_typekey:
8DBD 06          db   06h
8DBE 07          db   07h
8DBF 02          db   02h
8DC0 00          nop
8DC1 04          db   04h
8DC2 00          nop
8DC3 00          nop
8DC4 00          nop
8DC5 00          nop
8DC6 FF BF 66    db   0FFh // dw get_curr_keypadtype_text
8DC9 00 08       dw   0008h
                ;---
                gui_data_FactoryPic_KEY_show:
8DCB 00 00 00    db   000h // dw 0000h
8DCE 00 00 00    db   000h // dw 0000h
8DD1 FF 8D BD    db   0FFh // dw gui_data_FactoryPic_KEY_show_typekey
8DD4 00 08       dw   0008h
                ;---
                gui_data_FactoryPic_KEY_name:
8DD6 06          db   06h
8DD7 01          db   01h
8DD8 02          db   02h
8DD9 00          nop
8DDA 04          db   04h
8DDB 00          nop
8DDC 01          db   01h
8DDD FF BD 35    db   0FFh // dw get_txt_KEY
8DE0 00 08       dw   0008h
                ;------------------
                gui_data_FactoryPic_NOSIGNAL_show_setting:
8DE2 07          db   07h
8DE3 0D          db   0Dh
8DE4 02          db   02h
8DE5 00          nop
8DE6 04          db   04h
8DE7 00          nop
8DE8 00          nop
8DE9 00          nop
8DEA 00          nop
8DEB FF B4 D8    db   0FFh // dw get_txt_no_signal_BLUE_SNOW_BLACK
8DEE 00 08       dw   0008h
                ;---
                gui_data_FactoryPic_NOSIGNAL_show:
8DF0 00 00 00    db   000h // dw 0000h
8DF3 00 00 00    db   000h // dw 0000h
8DF6 FF 8D E2    db   0FFh // dw gui_data_FactoryPic_NOSIGNAL_show_setting
8DF9 00 08       dw   0008h
                ;---
                gui_data_FactoryPic_NOSIGNAL_name:
8DFB 07          db   07h
8DFC 01          db   01h
8DFD 02          db   02h
8DFE 00          nop
8DFF 04          db   04h
8E00 00          nop
8E01 01          db   01h
8E02 FF BD 44    db   0FFh // dw get_txt_NOSIGNAL
8E05 00 08       dw   0008h
                ;------------------
                gui_null_FactoryPic:
8E07 00          nop            ;here NOT followed by any further data !!!
8E08 00          nop            ;so "gui_null_Xxx" is just USELESS ZEROES,
8E09 00          nop            ;without any used/following data
8E0A 00          nop                    ;also for "gui_null_PowerOn"
8E0B 00          nop                    ;also for "gui_null_SourceMenu"
                ;------------------
;:------------- ;:----------------- OSD code (scale)
                ;------------------
                osd_set_text_scale_r7:  ;in: r7=txt.scale (1..4) (1=normal, 2=double, 3=?, 4=?)
                 ;note: double size is used for NoSignal (see A53Ch)
8E0C 90 00 98    mov  dptr,xram_current_window          ;\
8E0F E0          movx a,[dptr]                          ; window
8E10 FE          mov  r6,a      ;window                 ;
8E11 70 46       jnz  a,@@not_window_0                  ;/
                ;- - -
8E13 EF          mov  a,r7      ;param                  ;\
8E14 C3          clr  c                                 ; param
8E15 94 02       sbc  a,02h                             ;
8E17 40 29       jc   @@window_0_param_0_or_1           ;/
                ;- - -
                ;@@window_0_param_2_or_higher:
8E19 90 FB 2B    mov  dptr,IO_OSD_window_0_vscale_upper         ;\
8E1C 74 FF       mov  a,0FFh                                    ;
8E1E F0          movx [dptr],a      ;=FFh                       ; 3xFFh
8E1F A3          inc  dptr ;=IO_OSD_window_0_vscale_upmid       ;
8E20 F0          movx [dptr],a      ;=FFh                       ;
8E21 A3          inc  dptr ;=IO_OSD_window_0_vscale_lomid       ;
8E22 F0          movx [dptr],a      ;=FFh                       ;/
8E23 90 FB 2F    mov  dptr,IO_OSD_window_0_hscale_left          ;\
8E26 F0          movx [dptr],a      ;=FFh                       ;
8E27 A3          inc  dptr ;=IO_OSD_window_0_hscale_mid         ; 3xFFh
8E28 F0          movx [dptr],a      ;=FFh                       ;
8E29 A3          inc  dptr ;=IO_OSD_window_0_hscale_right       ;
8E2A F0          movx [dptr],a      ;=FFh                       ;/
8E2B 1F          dec  r7           ;param-1 (=1..FEh)
8E2C 1F          dec  r7           ;param-2 (=0..FDh)
8E2D EF          mov  a,r7         ;param-2 (=0..FDh)
8E2E C4          swap a
8E2F 54 F0       and  a,0F0h
8E31 FF          mov  r7,a            ;N*10h
8E32 25 E0       add  a,a             ;N*20h
8E34 25 E0       add  a,a             ;N*40h
8E36 42 07       or   r7(0),a         ;N*40h+N*10h
8E38 A3          inc  dptr ;=IO_OSD_window_0_scale
8E39 E0          movx a,[dptr]
8E3A 54 0F       and  a,0Fh             ;old bits (whatever other stuff)
8E3C F0          movx [dptr],a
8E3D E0          movx a,[dptr]
8E3E 4F          or   a,r7              ;new bits
8E3F F0          movx [dptr],a
8E40 80 17       sjmp @@window_0_done
                ;---
                @@window_0_param_0_or_1:
8E42 EF          mov  a,r7         ;param
8E43 64 01       xor  a,01h
8E45 70 12       jnz  a,@@window_0_reject_param_0
                ;- - -
                ;@@window_0_param_1:
8E47 90 FB 2B    mov  dptr,IO_OSD_window_0_vscale_upper         ;\
8E4A F0          movx [dptr],a      ;=00h                       ;
8E4B A3          inc  dptr ;=IO_OSD_window_0_vscale_upmid       ; 3x00h
8E4C F0          movx [dptr],a      ;=00h                       ;
8E4D A3          inc  dptr ;=IO_OSD_window_0_vscale_lomid       ;
8E4E F0          movx [dptr],a      ;=00h                       ;/
8E4F 90 FB 2F    mov  dptr,IO_OSD_window_0_hscale_left          ;\
8E52 F0          movx [dptr],a      ;=00h                       ;
8E53 A3          inc  dptr ;=IO_OSD_window_0_hscale_mid         ; 3x00h
8E54 F0          movx [dptr],a      ;=00h                       ;
8E55 A3          inc  dptr ;=IO_OSD_window_0_hscale_right       ;
8E56 F0          movx [dptr],a      ;=00h                       ;/
8E57 A3          inc  dptr ;=IO_OSD_window_0_scale      ;\1x00h ;uh, should change 4bit?
8E58 F0          movx [dptr],a      ;=00h               ;/      ;but smashes whole 8bit?
                @@window_0_reject_param_0:
                @@window_0_done:
                @@not_window_0:
                ;- - - -
8E59 EE          mov  a,r6
8E5A B4 01 12    jne  a,01h,@@not_window_1
8E5D 1F          dec  r7           ;(param-1)                 ;=0..3 (2bit)
8E5E EF          mov  a,r7         ;(param-1)                 ;=0..3
8E5F 25 E0       add  a,a          ;(param-1)*2               ;=0..6
8E61 25 E0       add  a,a          ;(param-1)*4               ;=0..C
8E63 42 07       or   r7(0),a      ;(param-1)*4 or (param-1)  ;=0..F (2x2bit) ... probably ScaleX and ScaleY, 2bit each?
8E65 90 FB 33    mov  dptr,IO_OSD_window_1_and_2_scale
8E68 E0          movx a,[dptr]
8E69 54 F0       and  a,0F0h       ;old bits (for window 2)
8E6B F0          movx [dptr],a
8E6C E0          movx a,[dptr]
8E6D 4F          or   a,r7         ;new bits (for window 1)
8E6E F0          movx [dptr],a
                @@not_window_1:
                ;- - - -
8E6F 90 00 98    mov  dptr,xram_current_window
8E72 E0          movx a,[dptr]
8E73 64 02       xor  a,02h
8E75 70 16       jnz  a,@@not_window_2
8E77 1F          dec  r7
8E78 EF          mov  a,r7
8E79 C4          swap a
8E7A 54 F0       and  a,0F0h
8E7C FF          mov  r7,a
8E7D 25 E0       add  a,a
8E7F 25 E0       add  a,a
8E81 42 07       or   r7(0),a
8E83 90 FB 33    mov  dptr,IO_OSD_window_1_and_2_scale
8E86 E0          movx a,[dptr]
8E87 54 F0       and  a,0F0h       ;<-- BUG: should be "0Fh"
8E89 F0          movx [dptr],a
8E8A E0          movx a,[dptr]
8E8B 4F          or   a,r7
8E8C F0          movx [dptr],a
                @@not_window_2:
                ;- - - -
8E8D 90 00 98    mov  dptr,xram_current_window
8E90 E0          movx a,[dptr]
8E91 FE          mov  r6,a
8E92 B4 03 12    jne  a,03h,@@not_window_3
8E95 1F          dec  r7
8E96 EF          mov  a,r7
8E97 25 E0       add  a,a
8E99 25 E0       add  a,a
8E9B 42 07       or   r7(0),a
8E9D 90 FB 34    mov  dptr,IO_OSD_window_3_and_4_scale
8EA0 E0          movx a,[dptr]
8EA1 54 F0       and  a,0F0h
8EA3 F0          movx [dptr],a
8EA4 E0          movx a,[dptr]
8EA5 4F          or   a,r7
8EA6 F0          movx [dptr],a
                @@not_window_3:
                ;- - - -
8EA7 EE          mov  a,r6
8EA8 64 04       xor  a,04h
8EAA 70 16       jnz  a,@@not_window_4
8EAC 1F          dec  r7
8EAD EF          mov  a,r7
8EAE C4          swap a
8EAF 54 F0       and  a,0F0h
8EB1 FF          mov  r7,a
8EB2 25 E0       add  a,a
8EB4 25 E0       add  a,a
8EB6 42 07       or   r7(0),a
8EB8 90 FB 34    mov  dptr,IO_OSD_window_3_and_4_scale
8EBB E0          movx a,[dptr]
8EBC 54 F0       and  a,0F0h       ;<-- BUG: should be "0Fh"
8EBE F0          movx [dptr],a
8EBF E0          movx a,[dptr]
8EC0 4F          or   a,r7
8EC1 F0          movx [dptr],a
                @@not_window_4:
                ;- - - -
8EC2 22          ret
                ;------------------
;:------------- ;:----------------- FLASH code (read data, get id)
                ;------------------
                .macro defcode_read_flash
                .if flash_version>=ver11sep2017
                  read_flash_settings_1:   ;READ FLASH !!!
8659 90 00 AE      mov  dptr,xram_settings_1_addr       ;\
865C E0            movx a,[dptr]                        ;
865D FC            mov  r4,a                            ;
865E A3            inc  dptr                            ; uh, force FIXED
865F E0            movx a,[dptr]                        ; src addr ???
8660 FD            mov  r5,a                            ;
8661 A3            inc  dptr                            ;
8662 E0            movx a,[dptr]                        ;
8663 FE            mov  r6,a                            ;
8664 A3            inc  dptr                            ;
8665 E0            movx a,[dptr]                        ;
8666 FF            mov  r7,a                            ;/
                  ;- - - - - - ------
                  read_flash:     ;READ FLASH !!!
8667 7B 01         mov  r3,01h            ;memtype?=01h ;ram.addr.area ;\
8669 7A 00         mov  r2,xram_settings_start/100h     ;ram.addr.msb  ;
866B 79 08         mov  r1,xram_settings_start and 0ffh ;ram.addr.lsb  ;/
866D 75 31 00      mov  [iram_tmp__31h],xram_settings_size/100h        ;\
8670 75 32 36      mov  [iram_tmp__32h],xram_settings_size and 0ffh    ;/
                .else
                  read_flash:     ;READ FLASH !!!
                .endif
                ;- - - - - - ------
92DC 8F 2D       mov  [iram_tmp__2Dh],r7       ;flash.addr.lsb
92DE 8E 2C       mov  [iram_tmp__2Ch],r6       ;flash.addr.msb
92E0 8D 2B       mov  [iram_tmp__2Bh],r5
92E2 8C 2A       mov  [iram_tmp__2Ah],r4
92E4 8B 2E       mov  [iram_tmp__2Eh],r3       ;memtype?=01h
92E6 8A 2F       mov  [iram_tmp__2Fh],r2
92E8 89 30       mov  [iram_tmp__30h],r1
                .if flash_version<ver11sep2017
92EA 12 BB 45      call flash_write_disable
92ED 12 B6 4E      call flash_set_wprot_to_bugged_protected
                .endif
92F0 12 BE CE    call general_flash_wait                ;-wait
92F3 90 FD DE    mov  dptr,IO_SPI_kick_stop_reset       ;\
92F6 74 80       mov  a,80h                             ;
92F8 F0          movx [dptr],a                          ;/
92F9 E4          clr  a
92FA F5 33       mov  [iram_tmp__33h],a
92FC F5 34       mov  [iram_tmp__34h],a         ;index.lsb=0
                @@byte_lop:
92FE C3          clr  c                                 ;\
92FF E5 34       mov  a,[iram_tmp__34h]  ;index.lsb=0   ;
9301 95 32       sbc  a,[iram_tmp__32h]  ;len.lsb=31h ? ;
9303 E5 33       mov  a,[iram_tmp__33h]                 ;
9305 95 31       sbc  a,[iram_tmp__31h]  ;len.msb       ;
9307 50 74       jnc  @@done                            ;/
9309 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;\
930C E4          clr  a                                 ;
930D F0          movx [dptr],a                          ;/
930E 90 FD D6    mov  dptr,IO_SPI_flash_addr_lsb
9311 E5 2D       mov  a,[iram_tmp__2Dh]       ;flash.addr.lsb
9313 F0          movx [dptr],a     ;OUT.LSW ?
9314 FF          mov  r7,a
9315 AE 2C       mov  r6,[iram_tmp__2Ch]      ;flash.addr.msb
9317 AD 2B       mov  r5,[iram_tmp__2Bh]
9319 AC 2A       mov  r4,[iram_tmp__2Ah]
931B 78 08       mov  r0,08h
931D 12 4C B0    call shift_right_r4r5r6r7_by_r0
9320 A3          inc  dptr ;=IO_SPI_flash_addr_mid
9321 EF          mov  a,r7
9322 F0          movx [dptr],a     ;OUT.MID ?
9323 AF 2D       mov  r7,[iram_tmp__2Dh]      ;flash.addr.lsb
9325 AE 2C       mov  r6,[iram_tmp__2Ch]      ;flash.addr.msb
9327 AD 2B       mov  r5,[iram_tmp__2Bh]
9329 AC 2A       mov  r4,[iram_tmp__2Ah]
932B 78 10       mov  r0,10h
932D 12 4C B0    call shift_right_r4r5r6r7_by_r0
9330 A3          inc  dptr ;=IO_SPI_flash_addr_msb
9331 EF          mov  a,r7
9332 F0          movx [dptr],a     ;OUT.MSW ?
9333 90 FD D0    mov  dptr,IO_SPI_transfer_mode         ;\
9336 74 10       mov  a,10h                             ; FlashCmd10h
9338 F0          movx [dptr],a     ;OUT.ctrl.10h ???    ;/
9339 E4          clr  a
933A FF          mov  r7,a     ;timeout.index
                @@timeout_lop:
933B 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;\
933E E0          movx a,[dptr]                          ; wait TILL 10h here!!!
                .if flash_version<ver11sep2017          ;
933F B4 10 15      jne  a,10h,@@not_ready   ;A=10h      ;
                .else                                   ;
                   jz   a.4,@@not_ready     ;A,bit4     ;
                .endif                                  ;/
9342 90 FD D2    mov  dptr,IO_SPI_manual_data_read      ;\read DATA manually
9345 E0          movx a,[dptr]     ;IN.DATA !!!         ;/(via non-DMA)
9346 AB 2E       mov  r3,[iram_tmp__2Eh]          ;memtype?=01h
9348 AA 2F       mov  r2,[iram_tmp__2Fh]
934A A9 30       mov  r1,[iram_tmp__30h]
934C 85 34 82    mov  dpl,[iram_tmp__34h]         ;index.lsb=0
934F 85 33 83    mov  dph,[iram_tmp__33h]
9352 12 4A 72    call anymem_store_8bit_a_to_mem_r3r2r1dptr    ;----------->
9355 80 04       sjmp @@byte_done
                ;---
                @@not_ready:                            ;\
9357 0F          inc  r7       ;timeout.index           ;
9358 BF 14 E0    jne  r7,14h,@@timeout_lop              ;/
                @@byte_done:
935B E5 2D       mov  a,[iram_tmp__2Dh]       ;flash.addr.lsb
935D 24 01       add  a,01h
935F F5 2D       mov  [iram_tmp__2Dh],a       ;flash.addr.lsb
9361 E4          clr  a
9362 35 2C       adc  a,[iram_tmp__2Ch]       ;flash.addr.msb
9364 F5 2C       mov  [iram_tmp__2Ch],a       ;flash.addr.msb
9366 E4          clr  a
9367 35 2B       adc  a,[iram_tmp__2Bh]
9369 F5 2B       mov  [iram_tmp__2Bh],a
936B E4          clr  a
936C 35 2A       adc  a,[iram_tmp__2Ah]
936E F5 2A       mov  [iram_tmp__2Ah],a
9370 12 BE CE    call general_flash_wait                ;-wait
9373 05 34       inc  [iram_tmp__34h]     ;index.lsb=0
9375 E5 34       mov  a,[iram_tmp__34h]   ;index.lsb=0  ;\
9377 70 85       jnz  a,@@byte_lop                      ;
9379 05 33       inc  [iram_tmp__33h]                   ;
937B 80 81       sjmp @@byte_lop                        ;/
                ;---
                @@done:
937D 22          ret
                .endm ;defcode_read_flash
                ;------------------
                .macro defcode_flash_get_chip_id
                ;exists ".if flash_version>=ver11sep2017" only
                flash_get_chip_id:
870F 8B 26       mov  [iram_tmp__26h],r3        ;\
8711 8A 27       mov  [iram_tmp__27h],r2        ; dst
8713 89 28       mov  [iram_tmp__28h],r1        ;/
8715 12 B8 2F    call general_flash_wait                ;-wait
8718 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;\
871B E4          clr  a                                 ;
871C F0          movx [dptr],a                          ;/
871D A3          inc  dptr ;=IO_SPI_kick_stop_reset     ;\
871E 74 80       mov  a,80h                             ;
8720 F0          movx [dptr],a                          ;/
8721 90 FD D0    mov  dptr,IO_SPI_transfer_mode         ;\
8724 74 01       mov  a,01h                             ; FlashCmd01h
8726 F0          movx [dptr],a                          ;/
                @@wait_lop:                             ;\
8727 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;
872A E0          movx a,[dptr]                          ;
872B 30 E0 F9    jz   a.0,@@wait_lop                    ;/
872E 90 FD D3    mov  dptr,IO_SPI_chip_id_read_msb              ;\
8731 E0          movx a,[dptr]                                  ;
8732 AB 26       mov  r3,[iram_tmp__26h]                        ; get byte0 (msb)
8734 AA 27       mov  r2,[iram_tmp__27h]                        ;
8736 A9 28       mov  r1,[iram_tmp__28h]                        ;
8738 12 49 3D    call anymem_store_8bit_a_to_mem_r3r2r1         ;/
873B 90 FD D4    mov  dptr,IO_SPI_chip_id_read_mid              ;\
873E E0          movx a,[dptr]                                  ;
873F AB 26       mov  r3,[iram_tmp__26h]                        ; get byte1 (mid)
8741 AA 27       mov  r2,[iram_tmp__27h]                        ;
8743 A9 28       mov  r1,[iram_tmp__28h]                        ;
8745 90 00 01    mov  dptr,0001h ;idx...                        ;
8748 12 49 4F    call anymem_store_8bit_a_to_mem_r3r2r1dptr     ;/
874B 90 FD D5    mov  dptr,IO_SPI_chip_id_read_lsb              ;\
874E E0          movx a,[dptr]                                  ; get byte2 (lsb,maker)
874F 90 00 02    mov  dptr,0002h ;idx...                        ;
8752 12 49 4F    call anymem_store_8bit_a_to_mem_r3r2r1dptr     ;/
8755 12 B8 2F    call general_flash_wait                        ;-wait
                ;---now MUL2 to "fix" the weirdly rotated 24bit value...
8758 AB 26       mov  r3,[iram_tmp__26h]                        ;\
875A AA 27       mov  r2,[iram_tmp__27h]                        ;
875C A9 28       mov  r1,[iram_tmp__28h]                        ; byte2.bit7
875E 90 00 02    mov  dptr,0002h ;idx...                        ;
8761 12 48 BB    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
8764 54 80       and  a,80h                                     ;
8766 FF          mov  r7,a                                      ;/
8767 90 00 01    mov  dptr,0001h ;idx...                        ;\
876A 12 48 BB    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ; byte1.bit7
876D 54 80       and  a,80h                                     ;
876F FE          mov  r6,a                                      ;/
8770 12 48 A2    call anymem_read_8bit_a_from_mem_r3r2r1        ;\
8773 FD          mov  r5,a                                      ; byte0.bit7
8774 54 80       and  a,80h                                     ;
8776 F5 29       mov  [iram_tmp__29h],a    ;<-- what/why????    ;/  (discarded MSB carry-out?)
8778 E9          mov  a,r1                                      ;\
8779 24 02       add  a,02h    ;addr+2                          ;
877B F9          mov  r1,a                                      ;
877C E4          clr  a                                         ; byte2*2
877D 3A          adc  a,r2                                      ;
877E FA          mov  r2,a                                      ;
877F 12 48 A2    call anymem_read_8bit_a_from_mem_r3r2r1        ;
8782 25 E0       add  a,a                                       ;
8784 12 49 3D    call anymem_store_8bit_a_to_mem_r3r2r1         ;/
8787 AB 26       mov  r3,[iram_tmp__26h]                        ;\
8789 E5 28       mov  a,[iram_tmp__28h]                         ;
878B 24 01       add  a,01h    ;addr+1                          ;
878D F9          mov  r1,a                                      ; byte1*2
878E E4          clr  a                                         ;
878F 35 27       adc  a,[iram_tmp__27h]                         ;
8791 FA          mov  r2,a                                      ;
8792 12 48 A2    call anymem_read_8bit_a_from_mem_r3r2r1        ;
8795 25 E0       add  a,a                                       ;
8797 12 49 3D    call anymem_store_8bit_a_to_mem_r3r2r1         ;/
879A EF          mov  a,r7                                      ;\
879B C4          swap a                                         ;
879C 13          rcr  a                                         ;
879D 13          rcr  a                                         ;
879E 13          rcr  a                                         ; byte1+(byte2.bit7)
879F 54 01       and  a,01h                                     ;
87A1 AB 26       mov  r3,[iram_tmp__26h]                        ;
87A3 AA 27       mov  r2,[iram_tmp__27h]                        ;
87A5 A9 28       mov  r1,[iram_tmp__28h]                        ;
87A7 90 00 01    mov  dptr,0001h ;idx...                        ;
87AA 12 49 0A    call anymem_add_8bit_a_to_mem_r3r2r1dptr       ;/
87AD ED          mov  a,r5  ;byte0                              ;\
87AE 25 E0       add  a,a                                       ; byte0*2
87B0 12 49 3D    call anymem_store_8bit_a_to_mem_r3r2r1         ;/
87B3 EE          mov  a,r6                                      ;\
87B4 C4          swap a                                         ;
87B5 13          rcr  a                                         ;
87B6 13          rcr  a                                         ;
87B7 13          rcr  a                                         ; byte0+(byte1.bit7)
87B8 54 01       and  a,01h                                     ;
87BA AB 26       mov  r3,[iram_tmp__26h]                        ;
87BC AA 27       mov  r2,[iram_tmp__27h]                        ;
87BE A9 28       mov  r1,[iram_tmp__28h]                        ;
87C0 02 48 E8    jmp  anymem_add_8bit_a_to_mem_r3r2r1           ;/
                .endm ;defcode_flash_get_chip_id
                ;------------------
;:------------- ;:----------------- KEYPAD code (level2key)
                ;------------------
                .macro defcode_do_level2key_stuff
                do_level2key_stuff:     ;... more higher level get keyboard ...
8F79 78 7F       mov  r0,xram_tmp__7Fh and 0ffh ;\
8F7B 7C 00       mov  r4,xram_tmp__7Fh/100h     ; dst (007Fh,0080h)
8F7D 7D 01       mov  r5,01h           ;area    ;/
8F7F 7B FF       mov  r3,0FFh                   ;\
8F81 7A BF       mov  r2,xxx_BFC9h/100h         ; src
8F83 79 C9       mov  r1,xxx_BFC9h and 0ffh     ;/
8F85 7E 00       mov  r6,00h  ;\len 2
8F87 7F 02       mov  r7,02h  ;/
8F89 12 49 C1    call anymem_generic_memcopy
8F8C 90 00 54    mov  dptr,xram_level2key_phase
8F8F E0          movx a,[dptr]
8F90 14          dec  a
8F91 60 13       jz   a,@@key_phase_1   ;1
8F93 14          dec  a
8F94 60 24       jz   a,@@key_phase_2   ;2
8F96 14          dec  a
8F97 60 38       jz   a,@@key_phase_3   ;3
8F99 24 03       add  a,03h
8F9B 60 03       jz   a,@@key_phase_0   ;0
8F9D 02 90 2A    jmp  @@return_cy_set   ;other
                ;---
                @@key_phase_0:
8FA0 90 00 54    mov  dptr,xram_level2key_phase
8FA3 74 01       mov  a,01h            ;next phase?
8FA5 F0          movx [dptr],a
                @@key_phase_1:
8FA6 7B 01       mov  r3,01h          ;area           ;\                ;\
8FA8 7A 00       mov  r2,xram_level2key_base/100h     ; dst             ;
8FAA 79 55       mov  r1,xram_level2key_base and 0ffh ;/                ;
8FAC 12 93 7E    call xxx_937Eh         ;... get keyboard higher level  ;
8FAF EF          mov  a,r7                                              ;
8FB0 70 78       jnz  a,@@return_cy_set                                 ;/
                ;- - -
8FB2 90 00 54    mov  dptr,xram_level2key_phase
8FB5 74 02       mov  a,02h
8FB7 F0          movx [dptr],a
8FB8 80 70       sjmp @@return_cy_set
                ;---
                @@key_phase_2:
8FBA 90 00 55    mov  dptr,xram_level2key_curr_button   ;\
8FBD E0          movx a,[dptr]                          ;
8FBE FF          mov  r7,a      ;<---                   ;
8FBF A3          inc  dptr ;=xram_level2key_old_button  ;
8FC0 E0          movx a,[dptr]                          ;
8FC1 90 00 54    mov  dptr,xram_level2key_phase         ;
8FC4 B5 07 05    jne  a,r7(0),@@_8FCCh                  ;/
8FC7 74 01       mov  a,01h
8FC9 F0          movx [dptr],a ;[xram_level2key_phase]    ;... key repeat?
8FCA 80 5E       sjmp @@return_cy_set
                ;---
                @@_8FCCh:
8FCC 74 03       mov  a,03h
8FCE F0          movx [dptr],a ;[xram_level2key_phase]    ;... key repeat?
8FCF 80 59       sjmp @@return_cy_set
                ;---
                @@key_phase_3:
8FD1 90 00 56    mov  dptr,xram_level2key_old_button
8FD4 E0          movx a,[dptr]
8FD5 60 20       jz   a,@@_8FF7h
8FD7 90 00 80    mov  dptr,xram_tmp__80h
8FDA 74 08       mov  a,08h
8FDC F0          movx [dptr],a
8FDD 90 00 56    mov  dptr,xram_level2key_old_button    ;\
8FE0 E0          movx a,[dptr]                          ;
8FE1 90 00 7F    mov  dptr,xram_tmp__7Fh ;temp.button   ;
8FE4 F0          movx [dptr],a                          ;/
8FE5 75 2D 01    mov  [iram_tmp__2Dh],01h          ;area     ;\
8FE8 75 2E 00    mov  [iram_tmp__2Eh],xram_tmp__7Fh/100h     ; temp.button
8FEB 75 2F 7F    mov  [iram_tmp__2Fh],xram_tmp__7Fh and 0ffh ;/
8FEE 7B 01       mov  r3,01h               ;area        ;\
8FF0 7A 00       mov  r2,xram_keybuf_7byte_B/100h       ; addr
8FF2 79 77       mov  r1,xram_keybuf_7byte_B and 0ffh   ;/
8FF4 12 05 1A    call xxx_051Ah
                @@_8FF7h:
8FF7 90 00 55    mov  dptr,xram_level2key_curr_button   ;\
8FFA E0          movx a,[dptr]                          ;
8FFB 60 20       jz   a,@@_901Dh                        ;/
8FFD 90 00 80    mov  dptr,xram_tmp__80h
9000 74 04       mov  a,04h
9002 F0          movx [dptr],a
9003 90 00 55    mov  dptr,xram_level2key_curr_button   ;\
9006 E0          movx a,[dptr]                          ;
9007 90 00 7F    mov  dptr,xram_tmp__7Fh                ;
900A F0          movx [dptr],a                          ;/
900B 75 2D 01    mov  [iram_tmp__2Dh],01h          ;area     ;\
900E 75 2E 00    mov  [iram_tmp__2Eh],xram_tmp__7Fh/100h     ; temp.button
9011 75 2F 7F    mov  [iram_tmp__2Fh],xram_tmp__7Fh and 0ffh ;/
9014 7B 01       mov  r3,01h             ;area          ;\          ;XXXkey
9016 7A 00       mov  r2,xram_keybuf_7byte_B/100h       ; addr
9018 79 77       mov  r1,xram_keybuf_7byte_B and 0ffh   ;/
901A 12 05 1A    call xxx_051Ah
                @@_901Dh:
901D 90 00 55    mov  dptr,xram_level2key_curr_button   ;\
9020 E0          movx a,[dptr]                          ;
9021 A3          inc  dptr ;=xram_level2key_old_button  ;
9022 F0          movx [dptr],a                          ;/
9023 E4          clr  a                                 ;\
9024 90 00 54    mov  dptr,xram_level2key_phase         ;
9027 F0          movx [dptr],a                          ;/
9028 C3          clr  c
9029 22          ret
                ;---
                @@return_cy_set:
902A D3          set  c
902B 22          ret
                .endm ;defcode_do_level2key_stuff
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_read_flash
                  defcode_flash_get_chip_id    ;<-- NEW VERSION ONLY
                  defcode_do_level2key_stuff
                  defdata_contrast
                .endif
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_flash_erase_block
                  defcode_do_level2key_stuff
                .endif
                ;------------------
;:------------- ;:----------------- GUI code (whatever)
                ;------------------
                xxx_902Ch:      ;used for ;idxItem_0Bh -AND ALSO- ;idxMenu___15h
902C 8B 2A       mov  [iram_tmp__2Ah],r3
902E 8A 2B       mov  [iram_tmp__2Bh],r2
9030 89 2C       mov  [iram_tmp__2Ch],r1
9032 8C 2D       mov  [iram_tmp__2Dh],r4
9034 8D 2E       mov  [iram_tmp__2Eh],r5
                @@lop:
9036 E5 2C       mov  a,[iram_tmp__2Ch]
9038 45 2B       or   a,[iram_tmp__2Bh]
903A 45 2A       or   a,[iram_tmp__2Ah]
903C 70 03       jnz  a,@@cont
903E 02 90 DD    jmp  @@exit
                ;---
                @@cont:
9041 E5 2E       mov  a,[iram_tmp__2Eh]                         ;\
9043 30 E7 10    jz   a.7,@@_9056h                              ;
9046 AB 2A       mov  r3,[iram_tmp__2Ah]                        ;
9048 AA 2B       mov  r2,[iram_tmp__2Bh]                        ;
904A A9 2C       mov  r1,[iram_tmp__2Ch]                        ;
904C 90 00 04    mov  dptr,0004h ;idx...                        ;
904F 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
9052 90 00 84    mov  dptr,xram_tmp__84h                        ;
9055 F0          movx [dptr],a   ;mode (0..6)                   ;
                @@_9056h:                                       ;/
9056 E5 2E       mov  a,[iram_tmp__2Eh]                         ;\
9058 30 E6 10    jz   a.6,@@_906Bh                              ;
905B AB 2A       mov  r3,[iram_tmp__2Ah]                        ;
905D AA 2B       mov  r2,[iram_tmp__2Bh]                        ;
905F A9 2C       mov  r1,[iram_tmp__2Ch]                        ;
9061 90 00 05    mov  dptr,0005h        ;...                    ;
9064 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
9067 90 00 84    mov  dptr,xram_tmp__84h                        ;
906A F0          movx [dptr],a   ;mode (0..6)                   ;
                @@_906Bh:                                       ;/
906B AB 2A       mov  r3,[iram_tmp__2Ah]
906D AA 2B       mov  r2,[iram_tmp__2Bh]
906F A9 2C       mov  r1,[iram_tmp__2Ch]
9071 90 00 06    mov  dptr,0006h ;idx...        ;...proc.get.src
9074 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
9077 EA          mov  a,r2
9078 49          or   a,r1
9079 4B          or   a,r3
907A 60 44       jz   a,@@_90C0h
907C AB 2A       mov  r3,[iram_tmp__2Ah]
907E AA 2B       mov  r2,[iram_tmp__2Bh]
9080 A9 2C       mov  r1,[iram_tmp__2Ch]
9082 90 00 06    mov  dptr,0006h ;idx...        ;...proc.get.src
9085 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
9088 12 4D B1    call jmp_r2r1  ;----->
908B 8B 34       mov  [iram_tmp__34h],r3   ;src.area
908D 8A 35       mov  [iram_tmp__35h],r2   ;src.msb
908F 89 36       mov  [iram_tmp__36h],r1   ;src.lsb
9091 AB 2A       mov  r3,[iram_tmp__2Ah]
9093 AA 2B       mov  r2,[iram_tmp__2Bh]
9095 A9 2C       mov  r1,[iram_tmp__2Ch]
                ;with idx=0      ;idx...        ;...yloc        ;\
9097 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1        ;
909A FF          mov  r7,a       ;yloc                          ;/
909B 90 00 01    mov  dptr,0001h ;idx...        ;...xloc        ;\
909E 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
90A1 FD          mov  r5,a       ;xloc                          ;/
90A2 90 00 02    mov  dptr,0002h ;idx...        ;...size.x
90A5 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
90A8 FB          mov  r3,a       ;size.x
90A9 C0 03       push r3(0)      ;size.x
90AB AB 2A       mov  r3,[iram_tmp__2Ah]
90AD 90 00 03    mov  dptr,0003h ;idx...        ;...size.y
90B0 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
90B3 F5 32       mov  [iram_tmp__32h],a    ;size.y
90B5 90 00 84    mov  dptr,xram_tmp__84h
90B8 E0          movx a,[dptr]   ;mode (0..6)       ???
90B9 F5 33       mov  [iram_tmp__33h],a    ;mode (0..6)       ???
90BB D0 03       pop  r3(0)      ;size.x
90BD 12 72 B4    call xxx_72B4h   ;------> ;osd_XXXXXX       ...?  maybe bitmap?
                @@_90C0h:
90C0 AB 2A       mov  r3,[iram_tmp__2Ah]
90C2 AA 2B       mov  r2,[iram_tmp__2Bh]
90C4 A9 2C       mov  r1,[iram_tmp__2Ch]
90C6 90 00 09    mov  dptr,0009h ;idx...
90C9 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
90CC 20 E3 0E    jnz  a.3,@@exit
                ;- - -
90CF 74 0B       mov  a,0Bh
90D1 25 2C       add  a,[iram_tmp__2Ch]
90D3 F5 2C       mov  [iram_tmp__2Ch],a
90D5 E4          clr  a
90D6 35 2B       adc  a,[iram_tmp__2Bh]
90D8 F5 2B       mov  [iram_tmp__2Bh],a
90DA 02 90 36    ljmp @@lop
                ;---
                @@exit:
90DD 22          ret
                ;------------------
;:------------- ;:----------------- init code
                ;------------------
                init_io_via_huge_fixed_io_list:    ;in: r7=[xram_sett_input]
90DE 12 AE F4    call xlat_input_r7_to_index_r7     ;----> in/out: r7   ;\
90E1 90 00 80    mov  dptr,xram_tmp__80h                                ;
90E4 E4          clr  a                                                 ;
90E5 F0          movx [dptr],a                                          ;
90E6 A3          inc  dptr ;=xram_tmp__81h                              ;
90E7 EF          mov  a,r7                ;<--                          ;
90E8 F0          movx [dptr],a                                          ;/
                ;- - -
90E9 E4          clr  a
90EA 90 00 7E    mov  dptr,xram_tmp__7Eh   ;index.msb
90ED F0          movx [dptr],a
90EE A3          inc  dptr ;=xram_tmp__7Fh ;index.lsb
90EF F0          movx [dptr],a
                @@lop:
90F0 90 00 80    mov  dptr,xram_tmp__80h
90F3 E0          movx a,[dptr]
90F4 FE          mov  r6,a
90F5 A3          inc  dptr ;=xram_tmp__81h
90F6 E0          movx a,[dptr]
90F7 90 62 09    mov  dptr,indirect_huge_fixed_io_list
90FA 75 F0 0A    mov  b,0Ah
90FD 12 4C E0    call add_a_mul_b_to_dptr
9100 EE          mov  a,r6
9101 75 F0 0A    mov  b,0Ah
9104 A4          mul  a,b
9105 25 83       add  a,dph
9107 F5 83       mov  dph,a
9109 E4          clr  a
910A 93          movc a,[a+dptr]
910B FB          mov  r3,a
910C 74 01       mov  a,01h
910E 93          movc a,[a+dptr]
910F FA          mov  r2,a
9110 74 02       mov  a,02h
9112 93          movc a,[a+dptr]
9113 F9          mov  r1,a
9114 90 00 7E    mov  dptr,xram_tmp__7Eh   ;index.msb
9117 E0          movx a,[dptr]
9118 FE          mov  r6,a
9119 A3          inc  dptr ;=xram_tmp__7Fh ;index.lsb
911A E0          movx a,[dptr]
911B FF          mov  r7,a
911C 7C 00       mov  r4,00h
911E 7D 03       mov  r5,03h
9120 12 4A 94    call multiply_r6r7_by_r4r5
9123 E9          mov  a,r1
9124 2F          add  a,r7
9125 F9          mov  r1,a
9126 EA          mov  a,r2
9127 3E          adc  a,r6
9128 FA          mov  r2,a
9129 90 00 02    mov  dptr,0002h ;idx...
912C 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
912F FF          mov  r7,a             ;I/O data
9130 90 00 80    mov  dptr,xram_tmp__80h
9133 E0          movx a,[dptr]
9134 FC          mov  r4,a
9135 A3          inc  dptr ;=xram_tmp__81h
9136 E0          movx a,[dptr]
9137 90 62 09    mov  dptr,indirect_huge_fixed_io_list
913A 75 F0 0A    mov  b,0Ah
913D 12 4C E0    call add_a_mul_b_to_dptr
9140 EC          mov  a,r4
9141 75 F0 0A    mov  b,0Ah
9144 A4          mul  a,b
9145 25 83       add  a,dph
9147 F5 83       mov  dph,a
9149 E4          clr  a
914A 93          movc a,[a+dptr]
914B FB          mov  r3,a
914C 74 01       mov  a,01h
914E 93          movc a,[a+dptr]
914F FA          mov  r2,a
9150 74 02       mov  a,02h
9152 93          movc a,[a+dptr]
9153 F9          mov  r1,a
9154 90 00 7E    mov  dptr,xram_tmp__7Eh   ;index.msb
9157 E0          movx a,[dptr]
9158 FC          mov  r4,a
9159 A3          inc  dptr ;=xram_tmp__7Fh ;index.lsb
915A E0          movx a,[dptr]
915B F5 82       mov  dpl,a
915D 8C 83       mov  dph,r4
915F 74 03       mov  a,03h
9161 12 4C CF    call multiply_dptr_by_a  ;dptr=dptr*a
9164 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
9167 F5 82       mov  dpl,a
9169 85 F0 83    mov  dph,b
916C EF          mov  a,r7
916D F0          movx [dptr],a         ;I/O [addr]=data
916E 90 00 7F    mov  dptr,xram_tmp__7Fh   ;index.lsb           ;\
9171 E0          movx a,[dptr]                                  ;
9172 04          inc  a                                         ;
9173 F0          movx [dptr],a                                  ;
9174 70 06       jnz  a,@@keep_msb                              ; raise index
9176 90 00 7E    mov  dptr,xram_tmp__7Eh   ;index.msb           ;
9179 E0          movx a,[dptr]                                  ;
917A 04          inc  a                                         ;
917B F0          movx [dptr],a                                  ;
                @@keep_msb:                                     ;/
917C 90 00 7E    mov  dptr,xram_tmp__7Eh   ;index.msb           ;\
917F E0          movx a,[dptr]                                  ;
9180 70 04       jnz  a,@@msb_nonzero                           ; lop next
9182 A3          inc  dptr ;=xram_tmp__7Fh ;index.lsb           ;
9183 E0          movx a,[dptr]                                  ;
9184 64 B6       xor  a,huge_fixed_io_list_num_entries          ;
                @@msb_nonzero:                                  ;
9186 60 03       jz   a,@@lop_done                              ;
9188 02 90 F0    ljmp @@lop                                     ;/
                ;---
                @@lop_done:
918B 22          ret
                ;------------------
                .macro defcode_init_load_settings
                init_load_settings:
                .if flash_version<ver11sep2017
A309 7F 00         mov  r7,0E000h and 0ffh   ;flash.addr.lsb
A30B 7E E0         mov  r6,0E000h/100h       ;flash.addr.msb
A30D 7D 00         mov  r5,00h
A30F 7C 00         mov  r4,00h
                .else
8A89 90 00 AE      mov  dptr,xram_settings_1_addr
8A8C E0            movx a,[dptr]
8A8D FC            mov  r4,a
8A8E A3            inc  dptr
8A8F E0            movx a,[dptr]
8A90 FD            mov  r5,a
8A91 A3            inc  dptr
8A92 E0            movx a,[dptr]
8A93 FE            mov  r6,a
8A94 A3            inc  dptr
8A95 E0            movx a,[dptr]
8A96 FF            mov  r7,a
                .endif
A311 12 AD 7B    call load_flash_settings
A314 12 9B E1    call verify_loaded_settings
A317 50 05       jnc  @@fail_try_backup_copy
A319 30 07 02    jz   [iram_req_event_flags].7,@@fail_try_backup_copy
A31C 80 13       sjmp @@loaded_okay
                ;---
                @@fail_try_backup_copy:
                .if flash_version<ver11sep2017
A31E 7F 00         mov  r7,0F000h and 0ffh   ;flash.addr.lsb
A320 7E F0         mov  r6,0F000h/100h       ;flash.addr.msb
A322 7D 00         mov  r5,00h
A324 7C 00         mov  r4,00h
                .else
8AA4 90 00 AA      mov  dptr,xram_settings_2_addr
8AA7 E0            movx a,[dptr]
8AA8 FC            mov  r4,a
8AA9 A3            inc  dptr
8AAA E0            movx a,[dptr]
8AAB FD            mov  r5,a
8AAC A3            inc  dptr
8AAD E0            movx a,[dptr]
8AAE FE            mov  r6,a
8AAF A3            inc  dptr
8AB0 E0            movx a,[dptr]
8AB1 FF            mov  r7,a
                .endif
A326 12 AD 7B    call load_flash_settings
A329 12 9B E1    call verify_loaded_settings
A32C 50 08       jnc  @@fail_force_reset
A32E 30 07 05    jz   [iram_req_event_flags].7,@@fail_force_reset
                @@loaded_okay:
A331 12 7C BC    call force_valid_settings
A334 D3          set  c         ;out: cy=1 (okay)
A335 22          ret
                ;---
                @@fail_force_reset:
A336 12 75 0C    call hard_reset_all_settings                   ;-
                .if flash_version<ver11sep2017
A339 90 00 C1     mov  dptr,xram_flash_chiptype                 ;\
A33C E0           movx a,[dptr]       ;index  (always 00h ?)    ;
A33D FF           mov  r7,a           ;index                    ;/
A33E 75 F0 02     mov  b,02h                                    ;\
A341 A4           mul  a,b            ;index*2                  ;
A342 24 D7        add  a,(flash_chiptype_list+1) and 0ffh       ;
A344 F5 82        mov  dpl,a                                    ; cmd_erase
A346 E5 F0        mov  a,b                                      ;
A348 34 BE        adc  a,(flash_chiptype_list+1)/100h           ;
A34A F5 83        mov  dph,a                                    ;
A34C E4           clr  a                                        ;
A34D 93           movc a,[a+dptr]                               ;
A34E 90 00 0B     mov  dptr,xram_sett_cmd_erase                 ;
A351 F0           movx [dptr],a                                 ;/
A352 75 F0 02     mov  b,02h                                    ;\
A355 EF           mov  a,r7                                     ;
A356 A4           mul  a,b            ;index*2                  ;
A357 24 D6        add  a,(flash_chiptype_list+0) and 0ffh       ;
A359 F5 82        mov  dpl,a                                    ; cmd_wren
A35B E5 F0        mov  a,b                                      ;
A35D 34 BE        adc  a,(flash_chiptype_list+0)/100h           ;
A35F F5 83        mov  dph,a                                    ;
A361 E4           clr  a                                        ;
A362 93           movc a,[a+dptr]        ;?                     ;
A363 90 00 0A     mov  dptr,xram_sett_cmd_wren                  ;
A366 F0           movx [dptr],a          ;?                     ;/
                .else           ;- - - - - - - - - - - - - - - - - - - - -
8AC5 90 00 B2     mov  dptr,xram_flash_chiptype          ;\
8AC8 E0           movx a,[dptr]                          ;
8AC9 FF           mov  r7,a                              ;/
8ACA 75 F0 0C     mov  b,0Ch                                    ;\
8ACD A4           mul  a,b                                      ;
8ACE 24 F7        add  a,(flash_chiptype_list+2) and 0ffh       ;
8AD0 F5 82        mov  dpl,a                                    ; lock_all
8AD2 E5 F0        mov  a,b                                      ;
8AD4 34 93        adc  a,(flash_chiptype_list+2)/100h           ;
8AD6 F5 83        mov  dph,a                                    ;
8AD8 E4           clr  a                                        ;
8AD9 93           movc a,[a+dptr]                               ;
8ADA 90 00 0C     mov  dptr,xram_sett_lock_all                  ;
8ADD F0           movx [dptr],a                                 ;/
8ADE 75 F0 0C     mov  b,0Ch                                    ;\
8AE1 EF           mov  a,r7                                     ;
8AE2 A4           mul  a,b                                      ;
8AE3 24 F6        add  a,(flash_chiptype_list+1) and 0ffh       ; lock_some
8AE5 F5 82        mov  dpl,a                                    ;
8AE7 E5 F0        mov  a,b                                      ;
8AE9 34 93        adc  a,(flash_chiptype_list+1)/100h           ;
8AEB F5 83        mov  dph,a                                    ;
8AED E4           clr  a                                        ;
8AEE 93           movc a,[a+dptr]                               ;
8AEF 90 00 0B     mov  dptr,xram_sett_lock_some                 ;
8AF2 F0           movx [dptr],a                                 ;/
8AF3 90 00 B2     mov  dptr,xram_flash_chiptype                 ;\
8AF6 E0           movx a,[dptr]                                 ;
8AF7 75 F0 0C     mov  b,0Ch                                    ;
8AFA A4           mul  a,b                                      ;
8AFB 24 F8        add  a,(flash_chiptype_list+3) and 0ffh       ;
8AFD F5 82        mov  dpl,a                                    ; cmd_erase
8AFF E5 F0        mov  a,b                                      ;
8B01 34 93        adc  a,(flash_chiptype_list+3)/100h           ;
8B03 F5 83        mov  dph,a                                    ;
8B05 E4           clr  a                                        ;
8B06 93           movc a,[a+dptr]                               ;
8B07 90 00 0D     mov  dptr,xram_sett_cmd_erase                 ;
8B0A F0           movx [dptr],a                                 ;/
8B0B 75 F0 0C     mov  b,0Ch                                    ;\
8B0E EF           mov  a,r7                                     ;
8B0F A4           mul  a,b                                      ;
8B10 24 F5        add  a,(flash_chiptype_list+0) and 0ffh       ;
8B12 F5 82        mov  dpl,a                                    ; chip_id
8B14 E5 F0        mov  a,b                                      ;
8B16 34 93        adc  a,(flash_chiptype_list+0)/100h           ;
8B18 F5 83        mov  dph,a                                    ;
8B1A E4           clr  a                                        ;
8B1B 93           movc a,[a+dptr]                               ;
8B1C 90 00 0A     mov  dptr,xram_sett_flash_id                  ;
8B1F F0           movx [dptr],a                                 ;/
8B20 90 00 0C     mov  dptr,xram_sett_lock_all          ;\
8B23 E0           movx a,[dptr]                         ;
8B24 90 00 40     mov  dptr,xram_curr_lock_all          ;
8B27 F0           movx [dptr],a                         ;/
8B28 90 00 0B     mov  dptr,xram_sett_lock_some         ;\
8B2B E0           movx a,[dptr]                         ;
8B2C 90 00 3E     mov  dptr,xram_curr_lock_some         ;
8B2F F0           movx [dptr],a                         ;/
                .endif
A367 12 A6 A8    call do_save_settings                  ;-
A36A C3          clr  c         ;out: cy=0 (failed, forced reset)
A36B 22          ret
                .endm ;defcode_init_load_settings
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_init_load_settings
                .endif
                ;------------------
;:------------- ;:----------------- OSD code (clear attr)
                ;------------------
                osd_clear_window_attr:
                ;(unused?)
                ;in: r3    =     ;window.cx
                ;in: r5    =     ;window.x1
                ;in: r7    =     ;window.y1
                ;in: [iram_tmp_window_cy]   =     ;window.cy
                ;in: [iram_tmp_window_attr] = attr (fillvalue)
                ;- - -
918C 8F 08       mov  [iram_tmp_window_y1],r7      ;window.index.y1
918E AA 05       mov  r2,r5(0)                     ;window.index.x1
9190 90 00 A8    mov  dptr,xram_tmp_window_index_y ;window.index.y
9193 E5 08       mov  a,[iram_tmp_window_y1]       ;window.index.y1
9195 F0          movx [dptr],a                     ;window.index.y
                @@outer_lop:                   ;lop....
9196 E5 08       mov  a,[iram_tmp_window_y1]
9198 25 0B       add  a,[iram_tmp_window_cy]
919A FF          mov  r7,a
919B E4          clr  a
919C 33          rcl  a
919D FE          mov  r6,a
919E 90 00 A8    mov  dptr,xram_tmp_window_index_y
91A1 E0          movx a,[dptr]
91A2 C3          clr  c
91A3 9F          sbc  a,r7
91A4 EE          mov  a,r6
91A5 64 80       xor  a,80h
91A7 F8          mov  r0,a
91A8 74 80       mov  a,80h
91AA 98          sbc  a,r0
91AB 40 03       jc   @@cont
91AD 02 92 34    jmp  @@outer_lop_done
                ;---
                @@cont:
91B0 12 7B D8    call get_window_addr   ;out:r6r7
91B3 90 00 A3    mov  dptr,xram_tmp_window_addr_msb
91B6 12 AC 70    call get_window_width  ;out:[dptr]=addr, r6r7=width
91B9 90 00 A8    mov  dptr,xram_tmp_window_index_y
91BC E0          movx a,[dptr]
91BD FD          mov  r5,a
91BE 7C 00       mov  r4,00h
91C0 12 4A 94    call multiply_r6r7_by_r4r5
91C3 EA          mov  a,r2
91C4 2F          add  a,r7
91C5 FF          mov  r7,a
91C6 EC          mov  a,r4
91C7 3E          adc  a,r6
91C8 FE          mov  r6,a
91C9 90 00 A5    mov  dptr,xram_tmp_window_size_msb
91CC F0          movx [dptr],a
91CD A3          inc  dptr ;=xram_tmp_window_size_lsb
91CE EF          mov  a,r7
91CF F0          movx [dptr],a
91D0 90 00 A4    mov  dptr,xram_tmp_window_addr_lsb
91D3 E0          movx a,[dptr]
91D4 2F          add  a,r7
91D5 F0          movx [dptr],a
91D6 90 00 A3    mov  dptr,xram_tmp_window_addr_msb
91D9 E0          movx a,[dptr]
91DA 3E          adc  a,r6
91DB F0          movx [dptr],a
91DC E0          movx a,[dptr]
91DD FC          mov  r4,a
91DE A3          inc  dptr ;=xram_tmp_window_addr_lsb
91DF E0          movx a,[dptr]
91E0 FD          mov  r5,a
91E1 EC          mov  a,r4
91E2 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
91E5 F0          movx [dptr],a
91E6 ED          mov  a,r5
91E7 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb
91EA F0          movx [dptr],a
91EB 90 00 A7    mov  dptr,xram_tmp_window_index_x
91EE EA          mov  a,r2
91EF F0          movx [dptr],a
                @@inner_lop:                   ;lop...
91F0 EB          mov  a,r3
91F1 FF          mov  r7,a
91F2 EA          mov  a,r2
91F3 2F          add  a,r7
91F4 FF          mov  r7,a
91F5 E4          clr  a
91F6 33          rcl  a
91F7 FE          mov  r6,a
91F8 90 00 A7    mov  dptr,xram_tmp_window_index_x
91FB E0          movx a,[dptr]
91FC C3          clr  c
91FD 9F          sbc  a,r7
91FE EE          mov  a,r6
91FF 64 80       xor  a,80h
9201 F8          mov  r0,a
9202 74 80       mov  a,80h
9204 98          sbc  a,r0
9205 50 24       jnc  @@inner_lop_done
9207 90 00 A3    mov  dptr,xram_tmp_window_addr_msb
920A E0          movx a,[dptr]
920B 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
920E F0          movx [dptr],a
920F 90 FB 10    mov  dptr,IO_OSD_bgmap_data_attr       ;\
9212 E5 0C       mov  a,[iram_tmp_window_attr]          ; output ATTR
9214 F0          movx [dptr],a                          ;/
9215 90 00 A7    mov  dptr,xram_tmp_window_index_x
9218 E0          movx a,[dptr]
9219 04          inc  a
921A F0          movx [dptr],a
921B 90 00 A4    mov  dptr,xram_tmp_window_addr_lsb
921E E0          movx a,[dptr]
921F 04          inc  a
9220 F0          movx [dptr],a
9221 70 CD       jnz  a,@@inner_lop     ;...lop
9223 90 00 A3    mov  dptr,xram_tmp_window_addr_msb
9226 E0          movx a,[dptr]
9227 04          inc  a
9228 F0          movx [dptr],a
9229 80 C5       sjmp @@inner_lop       ;...lop
                ;---
                @@inner_lop_done:
922B 90 00 A8    mov  dptr,xram_tmp_window_index_y
922E E0          movx a,[dptr]
922F 04          inc  a
9230 F0          movx [dptr],a
9231 02 91 96    ljmp @@outer_lop       ;....lop
                ;---
                @@outer_lop_done:
9234 22          ret
                ;------------------
;:------------- ;:----------------- GUI misc ()
                ;------------------
9235 4D 4F 44.. txt_mode_english    db 'MODE',00h       ;<-- also french/dutch
923A 23 2A 20.. txt_mode_slang_01h  db '#* #$',00h
9240 4D 4F 44.. txt_mode_italian    db 'MODO',00h       ;<-- also spanish/porugese
9245 4D 4F 44.. txt_mode_german     db 'MODUS',00h
                .if slang_version<ver11sep2017
924B 25 0C xx..   txt_mode_slang_08h db '%',0Ch,'+',0Eh,12h,00h
                .else
                  txt_mode_slang_08h db '%',65h,'+',0Eh,12h,00h
                .endif
9251 23 0B 20.. txt_mode_slang_09h  db '#',0Bh,' #',0Ch,00h  ;<-- also slang_0Bh
9257 23 E6 20.. txt_mode_slang_0Ah  db '#',0E6h,' #',0B9h,' #',0BDh,00h
9260 15 09 0C.. txt_mode_slang_0Ch  db 15h,09h,0Ch,11h,0Eh,18h,0Ch,13h,0Eh,0Ch,00h
926B 54 52 59.. txt_mode_polish     db 'TRYB',00h
9270 4D 4F 44.. txt_mode_turkish    db 'MODA',00h
                ;------------------
9275 31 36 3A.. txt_ratio_16_9  db '16:9',00h
927A 20 34 3A.. txt_ratio_4_3   db ' 4:3',00h
                ;------------------
                localized_txtlist_mode:          ;used 2x
927F FF 92 35    db   0FFh // dw txt_mode_english      ;00h ;English
9282 FF 92 3A    db   0FFh // dw txt_mode_slang_01h    ;01h ;?
9285 FF 92 35    db   0FFh // dw txt_mode_english   ;* ;02h ;French
9288 FF 92 40    db   0FFh // dw txt_mode_italian      ;03h ;Italian
928B FF 92 40    db   0FFh // dw txt_mode_italian   ;* ;04h ;Spanish
928E FF 92 45    db   0FFh // dw txt_mode_german       ;05h ;German
9291 FF 92 40    db   0FFh // dw txt_mode_italian   ;* ;06h ;Portugese
9294 FF 92 35    db   0FFh // dw txt_mode_english   ;* ;07h ;Dutch
9297 FF 92 4B    db   0FFh // dw txt_mode_slang_08h    ;08h ;?
929A FF 92 51    db   0FFh // dw txt_mode_slang_09h    ;09h ;?
929D FF 92 57    db   0FFh // dw txt_mode_slang_0Ah    ;0Ah ;?
92A0 FF 92 51    db   0FFh // dw txt_mode_slang_09h ;* ;0Bh ;?
92A3 FF 92 60    db   0FFh // dw txt_mode_slang_0Ch    ;0Ch ;?
92A6 FF 92 6B    db   0FFh // dw txt_mode_polish       ;0Dh ;Polish
92A9 FF 92 70    db   0FFh // dw txt_mode_turkish      ;0Eh ;Turkish
                ;------------------
                txt_list_ratio_16_9_and_4_3:
92AC FF 92 75    db   0FFh // dw txt_ratio_16_9
92AF FF 92 7A    db   0FFh // dw txt_ratio_4_3
                ;------------------
                gui_null_ModeMenu:
92B2 00          nop
92B3 00          nop
92B4 00          nop
92B5 00          nop
92B6 00          nop
                ;---
                gui_data_ModeMenu_show_ratio:
92B7 01          db   01h
92B8 0B          db   0Bh
92B9 01          db   01h
92BA 00          nop
92BB 01          db   01h
92BC 00          nop
92BD FF BF 2E    db   0FFh // dw get_settings_mode_dupe      ;16:9 or 4:3
92C0 FF B5 60    db   0FFh // dw get_txt_settings_mode_dupe  ;16:9 or 4:3
92C3 00 08       dw   0008h
                ;---
                gui_data_ModeMenu_show:
92C5 00 00 00    db   000h // dw 0000h
92C8 00 00 00    db   000h // dw 0000h
92CB FF 92 B7    db   0FFh // dw gui_data_ModeMenu_show_ratio
92CE 00 08       dw   0008h
                ;---
                gui_data_ModeMenu_name:
92D0 01          db   01h
92D1 00          nop
92D2 01          db   01h
92D3 00          nop
92D4 01          db   01h
92D5 00          nop
92D6 01          db   01h
92D7 FF B9 CA    db   0FFh // dw get_localized_txt_mode_dupe
92DA 00 08       dw   0008h
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_read_flash
                .endif
                ;------------------
                xxx_937Eh:          ;... get keyboard higher level
937E 8B 2A       mov  [iram_tmp__2Ah],r3  ;=01h  ;\
9380 8A 2B       mov  [iram_tmp__2Bh],r2  ;=00h  ; dst (xram_level2key_base)
9382 89 2C       mov  [iram_tmp__2Ch],r1  ;=55h  ;/
9384 90 00 4F    mov  dptr,xram_level1key_phase
9387 E0          movx a,[dptr]
9388 14          dec  a
9389 60 19       jz   a,@@key_phase_1   ;1
938B 14          dec  a
938C 60 41       jz   a,@@key_phase_2   ;2
938E 14          dec  a
938F 60 60       jz   a,@@key_phase_3   ;3
9391 24 03       add  a,03h
9393 60 03       jz   a,@@key_phase_0   ;0
9395 02 94 1C    jmp  return_01h        ;other
                ;---
                @@key_phase_0:
9398 E4          clr  a
9399 90 00 50    mov  dptr,xram_level1key_time_msb
939C F0          movx [dptr],a
939D A3          inc  dptr ;=xram_level1key_time_lsb
939E F0          movx [dptr],a
939F 90 00 4F    mov  dptr,xram_level1key_phase
93A2 04          inc  a
93A3 F0          movx [dptr],a
                @@key_phase_1:
93A4 12 02 E0    call keyboard_read_analog_and_xlat_to_digital   ;-get keyboard
93A7 90 00 52    mov  dptr,xram_level1key_curr_button
93AA EF          mov  a,r7       ;keynumber (2,3,4 for 3KEY), or 0=none
93AB F0          movx [dptr],a
93AC A3          inc  dptr ;=xram_level1key_old_button
93AD E0          movx a,[dptr]
93AE B5 07 16    jne  a,r7(0),@@_93C7h
                ;- - - SAME button...
93B1 90 00 51    mov  dptr,xram_level1key_time_lsb      ;\
93B4 E0          movx a,[dptr]                          ;
93B5 04          inc  a            ;lsb                 ;
93B6 F0          movx [dptr],a                          ;
93B7 70 06       jnz  a,@@keep_msb                      ; raise SAME key TIME
93B9 90 00 50    mov  dptr,xram_level1key_time_msb      ;
93BC E0          movx a,[dptr]                          ;
93BD 04          inc  a            ;msb                 ;
93BE F0          movx [dptr],a                          ;
                @@keep_msb:                             ;/
93BF 90 00 4F    mov  dptr,xram_level1key_phase         ;\
93C2 74 03       mov  a,03h                             ;
93C4 F0          movx [dptr],a                          ;/
93C5 80 55       sjmp return_01h
                ;---
                @@_93C7h:
93C7 90 00 4F    mov  dptr,xram_level1key_phase
93CA 74 02       mov  a,02h
93CC F0          movx [dptr],a
93CD 80 4D       sjmp return_01h
                ;---
                @@key_phase_2:
93CF 90 00 50    mov  dptr,xram_level1key_time_msb      ;\
93D2 E0          movx a,[dptr]     ;msb                 ;
93D3 70 02       jnz  a,@@nonzero                       ; check SAME key TIME
93D5 A3          inc  dptr ;=xram_level1key_time_lsb    ;
93D6 E0          movx a,[dptr]     ;lsb                 ;
                @@nonzero:                              ;
93D7 70 08       jnz  a,@@_93E1h                        ;/
93D9 90 00 52    mov  dptr,xram_level1key_curr_button   ;\
93DC E0          movx a,[dptr]                          ;
93DD A3          inc  dptr ;=xram_level1key_old_button  ;
93DE F0          movx [dptr],a                          ;/
93DF 80 1F       sjmp @@finish
                ;---
                @@_93E1h:
93E1 90 00 51    mov  dptr,xram_level1key_time_lsb      ;\
93E4 E0          movx a,[dptr]                          ;
93E5 24 FF       add  a,0FFh       ;lsb+(-1)            ;
93E7 F0          movx [dptr],a                          ; uh, DECREASE the TIME ?
93E8 90 00 50    mov  dptr,xram_level1key_time_msb      ;
93EB E0          movx a,[dptr]                          ;
93EC 34 FF       adc  a,0FFh       ;msb+(cy-1)          ;
93EE F0          movx [dptr],a                          ;/
93EF 80 0F       sjmp @@finish
                ;---
                @@key_phase_3:
93F1 C3          clr  c                                 ;\
93F2 90 00 51    mov  dptr,xram_level1key_time_lsb      ;
93F5 E0          movx a,[dptr]     ;lsb                 ;
93F6 94 02       sbc  a,02h                             ; compare 0002h
93F8 90 00 50    mov  dptr,xram_level1key_time_msb      ;
93FB E0          movx a,[dptr]                          ;
93FC 94 00       sbc  a,00h        ;msb                 ;
93FE 50 08       jnc  @@_9408h                          ;/
                ;- - -
                @@finish:
9400 90 00 4F    mov  dptr,xram_level1key_phase
9403 74 01       mov  a,01h
9405 F0          movx [dptr],a
9406 80 14       sjmp return_01h
                ;---
                @@_9408h:
9408 90 00 52    mov  dptr,xram_level1key_curr_button
940B E0          movx a,[dptr]
940C AB 2A       mov  r3,[iram_tmp__2Ah]  ;\
940E AA 2B       mov  r2,[iram_tmp__2Bh]  ; dst (xram_level2key_base)
9410 A9 2C       mov  r1,[iram_tmp__2Ch]  ;/
9412 12 4A 60    call anymem_store_8bit_a_to_mem_r3r2r1
9415 E4          clr  a                         ;\
9416 90 00 4F    mov  dptr,xram_level1key_phase ;
9419 F0          movx [dptr],a                  ;/
941A FF          mov  r7,a  ;=00h
941B 22          ret
                ;---
                return_01h:
941C 7F 01       mov  r7,01h
941E 22          ret
                ;------------------
;:------------- ;:----------------- init code
                ;------------------
                init_part_4_subsubfunc:   ;SUBFUNC of... init_part_4_subfunc
941F 43 8E 07    or   [SFR_IO_whatever_config],07h      ;-  XXX
9422 90 FD 0E    mov  dptr,IO_PLL_0Eh_used              ;\
9425 74 20       mov  a,20h                             ;
9427 F0          movx [dptr],a                          ;/
9428 90 FD 11    mov  dptr,IO_PLL_11h_used              ;\
942B 74 FF       mov  a,0FFh                            ;
942D F0          movx [dptr],a                          ;
942E A3          inc  dptr ;=IO_PLL_12h_used            ;
942F F0          movx [dptr],a                          ;
9430 A3          inc  dptr ;=IO_PLL_13h_used            ;
9431 F0          movx [dptr],a                          ;/
9432 90 FD 0B    mov  dptr,IO_PLL_0Bh_used              ;\
9435 74 40       mov  a,40h                             ;
9437 F0          movx [dptr],a                          ;/
9438 90 FD 10    mov  dptr,IO_PLL_10h_cfg               ;\
943B 74 04       mov  a,04h                             ; (also set to 04h, too, elsewhere)
943D F0          movx [dptr],a                          ;/
943E 90 FD 19    mov  dptr,IO_PLL_19h_used              ;\
9441 E0          movx a,[dptr]                          ; (later set to 83h)
9442 44 81       or   a,81h                             ;
9444 F0          movx [dptr],a                          ;/
9445 90 FD 50    mov  dptr,IO_whatever_FD50h            ;\set to 00h (but set to 0Bh elsewhere)
9448 E4          clr  a                                 ;
9449 F0          movx [dptr],a                          ;/
944A A3          inc  dptr ;=IO_whatever_zerofilled+0   ;\
944B F0          movx [dptr],a                          ;
944C A3          inc  dptr ;=IO_whatever_zerofilled+1   ;
944D F0          movx [dptr],a                          ;
944E A3          inc  dptr ;=IO_whatever_zerofilled+2   ;
944F F0          movx [dptr],a                          ;
9450 A3          inc  dptr ;=IO_whatever_zerofilled+3   ;
9451 F0          movx [dptr],a                          ;
9452 A3          inc  dptr ;=IO_whatever_zerofilled+4   ;
9453 F0          movx [dptr],a                          ;
9454 A3          inc  dptr ;=IO_whatever_zerofilled+5   ;
9455 F0          movx [dptr],a                          ;
9456 A3          inc  dptr ;=IO_whatever_zerofilled+6   ;
9457 F0          movx [dptr],a                          ;
9458 A3          inc  dptr ;=IO_whatever_zerofilled+7   ;
9459 F0          movx [dptr],a                          ;
945A A3          inc  dptr ;=IO_whatever_zerofilled+8   ;
945B F0          movx [dptr],a                          ;
945C A3          inc  dptr ;=IO_whatever_zerofilled+9   ;
945D F0          movx [dptr],a                          ;/
945E 90 FF CB    mov  dptr,IO_LCD_whatever_FFCBh        ;\
9461 74 80       mov  a,80h                             ;  ;<-- set to 2Ah elsewhere
9463 F0          movx [dptr],a                          ;
9464 A3          inc  dptr ;=IO_LCD_config_FFCCh        ;
9465 F0          movx [dptr],a                          ;
9466 A3          inc  dptr ;=IO_LCD_config_FFCDh        ;
9467 74 2D       mov  a,2Dh                             ;
9469 F0          movx [dptr],a                          ;/
946A 90 FF B7    mov  dptr,IO_LCD_config_FFB7h          ;\
946D 74 90       mov  a,90h                             ;
946F F0          movx [dptr],a                          ;/
9470 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\
9473 74 80       mov  a,80h                             ;
9475 F0          movx [dptr],a                          ;/
9476 90 FF D7    mov  dptr,IO_LCD_config_FFD7h          ;\
9479 74 10       mov  a,10h                             ;
947B F0          movx [dptr],a                          ;/
947C 90 FF CE    mov  dptr,IO_LCD_backdrop_color_Y      ;\
947F 74 13       mov  a,13h                             ;
9481 F0          movx [dptr],a                          ;
9482 A3          inc  dptr ;=IO_LCD_backdrop_color_Cb   ; backdrop color (BLUE)
9483 74 DD       mov  a,0DDh                            ;
9485 F0          movx [dptr],a                          ;
9486 A3          inc  dptr ;=IO_LCD_backdrop_color_Cr   ;
9487 74 72       mov  a,72h                             ;
9489 F0          movx [dptr],a                          ;/
948A 90 FE 01    mov  dptr,IO_AV_ctrl_whatever_1        ;\
948D E0          movx a,[dptr]                          ;
948E 44 02       or   a,02h     ;bit1=1                 ;
9490 F0          movx [dptr],a                          ;/
9491 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
9494 74 F7       mov  a,0F7h                            ;
9496 F0          movx [dptr],a                          ;/
9497 90 FE BA    mov  dptr,IO_AV_config_FEBAh           ;\
949A 74 FF       mov  a,0FFh                            ;
949C F0          movx [dptr],a                          ;/
949D 90 FE B5    mov  dptr,IO_AV_config_FEB5h           ;\
94A0 74 67       mov  a,67h                             ;
94A2 F0          movx [dptr],a                          ;/
94A3 90 FE D5    mov  dptr,IO_AV_ctrl_sensitivity_1     ;\
94A6 74 B1       mov  a,0B1h                            ;
94A8 F0          movx [dptr],a                          ;/
94A9 90 FE 56    mov  dptr,IO_AV_config_FE56h           ;\
94AC E4          clr  a                                 ;
94AD F0          movx [dptr],a                          ;/
94AE 90 FE 13    mov  dptr,IO_AV_config_FE13h           ;\
94B1 74 1E       mov  a,1Eh                             ;
94B3 F0          movx [dptr],a                          ;/
94B4 90 FC E3    mov  dptr,IO_VIDEO_something_3         ;\
94B7 74 01       mov  a,01h                             ;
94B9 F0          movx [dptr],a                          ;
94BA A3          inc  dptr ;=IO_VIDEO_something_4       ;
94BB 74 45       mov  a,45h                             ;
94BD F0          movx [dptr],a                          ;/
94BE 22          ret
                ;------------------
                .macro defcode_xxx_94BFh
                xxx_94BFh:             ;...PWM0  (func_30h_xxx)
94BF 7F 00       mov  r7,00h                                    ;\PWM0 off
94C1 12 B3 35    call pwm_switch_pwm0_on_port35                 ;/
94C4 90 00 0C    mov  dptr,xram_sett_input                      ;\
94C7 E0          movx a,[dptr]                                  ;
94C8 90 FE D7    mov  dptr,IO_AV_video_on_off                   ;
94CB B4 02 06    jne  a,02h,@@set_bit4                          ;
94CE E0          movx a,[dptr]                                  ;
94CF 54 EF       and  a,0EFh            ;bit4=0 (AV2 ?)         ; apply INPUT
94D1 F0          movx [dptr],a                                  ;
94D2 80 04       sjmp @@this_bit4                               ;
                ;---                                            ;
                @@set_bit4:                                     ;
94D4 E0          movx a,[dptr]                                  ;
94D5 44 10       or   a,10h             ;bit4=1 (AV1 ?)         ;
94D7 F0          movx [dptr],a                                  ;
                @@this_bit4:                                    ;/
94D8 12 BF 26    call osd_disable_all_windows_and_whatever         ;---->
94DB 90 00 0C    mov  dptr,xram_sett_input                      ;\
94DE E0          movx a,[dptr]                                  ;
94DF FF          mov  r7,a                                      ;
94E0 12 AE 7A    call lcd_apply_input_and_ratio_and_detect_video;/
94E3 7F 90       mov  r7,90h  ;\0190h (400 decimal)             ;\
94E5 7E 01       mov  r6,01h  ;/                                ; delay 400
94E7 12 BB 5D    call slow_delay_r6r7                           ;/
94EA 90 00 2C    mov  dptr,xram_sett_no_signal                  ;\
94ED E0          movx a,[dptr]                                  ;
94EE 64 02       xor  a,02h                                     ;
94F0 70 2F       jnz  a,@@not_2_black                           ;/
94F2 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
94F5 E0          movx a,[dptr]                                  ;
94F6 54 06       and  a,06h                                     ;
94F8 64 06       xor  a,06h                                     ;
94FA 70 22       jnz  a,@@switch_video_off    ;------>          ;/
                ;- - -
94FC 90 FE 54    mov  dptr,IO_AV_ctrl_whatever_2                ;\
94FF E0          movx a,[dptr]                                  ;
9500 44 40       or   a,40h                                     ;
9502 F0          movx [dptr],a                                  ;/
9503 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h                ;\
9506 E0          movx a,[dptr]                                  ;
9507 54 7F       and  a,7Fh                                     ;
9509 F0          movx [dptr],a                                  ;/
950A 7F 01       mov  r7,01h                                    ;\PWM0 on
950C 12 B3 35    call pwm_switch_pwm0_on_port35                 ;/
950F 7F 14       mov  r7,14h                                    ;\
9511 7E 00       mov  r6,00h                                    ; delay 20
9513 12 BB 5D    call slow_delay_r6r7                           ;/
                .if tech_version<ver11sep2017
9516 90 00 2C      mov  dptr,xram_sett_no_signal                ;\
9519 E0            movx a,[dptr]                                ;
951A 70 40         jnz  a,@@not_0_blue       ;--> exit          ;/
                .endif
951C 80 37       sjmp @@set_bit7             ;-->               ;-
                ;---
                @@switch_video_off:
951E 02 AF 27    jmp  switch_screen_and_backlight_off           ;-
                ;--- --- ---
                @@not_2_black:
9521 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
9524 E0          movx a,[dptr]                                  ;
9525 54 06       and  a,06h                                     ;
9527 FF          mov  r7,a                                      ;
9528 BF 06 0E    jne  r7,06h,@@_9539h   ;--->                   ;
952B 90 FE 54    mov  dptr,IO_AV_ctrl_whatever_2        ;\      ;
952E E0          movx a,[dptr]                          ;       ;
952F 44 40       or   a,40h                             ;       ;
9531 F0          movx [dptr],a                          ;/      ;
9532 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\      ;
9535 E0          movx a,[dptr]                          ;       ;
9536 54 7F       and  a,7Fh                             ;       ;
9538 F0          movx [dptr],a                          ;/      ;
                @@_9539h:                                       ;/
9539 7F 01       mov  r7,01h                                    ;\PWM0 on
953B 12 B3 35    call pwm_switch_pwm0_on_port35                 ;/
953E 7F 14       mov  r7,14h                                    ;\
9540 7E 00       mov  r6,00h                                    ; delay 20
9542 12 BB 5D    call slow_delay_r6r7                           ;/
9545 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
9548 E0          movx a,[dptr]                                  ;
9549 54 06       and  a,06h                                     ;
954B FF          mov  r7,a                                      ;
954C BF 06 0D    jne  r7,06h,@@skip_0_blue                      ;/
                .if tech_version<ver11sep2017
954F 90 00 2C      mov  dptr,xram_sett_no_signal                ;\
9552 E0            movx a,[dptr]                                ;
9553 70 07         jnz  a,@@not_0_blue                          ;/
                .endif
                @@set_bit7:         ;<--- injump                ;\
9555 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\      ;
9558 E0          movx a,[dptr]                          ;       ;
9559 44 80       or   a,80h     ;bit7=1                 ;       ;
955B F0          movx [dptr],a                          ;/      ;
                @@skip_0_blue:                                  ;
                @@not_0_blue:                                   ;/
955C 22          ret
                .endm ;defcode_xxx_94BFh
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_xxx_94BFh
                .endif
                ;------------------
;:------------- ;:----------------- GUI misc ()
                ;------------------
955D 54 49 4E.. txt_tint_english        db 'TINT',00h
9562 23 20 20.. txt_tint_slang_01h      db '#  #"',00h
9568 54 49 4E.. txt_tint_italian        db 'TINTA',00h
956E 54 49 4E.. txt_tint_spanish        db 'TINTE',00h
9574 24 27 27.. txt_tint_slang_08h      db '$''''',0Ch,13h,'$',10h,00h
957C 23 3D 20.. txt_tint_slang_09h      db '#= #',14h,00h
9582 23 3D 20.. txt_tint_slang_0Ah      db '#= #',0C3h,' #',0C4h,00h
958B 23 3D 20.. txt_tint_slang_0Bh      db '#= ',0F1h,' ',00h
9591 4B 50 41.. txt_tint_polish         db 'KPACKA',00h
                ;------------------
                localized_txtlist_tint:
9598 FF 95 5D    db   0FFh // dw txt_tint_english      ;00h ;English
959B FF 95 62    db   0FFh // dw txt_tint_slang_01h    ;01h ;?
959E FF 95 5D    db   0FFh // dw txt_tint_english   ;* ;02h ;French
95A1 FF 95 68    db   0FFh // dw txt_tint_italian      ;03h ;Italian
95A4 FF 95 6E    db   0FFh // dw txt_tint_spanish      ;04h ;Spanish
95A7 FF 95 5D    db   0FFh // dw txt_tint_english   ;* ;05h ;German
95AA FF 95 5D    db   0FFh // dw txt_tint_english   ;* ;06h ;Portugese
95AD FF 95 5D    db   0FFh // dw txt_tint_english   ;* ;07h ;Dutch
95B0 FF 95 74    db   0FFh // dw txt_tint_slang_08h    ;08h ;?
95B3 FF 95 7C    db   0FFh // dw txt_tint_slang_09h    ;09h ;?
95B6 FF 95 82    db   0FFh // dw txt_tint_slang_0Ah    ;0Ah ;?
95B9 FF 95 8B    db   0FFh // dw txt_tint_slang_0Bh    ;0Bh ;?
95BC FF 95 5D    db   0FFh // dw txt_tint_english   ;* ;0Ch ;?
95BF FF 95 91    db   0FFh // dw txt_tint_polish       ;0Dh ;Polish
95C2 FF 95 5D    db   0FFh // dw txt_tint_english   ;* ;0Eh ;Turkish
                ;------------------
                gui_null_Tint:
95C5 00          nop
95C6 00          nop
95C7 00          nop
95C8 00          nop
95C9 00          nop
                ;---
                gui_data_Tint_show_decimal:
95CA 00          nop
95CB 0D          db   0Dh
95CC 01          db   01h
95CD 00          nop
95CE 01          db   01h
95CF 00          nop
95D0 FF BF 46    db   0FFh // dw get_settings_tint
95D3 00 18       dw   0018h   ;<--!
                ;---
                gui_data_Tint_show_bar:
95D5 01          db   01h
95D6 00          nop
95D7 05          db   05h
95D8 00          nop
95D9 05          db   05h
95DA 00          nop
95DB 64          db   64h
95DC FF BF 46    db   0FFh // dw get_settings_tint
95DF 00 08       dw   0008h
                ;---
                gui_data_Tint_show:
95E1 FF 95 CA    db   0FFh // dw gui_data_Tint_show_decimal
95E4 FF 95 D5    db   0FFh // dw gui_data_Tint_show_bar
95E7 00 00 00    db   000h // dw 0000h ;(show_txt)
95EA 00 08       dw   0008h
                ;---
                gui_data_Tint_name:
95EC 00          nop
95ED 00          nop
95EE 01          db   01h
95EF 00          nop
95F0 01          db   01h
95F1 00          nop
95F2 01          db   01h
95F3 FF BA 3E    db   0FFh // dw get_localized_txt_tint
95F6 00 08       dw   0008h
                ;------------------
;:------------- ;:----------------- mode ratio / detected
                ;------------------
                apply_mode_ratio_r7:   ;Mode (16:9 or 4:3)
                                ;in: r7=[xram_sett_mode]  ;(or r7=0)
95F8 8F 38       mov  [iram_tmp__38h],r7   ;<--- INDEX 0..5 for ONE of SIX bytes?
95FA 90 FC E4    mov  dptr,IO_VIDEO_something_4 ;\maybe wants "pause" display?
95FD E0          movx a,[dptr]                  ; looks like BUGGED/blah
95FE 44 40       or   a,40h                     ; (it's 45h anyways)
9600 F0          movx [dptr],a                  ;/
9601 E4          clr  a                         ;\
9602 90 00 8E    mov  dptr,xram_tmp__8Eh        ; index=0
9605 F0          movx [dptr],a                  ;/
                @@lop:
9606 12 AE EF    call xlat_xram_sett_input_to_index_r7
9609 EF          mov  a,r7
960A 75 F0 0A    mov  b,0Ah     ;mode*0Ah   ... but there isn't 2x0Ah bytes in table? (it's only 1x0Ah)
960D A4          mul  a,b
960E 24 0C       add  a,indirect_mode_ratio_io_list and 0ffh
9610 F5 82       mov  dpl,a
9612 E4          clr  a
9613 34 62       adc  a,indirect_mode_ratio_io_list/100h
9615 F5 83       mov  dph,a
9617 E4          clr  a
9618 93          movc a,[a+dptr]
9619 FB          mov  r3,a
961A 74 01       mov  a,01h
961C 93          movc a,[a+dptr]
961D FA          mov  r2,a
961E 74 02       mov  a,02h
9620 93          movc a,[a+dptr]
9621 F9          mov  r1,a
9622 90 00 8E    mov  dptr,xram_tmp__8Eh
9625 E0          movx a,[dptr]
9626 75 F0 08    mov  b,08h
9629 A4          mul  a,b
962A FF          mov  r7,a
962B E9          mov  a,r1
962C 2F          add  a,r7
962D F9          mov  r1,a
962E EA          mov  a,r2
962F 35 F0       adc  a,b
9631 FA          mov  r2,a
9632 E9          mov  a,r1
9633 24 02       add  a,02h          ;index 02h and up (for ONE of SIX bytes)
9635 F9          mov  r1,a
9636 E4          clr  a
9637 3A          adc  a,r2
9638 FA          mov  r2,a
9639 7E 00       mov  r6,00h
963B E9          mov  a,r1
963C 25 38       add  a,[iram_tmp__38h]    ;<--- INDEX 0..5 for ONE of SIX bytes?
963E F9          mov  r1,a
963F EE          mov  a,r6
9640 3A          adc  a,r2
9641 FA          mov  r2,a
9642 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
9645 FD          mov  r5,a      ;I/O data
9646 12 AE EF    call xlat_xram_sett_input_to_index_r7
9649 EF          mov  a,r7
964A 75 F0 0A    mov  b,0Ah
964D A4          mul  a,b
964E 24 0C       add  a,indirect_mode_ratio_io_list and 0ffh
9650 F5 82       mov  dpl,a
9652 E4          clr  a
9653 34 62       adc  a,indirect_mode_ratio_io_list/100h
9655 F5 83       mov  dph,a
9657 E4          clr  a
9658 93          movc a,[a+dptr]
9659 FB          mov  r3,a
965A 74 01       mov  a,01h
965C 93          movc a,[a+dptr]
965D FA          mov  r2,a
965E 74 02       mov  a,02h
9660 93          movc a,[a+dptr]
9661 F9          mov  r1,a
9662 90 00 8E    mov  dptr,xram_tmp__8Eh
9665 E0          movx a,[dptr]
9666 75 F0 08    mov  b,08h
9669 A4          mul  a,b
966A F5 82       mov  dpl,a            ;get port addr (FCxxh)
966C 85 F0 83    mov  dph,b
966F 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
9672 F5 82       mov  dpl,a  ;\io.addr
9674 85 F0 83    mov  dph,b  ;/
9677 ED          mov  a,r5
9678 F0          movx [dptr],a          ;I/O [addr]=
9679 90 00 8E    mov  dptr,xram_tmp__8Eh                ;\
967C E0          movx a,[dptr]                          ; raise index
967D 04          inc  a                                 ;
967E F0          movx [dptr],a                          ;/
967F E0          movx a,[dptr]                          ;\
9680 C3          clr  c                                 ; lop next
9681 94 0E       sbc  a,mode_ratio_io_list_num_entries  ;
9683 40 81       jc   @@lop                             ;/
                ;- - -
9685 90 FC EA    mov  dptr,IO_VIDEO_something_5 ;\maybe wants "resume" display?
9688 E4          clr  a                         ; looks like BUGGED/blah
9689 F0          movx [dptr],a                  ;/(seems to be unused/readonly)
968A 22          ret
                ;------------------
                .macro defcode_lcd_apply_detected_video_r7
                lcd_apply_detected_video_r7:
                 ;in: r7 = 00h or [xram_sett_detected_v] or [xram_new_detected_video]
                 ;- - -
968B 8F 38       mov  [iram_tmp__38h],r7   ;xtra index (0..7)     ;-
968D 12 AE EF    call xlat_xram_sett_input_to_index_r7  ;\
9690 90 00 8F    mov  dptr,xram_tmp__8Fh                ; get "family"
9693 EF          mov  a,r7       ;family index (0)      ; (there's only one)
9694 F0          movx [dptr],a                          ;/
9695 E4          clr  a                                 ;\
9696 90 00 8E    mov  dptr,xram_tmp__8Eh                ;
9699 F0          movx [dptr],a  ;index=0                ;/
                @@lop:
969A 90 00 8E    mov  dptr,xram_tmp__8Eh                ;\
969D E0          movx a,[dptr]  ;index                  ;
969E FF          mov  r7,a      ;index                  ; check if lop done
969F C3          clr  c                                 ;
96A0 94 04       sbc  a,basic_calibration_io_list_num_entries
96A2 50 76       jnc  @@lop_done                        ;/
96A4 A3          inc  dptr ;=xram_tmp__8Fh
96A5 E0          movx a,[dptr]
96A6 75 F0 0A    mov  b,0Ah
96A9 A4          mul  a,b
96AA 24 0F       add  a,indirect_basic_calibration_io_list and 0ffh
96AC F5 82       mov  dpl,a
96AE E4          clr  a
96AF 34 62       adc  a,indirect_basic_calibration_io_list/100h
96B1 F5 83       mov  dph,a
96B3 E4          clr  a
96B4 93          movc a,[a+dptr]
96B5 FB          mov  r3,a
96B6 74 01       mov  a,01h
96B8 93          movc a,[a+dptr]
96B9 FA          mov  r2,a
96BA 74 02       mov  a,02h
96BC 93          movc a,[a+dptr]
96BD F9          mov  r1,a
96BE EF          mov  a,r7      ;index (0..3)
96BF 75 F0 0A    mov  b,0Ah
96C2 A4          mul  a,b       ;index*0Ah
96C3 FF          mov  r7,a
96C4 E9          mov  a,r1
96C5 2F          add  a,r7
96C6 F9          mov  r1,a
96C7 EA          mov  a,r2
96C8 35 F0       adc  a,b
96CA FA          mov  r2,a
96CB E9          mov  a,r1
96CC 24 02       add  a,02h             ;index 02h and up (=after 16bit port addr)
96CE F9          mov  r1,a
96CF E4          clr  a
96D0 3A          adc  a,r2
96D1 FA          mov  r2,a
96D2 7E 00       mov  r6,00h
96D4 E9          mov  a,r1
96D5 25 38       add  a,[iram_tmp__38h]   ;<--- extra index 0..7 ?
96D7 F9          mov  r1,a
96D8 EE          mov  a,r6
96D9 3A          adc  a,r2
96DA FA          mov  r2,a
96DB 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
96DE FF          mov  r7,a
96DF 90 00 8F    mov  dptr,xram_tmp__8Fh
96E2 E0          movx a,[dptr]
96E3 75 F0 0A    mov  b,0Ah
96E6 A4          mul  a,b
96E7 24 0F       add  a,indirect_basic_calibration_io_list and 0ffh
96E9 F5 82       mov  dpl,a
96EB E4          clr  a
96EC 34 62       adc  a,indirect_basic_calibration_io_list/100h
96EE F5 83       mov  dph,a
96F0 E4          clr  a
96F1 93          movc a,[a+dptr]
96F2 FB          mov  r3,a
96F3 74 01       mov  a,01h
96F5 93          movc a,[a+dptr]
96F6 FA          mov  r2,a
96F7 74 02       mov  a,02h
96F9 93          movc a,[a+dptr]
96FA F9          mov  r1,a
96FB 90 00 8E    mov  dptr,xram_tmp__8Eh
96FE E0          movx a,[dptr]   ;index (0..3)
96FF 75 F0 0A    mov  b,0Ah
9702 A4          mul  a,b        ;index*0Ah
9703 F5 82       mov  dpl,a
9705 85 F0 83    mov  dph,b
9708 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
970B F5 82       mov  dpl,a  ;\io.addr
970D 85 F0 83    mov  dph,b  ;/
9710 EF          mov  a,r7
9711 F0          movx [dptr],a          ;I/O [addr]=
9712 90 00 8E    mov  dptr,xram_tmp__8Eh ;index                 ;\
9715 E0          movx a,[dptr]                                  ;
9716 04          inc  a                                         ; lop next
9717 F0          movx [dptr],a                                  ;
9718 80 80       sjmp @@lop                                     ;/
                ;---
                @@lop_done:
                 ;- - -
                 ;uh, below OVERWRITES the above written values
                 ;(ie. Brightness/Contrast/Tint/Saturation)
                 ;by their actual values from user settings area?
                 ;- - -
971A 02 76 20    jmp  apply_settings_to_IO_ports                ;-
                .endm ;defcode_lcd_apply_detected_video_r7
                ;------------------
;:------------- ;:----------------- GUI code (bar)
                ;------------------
                .macro defcode_show_bar
                show_bar:
971D 8B 2F       mov  [iram_tmp__2Fh],r3
971F 8A 30       mov  [iram_tmp__30h],r2
9721 89 31       mov  [iram_tmp__31h],r1
9723 E9          mov  a,r1
9724 4A          or   a,r2
9725 4B          or   a,r3
9726 70 03       jnz  a,@@cont
9728 02 97 AD    jmp  @@exit
                ;---
                @@cont:
972B ED          mov  a,r5                                      ;\
972C 30 E7 14    jz   a.7,@@_9743h                              ;
972F 90 00 02    mov  dptr,0002h ;idxBar_                       ;
9732 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
9735 90 00 84    mov  dptr,xram_tmp__84h                        ;
9738 F0          movx [dptr],a                                  ;
9739 90 00 03    mov  dptr,0003h ;idx...                        ;
973C 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
973F 90 00 85    mov  dptr,xram_tmp__85h                        ;
9742 F0          movx [dptr],a                                  ;
                @@_9743h:                                       ;/
9743 ED          mov  a,r5                                      ;\
9744 30 E6 1A    jz   a.6,@@_9761h                              ;
9747 AB 2F       mov  r3,[iram_tmp__2Fh]                        ;
9749 AA 30       mov  r2,[iram_tmp__30h]                        ;
974B A9 31       mov  r1,[iram_tmp__31h]                        ;
974D 90 00 04    mov  dptr,0004h ;idx...                        ;
9750 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
9753 90 00 84    mov  dptr,xram_tmp__84h                        ;
9756 F0          movx [dptr],a                                  ;
9757 90 00 05    mov  dptr,0005h                                ;
975A 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
975D 90 00 85    mov  dptr,xram_tmp__85h                        ;
9760 F0          movx [dptr],a                                  ;
                @@_9761h:                                       ;/
9761 AB 2F       mov  r3,[iram_tmp__2Fh]                                ;\
9763 AA 30       mov  r2,[iram_tmp__30h]                                ;
9765 A9 31       mov  r1,[iram_tmp__31h]                                ;
9767 90 00 07    mov  dptr,0007h ;idx...                                ;
976A 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr      ;
976D EA          mov  a,r2                                              ;
976E 49          or   a,r1                                              ;
976F 4B          or   a,r3                                              ;
9770 60 3B       jz   a,@@exit                                          ;/
                ;- - -
9772 AB 2F       mov  r3,[iram_tmp__2Fh]                                ;\
9774 AA 30       mov  r2,[iram_tmp__30h]                                ;
9776 A9 31       mov  r1,[iram_tmp__31h]                                ;
9778 90 00 07    mov  dptr,0007h ;idx...                                ;
977B 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr      ;
977E 12 4D B1    call jmp_r2r1  ;----->                                 ;
9781 8F 36       mov  [iram_tmp__36h],r7 ;value (usually 0..100 decimal);/
9783 AB 2F       mov  r3,[iram_tmp__2Fh]
9785 AA 30       mov  r2,[iram_tmp__30h]
9787 A9 31       mov  r1,[iram_tmp__31h]
                ;with idx=0                                             ;\
9789 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1                ;
978C FF          mov  r7,a                                              ;/
978D 90 00 01    mov  dptr,0001h ;idx...                                ;\
9790 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr            ;
9793 FD          mov  r5,a                                              ;/
9794 90 00 06    mov  dptr,0006h ;idx...                                ;\
9797 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr            ;
979A FB          mov  r3,a         ;width/range (usually 100 decimal)   ;/
979B 90 00 85    mov  dptr,xram_tmp__85h
979E E0          movx a,[dptr]
979F C4          swap a
97A0 54 F0       and  a,0F0h
97A2 FE          mov  r6,a
97A3 90 00 84    mov  dptr,xram_tmp__84h
97A6 E0          movx a,[dptr]
97A7 4E          or   a,r6
97A8 F5 35       mov  [iram_tmp__35h],a    ;attr
97AA 12 64 F2    call osd_draw_bar     ;---------------------> osd draw bar
                @@exit:
97AD 22          ret
                .endm ;defcode_show_bar
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_lcd_apply_detected_video_r7
                  defcode_show_bar
                .endif
                ;------------------
;:------------- ;:----------------- init code
                ;------------------
                initial_data_list:
                 ;__TypLen____addr_________data____________
97AE C1 0A       db   0C1h // db (0*80h)+((iram_misc_flags-20h)*8)+(miscflg_2)
97B0 41 00 98 00 db   41h // dw xram_current_window                   // db 00h
97B4 01 1E 00    db   01h // db iram_like_xram_sett___0Eh             // db 00h
97B7 41 00 BA 00 db   41h // dw xram_index_secret_key_combo_MenuUDDUU // db 00h
97BB 41 00 BB 00 db   41h // dw xram_av_stat0_same_counter            // db 00h
                .if av_detect_version<ver11sep2017
97BF 01 1F 00      db   01h // db iram_old_AV_stat_detect_0           // db 00h
                .else  ;replace above BYTE by a FLAG bit
                   db   0C1h // db (0*80h)+((iram_misc_flags-20h)*8)+(miscflg_av)
                .endif
97C2 01 1A 00    db   01h // db iram_old_AV_framerate                 // db 00h
                .if infrared_version>=ver11sep2017
                   db   42h // dw xram_XXX__00C7h               // db 0ffh,0ffh
                .endif
97C5 41 00 C2 00 db   41h // dw xram_current_keypad_pin               // db 00h
97C9 41 00 C3 00 db   41h // dw xram_index_secret_key_combo_MenuDUUDD // db 00h
97CD 48 00 68 00 db   48h // dw xram_keybuf_8byte_B // db 00h,00h,00h,00h,00h,00h,00h,00h
97D8 48 00 60 00 db   48h // dw xram_keybuf_8byte_A // db 00h,00h,00h,00h,00h,00h,00h,00h
97E3 47 00 77 00 db   47h // dw xram_keybuf_7byte_B // db 00h,00h,00h,00h,00h,00h,00h
97ED 47 00 70 00 db   47h // dw xram_keybuf_7byte_A // db 00h,00h,00h,00h,00h,00h,00h
97F7 41 00 4F 00 db   41h // dw xram_level1key_phase // db 00h
97FB 42 00 50 00 db   42h // dw xram_level1key_time_msb    // db 00h,00h  ;msb and lsb
9800 41 00 52 00 db   41h // dw xram_level1key_curr_button // db 00h
9804 41 00 53 00 db   41h // dw xram_level1key_old_button  // db 00h
9808 41 00 54 00 db   41h // dw xram_level2key_phase       // db 00h
980C 41 00 55 00 db   41h // dw xram_level2key_curr_button // db 00h
9810 41 00 56 00 db   41h // dw xram_level2key_old_button  // db 00h
9814 41 00 57 00 db   41h // dw xram_level3key_phase       // db 00h
9818 42 00 58 00 db   42h // dw xram_level3key_time_A_msb // db 00h,00h
981D 42 00 5A 00 db   42h // dw xram_level3key_time_B_msb // db 00h,00h
9822 C1 0B       db   0C1h // db (0*80h)+((iram_misc_flags-20h)*8)+(miscflg_3)
9824 41 00 A9 00 db   41h // dw xram_irq_coarse_offhold        // db 00h
9828 41 00 AA FF db   41h // dw xram_old_AV_stat_signal_detect // db 0FFh   ;initial value FFh=invalid (later set to 4bit value)
982C 41 00 AB 00 db   41h // dw xram_irq_artifacts_offhold     // db 00h
9830 41 00 AC FF db   41h // dw xram_old_AV_stat_detect_2      // db 0FFh
9834 41 00 AD 00 db   41h // dw xram_irq_sharpness_offhold     // db 00h
9838 41 00 AE 00 db   41h // dw xram_irq_sensitivity_offhold   // db 00h
983C 00          db   00h
                ;------------------
;:------------- ;:----------------- GUI misc ()
                ;------------------
                .macro defdata_AV1_AV2_AV3
                ;------------------
                txt_5xSPC_AV1:
A6FC 20 20 20 20 db   '     AV1',00h
                txt_5xSPC_AV2:
A705 20 20 20 20 db   '     AV2',00h
                txt_5xSPC_AV3:
A70E 20 20 20 20 db   '     AV3',00h
                ;------------------
                txt_list_AV1_AV2_AV3:
A717 FF A6 FC    db   0FFh // dw txt_5xSPC_AV1
A71A FF A7 05    db   0FFh // dw txt_5xSPC_AV2
A71D FF A7 0E    db   0FFh // dw txt_5xSPC_AV3
A720 00 00 00    db   000h // dw 0000h
A723 00 00 00    db   000h // dw 0000h
A726 00 00 00    db   000h // dw 0000h
A729 00 00 00    db   000h // dw 0000h
A72C 00 00 00    db   000h // dw 0000h
A72F 00 00 00    db   000h // dw 0000h
                ;------------------
                .if shuffle_version>=ver11sep2017
                gui_null_PowerOn:
A79F 00          nop
A7A0 00          nop
A7A1 00          nop
A7A2 00          nop
A7A3 00          nop
                .endif
                ;------------------
                gui_data_PowerOn_show_AV1_AV2:
A732 00          nop
A733 00          nop
A734 05          db   05h
A735 00          nop
A736 05          db   05h
A737 00          nop
A738 FF BB D4    db   0FFh // dw get_settings_input_cropped_1
A73B FF B5 82    db   0FFh // dw get_txt_input_AV_cropped_1
A73E 00 08       dw   0008h
                ;---
                gui_data_PowerOn_show:    ;show AV1/AV2 upon power-on
A740 00 00 00    db   000h // dw 0000h
A743 00 00 00    db   000h // dw 0000h
A746 FF A7 32    db   0FFh // dw gui_data_PowerOn_show_AV1_AV2
A749 00 08       dw   0008h
                ;---
                .if shuffle_version<ver11sep2017
                gui_null_PowerOn:
A74B 00          nop
A74C 00          nop
A74D 00          nop
A74E 00          nop
A74F 00          nop
                .endif
                .endm ;defdata_AV1_AV2_AV3
                ;------------------
                .macro defdata_AV1_AV2_AV3_dupe
                ;------------------
                txt_5xSPC_AV1_dupe:
A750 20 20 20 20 db   '     AV1',00h
                txt_5xSPC_AV2_dupe:
A759 20 20 20 20 db   '     AV2',00h
                txt_5xSPC_AV3_dupe:
A762 20 20 20 20 db   '     AV3',00h
                ;------------------
                .if tech_version>=ver11sep2017
                  txt_F  db   '  F',00h
                .endif
                ;------------------
                txt_list_AV1_AV2_AV3_dupe:
A76B FF A7 50    db   0FFh // dw txt_5xSPC_AV1_dupe
A76E FF A7 59    db   0FFh // dw txt_5xSPC_AV2_dupe
A771 FF A7 62    db   0FFh // dw txt_5xSPC_AV3_dupe
A774 00 00 00    db   000h // dw 0000h
A777 00 00 00    db   000h // dw 0000h
A77A 00 00 00    db   000h // dw 0000h
A77D 00 00 00    db   000h // dw 0000h
A780 00 00 00    db   000h // dw 0000h
A783 00 00 00    db   000h // dw 0000h
                ;------------------
                .if tech_version>=ver11sep2017
                  txt_list_F_F_F:
A76B FF A7 50      db   0FFh // dw txt_F
A76E FF A7 59      db   0FFh // dw txt_F
A771 FF A7 62      db   0FFh // dw txt_F
A774 00 00 00      db   000h // dw 0000h
A777 00 00 00      db   000h // dw 0000h
A77A 00 00 00      db   000h // dw 0000h
A77D 00 00 00      db   000h // dw 0000h
A780 00 00 00      db   000h // dw 0000h
A783 00 00 00      db   000h // dw 0000h
                  gui_null_SourceMenu:
A74B 00            nop
A74C 00            nop
A74D 00            nop
A74E 00            nop
A74F 00            nop
                  gui_null_fMenuSource:
A74B 00            nop
A74C 00            nop
A74D 00            nop
A74E 00            nop
A74F 00            nop
                .endif
                ;------------------
                gui_data_SourceMenu_show_AV1_AV2:
A786 00          nop
A787 00          nop
A788 05          db   05h
A789 00          nop
A78A 05          db   05h
A78B 00          nop
A78C FF BB EB    db   0FFh // dw get_settings_input_cropped_2
A78F FF B5 C6    db   0FFh // dw get_txt_input_AV_cropped_2
A792 00 08       dw   0008h
                ;------------------
                .if tech_version>=ver11sep2017
                  gui_data_fMenuSource_show_txt_F_F_F:
                   nop
                   nop
                   db   02h
                   nop
                   db   02h
                   nop
                   db   0FFh // dw get_settings_input_cropped_2
                   db   0FFh // dw get_txt_input_F_F_F
                   dw   0008h
                .endif
                ;------------------
                gui_data_SourceMenu_show:
A794 00 00 00    db   000h // dw 0000h
A797 00 00 00    db   000h // dw 0000h
A79A FF A7 86    db   0FFh // dw gui_data_SourceMenu_show_AV1_AV2
A79D 00 08       dw   0008h
                ;------------------
                .if shuffle_version<ver11sep2017
                  gui_null_SourceMenu:
A79F 00            nop
A7A0 00            nop
A7A1 00            nop
A7A2 00            nop
A7A3 00            nop
                .endif
                ;------------------
                .if tech_version>=ver11sep2017
                  gui_data_fMenuSource_show:
A740 00 00 00      db   000h // dw 0000h
A743 00 00 00      db   000h // dw 0000h
                   db   0FFh // dw gui_data_fMenuSource_show_txt_F_F_F
                   dw   0008h
                .endif
                .endm ;defdata_AV1_AV2_AV3_dupe
                ;------------------
                .macro defdata_IR_OFF_A_B
A163 49 52 00   txt_ir            db 'IR',00h     ;<-- english, and most other languages
A166 0E 10 00   txt_ir_dutch      db 0Eh,10h,00h  ;<-- uh, THAT is dutch???
                ;---
A169 4F 46 46.. txt_infrared_OFF  db 'OFF',00h
A16D 20 20 41.. txt_infrared_A    db '  A',00h
A171 20 20 42.. txt_infrared_B    db '  B',00h
                ;------------------
                localized_txtlist_ir:
A175 FF A1 63    db   0FFh // dw txt_ir            ;00h ;English
A178 FF A1 63    db   0FFh // dw txt_ir            ;01h ;?
A17B FF A1 63    db   0FFh // dw txt_ir            ;02h ;French
A17E FF A1 63    db   0FFh // dw txt_ir            ;03h ;Italian
A181 FF A1 63    db   0FFh // dw txt_ir            ;04h ;Spanish
A184 FF A1 63    db   0FFh // dw txt_ir            ;05h ;German
A187 FF A1 63    db   0FFh // dw txt_ir            ;06h ;Portugese
A18A FF A1 66    db   0FFh // dw txt_ir_dutch      ;07h ;Dutch
A18D FF A1 63    db   0FFh // dw txt_ir            ;08h ;?
A190 FF A1 63    db   0FFh // dw txt_ir            ;09h ;?
A193 FF A1 63    db   0FFh // dw txt_ir            ;0Ah ;?
A196 FF A1 63    db   0FFh // dw txt_ir            ;0Bh ;?
A199 FF A1 63    db   0FFh // dw txt_ir            ;0Ch ;?
N/A ?           ;BUG: one missing entry here!!!    ;0Dh ;Polish
N/A ?           ;BUG: one missing entry here!!!    ;0Eh ;Turkish
                ;------------------
                txt_list_infrared_OFF_A_B:
A19C FF A1 69    db   0FFh // dw txt_infrared_OFF
A19F FF A1 6D    db   0FFh // dw txt_infrared_A
A1A2 FF A1 71    db   0FFh // dw txt_infrared_B
                ;------------------
                gui_null_IR_A_B:
A1A5 00          nop
A1A6 00          nop
A1A7 00          nop
A1A8 00          nop
A1A9 00          nop
                ;---
                gui_data_IR_A_B_show_ir_off_a_b:
A1AA 01          db   01h
A1AB 08          db   08h
A1AC 01          db   01h
A1AD 00          nop
A1AE 01          db   01h
A1AF 00          nop
A1B0 FF BF 0E    db   0FFh // dw get_settings_ir
A1B3 FF B4 FA    db   0FFh // dw get_txt_settings_ir
A1B6 00 08       dw   0008h
                ;---
                gui_data_IR_A_B_show:
A1B8 00 00 00    db   000h // dw 0000h
A1BB 00 00 00    db   000h // dw 0000h
A1BE FF A1 AA    db   0FFh // dw gui_data_IR_A_B_show_ir_off_a_b
A1C1 00 08       dw   0008h
                ;---
                gui_data_IR_A_B_name:
A1C3 00          nop
A1C4 00          nop
A1C5 01          db   01h
A1C6 00          nop
A1C7 01          db   01h
A1C8 00          nop
A1C9 01          db   01h
A1CA FF B9 AD    db   0FFh // dw get_localized_txt_ir
A1CD 00 08       dw   0008h
                .endm ;defdata_IR_OFF_A_B
                ;------------------
                .macro defdata_INPUT_AV1_AV2
                ;------------------
                txt_chrC3h_INPUT:
A1CF C3 49 4E 50 db   0C3h,'INPUT',00h    ;chr(C3h) ?
                ;---
                txt_spc_AV1:
A1D6 20 41 56 31 db   ' AV1',00h
                txt_spc_AV2:
A1DB 20 41 56 32 db   ' AV2',00h
                ;------------------
                localized_txtlist_input:
A1E0 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;00h ;English
A1E3 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;01h ;?
A1E6 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;02h ;French
A1E9 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;03h ;Italian
A1EC FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;04h ;Spanish
A1EF FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;05h ;German
A1F2 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;06h ;Portugese
A1F5 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;07h ;Dutch
A1F8 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;08h ;?
A1FB FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;09h ;?
A1FE FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;0Ah ;?
A201 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;0Bh ;?
A204 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;0Ch ;?
A207 FF A1 CF    db   0FFh // dw txt_chrC3h_INPUT  ;0Dh ;Polish
N/A ?           ;BUG: one missing entry here!!!    ;0Eh ;Turkish
                ;------------------
                txt_list_AV1_AV2:
A20A FF A1 D6    db   0FFh // dw txt_spc_AV1
A20D FF A1 DB    db   0FFh // dw txt_spc_AV2
                ;------------------
                gui_null_SelSource:
A210 00          nop
A211 00          nop
A212 00          nop
A213 00          nop
A214 00          nop
                ;---
                gui_data_SelSource_show_AV1_AV2:
A215 01          db   01h
A216 0B          db   0Bh
A217 01          db   01h
A218 00          nop
A219 01          db   01h
A21A 00          nop
A21B FF BD 9C    db   0FFh // dw get_settings_input
A21E FF B6 2C    db   0FFh // dw get_txt_input_AV1_AV2
A221 00 08       dw   0008h
                ;---
                gui_data_SelSource_show:   ;aka Input
A223 00 00 00    db   000h // dw 0000h
A226 00 00 00    db   000h // dw 0000h
A229 FF A2 15    db   0FFh // dw gui_data_SelSource_show_AV1_AV2
A22C 00 08       dw   0008h
                ;---
                gui_data_SelSource_name:   ;aka Input
A22E 01          db   01h
A22F 00          nop
A230 01          db   01h
A231 00          nop
A232 01          db   01h
A233 00          nop
A234 01          db   01h
A235 FF BA 78    db   0FFh // dw get_localized_txt_input
A238 00 08       dw   0008h
                .endm ;defdata_INPUT_AV1_AV2
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_lcd_apply_detected_video_r7
                  defcode_xxx_94BFh
                  defcode_show_bar
                  defdata_AV1_AV2_AV3_dupe
                .endif
                ;------------------
                osd_write_string_type_B:   ;XXX         ;used 1x
983D 8B 2F       mov  [iram_tmp__2Fh],r3
983F 8A 30       mov  [iram_tmp__30h],r2
9841 89 31       mov  [iram_tmp__31h],r1
9843 E9          mov  a,r1
9844 4A          or   a,r2
9845 4B          or   a,r3
9846 70 03       jnz  a,@@cont
9848 02 98 C9    jmp  @@exit
                ;---
                @@cont:
984B ED          mov  a,r5                                      ;\
984C 30 E7 14    jz   a.7,@@_9863h                              ;
984F 90 00 02    mov  dptr,0002h ;idxText_                      ;
9852 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
9855 90 00 84    mov  dptr,xram_tmp__84h                        ;
9858 F0          movx [dptr],a                                  ;
9859 90 00 03    mov  dptr,0003h ;idx...                        ;
985C 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
985F 90 00 85    mov  dptr,xram_tmp__85h                        ;
9862 F0          movx [dptr],a                                  ;
                @@_9863h:                                       ;/
9863 ED          mov  a,r5                                      ;\
9864 30 E6 1A    jz   a.6,@@_9881h                              ;
9867 AB 2F       mov  r3,[iram_tmp__2Fh]                        ;
9869 AA 30       mov  r2,[iram_tmp__30h]                        ;
986B A9 31       mov  r1,[iram_tmp__31h]                        ;
986D 90 00 04    mov  dptr,0004h ;idx...                        ;
9870 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
9873 90 00 84    mov  dptr,xram_tmp__84h                        ;
9876 F0          movx [dptr],a                                  ;
9877 90 00 05    mov  dptr,0005h                                ;
987A 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr    ;
987D 90 00 85    mov  dptr,xram_tmp__85h                        ;
9880 F0          movx [dptr],a                                  ;
                @@_9881h:                                       ;/
9881 AB 2F       mov  r3,[iram_tmp__2Fh]
9883 AA 30       mov  r2,[iram_tmp__30h]
9885 A9 31       mov  r1,[iram_tmp__31h]
9887 90 00 09    mov  dptr,0009h ;idx...
988A 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
988D EA          mov  a,r2
988E 49          or   a,r1
988F 4B          or   a,r3
9890 60 37       jz   a,@@exit
                ;- - -
9892 AB 2F       mov  r3,[iram_tmp__2Fh]
9894 AA 30       mov  r2,[iram_tmp__30h]
9896 A9 31       mov  r1,[iram_tmp__31h]
9898 90 00 09    mov  dptr,0009h ;idx...
989B 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
989E 12 4D B1    call jmp_r2r1  ;----->
98A1 8B 40       mov  [iram_tmp__40h],r3
98A3 8A 41       mov  [iram_tmp__41h],r2
98A5 89 42       mov  [iram_tmp__42h],r1
98A7 AB 2F       mov  r3,[iram_tmp__2Fh]
98A9 AA 30       mov  r2,[iram_tmp__30h]
98AB A9 31       mov  r1,[iram_tmp__31h]
                ;with idx=0      ;idx...
98AD 12 49 E7    call anymem_read_8bit_a_from_mem_r3r2r1
98B0 FF          mov  r7,a       ;yloc
98B1 90 00 01    mov  dptr,0001h ;idx...
98B4 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
98B7 FD          mov  r5,a       ;xloc
98B8 90 00 85    mov  dptr,xram_tmp__85h
98BB E0          movx a,[dptr]
98BC C4          swap a
98BD 54 F0       and  a,0F0h
98BF FE          mov  r6,a
98C0 90 00 84    mov  dptr,xram_tmp__84h
98C3 E0          movx a,[dptr]
98C4 4E          or   a,r6
98C5 FB          mov  r3,a       ;attr
98C6 12 77 29    call osd_draw_string
                @@exit:
98C9 22          ret
                ;------------------
;:------------- ;:----------------- reset entrypoint
                ;------------------
                reset_entrypoint:
98CA 78 7F       mov  r0,7Fh                    ;\
98CC E4          clr  a                         ; zerofill [7Fh..01h]
                @@zerofill_lop:                 ; (excluding r0 at [00h])
98CD F6          mov  [r0],a                    ;
98CE D8 FD       djnz r0,@@zerofill_lop         ;/
                ;note: above includes this:                  ;\heap at FFh..and down
                ;[iram_heap_ptr]=00h=(iram_heap_top and 0ffh);/
98D0 75 81 49    mov  sp,iram_stack_bottom-1            ;-stack at 4Ah..and up
98D3 02 99 11    jmp  @@start_init_variables    ;\init
                ;--- ---                        ; and then
                @@done_init_variables:          ;/come back here...
98D6 02 9A 65    jmp  main_function             ;--------> MAIN
                ;--- --- ----------
                @@to_8bit_addr:    ;in: cy
98D9 E4          clr  a
98DA 93          movc a,[a+dptr]
98DB A3          inc  dptr
98DC F8          mov  r0,a
                @@bytes_to_8bit_addr_lop:                       ;\
98DD E4          clr  a                                         ;
98DE 93          movc a,[a+dptr]                                ;
98DF A3          inc  dptr                                      ;
98E0 40 03       jc   @@to_ext_ram     ;<-- incoming cy         ;
98E2 F6          mov  [r0],a           ;<-- internal ram at 00h..FFh
98E3 80 01       sjmp @@bytes_to_8bit_addr_lop_next             ;
                @@to_ext_ram:                                   ;
98E5 F2          movx [r0],a           ;<-- ext ram at 00h..FFh (not actually used, ext ram is always done via 16bit dest addr)
                @@bytes_to_8bit_addr_lop_next:                  ;
98E6 08          inc  r0                                        ;
98E7 DF F4       djnz r7,@@bytes_to_8bit_addr_lop               ;/
98E9 80 29       sjmp @@init_variables_lop
                ;--- --- ----------
                @@set_clear_bits:
                @@bit_lop:
98EB E4          clr  a
98EC 93          movc a,[a+dptr]     ;=(value*80h)+((addr-20h)*8)+(bitno)
98ED A3          inc  dptr
98EE F8          mov  r0,a
98EF 54 07       and  a,07h         ;bit number 0..7
98F1 24 0C       add  a,@@bit_table-@@bit_table_origin
98F3 C8          xchg a,r0
98F4 C3          clr  c
98F5 33          rcl  a     ;bit7 to cy (set/clear flag)
98F6 C4          swap a
98F7 54 0F       and  a,0Fh         ;byte 00h..0Fh
98F9 44 20       or   a,20h         ;addr 20h..2Fh
98FB C8          xchg a,r0
98FC 83          movc a,[a+pc]          ;\xlat bit number 0..7 --> 01h..80h
                @@bit_table_origin:     ;/(via "@@bit_table")
98FD 40 04       jc   @@set_bit         ;\
98FF F4          cpl  a                 ;
9900 56          and  a,[r0]    ;CLEAR  ;
9901 80 01       sjmp @@this_bit        ;
                @@set_bit:              ;
9903 46          or   a,[r0]    ;SET    ;
                @@this_bit:             ;
9904 F6          mov  [r0],a    ;apply  ;/
9905 DF E4       djnz r7,@@bit_lop      ;-lop next bit (if any)
9907 80 0B       sjmp @@init_variables_lop
                ;--- --- ---
                @@bit_table:
9909 01 02 04 08 db   01h,02h,04h,08h,10h,20h,40h,80h
                ;--- --- ---
                @@start_init_variables:
9911 90 97 AE    mov  dptr,initial_data_list
                @@init_variables_lop:
9914 E4          clr  a
9915 7E 01       mov  r6,01h      ;len.msb=00h(+1)
9917 93          movc a,[a+dptr]
9918 60 BC       jz   a,@@done_init_variables       ;---> "return"
991A A3          inc  dptr
991B FF          mov  r7,a        ;type.bits to a (and len.bits)
991C 54 3F       and  a,3Fh
991E 30 E5 09    jz   a.5,@@no_extra_byte_for_len   ;no extra byte for len.byte
9921 54 1F       and  a,1Fh
9923 FE          mov  r6,a        ;len.msb=NNh  (not used, max length used in 8 bytes)
9924 E4          clr  a
9925 93          movc a,[a+dptr]  ;len.lsb
9926 A3          inc  dptr
9927 60 01       jz   a,@@dont_adjust_len_msb
9929 0E          inc  r6          ;len.msb=NNh(+1)
                @@dont_adjust_len_msb:
                @@no_extra_byte_for_len:
992A CF          xchg a,r7        ;len.lsb to r7, type.bits to a
992B 54 C0       and  a,0C0h
992D 25 E0       add  a,a
992F 60 A8       jz   a,@@to_8bit_addr ;in: cy ;--->   00 or 10   copy bytes to 8bit addr (in ext ram, or internal ram)
9931 40 B8       jc   @@set_clear_bits         ;--->   11         set_clear_bits
                ;- - -                         ;--->   01         copy bytes to 16bit addr (in ext ram)
9933 E4          clr  a
9934 93          movc a,[a+dptr]
9935 A3          inc  dptr
9936 FA          mov  r2,a   ;dst.msb
9937 E4          clr  a
9938 93          movc a,[a+dptr]
9939 A3          inc  dptr
993A F8          mov  r0,a   ;dst.lsb
                @@bytes_to_16bit_addr_lop:              ;\
993B E4          clr  a                                 ;
993C 93          movc a,[a+dptr] ;src                   ;
993D A3          inc  dptr                              ;
993E C8          xchg a,r0                              ;
993F C5 82       xchg a,dpl                             ;
9941 C8          xchg a,r0                              ;
9942 CA          xchg a,r2                              ;
9943 C5 83       xchg a,dph                             ;
9945 CA          xchg a,r2                              ;
9946 F0          movx [dptr],a   ;dst                   ;
9947 A3          inc  dptr                              ;
9948 C8          xchg a,r0                              ;
9949 C5 82       xchg a,dpl                             ;
994B C8          xchg a,r0                              ;
994C CA          xchg a,r2                              ;
994D C5 83       xchg a,dph                             ;
994F CA          xchg a,r2                              ;
9950 DF E9       djnz r7,@@bytes_to_16bit_addr_lop      ;
9952 DE E7       djnz r6,@@bytes_to_16bit_addr_lop      ;/
9954 80 BE       sjmp @@init_variables_lop              ;-
                ;------------------
;:------------- ;:----------------- GUI misc ()
                ;------------------
                osd_write_hex16bit:
9956 8F 32       mov  [iram_tmp__32h],r7
9958 8D 33       mov  [iram_tmp__33h],r5
995A 8B 34       mov  [iram_tmp__34h],r3
995C 78 86       mov  r0,xram_tmp__86h and 0ffh ;\
995E 7C 00       mov  r4,xram_tmp__86h/100h     ; dst
9960 7D 01       mov  r5,01h           ;area    ;/
9962 7B FF       mov  r3,0FFh
9964 7A 5B       mov  r2,hexadecimal_initial_zero_variables/100h
9966 79 79       mov  r1,hexadecimal_initial_zero_variables and 0ffh
9968 7E 00       mov  r6,00h  ;\len 5
996A 7F 05       mov  r7,05h  ;/
996C 12 49 C1    call anymem_generic_memcopy
996F E5 35       mov  a,[iram_tmp__35h]
9971 C4          swap a
9972 54 0F       and  a,0Fh
9974 7E 00       mov  r6,00h
9976 24 69       add  a,hexadecimal_chars and 0ffh
9978 F5 82       mov  dpl,a
997A EE          mov  a,r6
997B 34 5B       adc  a,hexadecimal_chars/100h
997D F5 83       mov  dph,a
997F E4          clr  a
9980 93          movc a,[a+dptr]
9981 90 00 86    mov  dptr,xram_tmp__86h
9984 F0          movx [dptr],a
9985 E5 35       mov  a,[iram_tmp__35h]
9987 54 0F       and  a,0Fh
9989 7E 00       mov  r6,00h
998B 24 69       add  a,hexadecimal_chars and 0ffh
998D F5 82       mov  dpl,a
998F EE          mov  a,r6
9990 34 5B       adc  a,hexadecimal_chars/100h
9992 F5 83       mov  dph,a
9994 E4          clr  a
9995 93          movc a,[a+dptr]
9996 90 00 87    mov  dptr,xram_tmp__87h
9999 F0          movx [dptr],a
999A EE          mov  a,r6
999B C4          swap a
999C F8          mov  r0,a
999D 54 F0       and  a,0F0h
999F C8          xchg a,r0
99A0 68          xor  a,r0
99A1 FE          mov  r6,a
99A2 E5 36       mov  a,[iram_tmp__36h]
99A4 C4          swap a
99A5 54 0F       and  a,0Fh
99A7 48          or   a,r0
99A8 24 69       add  a,hexadecimal_chars and 0ffh
99AA F5 82       mov  dpl,a
99AC 74 5B       mov  a,hexadecimal_chars/100h
99AE 3E          adc  a,r6
99AF F5 83       mov  dph,a
99B1 E4          clr  a
99B2 93          movc a,[a+dptr]
99B3 90 00 88    mov  dptr,xram_tmp__88h
99B6 F0          movx [dptr],a
99B7 7E 00       mov  r6,00h
99B9 E5 36       mov  a,[iram_tmp__36h]
99BB 54 0F       and  a,0Fh
99BD 24 69       add  a,hexadecimal_chars and 0ffh
99BF F5 82       mov  dpl,a
99C1 EE          mov  a,r6
99C2 34 5B       adc  a,hexadecimal_chars/100h
99C4 F5 83       mov  dph,a
99C6 E4          clr  a
99C7 93          movc a,[a+dptr]
99C8 90 00 89    mov  dptr,xram_tmp__89h
99CB F0          movx [dptr],a
99CC 75 40 01    mov  [iram_tmp__40h],01h           ;area       ;\
99CF 75 41 00    mov  [iram_tmp__41h],xram_tmp__86h/100h        ;
99D2 75 42 86    mov  [iram_tmp__42h],xram_tmp__86h and 0ffh    ;/
99D5 AB 34       mov  r3,[iram_tmp__34h]  ;attr
99D7 AD 33       mov  r5,[iram_tmp__33h]  ;xloc
99D9 AF 32       mov  r7,[iram_tmp__32h]  ;yloc
99DB 02 77 29    jmp  osd_draw_string
                ;------------------
99DE 52 4F 54.. txt_rotate_english    db 'ROTATE',00h
99E5 23 2B 20.. txt_ratate_slang_01h  db '#+ #,',00h
99EB 23 75 20.. txt_ratate_slang_09h  db '#u #v',00h
99F1 23 58 23.. txt_ratate_slang_0Ah  db '#X#Y#',88h,'#',0CDh,00h
99FA 23 75 20.. txt_ratate_slang_0Bh  db '#u ',0F7h,00h
                ;------------------
99FF D1 D0 00   txt_rotate_symbol   db 0D1h,0D0h,00h   ;txt rotate_symbols's ?
                ;------------------
                localized_txtlist_rotate:         ;used 2x
9A02 FF 99 DE    db   0FFh // dw txt_rotate_english     ;00h ;English
9A05 FF 99 E5    db   0FFh // dw txt_ratate_slang_01h   ;01h ;?
9A08 FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;02h ;French
9A0B FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;03h ;Italian
9A0E FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;04h ;Spanish
9A11 FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;05h ;German
9A14 FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;06h ;Portugese
9A17 FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;07h ;Dutch
9A1A FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;08h ;?
9A1D FF 99 EB    db   0FFh // dw txt_ratate_slang_09h   ;09h ;?
9A20 FF 99 F1    db   0FFh // dw txt_ratate_slang_0Ah   ;0Ah ;?
9A23 FF 99 FA    db   0FFh // dw txt_ratate_slang_0Bh   ;0Bh ;?
9A26 FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;0Ch ;?
9A29 FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;0Dh ;Polish
9A2C FF 99 DE    db   0FFh // dw txt_rotate_english  ;* ;0Eh ;Turkish
                ;------------------
                txt_list_rotate_symbols:
9A2F FF 99 FF    db   0FFh // dw txt_rotate_symbol  ;\txt rotate_symbols's ?
9A32 FF 99 FF    db   0FFh // dw txt_rotate_symbol  ;     all same ?
9A35 FF 99 FF    db   0FFh // dw txt_rotate_symbol  ;     (ie. not implemented?)
9A38 FF 99 FF    db   0FFh // dw txt_rotate_symbol  ;/    (or all meaning "rotate by 90'" relative to current view)
                ;------------------
                gui_null_SysMenuXflip:
9A3B 00          nop
9A3C 00          nop
9A3D 00          nop
9A3E 00          nop
9A3F 00          nop
                ;---
                gui_data_SysMenuXflip_show_symbol:
9A40 01          db   01h
9A41 0D          db   0Dh
9A42 01          db   01h
9A43 00          nop
9A44 01          db   01h
9A45 00          nop
9A46 FF BF 56    db   0FFh // dw get_settings_rotate_dupe
9A49 FF B6 0A    db   0FFh // dw get_settings_rotate_symbol_dupe
9A4C 00 08       dw   0008h
                ;---
                gui_data_SysMenuXflip_show:
9A4E 00 00 00    db   000h // dw 0000h
9A51 00 00 00    db   000h // dw 0000h
9A54 FF 9A 40    db   0FFh // dw gui_data_SysMenuXflip_show_symbol
9A57 00 08       dw   0008h
                ;---
                gui_data_SysMenuXflip_name:
9A59 01          db   01h
9A5A 00          nop
9A5B 01          db   01h
9A5C 00          nop
9A5D 01          db   01h
9A5E 00          nop
9A5F 01          db   01h
9A60 FF BA 5B    db   0FFh // dw get_localized_txt_rotate_dupe
9A63 00 08       dw   0008h
                ;------------------
;:------------- ;:----------------- FLASH data (chip types)
                ;------------------
                .macro defdata_flash_chiptype_list
                .if flash_version<ver11sep2017
                 flash_chiptype_list:       ;02h-byte blocks...
                  ;--- +0  +1
                  ;---Wren Erase
BED6 06 20        db   06h,020h  ;-type 0 (used)
BED8 06 D7        db   06h,0D7h  ;\
BEDA 06 D8        db   06h,0D8h  ; type 1-3 (not used, type is fixed=0)
BEDC 06 20        db   06h,020h  ;/
                  ;06h = Write Enable (WREN) (for write/erase/writeprotect)
                  ;20h = Erase Sector (4Kbyte)
                  ;D7h = Erase what ?
                  ;D8h = Erase Block (64Kbyte)
                .else ;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
                 flash_chiptype_list:       ;0Ch-byte blocks...
                  ;--- +0  +1  +2  +3  +4  +5  +6   +7  +8  +9  +A   +B
                  ;--- ID  Fre Lok Era <--settings_1--> <--settings_2-->
93F5 10 00 04 20  db   10h,00h,04h,20h,00h,00h,0E0h,00h,00h,00h,0F0h,00h ;<-- default used when chip.detection.failure (which DOES seem to happen due to some bug)
9401 11 24 18 20  db   11h,24h,18h,20h,00h,01h,0E0h,00h,00h,01h,0F0h,00h ;W25D10 128Kbyte
940D 12 28 0C 20  db   12h,28h,0Ch,20h,00h,02h,000h,00h,00h,02h,010h,00h ;W25D20 256Kbyte
9419 13 28 10 20  db   13h,28h,10h,20h,00h,02h,000h,00h,00h,02h,010h,00h ;W25D40 512Kbyte (this chip is being used on existing boards, but... above default seems to be use due to some bug)
9425 14 28 14 20  db   14h,28h,14h,20h,00h,02h,000h,00h,00h,02h,010h,00h ;W25D80 1024Kbyte
9431 15 28 18 20  db   15h,28h,18h,20h,00h,02h,000h,00h,00h,02h,010h,00h
943D 16 28 1C 20  db   16h,28h,1Ch,20h,00h,02h,000h,00h,00h,02h,010h,00h
9449 17 24 1C 20  db   17h,24h,1Ch,20h,00h,02h,000h,00h,00h,02h,010h,00h
9455 18 1C 1C 20  db   18h,1Ch,1Ch,20h,00h,02h,000h,00h,00h,02h,010h,00h
9461 19 24 24 20  db   19h,24h,24h,20h,00h,02h,000h,00h,00h,02h,010h,00h
946D 20 24 24 20  db   20h,24h,24h,20h,00h,02h,000h,00h,00h,02h,010h,00h ;?
                .endif
                .endm ;defdata_flash_chiptype_list
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defdata_flash_chiptype_list
                .endif
                ;------------------
;:------------- ;:----------------- SETTINGS
                ;------------------
                .macro defcode_do_save_settings
                do_save_settings:
A6A8 12 7C BC    call force_valid_settings          ;-
A6AB 90 00 37    mov  dptr,xram_sett_id_55h         ;\
A6AE 74 55       mov  a,55h                         ; [0008h+2Fh]=55h (end marker)
A6B0 F0          movx [dptr],a                      ;/
A6B1 90 00 08    mov  dptr,xram_sett_id_AAh         ;\
A6B4 74 AA       mov  a,0AAh                        ; [0008h+00h]=AAh (start marker)
A6B6 F0          movx [dptr],a                      ;/
A6B7 7B 01       mov  r3,01h                             ;src.area
A6B9 7A 00       mov  r2,xram_settings_start/100h        ;src.msb  ;\0008h
A6BB 79 08       mov  r1,xram_settings_start and 0ffh    ;src.lsb  ;/
A6BD 7D 30       mov  r5,(xram_settings_size-1) and 0ffh ;len.lsb
A6BF 7C 00       mov  r4,(xram_settings_size-1)/100h     ;len.msb
A6C1 12 A8 9C    call calc_xor_checksum
A6C4 90 00 38    mov  dptr,xram_sett_chksum         ;\
A6C7 EF          mov  a,r7                          ; [0008h+30h]=checksum
A6C8 F0          movx [dptr],a                      ;/
                ;- - - -
                .if flash_version>=ver11sep2017
949A 12 AB 38      call flash_write_enable              ;-
949D 90 00 3E      mov  dptr,xram_curr_lock_some        ;\
94A0 E0            movx a,[dptr]                        ;
94A1 54 7F         and  a,7Fh                           ;
94A3 FF            mov  r7,a                            ;
94A4 12 AF F5      call flash_set_wprot_to_r7           ;/
                   ;- - - -
94A7 90 00 AE      mov  dptr,xram_settings_1_addr
94AA E0            movx a,[dptr]
94AB FC            mov  r4,a
94AC A3            inc  dptr
94AD E0            movx a,[dptr]
94AE FD            mov  r5,a
94AF A3            inc  dptr
94B0 E0            movx a,[dptr]
94B1 FE            mov  r6,a
94B2 A3            inc  dptr
94B3 E0            movx a,[dptr]
94B4 FF            mov  r7,a
                .endif
A6C9 75 3C 00    mov  [iram_tmp__3Ch],xram_settings_start/100h     ;ram.addr.msb
A6CC 75 3D 08    mov  [iram_tmp__3Dh],xram_settings_start and 0ffh ;ram.addr.lsb
A6CF 75 3E 00    mov  [iram_tmp__3Eh],xram_settings_size/100h
A6D2 75 3F 31    mov  [iram_tmp__3Fh],xram_settings_size and 0ffh
                .if flash_version<ver11sep2017
A6D5 7F 00         mov  r7,0E000h and 0ffh
A6D7 7E E0         mov  r6,0E000h/100h
A6D9 7D 00         mov  r5,00h  ;flash.addr.msb
                .endif
A6DB 12 7D 9A    call write_flash    ;-------------> WRITE FLASH
                .if flash_version<ver11sep2017
A6DE 7F 64         mov  r7,64h                                  ;\
A6E0 7E 00         mov  r6,00h                                  ; delay 100
A6E2 12 BB 5D      call slow_delay_r6r7                         ;/
                .else
                   mov  r7,32h                                  ;\
                   mov  r6,00h                                  ; delay 50
                   call slow_delay_r6r7                         ;/
                .endif
                ;- - - -
                .if flash_version>=ver11sep2017
94CB 90 00 AA      mov  dptr,xram_settings_2_addr
94CE E0            movx a,[dptr]
94CF FC            mov  r4,a
94D0 A3            inc  dptr
94D1 E0            movx a,[dptr]
94D2 FD            mov  r5,a
94D3 A3            inc  dptr
94D4 E0            movx a,[dptr]
94D5 FE            mov  r6,a
94D6 A3            inc  dptr
94D7 E0            movx a,[dptr]
94D8 FF            mov  r7,a
                .endif
A6E5 75 3C 00    mov  [iram_tmp__3Ch],xram_settings_start/100h     ;ram.addr.msb
A6E8 75 3D 08    mov  [iram_tmp__3Dh],xram_settings_start and 0ffh ;ram.addr.lsb
A6EB 75 3E 00    mov  [iram_tmp__3Eh],xram_settings_size/100h
A6EE 75 3F 31    mov  [iram_tmp__3Fh],xram_settings_size and 0ffh
                .if flash_version<ver11sep2017
A6F1 7F 00         mov  r7,0F000h and 0ffh
A6F3 7E F0         mov  r6,0F000h/100h
A6F5 7D 00         mov  r5,00h  ;flash.addr.msb
A6F7 7C 00         mov  r4,00h
A6F9 02 7D 9A      jmp  write_flash    ;-------------> WRITE FLASH
                .else
94E5 12 6E D8      call write_flash    ;-------------> WRITE FLASH
94E8 7F 32         mov  r7,32h                          ;\
94EA 7E 00         mov  r6,00h                          ; delay 50
94EC 12 B4 CC      call slow_delay_r6r7                 ;/
94EF 90 00 40      mov  dptr,xram_curr_lock_all         ;\
94F2 E0            movx a,[dptr]                        ;
94F3 54 7F         and  a,7Fh                           ; lock all
94F5 FF            mov  r7,a                            ;
94F6 02 AF F5      jmp  flash_set_wprot_to_r7           ;/
                .endif
                .endm ;defcode_do_save_settings
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_do_save_settings
                .endif
                ;------------------
;:------------- ;:----------------- main function
                ;------------------
                main_function:
9A65 12 BC 18    call main_init                                 ;-
9A68 7F 1A       mov  r7,ID_func_1Ah_InitialPowerUpInit         ;\
9A6A 12 2C 8E    call execute_func_r7                           ;/

                .if patchme
                   call unlock_C64_video   ;<-- this still FLASHES C64 picture on/off (seems that firmware's IRQ handler messes up things, but maybe the newer firmware "ver11sep2017" version is working better)
                .endif

                @@mainloop:
9A6D 12 09 51    call watchdog_reload                   ;--- watchdog maybe?
                ;- - - -
9A70 A2 01       mov  c,[iram_req_event_flags].1  ;RQ_keyboard          ;\  ;\
9A72 92 07       mov  [iram_req_event_flags].7,c                        ;   ;
9A74 12 07 5D    call check_event_keyboard ;out: r7                     ;   ; check/handle
9A77 8F 25       mov  [iram_tmp_event_code],r7 ;... ;ID_func_XXh_xxx    ;/  ; keyboard buttons
9A79 E5 25       mov  a,[iram_tmp_event_code]  ;... ;ID_func_XXh_xxx    ;\  ;
9A7B 60 06       jz   a,@@skip1                                         ;   ;
9A7D 12 B8 DD    call handle_event_keyboard ;in: r7                     ;   ;
9A80 E4          clr  a                                                 ;   ;
9A81 F5 25       mov  [iram_tmp_event_code],a                           ;   ;
                @@skip1:                                                ;/  ;/
                ;- - - -
9A83 A2 04       mov  c,[iram_req_event_flags].4  ;RQ_source_menu    ;\  ;\
9A85 92 07       mov  [iram_req_event_flags].7,c                     ;   ;
9A87 12 07 B9    call check_event_source_menu                        ;   ; check/handle
9A8A 8F 25       mov  [iram_tmp_event_code],r7                       ;/  ; ... SourceMenu ?
9A8C E5 25       mov  a,[iram_tmp_event_code]                        ;\  ;     (if power)
9A8E 60 06       jz   a,@@skip2                                      ;   ;
9A90 12 B1 2F    call handle_event_source_menu                       ;   ;
9A93 E4          clr  a                                              ;   ;
9A94 F5 25       mov  [iram_tmp_event_code],a                        ;   ;
                @@skip2:                                             ;/  ;/
                ;- - - -
9A96 A2 02       mov  c,[iram_req_event_flags].2  ;RQ_detected_video ;\  ;\
9A98 92 07       mov  [iram_req_event_flags].7,c                     ;   ;
9A9A 12 09 0D    call check_event_detected_video                     ;   ; check/handle
9A9D 8F 25       mov  [iram_tmp_event_code],r7     ;\                ;/  ; detected video
9A9F E5 25       mov  a,[iram_tmp_event_code]      ;/                ;\  ;
9AA1 60 06       jz   a,@@skip3                                      ;   ;
9AA3 12 BE 3A    call handle_event_detected_video                    ;   ;
9AA6 E4          clr  a                                              ;   ;
9AA7 F5 25       mov  [iram_tmp_event_code],a                        ;   ;
                @@skip3:                                             ;/  ;/
                ;- - - -
9AA9 A2 06       mov  c,[iram_req_event_flags].6  ;RQ_signal_or_save ;\  ;\
9AAB 92 07       mov  [iram_req_event_flags].7,c                     ;   ;
9AAD 12 08 44    call check_event_close_or_save                      ;   ; check/handle
9AB0 8F 25       mov  [iram_tmp_event_code],r7                       ;/  ; offholds for
9AB2 E5 25       mov  a,[iram_tmp_event_code]                        ;\  ; CloseMenu & SaveSettings
9AB4 60 06       jz   a,@@skip4                                      ;   ;
9AB6 12 BB BD    call handle_event_close_or_save                     ;   ;
9AB9 E4          clr  a                                              ;   ;
9ABA F5 25       mov  [iram_tmp_event_code],a                        ;   ;
                @@skip4:                                             ;/  ;/
                ;- - - -
9ABC A2 00       mov  c,[iram_req_event_flags].0  ;RQ_          ;\  ;\
9ABE 92 07       mov  [iram_req_event_flags].7,c                ;   ;
9AC0 12 08 CD    call check_event____misc                       ;   ;
9AC3 8F 25       mov  [iram_tmp_event_code],r7                  ;/  ;
9AC5 E5 25       mov  a,[iram_tmp_event_code]                   ;\  ;
9AC7 60 06       jz   a,@@skip5                                 ;   ;
9AC9 12 80 F3    call handle_event____misc   ;... apply detected/selected input ?
9ACC E4          clr  a                                         ;   ;
9ACD F5 25       mov  [iram_tmp_event_code],a                   ;   ;
                @@skip5:                                        ;/  ;/
                ;- - - -
9ACF A2 05       mov  c,[iram_req_event_flags].5  ;RQ_blah_dummy;\  ;\
9AD1 92 07       mov  [iram_req_event_flags].7,c                ;   ;
9AD3 12 09 6C    call dummy_ack_req5                            ;   ; check/handle
9AD6 8F 25       mov  [iram_tmp_event_code],r7                  ;/  ; dummy blah
9AD8 E5 25       mov  a,[iram_tmp_event_code]                   ;\  ;
9ADA 60 91       jz   a,@@mainloop  ;@@skip6                    ;   ;
                ;- - - - -                                      ;   ;
9ADC 12 BF D8    call dummy_ret4                                ;   ;
9ADF E4          clr  a                                         ;   ;
9AE0 F5 25       mov  [iram_tmp_event_code],a                   ;   ;
                ;@@skip6:                                       ;/  ;/
9AE2 80 89       sjmp @@mainloop
                ;------------------
                gui_proc_FactoryPic_VCOM_DC_apply:
9AE4 7F 04       mov  r7,04h       ;FIXED but, below implements only 0..3 ?
9AE6 E4          clr  a            ;FIXED
9AE7 70 78       jnz  a,@@vcom_dc_done
9AE9 EF          mov  a,r7
9AEA 14          dec  a
9AEB 60 25       jz   a,@@vcom_dc_pwm_1
9AED 14          dec  a
9AEE 60 3D       jz   a,@@vcom_dc_pwm_2
9AF0 14          dec  a
9AF1 60 55       jz   a,@@vcom_dc_pwm_3
9AF3 24 03       add  a,03h
9AF5 70 6A       jnz  a,@@vcom_dc_pwm_not_0   ;FIXED, always jumps here
                ;- - - ;@@vcom_dc_pwm_0
                @@vcom_dc_pwm_0:
9AF7 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
9AFA A3          inc  dptr ;=xram_sett_vcom_dc_lo
9AFB E0          movx a,[dptr]
9AFC F5 3D       mov  [iram_tmp__3Dh],a
9AFE 7F 28       mov  r7,28h
9B00 7E 0A       mov  r6,0Ah
9B02 7D 00       mov  r5,00h
9B04 7C 00       mov  r4,00h
9B06 12 84 FE    call pwm_set_duty_pwm0
9B09 90 FD 1F    mov  dptr,IO_PWM_enable_flags
9B0C E0          movx a,[dptr]
9B0D 44 01       or   a,01h
9B0F F0          movx [dptr],a
9B10 80 4F       sjmp @@vcom_dc_done
                ;---
                @@vcom_dc_pwm_1:
9B12 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
9B15 A3          inc  dptr ;=xram_sett_vcom_dc_lo
9B16 E0          movx a,[dptr]
9B17 F5 3D       mov  [iram_tmp__3Dh],a
9B19 7F 28       mov  r7,28h
9B1B 7E 0A       mov  r6,0Ah
9B1D 7D 00       mov  r5,00h
9B1F 7C 00       mov  r4,00h
9B21 12 85 C5    call pwm_set_duty_pwm1
9B24 90 FD 1F    mov  dptr,IO_PWM_enable_flags
9B27 E0          movx a,[dptr]
9B28 44 02       or   a,02h
9B2A F0          movx [dptr],a
9B2B 80 34       sjmp @@vcom_dc_done
                ;---
                @@vcom_dc_pwm_2:
9B2D 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
9B30 A3          inc  dptr ;=xram_sett_vcom_dc_lo
9B31 E0          movx a,[dptr]
9B32 F5 3D       mov  [iram_tmp__3Dh],a
9B34 7F 28       mov  r7,28h
9B36 7E 0A       mov  r6,0Ah
9B38 7D 00       mov  r5,00h
9B3A 7C 00       mov  r4,00h
9B3C 12 86 8C    call pwm_set_duty_pwm2
9B3F 90 FD 1F    mov  dptr,IO_PWM_enable_flags
9B42 E0          movx a,[dptr]
9B43 44 04       or   a,04h
9B45 F0          movx [dptr],a
9B46 80 19       sjmp @@vcom_dc_done
                ;---
                @@vcom_dc_pwm_3:
9B48 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
9B4B A3          inc  dptr ;=xram_sett_vcom_dc_lo
9B4C E0          movx a,[dptr]
9B4D F5 3D       mov  [iram_tmp__3Dh],a
9B4F 7F 28       mov  r7,28h
9B51 7E 0A       mov  r6,0Ah
9B53 7D 00       mov  r5,00h
9B55 7C 00       mov  r4,00h
9B57 12 87 53    call pwm_set_duty_pwm3
9B5A 90 FD 1F    mov  dptr,IO_PWM_enable_flags
9B5D E0          movx a,[dptr]
9B5E 44 08       or   a,08h
9B60 F0          movx [dptr],a
                @@vcom_dc_pwm_not_0:
                @@vcom_dc_done:
9B61 D3          set  c
9B62 22          ret
                ;------------------
;:------------- ;:----------------- GUI misc ()
                ;------------------
9B63 52 45 53.. txt_reset_english    db 'RESET',00h
9B69 23 2E 20.. txt_reset_slang_01h  db '#. #& #/',00h
9B72 24 25 26.. txt_reset_slang_08h  db '$%&''()',00h
9B79 23 8F 20.. txt_reset_slang_09h  db '#',8Fh,' #',05h,00h
9B7F 23 E5 23.. txt_reset_slang_0Ah  db '#',0E5h,'#',0E6h,'#',0CBh,'#',0BDh,00h
9B88 FA 20 23.. txt_reset_slang_0Bh  db 0FAh,' #',05h,' ',00h
9B8E 14 xx xx.. txt_reset_slang_0Ch  db 14h,'%$',15h,18h,09h,07h,13h,0Ch,00h
                ;------------------
                localized_txtlist_reset:
9B98 FF 9B 63    db   0FFh // dw txt_reset_english      ;00h ;English
9B9B FF 9B 69    db   0FFh // dw txt_reset_slang_01h    ;01h ;?
9B9E FF 9B 63    db   0FFh // dw txt_reset_english   ;* ;02h ;French
9BA1 FF 9B 63    db   0FFh // dw txt_reset_english   ;* ;03h ;Italian
9BA4 FF 9B 63    db   0FFh // dw txt_reset_english   ;* ;04h ;Spanish
9BA7 FF 9B 63    db   0FFh // dw txt_reset_english   ;* ;05h ;German
9BAA FF 9B 63    db   0FFh // dw txt_reset_english   ;* ;06h ;Portugese
9BAD FF 9B 63    db   0FFh // dw txt_reset_english   ;* ;07h ;Dutch
9BB0 FF 9B 72    db   0FFh // dw txt_reset_slang_08h    ;08h ;?
9BB3 FF 9B 79    db   0FFh // dw txt_reset_slang_09h    ;09h ;?
9BB6 FF 9B 7F    db   0FFh // dw txt_reset_slang_0Ah    ;0Ah ;?
9BB9 FF 9B 88    db   0FFh // dw txt_reset_slang_0Bh    ;0Bh ;?
9BBC FF 9B 8E    db   0FFh // dw txt_reset_slang_0Ch    ;0Ch ;?
9BBF FF 9B 63    db   0FFh // dw txt_reset_english   ;* ;0Dh ;Polish
9BC2 FF 9B 63    db   0FFh // dw txt_reset_english   ;* ;0Eh ;Turkish
                ;------------------
                gui_null_Reset:
9BC5 00          nop
9BC6 00          nop
9BC7 00          nop
9BC8 00          nop
9BC9 00          nop
                ;---
                gui_data_Reset_show:  ;(dummy, show nothing)
9BCA 00 00 00    db   000h // dw 0000h   ;\
9BCD 00 00 00    db   000h // dw 0000h   ; all zero
9BD0 00 00 00    db   000h // dw 0000h   ;/
9BD3 00 08       dw   0008h
                ;---
                gui_data_Reset_name:
9BD5 01          db   01h
9BD6 05          db   05h
9BD7 01          db   01h
9BD8 00          nop
9BD9 01          db   01h
9BDA 00          nop
9BDB 01          db   01h
9BDC FF BA 04    db   0FFh // dw get_localized_txt_reset
9BDF 00 08       dw   0008h
                ;------------------
;:------------- ;:----------------- .......................
                ;------------------
                .macro defcode_verify_loaded_settings
                verify_loaded_settings:    ;in: cy (0=error)
9BE1 92 07       mov  [iram_req_event_flags].7,c    ;<-- memorize error.flag (0=error)
9BE3 7B 01       mov  r3,01h
9BE5 7A 00       mov  r2,xram_settings_start/100h
9BE7 79 08       mov  r1,xram_settings_start and 0ffh
9BE9 90 00 38    mov  dptr,xram_sett_chksum  ;Settings Checksum         ;\
9BEC E0          movx a,[dptr]                                          ;
9BED F5 2B       mov  [iram_tmp__2Bh],a   ;copy of Settings Checksum    ;/
9BEF 7D 30       mov  r5,(xram_settings_size-1) and 0ffh ;len.lsb
9BF1 7C 00       mov  r4,(xram_settings_size-1)/100h     ;len.msb
9BF3 8B 26       mov  [iram_tmp__26h],r3
9BF5 8A 27       mov  [iram_tmp__27h],r2
9BF7 89 28       mov  [iram_tmp__28h],r1
9BF9 8C 29       mov  [iram_tmp__29h],r4
9BFB 8D 2A       mov  [iram_tmp__2Ah],r5
9BFD E4          clr  a                         ;\
9BFE 90 00 80    mov  dptr,xram_tmp__80h        ; chksum=00h
9C01 F0          movx [dptr],a                  ;/
9C02 90 00 37    mov  dptr,xram_sett_id_55h             ;\
9C05 E0          movx a,[dptr]                          ;
9C06 64 55       xor  a,55h        ;Settings End ID     ;
9C08 70 50       jnz  a,@@bad_id_55h_AAh                ;/
9C0A 90 00 08    mov  dptr,xram_sett_id_AAh             ;\
9C0D E0          movx a,[dptr]                          ;
9C0E 64 AA       xor  a,0AAh       ;Settings Start ID   ;
9C10 70 48       jnz  a,@@bad_id_55h_AAh                ;/
9C12 90 00 7E    mov  dptr,xram_tmp__7Eh        ;\
9C15 F0          movx [dptr],a                  ; index=0000h
9C16 A3          inc  dptr ;=xram_tmp__7Fh      ;
9C17 F0          movx [dptr],a                  ;/
                @@chksum_lop:   ;similar to "calc_xor_checksum"
9C18 90 00 7E    mov  dptr,xram_tmp__7Eh
9C1B E0          movx a,[dptr]
9C1C FE          mov  r6,a
9C1D A3          inc  dptr ;=xram_tmp__7Fh
9C1E E0          movx a,[dptr]
9C1F FF          mov  r7,a
9C20 C3          clr  c
9C21 95 2A       sbc  a,[iram_tmp__2Ah]
9C23 EE          mov  a,r6
9C24 95 29       sbc  a,[iram_tmp__29h]
9C26 50 27       jnc  @@chksum_done
9C28 A3          inc  dptr ;=xram_tmp__80h
9C29 E0          movx a,[dptr]
9C2A FD          mov  r5,a
9C2B AB 26       mov  r3,[iram_tmp__26h]
9C2D AA 27       mov  r2,[iram_tmp__27h]
9C2F A9 28       mov  r1,[iram_tmp__28h]
9C31 8F 82       mov  dpl,r7
9C33 8E 83       mov  dph,r6
9C35 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
9C38 FF          mov  r7,a
9C39 ED          mov  a,r5
9C3A 6F          xor  a,r7             ;xor checksum ?
9C3B 90 00 80    mov  dptr,xram_tmp__80h
9C3E F0          movx [dptr],a
9C3F 90 00 7F    mov  dptr,xram_tmp__7Fh
9C42 E0          movx a,[dptr]
9C43 04          inc  a
9C44 F0          movx [dptr],a
9C45 70 D1       jnz  a,@@chksum_lop
9C47 90 00 7E    mov  dptr,xram_tmp__7Eh
9C4A E0          movx a,[dptr]
9C4B 04          inc  a
9C4C F0          movx [dptr],a
9C4D 80 C9       sjmp @@chksum_lop
                ;---
                @@chksum_done:
9C4F 90 00 80    mov  dptr,xram_tmp__80h       ;chksum (calculated)
9C52 E0          movx a,[dptr]
9C53 B5 2B 02    jne  a,[iram_tmp__2Bh],@@bad_checksum   ;chksum (copy of [xram_sett_chksum])
9C56 D3          set  c    ;out: cy=1=okay
9C57 22          ret
                ;---
                @@bad_checksum:
9C58 C3          clr  c    ;out: cy=0=bad
9C59 22          ret
                ;---
                @@bad_id_55h_AAh:
9C5A C3          clr  c    ;out: cy=0=bad
9C5B 22          ret
                .endm ;defcode_verify_loaded_settings
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_verify_loaded_settings
                .endif
                ;------------------
                init_variables_and_select_Root_menu:
9C5C 90 00 BD    mov  dptr,xram_new_detected_video      ;\
9C5F 74 FF       mov  a,0FFh                            ;
9C61 F0          movx [dptr],a   ;=FFh                  ;/
9C62 90 00 BC    mov  dptr,xram_old_detected_video      ;\
9C65 F0          movx [dptr],a   ;=FFh                  ;/
9C66 F5 1C       mov  [iram_ir_msb_device],a  ;=FFh     ;\
9C68 F5 1D       mov  [iram_ir_lsb_cmd],a     ;=FFh     ;/
9C6A E4          clr  a
9C6B 90 00 41    mov  dptr,xram_blah_zero_0
9C6E F0          movx [dptr],a
9C6F 90 00 4C    mov  dptr,xram_blah_zero_3
9C72 F0          movx [dptr],a
9C73 90 00 B7    mov  dptr,xram_old_item
9C76 F0          movx [dptr],a
9C77 90 00 48    mov  dptr,xram_blah_zero_1
9C7A F0          movx [dptr],a
9C7B A3          inc  dptr ;=xram_blah_zero_2
9C7C F0          movx [dptr],a
9C7D 75 48 07    mov  [iram_menu_flags],07h
9C80 C2 03       clr  [iram_req_event_flags].3
9C82 90 00 39    mov  dptr,xram_palntsc_same_counter
9C85 F0          movx [dptr],a
                .if tech_version<ver11sep2017
9C86 A3            inc  dptr ;=xram_backtoroot_offhold_msb
                .else
                   mov  dptr,xram_backtoroot_offhold_msb
                .endif
9C87 F0          movx [dptr],a
9C88 A3          inc  dptr ;=xram_backtoroot_offhold_lsb
9C89 F0          movx [dptr],a
9C8A A3          inc  dptr ;=xram_save_settings_offhold_msb
9C8B F0          movx [dptr],a
9C8C A3          inc  dptr ;=xram_save_settings_offhold_lsb
9C8D F0          movx [dptr],a
9C8E 90 00 4D    mov  dptr,xram_whatever_pwr_input
9C91 F0          movx [dptr],a
                ;- - -
9C92 90 00 46    mov  dptr,xram_keypad_flags_msb        ;\
9C95 E0          movx a,[dptr]                          ;
9C96 FE          mov  r6,a     ;msb                     ;
9C97 A3          inc  dptr ;=xram_keypad_flags_lsb      ;
9C98 E0          movx a,[dptr]                          ;
9C99 54 FD       and  a,0FDh   ;clear bit1              ; clear bit1
9C9B FF          mov  r7,a     ;lsb                     ;
9C9C 90 00 46    mov  dptr,xram_keypad_flags_msb        ;
9C9F EE          mov  a,r6     ;msb                     ;
9CA0 F0          movx [dptr],a                          ;
9CA1 FE          mov  r6,a     ;msb                     ;
9CA2 A3          inc  dptr ;=xram_keypad_flags_lsb      ;
9CA3 EF          mov  a,r7     ;lsb                     ;
9CA4 F0          movx [dptr],a                          ;/
9CA5 54 FB       and  a,0FBh   ;clear bit2              ;\clear bit2
9CA7 FF          mov  r7,a     ;lsb                     ;
9CA8 90 00 46    mov  dptr,xram_keypad_flags_msb        ;
9CAB EE          mov  a,r6     ;msb                     ;
9CAC F0          movx [dptr],a                          ;
9CAD A3          inc  dptr ;=xram_keypad_flags_lsb      ;
9CAE EF          mov  a,r7     ;lsb                     ;
9CAF F0          movx [dptr],a                          ;/
9CB0 54 EF       and  a,0EFh   ;clear bit4              ;\clear bit4
9CB2 FF          mov  r7,a     ;lsb                     ;
9CB3 90 00 46    mov  dptr,xram_keypad_flags_msb        ;
9CB6 EE          mov  a,r6     ;msb                     ;
9CB7 F0          movx [dptr],a                          ;
9CB8 A3          inc  dptr ;=xram_keypad_flags_lsb      ;
9CB9 EF          mov  a,r7     ;lsb                     ;
9CBA F0          movx [dptr],a                          ;/
9CBB 54 FE       and  a,0FEh   ;clear bit0              ;\clear bit0
9CBD FF          mov  r7,a     ;lsb                     ;
9CBE 90 00 46    mov  dptr,xram_keypad_flags_msb        ;
9CC1 EE          mov  a,r6     ;msb                     ;
9CC2 F0          movx [dptr],a                          ;
9CC3 A3          inc  dptr ;=xram_keypad_flags_lsb      ;
9CC4 EF          mov  a,r7     ;lsb                     ;
9CC5 F0          movx [dptr],a                          ;/
                ;- - - -
9CC6 7F 02       mov  r7,MenuID_02h_Root                ;\select root menu
9CC8 12 BC 9D    call select_menu_r7                    ;/
                ;- - - -
9CCB 90 00 46    mov  dptr,xram_keypad_flags_msb        ;\
9CCE E0          movx a,[dptr]  ;blah                   ;
9CCF F0          movx [dptr],a  ;blah                   ;
9CD0 A3          inc  dptr ;=xram_keypad_flags_lsb      ; clear bit3
9CD1 E0          movx a,[dptr]                          ;
9CD2 54 F7       and  a,0F7h    ;clear bit3             ;
9CD4 F0          movx [dptr],a                          ;/
9CD5 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_verify_loaded_settings
                .endif
                ;------------------
                .macro defcode_apply_av_input_r7
                apply_av_input_r7:   ;in: r7=FIXED, or [xram_sett_input]
                ;- - -    IO_AV_video_on_off
                ;- - -    |             IO_AV_input_select_reg_0
                ;- - -    |             |             IO_AV_input_select_reg_1
                ;Input    FED7h.bit3-4  FED8h.bit6-7  FEDCh.bit4-5
                ;AV1      0-then-3      2             0   ;<-- CVBS1
                ;AV2      0-then-3      2             3   ;<-- still picks up something (stripes when CVBS3 has signal)
                ;AV3      0-then-3      0             2   ;<-- CVBS3
                ;Invalid  0-then-3      3             3   ;<-- still picks up something (stripes when CVBS3 has signal)
                ;- - - changes in NEWER FIRMWARE:
                ;AV1      0-then-3      0 !           2 ! ;<--
                ;AV2      0-then-3      0 !           3   ;<--
                ;AV3      0-then-3      2 !           0 ! ;<--
                ;Invalid  0-then-3      3             3   ;<--
                ;- - -
9CD6 EF          mov  a,r7
9CD7 14          dec  a
9CD8 60 26       jz   a,@@setting_1_select_AV2
9CDA 14          dec  a
9CDB 60 34       jz   a,@@setting_2_select_AV3
9CDD 24 02       add  a,02h
9CDF 70 4F       jnz  a,@@setting_invalid
                ;- - - ;@@setting_0_select_AV1
                ;@@setting_0_select_AV1:
9CE1 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
9CE4 E0          movx a,[dptr]                          ; temporarily clear bit3-4
9CE5 54 E7       and  a,0E7h                            ;
9CE7 F0          movx [dptr],a                          ;/
9CE8 A3          inc  dptr ;=IO_AV_input_select_reg_0   ;\
9CE9 E0          movx a,[dptr]                          ;
                .if av_select_version<ver11sep2017      ;
9CEA 44 80         or   a,80h    ;bit7=1                ;
9CEC F0            movx [dptr],a                        ;
9CED E0            movx a,[dptr]                        ;
9CEE 54 BF         and  a,0BFh   ;bit6=0                ;
                .else                                   ;
                   and  a,03Fh   ;bit6,7=0              ;
                .endif                                  ;
9CF0 F0          movx [dptr],a                          ;/
9CF1 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
9CF4 E0          movx a,[dptr]                          ; switch bit3-4 back on
9CF5 44 18       or   a,18h                             ;
9CF7 F0          movx [dptr],a                          ;/
9CF8 90 FE DC    mov  dptr,IO_AV_input_select_reg_1     ;\
9CFB E0          movx a,[dptr]                          ;
                .if av_select_version<ver11sep2017      ;
9CFC 54 DF         and  a,0DFh   ;bit5=0                ;
                .else                                   ;
                   or   a,20h    ;bit5=1                ;
                .endif                                  ;
9CFE 80 2A       sjmp @@_9D2Ah   ;bit4=0                ;/
                ;---
                @@setting_1_select_AV2:
9D00 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
9D03 E0          movx a,[dptr]                          ; temporarily clear bit3-4
9D04 54 E7       and  a,0E7h                            ;
9D06 F0          movx [dptr],a                          ;/
9D07 A3          inc  dptr ;=IO_AV_input_select_reg_0   ;\
9D08 E0          movx a,[dptr]                          ;
                .if av_select_version<ver11sep2017      ;
9D09 44 80         or   a,80h    ;bit7=1                ;  hmmm, as AV1 too?
9D0B F0            movx [dptr],a                        ;
9D0C E0            movx a,[dptr]                        ;
9D0D 54 BF         and  a,0BFh   ;bit6=0                ;
                .else                                   ;
                   and  a,03Fh   ;bit6,7=0              ;
                .endif                                  ;
9D0F 80 2A       sjmp @@_9D3Bh   ;bit4,5=1,1            ;/
                ;---
                @@setting_2_select_AV3:
9D11 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
9D14 E0          movx a,[dptr]                          ; temporarily clear bit3-4
9D15 54 E7       and  a,0E7h                            ;
9D17 F0          movx [dptr],a                          ;/
9D18 A3          inc  dptr ;=IO_AV_input_select_reg_0   ;\
9D19 E0          movx a,[dptr]                          ;
                .if av_select_version<ver11sep2017      ;
9D1A 54 3F         and  a,3Fh    ;bit6-7=00b            ;
                .else                                   ;
                   or   a,80h    ;bit7=1                ;
                   movx [dptr],a                        ;
                   movx a,[dptr]                        ;
                   and  a,0BFh   ;bit6=0                ;
                .endif                                  ;
9D1C F0          movx [dptr],a                          ;/
9D1D 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
9D20 E0          movx a,[dptr]                          ; switch bit3-4 back on
9D21 44 18       or   a,18h                             ;
9D23 F0          movx [dptr],a                          ;/
9D24 90 FE DC    mov  dptr,IO_AV_input_select_reg_1     ;\
9D27 E0          movx a,[dptr]                          ;
                .if av_select_version<ver11sep2017      ;
9D28 44 20         or   a,20h    ;bit5=1                ;
                .else                                   ;
                   and  a,0DFh   ;bit5=0                ;
                .endif                                  ;
                @@_9D2Ah:                               ;
9D2A F0          movx [dptr],a                          ;
9D2B E0          movx a,[dptr]                          ;
9D2C 54 EF       and  a,0EFh   ;bit4=0                  ;
9D2E F0          movx [dptr],a                          ;/
9D2F 22          ret
                ;--- --- ---
                @@setting_invalid:
9D30 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
9D33 E0          movx a,[dptr]                          ; temporarily clear bit3-4
9D34 54 E7       and  a,0E7h                            ;
9D36 F0          movx [dptr],a                          ;/
9D37 A3          inc  dptr ;=IO_AV_input_select_reg_0
9D38 E0          movx a,[dptr]
9D39 44 C0       or   a,0C0h   ;bit6-7=11b
                ;- - -
                @@_9D3Bh:
                 ;with dptr=IO_AV_input_select_reg_0    ;\
9D3B F0          movx [dptr],a                          ;/
9D3C 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
9D3F E0          movx a,[dptr]                          ; switch bit3-4 back on
9D40 44 18       or   a,18h                             ;
9D42 F0          movx [dptr],a                          ;/
9D43 90 FE DC    mov  dptr,IO_AV_input_select_reg_1     ;\
9D46 E0          movx a,[dptr]                          ;
9D47 44 20       or   a,20h    ;bit5=1                  ;
9D49 F0          movx [dptr],a                          ;
9D4A E0          movx a,[dptr]                          ;
9D4B 44 10       or   a,10h    ;bit4=1                  ;
9D4D F0          movx [dptr],a                          ;/
9D4E 22          ret
                .endm ;defcode_apply_av_input_r7
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_apply_av_input_r7
                .endif
                ;------------------
;:------------- ;:----------------- GUI misc
                ;------------------
                .if patchme   ;just my first test to modify something...
                txt_no_signal_english    db 'NOSICK!',00h
                .else
9D4F 4E 4F 20.. txt_no_signal_english    db 'NO SIGNAL',00h    ;<-- and most other languages
                .endif
9D59 20 23 D2.. txt_no_signal_slang_01h  db ' #',0D2h,' #',0D3h,' #',0D4h,' #',0D5h,00h
9D66 20 20 23.. txt_no_signal_slang_09h  db '  #',0F0h,' #',0AFh,' #',85h,'  ',00h
9D73 23 AF 20.. txt_no_signal_slang_0Ah  db '#',0AFh,' #',85h,' ',0FBh,0FCh,0FDh,'  ',00h
9D7F 20 20 F5.. txt_no_signal_slang_0Bh  db '  ',0F5h,' #',0AFh,' ',0F6h,'  ',00h
                ;------------------
                localized_txtlist_no_signal:
9D8A FF 9D 4F    db   0FFh // dw txt_no_signal_english     ;00h ;English
9D8D FF 9D 59    db   0FFh // dw txt_no_signal_slang_01h   ;01h ;?
9D90 FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;02h ;French
9D93 FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;03h ;Italian
9D96 FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;04h ;Spanish
9D99 FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;05h ;German
9D9C FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;06h ;Portugese
9D9F FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;07h ;Dutch
9DA2 FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;08h ;?
9DA5 FF 9D 66    db   0FFh // dw txt_no_signal_slang_09h   ;09h ;?
9DA8 FF 9D 73    db   0FFh // dw txt_no_signal_slang_0Ah   ;0Ah ;?
9DAB FF 9D 7F    db   0FFh // dw txt_no_signal_slang_0Bh   ;0Bh ;?
9DAE FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;0Ch ;?
9DB1 FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;0Dh ;Polish
9DB4 FF 9D 4F    db   0FFh // dw txt_no_signal_english  ;* ;0Eh ;Turkish
                ;------------------
                gui_null_NoSignal:
9DB7 00          nop
9DB8 00          nop
9DB9 00          nop
9DBA 00          nop
9DBB 00          nop
                ;---
                gui_data_NoSignal_name:
9DBC 00          nop                                          ;00h ;idxNameYloc
9DBD 00          nop                                          ;01h ;idxNameXloc
9DBE 01          db   01h                                     ;02h ;idxNameAttrLsb
9DBF 00          nop                                          ;03h ;idxNameAttrMsb
9DC0 01          db   01h                                     ;04h ;idxNameAttrLsb2
9DC1 00          nop                                          ;05h ;idxNameAttrMsb2
9DC2 01          db   01h                                     ;06h ;..unused?
9DC3 FF B9 E7    db   0FFh // dw get_localized_txt_no_signal  ;07h ;idxNameTxtProc
9DC6 00 08       dw   0008h                                   ;0Ah ;idxName_flags
                ;------------------
;:------------- ;:----------------- OSD code (zerofill)
                ;------------------
                osd_zerofill_window_r7:   ;in: r7=window(0..4) from ;idxMenuWindowNo
9DC8 E4          clr  a                                 ;\
9DC9 90 00 84    mov  dptr,xram_tmp__84h                ;
9DCC F0          movx [dptr],a                          ;
9DCD A3          inc  dptr ;=xram_tmp__85h              ; blah
9DCE F0          movx [dptr],a                          ; (overwritten below)
9DCF A3          inc  dptr ;=xram_tmp__86h              ;
9DD0 F0          movx [dptr],a                          ;
9DD1 A3          inc  dptr ;=xram_tmp__87h              ;
9DD2 F0          movx [dptr],a                          ;/
9DD3 12 BF 96    call set_current_window_to_r7          ;-select window r7
9DD6 12 7B D8    call get_window_addr  ;out:r6r7        ;\
9DD9 90 00 84    mov  dptr,xram_tmp__84h                ;
9DDC EE          mov  a,r6                              ; get 1st addr:
9DDD F0          movx [dptr],a                          ; (window start)
9DDE A3          inc  dptr ;=xram_tmp__85h              ;
9DDF EF          mov  a,r7                              ;
9DE0 F0          movx [dptr],a                          ;/
9DE1 12 9E 40    call get_window_size  ;out:r6r7        ;\
9DE4 90 00 86    mov  dptr,xram_tmp__86h                ;
9DE7 EE          mov  a,r6                              ; get 2nd addr:
9DE8 F0          movx [dptr],a                          ; (window size)
9DE9 A3          inc  dptr ;=xram_tmp__87h              ;
9DEA EF          mov  a,r7                              ;
9DEB F0          movx [dptr],a                          ;/
9DEC 90 00 84    mov  dptr,xram_tmp__84h                ;\
9DEF E0          movx a,[dptr]                          ;
9DF0 FE          mov  r6,a                              ; get 1st addr (start)
9DF1 A3          inc  dptr ;=xram_tmp__85h              ;
9DF2 E0          movx a,[dptr]                          ;
9DF3 FF          mov  r7,a                              ;/
9DF4 90 00 87    mov  dptr,xram_tmp__87h                ;\
9DF7 E0          movx a,[dptr]                          ;
9DF8 2F          add  a,r7                              ; change 2nd addr
9DF9 F0          movx [dptr],a                          ; addr = start+size
9DFA 90 00 86    mov  dptr,xram_tmp__86h                ;
9DFD E0          movx a,[dptr]                          ;
9DFE 3E          adc  a,r6                              ;
9DFF F0          movx [dptr],a                          ;/
9E00 EE          mov  a,r6                              ;\
9E01 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb        ;
9E04 F0          movx [dptr],a                          ; output start addr
9E05 90 00 84    mov  dptr,xram_tmp__84h                ;
9E08 A3          inc  dptr ;=xram_tmp__85h              ;
9E09 E0          movx a,[dptr]                          ;
9E0A 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb        ;
9E0D F0          movx [dptr],a                          ;/
                ;- - - - - -
                @@lop:
9E0E 90 00 86    mov  dptr,xram_tmp__86h                ;\
9E11 E0          movx a,[dptr]                          ;
9E12 FE          mov  r6,a                              ; get 2nd addr (end)
9E13 A3          inc  dptr ;=xram_tmp__87h              ;
9E14 E0          movx a,[dptr]                          ;
9E15 FF          mov  r7,a                              ;/
9E16 90 00 84    mov  dptr,xram_tmp__84h                ;\
9E19 E0          movx a,[dptr]                          ;
9E1A FC          mov  r4,a                              ; get 1st addr (curr)
9E1B A3          inc  dptr ;=xram_tmp__85h              ;
9E1C E0          movx a,[dptr]                          ;/
9E1D C3          clr  c                                 ;\
9E1E 9F          sbc  a,r7         ;disp.lsb            ; check if done
9E1F EC          mov  a,r4                              ;
9E20 9E          sbc  a,r6         ;disp.msb            ;
9E21 50 1C       jnc  @@lop_done                        ;/
9E23 EC          mov  a,r4                              ;\
9E24 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb        ; rewrite addr.msb
9E27 F0          movx [dptr],a                          ;/
9E28 A3          inc  dptr ;=IO_OSD_bgmap_data_msb      ;\
9E29 E4          clr  a                                 ;
9E2A F0          movx [dptr],a                          ; output data=0000h
9E2B 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb        ;
9E2E F0          movx [dptr],a                          ;/
9E2F 90 00 85    mov  dptr,xram_tmp__85h                ;\
9E32 E0          movx a,[dptr]                          ;
9E33 04          inc  a                                 ;
9E34 F0          movx [dptr],a                          ; raise 1st addr (curr)
9E35 70 D7       jnz  a,@@lop                           ; and lop next
9E37 90 00 84    mov  dptr,xram_tmp__84h                ;
9E3A E0          movx a,[dptr]                          ;
9E3B 04          inc  a                                 ;
9E3C F0          movx [dptr],a                          ;
9E3D 80 CF       sjmp @@lop                             ;/
                ;---
                @@lop_done:
9E3F 22          ret
                ;------------------
;:------------- ;:----------------- IR code (infrared init)
                ;------------------
                .if infrared_version>=ver11sep2017
                 init_IR_hardware:   ;infrared
                  ;summarized, this function is doing this (in this order):
                  ;SFR_IO_PORT0_MODE_B.bit3 = 0
                  ;SFR_IO_PORT0_MODE_A.bit3 = 1
9863 90 FF 82     ;IO_IR_config_FF82h = 01h
9869 90 FF 62     ;IO_IR_config_FF62h = 3Fh
986F A3           ;IO_IR_config_FF63h = 10h
9873 A3           ;IO_IR_config_FF64h = 04h
9877 90 FF 6B     ;IO_IR_config_FF6Bh = 00h
987C A3           ;IO_IR_config_FF6Ch = 00h
987E A3           ;IO_IR_config_FF6Dh = 00h
9880 A3           ;IO_IR_config_FF6Eh = 00h
9882 90 FF 79     ;IO_IR_config_FF79h = 01h
9887 A3           ;IO_IR_config_FF7Ah = 73h
988B A3           ;IO_IR_config_FF7Bh = FFh
988F A3           ;IO_IR_config_FF7Ch = 02h
9893 90 FF 77     ;IO_IR_config_FF77h = 59h
9899 A3           ;IO_IR_config_FF78h = 00h
989C 90 FF 65     ;IO_IR_config_FF65h = 76h
98A2 A3           ;IO_IR_config_FF66h = 3Bh
98A6 A3           ;IO_IR_config_FF67h = 08h
98AA A3           ;IO_IR_config_FF68h = 15h
98AE A3           ;IO_IR_config_FF69h = 07h
98B2 A3           ;IO_IR_config_FF6Ah = 00h
98B5 90 FF 6F     ;IO_IR_config_FF6Fh = 76h
98BB A3           ;IO_IR_config_FF70h = 1Ch
98BF A3           ;IO_IR_config_FF71h = 08h
98C3 A3           ;IO_IR_config_FF72h = F5h
98C7 90 FF 61     ;IO_IR_config_FF61h = 05h
98CD 90 FF 7D     ;IO_IR_config_FF7Dh = 0Fh
                  ;- - -
985D 53 ED F7     and  [SFR_IO_PORT0_MODE_B],0F7h  ;clear bit3         ;-
9860 43 E9 08     or   [SFR_IO_PORT0_MODE_A],08h   ;set bit3           ;-
9863 90 FF 82     mov  dptr,IO_IR_config_FF82h          ;\
9866 74 01        mov  a,01h                            ;
9868 F0           movx [dptr],a                         ;/
9869 90 FF 62     mov  dptr,IO_IR_config_FF62h          ;\
986C 74 3F        mov  a,3Fh                            ;
986E F0           movx [dptr],a                         ;/
986F A3           inc  dptr ;=IO_IR_config_FF63h        ;\
9870 74 10        mov  a,10h                            ;
9872 F0           movx [dptr],a                         ;/
9873 A3           inc  dptr ;=IO_IR_config_FF64h        ;\
9874 74 04        mov  a,04h                            ;
9876 F0           movx [dptr],a                         ;/
9877 90 FF 6B     mov  dptr,IO_IR_config_FF6Bh          ;\
987A E4           clr  a                                ;
987B F0           movx [dptr],a                         ;/
987C A3           inc  dptr ;=IO_IR_config_FF6Ch        ;\
987D F0           movx [dptr],a                         ;/
987E A3           inc  dptr ;=IO_IR_config_FF6Dh        ;\
987F F0           movx [dptr],a                         ;/
9880 A3           inc  dptr ;=IO_IR_config_FF6Eh        ;\
9881 F0           movx [dptr],a                         ;/
9882 90 FF 79     mov  dptr,IO_IR_config_FF79h          ;\
9885 04           inc  a        ;=01h                   ;
9886 F0           movx [dptr],a                         ;/
9887 A3           inc  dptr ;=IO_IR_config_FF7Ah        ;\
9888 74 73        mov  a,73h                            ;
988A F0           movx [dptr],a                         ;/
988B A3           inc  dptr ;=IO_IR_config_FF7Bh        ;\
988C 74 FF        mov  a,0FFh                           ;
988E F0           movx [dptr],a                         ;/
988F A3           inc  dptr ;=IO_IR_config_FF7Ch        ;\
9890 74 02        mov  a,02h                            ;
9892 F0           movx [dptr],a                         ;/
9893 90 FF 77     mov  dptr,IO_IR_config_FF77h          ;\
9896 74 59        mov  a,59h                            ;
9898 F0           movx [dptr],a                         ;/
9899 A3           inc  dptr ;=IO_IR_config_FF78h        ;\
989A E4           clr  a                                ;
989B F0           movx [dptr],a                         ;/
989C 90 FF 65     mov  dptr,IO_IR_config_FF65h          ;\
989F 74 76        mov  a,76h                            ;
98A1 F0           movx [dptr],a                         ;/
98A2 A3           inc  dptr ;=IO_IR_config_FF66h        ;\
98A3 74 3B        mov  a,3Bh                            ;
98A5 F0           movx [dptr],a                         ;/
98A6 A3           inc  dptr ;=IO_IR_config_FF67h        ;\
98A7 74 08        mov  a,08h                            ;
98A9 F0           movx [dptr],a                         ;/
98AA A3           inc  dptr ;=IO_IR_config_FF68h        ;\
98AB 74 15        mov  a,15h                            ;
98AD F0           movx [dptr],a                         ;/
98AE A3           inc  dptr ;=IO_IR_config_FF69h        ;\
98AF 74 07        mov  a,07h                            ;
98B1 F0           movx [dptr],a                         ;/
98B2 A3           inc  dptr ;=IO_IR_config_FF6Ah        ;\
98B3 04           inc  a        ;=08h                   ;
98B4 F0           movx [dptr],a                         ;/
98B5 90 FF 6F     mov  dptr,IO_IR_config_FF6Fh          ;\
98B8 74 76        mov  a,76h                            ;
98BA F0           movx [dptr],a                         ;/
98BB A3           inc  dptr ;=IO_IR_config_FF70h        ;\
98BC 74 1C        mov  a,1Ch                            ;
98BE F0           movx [dptr],a                         ;/
98BF A3           inc  dptr ;=IO_IR_config_FF71h        ;\
98C0 74 08        mov  a,08h                            ;
98C2 F0           movx [dptr],a                         ;/
98C3 A3           inc  dptr ;=IO_IR_config_FF72h        ;\
98C4 74 F5        mov  a,0F5h                           ;
98C6 F0           movx [dptr],a                         ;/
98C7 90 FF 61     mov  dptr,IO_IR_config_FF61h          ;\
98CA 74 05        mov  a,05h                            ;
98CC F0           movx [dptr],a                         ;/
98CD 90 FF 7D     mov  dptr,IO_IR_config_FF7Dh          ;\
98D0 74 0F        mov  a,0Fh                            ;
98D2 F0           movx [dptr],a                         ;/
98D3 22           ret
                .endif
                ;------------------
;:------------- ;:----------------- OSD code (get window size, font dma, attr)
                ;------------------
                get_window_size:   ;in: [xram_current_window], out: r6r7=vramsize (vramsize=x*y)
9E40 E4          clr  a
9E41 90 00 88    mov  dptr,xram_tmp__88h   ;temp.msb
9E44 F0          movx [dptr],a
9E45 A3          inc  dptr ;=xram_tmp__89h ;temp.lsb
9E46 F0          movx [dptr],a
9E47 90 00 98    mov  dptr,xram_current_window
9E4A E0          movx a,[dptr]
                ;- - - -
9E4B FF          mov  r7,a
9E4C 70 0D       jnz  a,@@not_window_0
9E4E A3          inc  dptr ;=xram_window_0_size_msb     ;\
9E4F E0          movx a,[dptr]                          ;
9E50 FD          mov  r5,a                              ; get
9E51 A3          inc  dptr ;=xram_window_0_size_lsb     ;
9E52 E0          movx a,[dptr]                          ;/
9E53 90 00 88    mov  dptr,xram_tmp__88h   ;temp.msb    ;\
9E56 CD          xchg a,r5                              ; copy
9E57 F0          movx [dptr],a                          ; crap
9E58 A3          inc  dptr ;=xram_tmp__89h ;temp.lsb    ; to
9E59 ED          mov  a,r5                              ; temp
9E5A F0          movx [dptr],a                          ;/
                @@not_window_0:
                ;- - - -
9E5B EF          mov  a,r7
9E5C B4 01 0F    jne  a,01h,@@not_window_1
9E5F 90 00 9B    mov  dptr,xram_window_1_size_msb       ;\
9E62 E0          movx a,[dptr]                          ;
9E63 FF          mov  r7,a                              ; get
9E64 A3          inc  dptr ;=xram_window_1_size_lsb     ;
9E65 E0          movx a,[dptr]                          ;/
9E66 90 00 88    mov  dptr,xram_tmp__88h   ;temp.msb    ;\
9E69 CF          xchg a,r7                              ; copy
9E6A F0          movx [dptr],a                          ; crap
9E6B A3          inc  dptr ;=xram_tmp__89h ;temp.lsb    ; to
9E6C EF          mov  a,r7                              ; temp
9E6D F0          movx [dptr],a                          ;/
                @@not_window_1:
                ;- - - -
9E6E 90 00 98    mov  dptr,xram_current_window
9E71 E0          movx a,[dptr]
9E72 B4 02 0F    jne  a,02h,@@not_window_2
9E75 90 00 9D    mov  dptr,xram_window_2_size_msb       ;\
9E78 E0          movx a,[dptr]                          ;
9E79 FF          mov  r7,a                              ; get
9E7A A3          inc  dptr ;=xram_window_2_size_lsb     ;
9E7B E0          movx a,[dptr]                          ;/
9E7C 90 00 88    mov  dptr,xram_tmp__88h   ;temp.msb    ;\
9E7F CF          xchg a,r7                              ; copy
9E80 F0          movx [dptr],a                          ; crap
9E81 A3          inc  dptr ;=xram_tmp__89h ;temp.lsb    ; to
9E82 EF          mov  a,r7                              ; temp
9E83 F0          movx [dptr],a                          ;/
                @@not_window_2:
                ;- - - -
9E84 90 00 98    mov  dptr,xram_current_window
9E87 E0          movx a,[dptr]
9E88 FF          mov  r7,a
9E89 B4 03 0F    jne  a,03h,@@not_window_3
9E8C 90 00 9F    mov  dptr,xram_window_3_size_msb       ;\
9E8F E0          movx a,[dptr]                          ;
9E90 FD          mov  r5,a                              ; get
9E91 A3          inc  dptr ;=xram_window_3_size_lsb     ;
9E92 E0          movx a,[dptr]                          ;/
9E93 90 00 88    mov  dptr,xram_tmp__88h   ;temp.msb    ;\
9E96 CD          xchg a,r5                              ; copy
9E97 F0          movx [dptr],a                          ; crap
9E98 A3          inc  dptr ;=xram_tmp__89h ;temp.lsb    ; to
9E99 ED          mov  a,r5                              ; temp
9E9A F0          movx [dptr],a                          ;/
                @@not_window_3:
                ;- - - -
9E9B EF          mov  a,r7
9E9C B4 04 0F    jne  a,04h,@@not_window_4
9E9F 90 00 A1    mov  dptr,xram_window_4_size_msb       ;\
9EA2 E0          movx a,[dptr]                          ;
9EA3 FF          mov  r7,a                              ; get
9EA4 A3          inc  dptr ;=xram_window_4_size_lsb     ;
9EA5 E0          movx a,[dptr]                          ;/
9EA6 90 00 88    mov  dptr,xram_tmp__88h   ;temp.msb    ;\
9EA9 CF          xchg a,r7                              ; copy
9EAA F0          movx [dptr],a                          ; crap
9EAB A3          inc  dptr ;=xram_tmp__89h ;temp.lsb    ; to
9EAC EF          mov  a,r7                              ; temp
9EAD F0          movx [dptr],a                          ;/
                @@not_window_4:
                ;- - - -
9EAE 90 00 88    mov  dptr,xram_tmp__88h   ;temp.msb    ;\
9EB1 E0          movx a,[dptr]                          ;
9EB2 FE          mov  r6,a                              ; r6r7 = temp
9EB3 A3          inc  dptr ;=xram_tmp__89h ;temp.lsb    ;
9EB4 E0          movx a,[dptr]                          ;
9EB5 FF          mov  r7,a                              ;/
9EB6 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_apply_av_input_r7
                .endif
                ;------------------
                osd_upload_font_characters_via_dma:
                               ;... WHAT is that? maybe VRAM DMA ???
                     ;=========================
                     ;  CPU/CODE is a copy of SPI FLASH
                     ;   so, maybe/probably...
                     ;  this READ FROM SPI FLASH (not from CPU/CODE)
                     ;   ie.
                     ;   SPI to VRAM      <--- this
                     ;   CPU to VRAM      <--- not this! (although it'd be almost the same)
                     ;=========================
                 ;in: r4    = 00h   (src uppermost blah of 32bits, blah/zero)
                 ;in: r5    = 00h   (src msb in SPI.FLASH)
                 ;in: r6r7  = 0981h (src addr in SPI.FLASH) (=aka CPU.CODE memory)
                 ;in: [iram_tmp__2Ah] = 00h      ;dst.vram.addr.msb?
                 ;in: [iram_tmp__2Bh] = 00h      ;dst.vram.addr.lsb?
                 ;in: [iram_tmp__2Ch..2Dh] = 1540h (len for data at 0981h..1EC0h)
                 ;- - -
9EB7 8F 29       mov  [iram_tmp__29h],r7  ;cpu.addr.lsb ;\r6r7 (=0981h)
9EB9 8E 28       mov  [iram_tmp__28h],r6  ;cpu.addr.msb ;/
9EBB 8D 27       mov  [iram_tmp__27h],r5  ;\cpu.addr.upper16bit of 32bit? (blah/zero)
9EBD 8C 26       mov  [iram_tmp__26h],r4  ;/
9EBF C2 AF       clr  ea         ;XXXsfr
                @@wait_lop1:                            ;\
9EC1 90 FD DF    mov  dptr,IO_SPI_status_ready          ; wait
9EC4 E0          movx a,[dptr]                          ;
9EC5 30 E7 F9    jz   a.7,@@wait_lop1                   ;/
9EC8 90 FD DE    mov  dptr,IO_SPI_kick_stop_reset       ;\
9ECB 74 80       mov  a,80h                             ;
9ECD F0          movx [dptr],a                          ;/
9ECE 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;\
9ED1 E4          clr  a                                 ;
9ED2 F0          movx [dptr],a                          ;/
9ED3 43 C6 08    or   [SFR_IO_memory_system],08h ;bit3=1  ;-pause FONT rendering during DMA upload
9ED6 90 FD D6    mov  dptr,IO_SPI_flash_addr_lsb
9ED9 E5 29       mov  a,[iram_tmp__29h]  ;cpu.addr.lsb
9EDB F0          movx [dptr],a        ;OUT spi.flash.addr.lsb (src)
9EDC FF          mov  r7,a
9EDD AE 28       mov  r6,[iram_tmp__28h]  ;cpu.addr.msb
9EDF AD 27       mov  r5,[iram_tmp__27h]
9EE1 AC 26       mov  r4,[iram_tmp__26h]
9EE3 78 08       mov  r0,08h
9EE5 12 4C B0    call shift_right_r4r5r6r7_by_r0
9EE8 A3          inc  dptr ;=IO_SPI_flash_addr_mid
9EE9 EF          mov  a,r7
9EEA F0          movx [dptr],a        ;OUT spi.flash.addr.mid (src)
9EEB AF 29       mov  r7,[iram_tmp__29h]  ;cpu.addr.lsb
9EED AE 28       mov  r6,[iram_tmp__28h]  ;cpu.addr.msb
9EEF AD 27       mov  r5,[iram_tmp__27h]
9EF1 AC 26       mov  r4,[iram_tmp__26h]
9EF3 78 10       mov  r0,10h
9EF5 12 4C B0    call shift_right_r4r5r6r7_by_r0
9EF8 A3          inc  dptr ;=IO_SPI_flash_addr_msb   ;cpu.addr.bit16-23 (aka SPI.FLASH addr bit16-23, which CAN BE USED despite CPU space normally being only 16bit wide)
9EF9 EF          mov  a,r7
9EFA F0          movx [dptr],a        ;OUT spi.flash.addr.msb (src)
                ;- - -
9EFB A3          inc  dptr ;=IO_SPI_dma_ram_addr_lsb            ;\
9EFC E5 2B       mov  a,[iram_tmp__2Bh]   ;dst.vram.addr.lsb?   ;
9EFE F0          movx [dptr],a                                  ; VRAM.addr (dst)
9EFF E5 2A       mov  a,[iram_tmp__2Ah]   ;dst.vram.addr.msb?   ;
9F01 A3          inc  dptr ;=IO_SPI_dma_ram_addr_msb            ;
9F02 F0          movx [dptr],a                                  ;/
9F03 E5 2D       mov  a,[iram_tmp__2Dh]   ;len.lsb
9F05 14          dec  a
9F06 A3          inc  dptr ;=IO_SPI_dma_length_lsb
9F07 F0          movx [dptr],a  ;len.lsb
9F08 E5 2D       mov  a,[iram_tmp__2Dh]   ;len.lsb
9F0A 24 FF       add  a,0FFh    ;add --> cy ?
9F0C E5 2C       mov  a,[iram_tmp__2Ch]   ;len.msb
9F0E 34 FF       adc  a,0FFh
9F10 A3          inc  dptr ;=IO_SPI_dma_length_msb
9F11 F0          movx [dptr],a  ;len.msb
9F12 90 FD D0    mov  dptr,IO_SPI_transfer_mode         ;\
9F15 74 40       mov  a,40h                             ; FlashCmd40h
9F17 F0          movx [dptr],a                          ;/
                @@wait_lop2:                            ;\
9F18 90 FD DD    mov  dptr,IO_SPI_ready_flags           ; wait
9F1B E0          movx a,[dptr]                          ; till >=40h here !!!
9F1C 30 E6 F9    jz   a.6,@@wait_lop2                   ;/
                @@wait_lop3:                            ;\
9F1F 90 FD DF    mov  dptr,IO_SPI_status_ready          ; wait
9F22 E0          movx a,[dptr]                          ;
9F23 30 E7 F9    jz   a.7,@@wait_lop3                   ;/
9F26 53 C6 F7    and  [SFR_IO_memory_system],0F7h ;bit3=0 ;-resume FONT rendering after DMA upload
9F29 D2 AF       set  ea         ;XXXsfr
9F2B 22          ret
                ;------------------
                set_window_attr:   ;in: r7=attr
                 ;this is setting the window's INITIAL character attributes
                 ;(later text output may change those attr's per character)
                 ;(ie. below does mainly affect the empty/background color)
                 ;- - -
9F2C AC 07       mov  r4,r7(0)  ;attr
9F2E E4          clr  a
9F2F 90 00 84    mov  dptr,xram_tmp__84h
9F32 F0          movx [dptr],a
9F33 A3          inc  dptr ;=xram_tmp__85h
9F34 F0          movx [dptr],a
9F35 A3          inc  dptr ;=xram_tmp__86h
9F36 F0          movx [dptr],a
9F37 A3          inc  dptr ;=xram_tmp__87h
9F38 F0          movx [dptr],a
9F39 12 7B D8    call get_window_addr  ;out:r6r7
9F3C 90 00 84    mov  dptr,xram_tmp__84h
9F3F EE          mov  a,r6
9F40 F0          movx [dptr],a
9F41 A3          inc  dptr ;=xram_tmp__85h
9F42 EF          mov  a,r7
9F43 F0          movx [dptr],a
9F44 12 9E 40    lcall get_window_size  ;out: r6r7=size
9F47 90 00 86    mov  dptr,xram_tmp__86h
9F4A EE          mov  a,r6
9F4B F0          movx [dptr],a
9F4C A3          inc  dptr ;=xram_tmp__87h
9F4D EF          mov  a,r7
9F4E F0          movx [dptr],a
9F4F 90 00 84    mov  dptr,xram_tmp__84h
9F52 E0          movx a,[dptr]
9F53 FE          mov  r6,a
9F54 A3          inc  dptr ;=xram_tmp__85h
9F55 E0          movx a,[dptr]
9F56 FF          mov  r7,a
9F57 90 00 87    mov  dptr,xram_tmp__87h
9F5A E0          movx a,[dptr]
9F5B 2F          add  a,r7
9F5C F0          movx [dptr],a
9F5D 90 00 86    mov  dptr,xram_tmp__86h
9F60 E0          movx a,[dptr]
9F61 3E          adc  a,r6
9F62 F0          movx [dptr],a
9F63 EE          mov  a,r6
9F64 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
9F67 F0          movx [dptr],a
9F68 90 00 84    mov  dptr,xram_tmp__84h
9F6B A3          inc  dptr ;=xram_tmp__85h
9F6C E0          movx a,[dptr]
9F6D 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb
9F70 F0          movx [dptr],a
                @@lop:
9F71 90 00 86    mov  dptr,xram_tmp__86h
9F74 E0          movx a,[dptr]
9F75 FE          mov  r6,a
9F76 A3          inc  dptr ;=xram_tmp__87h
9F77 E0          movx a,[dptr]
9F78 FF          mov  r7,a
9F79 90 00 84    mov  dptr,xram_tmp__84h
9F7C E0          movx a,[dptr]
9F7D FA          mov  r2,a
9F7E A3          inc  dptr ;=xram_tmp__85h
9F7F E0          movx a,[dptr]
9F80 C3          clr  c
9F81 9F          sbc  a,r7
9F82 EA          mov  a,r2
9F83 9E          sbc  a,r6
9F84 50 1A       jnc  @@lop_done
9F86 EA          mov  a,r2
9F87 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb
9F8A F0          movx [dptr],a
9F8B 90 FB 10    mov  dptr,IO_OSD_bgmap_data_attr
9F8E EC          mov  a,r4      ;attr
9F8F F0          movx [dptr],a         ;<--- output ;attr maybe?
9F90 90 00 85    mov  dptr,xram_tmp__85h
9F93 E0          movx a,[dptr]
9F94 04          inc  a
9F95 F0          movx [dptr],a
9F96 70 D9       jnz  a,@@lop
9F98 90 00 84    mov  dptr,xram_tmp__84h
9F9B E0          movx a,[dptr]
9F9C 04          inc  a
9F9D F0          movx [dptr],a
9F9E 80 D1       sjmp @@lop
                ;---
                @@lop_done:
9FA0 22          ret
                ;------------------
;:------------- ;:----------------- baudrate, LCD source, backlight
                ;------------------
                set_baudrate_r4r5r6r7:
                 ;computes the baudrate reload value as so:
                 ; -27000000/(57600*32) = -14.6484375 = rounded = -14 = FFF2h
                 ;due to the rounding, this will produce:
                 ; -27000000/-14/32 = 60267.85714 bauds = does that work well?
                 ;alternately, a bit closer would be:
                 ; -27000000/-15/32 = 56250 bauds
                 ;best would be to avoid/reduce the div32 effect if possible
                 ;(at least standard 80C51's allow to select div16 in PCON)
                 ;---
9FA1 8F 29       mov  [iram_tmp__29h],r7     ;\
9FA3 8E 28       mov  [iram_tmp__28h],r6     ; baud (57600 baud)
9FA5 8D 27       mov  [iram_tmp__27h],r5     ;
9FA7 8C 26       mov  [iram_tmp__26h],r4     ;/
9FA9 75 C8 30    mov  [SFR_IO_baudrate_control],30h
9FAC 75 98 50    mov  [SFR_IO_sio_scon],50h    ;-mode (uart, 8bit, no parity)
9FAF E4          clr  a
                ;- - - -
9FB0 7F 20       mov  r7,20h       ;\                           ;\
9FB2 FE          mov  r6,a   ;=00h ; 00000020h (32)             ;
9FB3 FD          mov  r5,a   ;=00h ;                            ;
9FB4 FC          mov  r4,a   ;=00h ;/                           ;
9FB5 AB 29       mov  r3,[iram_tmp__29h]     ;\                 ;
9FB7 AA 28       mov  r2,[iram_tmp__28h]     ; baud             ;
9FB9 A9 27       mov  r1,[iram_tmp__27h]     ;                  ;
9FBB A8 26       mov  r0,[iram_tmp__26h]     ;/                 ;
9FBD 12 4B 74    call multiply_r4r5r6r7_by_r0r1r2r3             ;/
9FC0 A8 04       mov  r0,r4(0) ;\                               ;\
9FC2 A9 05       mov  r1,r5(0) ; baud*32                        ;
9FC4 AA 06       mov  r2,r6(0) ;                                ;
9FC6 AB 07       mov  r3,r7(0) ;/                               ;
9FC8 7F C0       mov  r7,0C0h ;\                                ;
9FCA 7E FC       mov  r6,0FCh ; 019BFCC0h (27000000 aka 27MHz)  ;
9FCC 7D 9B       mov  r5,9Bh  ;                                 ;
9FCE 7C 01       mov  r4,01h  ;/                                ;
9FD0 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3               ;/
9FD3 C3          clr  c                                         ;\
9FD4 E4          clr  a        ;negate whole 32bit... outch     ;
9FD5 9F          sbc  a,r7                                      ;
9FD6 FF          mov  r7,a                                      ;
9FD7 E4          clr  a                                         ;
9FD8 9E          sbc  a,r6                                      ;
9FD9 FE          mov  r6,a                                      ; OUTPUT MSB
9FDA 74 01       mov  a,01h                                     ;
9FDC 9D          sbc  a,r5                                      ;
9FDD FD          mov  r5,a                                      ;
9FDE E4          clr  a                                         ;
9FDF 9C          sbc  a,r4                                      ;
9FE0 FC          mov  r4,a                                      ;
9FE1 78 08       mov  r0,08h                                    ;
9FE3 12 4C B0    call shift_right_r4r5r6r7_by_r0                ;
9FE6 E4          clr  a                                         ;
9FE7 8F CB       mov  [SFR_IO_baudrate_msb],r7   ;<---          ;/
                ;- - - -
9FE9 7F 20       mov  r7,20h       ;\                           ;\
9FEB FE          mov  r6,a   ;=00h ; 00000020h (32)             ;
9FEC FD          mov  r5,a   ;=00h ;                            ;
9FED FC          mov  r4,a   ;=00h ;/                           ;
9FEE AB 29       mov  r3,[iram_tmp__29h]     ;\                 ;
9FF0 AA 28       mov  r2,[iram_tmp__28h]     ; baud             ;
9FF2 A9 27       mov  r1,[iram_tmp__27h]     ;                  ;
9FF4 A8 26       mov  r0,[iram_tmp__26h]     ;/                 ;
9FF6 12 4B 74    call multiply_r4r5r6r7_by_r0r1r2r3             ;/
9FF9 A8 04       mov  r0,r4(0) ;\                               ;\
9FFB A9 05       mov  r1,r5(0) ; baud*32                        ;
9FFD AA 06       mov  r2,r6(0) ;                                ;
9FFF AB 07       mov  r3,r7(0) ;/                               ;
A001 7F C0       mov  r7,0C0h ;\                                ;
A003 7E FC       mov  r6,0FCh ; 019BFCC0h (27000000 aka 27MHz)  ;
A005 7D 9B       mov  r5,9Bh  ;                                 ;
A007 7C 01       mov  r4,01h  ;/                                ;
A009 12 4B FF    call divide_r4r5r6r7_by_r0r1r2r3               ;/
A00C C3          clr  c                                         ;\
A00D E4          clr  a        ;negate lower 8bit               ;
A00E 9F          sbc  a,r7                                      ; OUTPUT LSB
A00F FF          mov  r7,a                                      ;
A010 8F CA       mov  [SFR_IO_baudrate_lsb],r7   ;<---          ;/
A012 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defdata_IR_OFF_A_B
                .endif
                ;------------------
                gui_proc_SourceMenu_apply:
                gui_proc_fMenuSource_apply:
A013 7F 00       mov  r7,00h                                    ;\PWM0 off
A015 12 B3 35    call pwm_switch_pwm0_on_port35                 ;/
A018 12 BF 26    call osd_disable_all_windows_and_whatever
A01B 12 AE 3D    call osd_zerofill_vram_200h_words
A01E 90 00 2C    mov  dptr,xram_sett_no_signal
A021 E0          movx a,[dptr]
A022 B4 02 0D    jne  a,02h,@@not_2_black
A025 90 00 46    mov  dptr,xram_keypad_flags_msb                ;\
A028 E0          movx a,[dptr]  ;blah                           ;
A029 F0          movx [dptr],a  ;blah                           ; set bit0
A02A A3          inc  dptr ;=xram_keypad_flags_lsb              ; mark ON
A02B E0          movx a,[dptr]                                  ;
A02C 44 01       or   a,01h     ;set bit0                       ;
A02E F0          movx [dptr],a                                  ;/
A02F 12 AD 39    call switch_lcd_screen_on                      ;-LCD ON
                @@not_2_black:
A032 90 00 0C    mov  dptr,xram_sett_input                      ;\
A035 E0          movx a,[dptr]                                  ;
A036 FF          mov  r7,a                                      ;
A037 12 AE 7A    call lcd_apply_input_and_ratio_and_detect_video;/
A03A 7F 7C       mov  r7,7Ch  ;\017Ch (380 decimal)             ;\
A03C 7E 01       mov  r6,01h  ;/                                ; delay 380
A03E 12 BB 5D    call slow_delay_r6r7                           ;/
A041 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
A044 E0          movx a,[dptr]                                  ;
A045 54 06       and  a,06h                                     ;
A047 FF          mov  r7,a                                      ;
A048 BF 06 0E    jne  r7,06h,@@skip                             ;
A04B 90 FE 54    mov  dptr,IO_AV_ctrl_whatever_2        ;\      ;
A04E E0          movx a,[dptr]                          ;       ;
A04F 44 40       or   a,40h                             ;       ;
A051 F0          movx [dptr],a                          ;/      ;
A052 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\      ;
A055 E0          movx a,[dptr]                          ;       ;
A056 54 7F       and  a,7Fh                             ;       ;
A058 F0          movx [dptr],a                          ;/      ;
                @@skip:                                         ;/
A059 7F 01       mov  r7,01h                                    ;\PWM0 on
A05B 12 B3 35    call pwm_switch_pwm0_on_port35                 ;/
A05E 7F 14       mov  r7,14h                                    ;\
A060 7E 00       mov  r6,00h                                    ; delay 20
A062 12 BB 5D    call slow_delay_r6r7                           ;/
A065 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
A068 E0          movx a,[dptr]                                  ;
A069 54 06       and  a,06h                                     ;
A06B FF          mov  r7,a                                      ;
A06C BF 06 0D    jne  r7,06h,@@skip_0_blue                      ;
                .if tech_version<ver11sep2017                   ;
A06F 90 00 2C      mov  dptr,xram_sett_no_signal                ;
A072 E0            movx a,[dptr]                                ;
A073 70 07         jnz  a,@@not_0_blue                          ;
                .endif                                          ;
A075 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\      ;
A078 E0          movx a,[dptr]                          ;       ;
A079 44 80       or   a,80h                             ;       ;
A07B F0          movx [dptr],a                          ;/      ;
                @@not_0_blue:                                   ;
                @@skip_0_blue:                                  ;/
A07C 74 FF       mov  a,0FFh                    ;\
A07E F5 1C       mov  [iram_ir_msb_device],a    ;
A080 F5 1D       mov  [iram_ir_lsb_cmd],a       ;/
A082 D3          set  c
A083 22          ret
                ;------------------
                gui_proc_SelSource_apply:
                 ;seems to be exactly same as "gui_proc_SourceMenu_apply" and "gui_proc_fMenuSource_apply" ?
A084 7F 00       mov  r7,00h                                    ;\PWM0 off
A086 12 B3 35    call pwm_switch_pwm0_on_port35                 ;/
A089 12 BF 26    call osd_disable_all_windows_and_whatever
A08C 12 AE 3D    call osd_zerofill_vram_200h_words
A08F 90 00 2C    mov  dptr,xram_sett_no_signal
A092 E0          movx a,[dptr]
A093 B4 02 0D    jne  a,02h,@@not_2_black
A096 90 00 46    mov  dptr,xram_keypad_flags_msb                ;\
A099 E0          movx a,[dptr]  ;blah                           ;
A09A F0          movx [dptr],a  ;blah                           ; set bit0
A09B A3          inc  dptr ;=xram_keypad_flags_lsb              ; mark ON
A09C E0          movx a,[dptr]                                  ;
A09D 44 01       or   a,01h     ;set bit0                       ;
A09F F0          movx [dptr],a                                  ;/
A0A0 12 AD 39    call switch_lcd_screen_on                      ;-LCD ON
                @@not_2_black:
A0A3 90 00 0C    mov  dptr,xram_sett_input                      ;\
A0A6 E0          movx a,[dptr]                                  ;
A0A7 FF          mov  r7,a                                      ;
A0A8 12 AE 7A    call lcd_apply_input_and_ratio_and_detect_video;/
A0AB 7F 7C       mov  r7,7Ch  ;\017Ch (380 decimal)             ;\
A0AD 7E 01       mov  r6,01h  ;/                                ; delay 380
A0AF 12 BB 5D    call slow_delay_r6r7                           ;/
A0B2 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
A0B5 E0          movx a,[dptr]                                  ;
A0B6 54 06       and  a,06h                                     ;
A0B8 FF          mov  r7,a                                      ;
A0B9 BF 06 0E    jne  r7,06h,@@skip                             ;
A0BC 90 FE 54    mov  dptr,IO_AV_ctrl_whatever_2        ;\      ;
A0BF E0          movx a,[dptr]                          ;       ;
A0C0 44 40       or   a,40h                             ;       ;
A0C2 F0          movx [dptr],a                          ;/      ;
A0C3 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\      ;
A0C6 E0          movx a,[dptr]                          ;       ;
A0C7 54 7F       and  a,7Fh                             ;       ;
A0C9 F0          movx [dptr],a                          ;/      ;
                @@skip:                                         ;/
A0CA 7F 01       mov  r7,01h                                    ;\PWM0 on
A0CC 12 B3 35    call pwm_switch_pwm0_on_port35                 ;/
A0CF 7F 14       mov  r7,14h                                    ;\
A0D1 7E 00       mov  r6,00h                                    ; delay 20
A0D3 12 BB 5D    call slow_delay_r6r7                           ;/
A0D6 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
A0D9 E0          movx a,[dptr]                                  ;
A0DA 54 06       and  a,06h                                     ;
A0DC FF          mov  r7,a                                      ;
A0DD BF 06 0D    jne  r7,06h,@@skip_0_blue                      ;
                .if tech_version<ver11sep2017                   ;
A0E0 90 00 2C      mov  dptr,xram_sett_no_signal                ;
A0E3 E0            movx a,[dptr]                                ;
A0E4 70 07         jnz  a,@@not_0_blue                          ;
                .endif                                          ;
A0E6 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\      ;
A0E9 E0          movx a,[dptr]                          ;       ;
A0EA 44 80       or   a,80h                             ;       ;
A0EC F0          movx [dptr],a                          ;/      ;
                @@not_0_blue:                                   ;
                @@skip_0_blue:                                  ;/
A0ED 74 FF       mov  a,0FFh                    ;\
A0EF F5 1C       mov  [iram_ir_msb_device],a    ;
A0F1 F5 1D       mov  [iram_ir_lsb_cmd],a       ;/
A0F3 D3          set  c
A0F4 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defdata_INPUT_AV1_AV2
                .endif
                ;------------------
                .macro defcode_switch_screen_and_backlight_on
                switch_screen_and_backlight_on:
A0F5 90 00 46    mov  dptr,xram_keypad_flags_msb                ;\
A0F8 E0          movx a,[dptr]                                  ;
A0F9 FE          mov  r6,a                                      ;
A0FA A3          inc  dptr ;=xram_keypad_flags_lsb              ;
A0FB E0          movx a,[dptr]                                  ;
A0FC 20 E0 63    jnz  a.0,@@exit       ;--------> display is already on
                ;- - -
A0FF 44 01       or   a,01h     ;set bit0 (mark on)             ;\
A101 FF          mov  r7,a                                      ;
A102 90 00 46    mov  dptr,xram_keypad_flags_msb                ;
A105 EE          mov  a,r6                                      ; set bit0
A106 F0          movx [dptr],a                                  ; mark ON
A107 A3          inc  dptr ;=xram_keypad_flags_lsb              ;
A108 EF          mov  a,r7                                      ;
A109 F0          movx [dptr],a                                  ;/
A10A 90 00 2C    mov  dptr,xram_sett_no_signal
A10D E0          movx a,[dptr]
A10E B4 02 0A    jne  a,02h,@@not_2_black
A111 12 AD 39    call switch_lcd_screen_on                      ;-LCD ON
                .if tech_version<ver11sep2017
A114 7F 32         mov  r7,32h                                  ;\
A116 7E 00         mov  r6,00h                                  ; delay 50
A118 12 BB 5D      call slow_delay_r6r7                         ;/
                .endif
                @@not_2_black:
A11B E4          clr  a     ;<--fixed (instead sett)            ;\
A11C FF          mov  r7,a  ;=00h                               ; AV video on
A11D 12 A7 F7    call xlat_r7_to_forced_blank_color             ;/
A120 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
A123 E0          movx a,[dptr]                                  ;
A124 54 06       and  a,06h                                     ;
A126 FF          mov  r7,a                                      ;
A127 BF 06 0E    jne  r7,06h,@@_A138h                           ;
A12A 90 FE 54    mov  dptr,IO_AV_ctrl_whatever_2        ;\      ;
A12D E0          movx a,[dptr]                          ;       ;
A12E 44 40       or   a,40h                             ;       ;
A130 F0          movx [dptr],a                          ;/      ;
A131 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\      ;
A134 E0          movx a,[dptr]                          ;       ;
A135 54 7F       and  a,7Fh                             ;       ;
A137 F0          movx [dptr],a                          ;/      ;
                @@_A138h:                                       ;/
A138 7F 64       mov  r7,64h                                    ;\
A13A 7E 00       mov  r6,00h                                    ; delay 100
A13C 12 BB 5D    call slow_delay_r6r7                           ;/
A13F 7F 01       mov  r7,01h                                    ;\PWM0 on
A141 12 B3 35    call pwm_switch_pwm0_on_port35                 ;/
A144 7F 14       mov  r7,14h                                    ;\
A146 7E 00       mov  r6,00h                                    ; delay 20
A148 12 BB 5D    call slow_delay_r6r7                           ;/
A14B 90 FE 26    mov  dptr,IO_AV_stat_detect_0                  ;\
A14E E0          movx a,[dptr]                                  ;
A14F 54 06       and  a,06h                                     ;
A151 FF          mov  r7,a                                      ;
A152 BF 06 0D    jne  r7,06h,@@exit                             ;
                .if tech_version<ver11sep2017                   ;
A155 90 00 2C      mov  dptr,xram_sett_no_signal                ;
A158 E0            movx a,[dptr]                                ;
A159 70 07         jnz  a,@@not_0_blue                          ;
                .endif                                          ;
A15B 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\      ;
A15E E0          movx a,[dptr]                          ;       ;
A15F 44 80       or   a,80h                             ;       ;
A161 F0          movx [dptr],a                          ;/      ;
                @@not_0_blue:                                   ;
                @@exit:                                         ;/
A162 22          ret
                .endm ;defcode_switch_screen_and_backlight_on
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_switch_screen_and_backlight_on
                  defdata_IR_OFF_A_B
                  defdata_INPUT_AV1_AV2
                .endif
                ;------------------
;:------------- ;:----------------- GUI code (prev item)
                ;------------------
                prev_next_item:
                 ;in: r7=ID_func_06h_prev_item or ID_func_07h_next_item
                 ;- - -
A23A 8F 28       mov  [iram_tmp__28h],r7  ;func (06h or 07h)    ;-
A23C 12 71 61    call xxx_7161h                           ;--->
A23F E5 28       mov  a,[iram_tmp__28h]      ;func              ;\
A241 B4 07 05    jne  a,07h,@@prev                              ;
A244 12 83 65    call search_next_item    ;NEXT ITEM            ;
A247 80 03       sjmp @@this_item                               ;
                ;---                                            ;
                @@prev:                                         ;
A249 12 7A 05    call search_prev_item    ;PREV ITEM            ;
                @@this_item:                                    ;/
                ;- - - -
A24C 90 00 B9    mov  dptr,xram_current_item
A24F EF          mov  a,r7
A250 F0          movx [dptr],a
A251 90 00 B8    mov  dptr,xram_current_menu
A254 E0          movx a,[dptr]
A255 75 F0 03    mov  b,03h
A258 A4          mul  a,b
A259 24 4C       add  a,gui_menu_list and 0ffh
A25B F5 82       mov  dpl,a
A25D E4          clr  a
A25E 34 2C       adc  a,gui_menu_list/100h
A260 F5 83       mov  dph,a
A262 E4          clr  a
A263 93          movc a,[a+dptr]
A264 FB          mov  r3,a
A265 74 01       mov  a,01h
A267 93          movc a,[a+dptr]
A268 FA          mov  r2,a
A269 74 02       mov  a,02h
A26B 93          movc a,[a+dptr]
A26C F9          mov  r1,a
A26D 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
A270 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
A273 B4 23 04    jne  a,MenuID_23h_FactoryMenu,@@_A27Ah         ;\
A276 7F 01       mov  r7,01h                                    ;
A278 80 02       sjmp @@_A27Ch                                  ;
                ;---                                            ;
                @@_A27Ah:                                       ;
A27A 7F 00       mov  r7,00h                                    ;
                @@_A27Ch:                                       ;
A27C EF          mov  a,r7                                      ;/
A27D 60 08       jz   a,@@_A287h
A27F 90 00 B9    mov  dptr,xram_current_item
A282 E0          movx a,[dptr]
A283 90 00 B7    mov  dptr,xram_old_item
A286 F0          movx [dptr],a
                @@_A287h:
A287 7C 00       mov  r4,00h
A289 7D 40       mov  r5,40h
A28B 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
A28E 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
A291 90 00 B9    mov  dptr,xram_current_item
A294 E0          movx a,[dptr]
A295 75 F0 20    mov  b,20h
A298 A4          mul  a,b
A299 29          add  a,r1
A29A F9          mov  r1,a
A29B EA          mov  a,r2
A29C 35 F0       adc  a,b
A29E FA          mov  r2,a
A29F 02 71 95    jmp  xxx_7195h            ;------------->
                ;------------------
;:------------- ;:----------------- OSD code (bitmap palette, init OSD)
                ;------------------
                osd_set_bitmap_palette:
                ;(unused?)
A2A2 8B 17       mov  [iram_tmp_palette_area],r3        ;\
A2A4 8A 18       mov  [iram_tmp_palette_msb],r2         ; src
A2A6 89 19       mov  [iram_tmp_palette_lsb],r1         ;/
A2A8 E4          clr  a
A2A9 90 00 C0    mov  dptr,xram_tmp_unused_index
A2AC F0          movx [dptr],a   ;index=0
A2AD F0          movx [dptr],a   ;blah/again
                @@lop_16_words:
A2AE AB 17       mov  r3,[iram_tmp_palette_area]        ;\
A2B0 AA 18       mov  r2,[iram_tmp_palette_msb]         ; src
A2B2 A9 19       mov  r1,[iram_tmp_palette_lsb]         ;/
A2B4 90 00 C0    mov  dptr,xram_tmp_unused_index
A2B7 E0          movx a,[dptr]
A2B8 FF          mov  r7,a     ;index
A2B9 75 F0 02    mov  b,02h
A2BC A4          mul  a,b      ;index*2
A2BD 24 01       add  a,01h    ;index*2+1   ;<--plus 1
A2BF F5 82       mov  dpl,a
A2C1 E4          clr  a
A2C2 35 F0       adc  a,b
A2C4 F5 83       mov  dph,a
A2C6 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
A2C9 FE          mov  r6,a     ;data
A2CA 75 F0 02    mov  b,02h
A2CD EF          mov  a,r7     ;index
A2CE A4          mul  a,b      ;index*2
A2CF 24 36       add  a,(IO_OSD_bitmap_colors+0) and 0ffh     ;I/O
A2D1 F5 82       mov  dpl,a
A2D3 E5 F0       mov  a,b
A2D5 34 FB       adc  a,(IO_OSD_bitmap_colors+0)/100h         ;I/O
A2D7 F5 83       mov  dph,a
A2D9 EE          mov  a,r6     ;data
A2DA F0          movx [dptr],a
A2DB 90 00 C0    mov  dptr,xram_tmp_unused_index
A2DE E0          movx a,[dptr]
A2DF FF          mov  r7,a     ;index
A2E0 75 F0 02    mov  b,02h
A2E3 A4          mul  a,b      ;index*2
A2E4 F5 82       mov  dpl,a
A2E6 85 F0 83    mov  dph,b
A2E9 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
A2EC FE          mov  r6,a     ;data
A2ED 75 F0 02    mov  b,02h
A2F0 EF          mov  a,r7     ;index
A2F1 A4          mul  a,b      ;index*2
A2F2 24 37       add  a,(IO_OSD_bitmap_colors+1) and 0ffh     ;I/O
A2F4 F5 82       mov  dpl,a
A2F6 E5 F0       mov  a,b
A2F8 34 FB       adc  a,(IO_OSD_bitmap_colors+1)/100h         ;I/O
A2FA F5 83       mov  dph,a
A2FC EE          mov  a,r6      ;data
A2FD F0          movx [dptr],a
A2FE 90 00 C0    mov  dptr,xram_tmp_unused_index
A301 E0          movx a,[dptr]
A302 04          inc  a         ;index
A303 F0          movx [dptr],a
A304 E0          movx a,[dptr]
A305 B4 10 A6    jne  a,10h,@@lop_16_words
A308 22          ret
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_init_load_settings
                .endif
                ;------------------
                init_OSD_hardware:
A36C 12 BE C6    call osd_disable_all_five_windows      ;-disable all windows
A36F 12 AE 3D    call osd_zerofill_vram_200h_words
A372 12 AB E8    call osd_init_six_colors               ;-init OSD colors
A375 7D 10       mov  r5,10h   ;ysiz, 16pix             ;\
A377 7F 0C       mov  r7,0Ch   ;xsiz, 12pix             ; char size 12x16pix
A379 12 BE B4    call osd_set_character_xysiz           ;/
A37C E4          clr  a                                 ;\
A37D FB          mov  r3,a  ;blah/dummy                 ;
A37E FD          mov  r5,a  ;blah/dummy                 ; disable semi-transp
A37F FF          mov  r7,a  ;disable                    ;
A380 12 B1 8B    call osd_set_semi_transparency         ;/
A383 7F 28       mov  r7,28h    ;char 28h (+1C0h)       ;\set bitmap start
A385 12 BE 76    call osd_set_bitmap_start              ;/
A388 7F 07       mov  r7,07h    ;0=black, 4=normal      ;\set brightness
A38A 12 BC BD    call osd_set_brightness                ;/ BUG: setting 7 is too bright (causing color 0AAAh..0FFFh to became all WHITE)
                ;- - - - -
A38D 7B FF       mov  r3,0FFh               ;\                               ;\
A38F 7A 09       mov  r2,main_font/100h     ; r3r2r1=0981h                   ;
A391 79 81       mov  r1,main_font and 0ffh ;/                               ;
A393 AF 01       mov  r7,r1(0)      ;src.spi.flash.lsb ;\copy main_font to r6r7
A395 AE 02       mov  r6,r2(0)      ;src.spi.flash.mid ;/                    ;
A397 7C 00       mov  r4,00h  ;=00h ;src uppermost blah of 32bits, blah/zero ;
A399 E4          clr  a                                                      ;
A39A FD          mov  r5,a    ;=00h ;src.spi.flash.msb                       ;
A39B F5 2A       mov  [iram_tmp__2Ah],a ;=00h ;dst.vram.addr.msb?            ;
A39D F5 2B       mov  [iram_tmp__2Bh],a ;=00h ;dst.vram.addr.lsb?            ;
A39F 75 2C 15    mov  [iram_tmp__2Ch],main_font_siz/100h     ;len.msb ;\len 1540h
A3A2 75 2D 40    mov  [iram_tmp__2Dh],main_font_siz and 0ffh ;len.lsb ;/     ;
A3A5 12 9E B7    lcall osd_upload_font_characters_via_dma ;--> these via DMA ;/
                ;- - - - -
A3A8 7B FF       mov  r3,0FFh                   ;\                           ;\
A3AA 7A 3A       mov  r2,extra_font_1/100h      ; 3AF4h (src in CODE memory) ;
A3AC 79 F4       mov  r1,extra_font_1 and 0ffh  ;/                           ;
A3AE 7D 19       mov  r5,extra_font_1_num_chars     ;len 19h chars           ;
A3B0 7F AA       mov  r7,0AAh   ;vram.dest.index (AAh+0..18h) (19hx20h 320h) ;
A3B2 12 78 2B    call osd_upload_font_characters_manually ;-->               ;/
A3B5 7B FF       mov  r3,0FFh                   ;\                           ;\
A3B7 7A 3E       mov  r2,extra_font_2/100h      ; 3EB4h (src in CODE memory) ;
A3B9 79 B4       mov  r1,extra_font_2 and 0ffh  ;/                           ;
A3BB 7D 07       mov  r5,extra_font_2_num_chars     ;len 07h chars           ;
A3BD 7F C3       mov  r7,0C3h   ;vram.dest.index (C3h+0..06h)                ;
A3BF 12 78 2B    call osd_upload_font_characters_manually ;-->               ;/
A3C2 7B FF       mov  r3,0FFh                   ;\                           ;\
A3C4 7A 3F       mov  r2,extra_font_3/100h      ; 3F94h (src in CODE memory) ;
A3C6 79 94       mov  r1,extra_font_3 and 0ffh  ;/                           ;
A3C8 7D 21       mov  r5,extra_font_3_num_chars     ;len 21h chars           ;
A3CA 7F CA       mov  r7,0CAh   ;vram.dest.index (CAh+0..20h)                ;
A3CC 02 78 2B    jmp  osd_upload_font_characters_manually ;-->               ;/
                ;------------------
;:------------- ;:----------------- GUI code ()
                ;------------------
                check_secret_key_combo_MenuDUUDD:  ;for key.code 1Fh (aka ID_func_01h_Version)
A3CF AD 07       mov  r5,r7(0)          ;key.code (07h,08h,09h for 3KEY)
A3D1 90 00 46    mov  dptr,xram_keypad_flags_msb
A3D4 E0          movx a,[dptr]
A3D5 FA          mov  r2,a
A3D6 A3          inc  dptr ;=xram_keypad_flags_lsb
A3D7 E0          movx a,[dptr]
A3D8 FB          mov  r3,a
A3D9 AE 02       mov  r6,r2(0)
A3DB 78 03       mov  r0,03h  ;shift amount     ;\
                @@shift_lop:                    ;
A3DD CE          xchg a,r6                      ;
A3DE C3          clr  c                         ;
A3DF 13          rcr  a                         ;
A3E0 CE          xchg a,r6                      ;
A3E1 13          rcr  a                         ;
A3E2 D8 F9       djnz r0,@@shift_lop            ;/
A3E4 30 E0 03    jz   a.0,@@clear_cy
A3E7 D3          set  c
A3E8 80 01       sjmp @@this_cy
                ;---
                @@clear_cy:
A3EA C3          clr  c
                @@this_cy:
A3EB 40 41       jc   @@return_unchanged_normal_keycode         ;--->
A3ED EB          mov  a,r3
A3EE 20 E0 08    jnz  a.0,@@_A3F9h
A3F1 E4          clr  a
A3F2 90 00 C3    mov  dptr,xram_index_secret_key_combo_MenuDUUDD
A3F5 F0          movx [dptr],a       ;key.combo.index
A3F6 AF 05       mov  r7,r5(0)
A3F8 22          ret
                ;---
                @@_A3F9h:
A3F9 90 00 C3    mov  dptr,xram_index_secret_key_combo_MenuDUUDD
A3FC E0          movx a,[dptr]       ;key.combo.index
A3FD FF          mov  r7,a           ;key.combo.index
A3FE 90 BA C2    mov  dptr,secret_key_combo_data_MenuDUUDD
A401 93          movc a,[a+dptr]
A402 B5 05 1E    jne  a,r5(0),@@mismatch
A405 EF          mov  a,r7           ;key.combo.index
A406 B4 05 12    jne  a,05h,@@_A41Bh
                ;- - - okay, secret key combo completed...
A409 E4          clr  a                                         ;\
A40A 90 00 C3    mov  dptr,xram_index_secret_key_combo_MenuDUUDD;
A40D F0          movx [dptr],a       ;key.combo.index           ;/
A40E 90 00 46    mov  dptr,xram_keypad_flags_msb                ;\
A411 E0          movx a,[dptr]  ;blah                           ;
A412 F0          movx [dptr],a  ;blah                           ; set bit4
A413 A3          inc  dptr ;=xram_keypad_flags_lsb              ;
A414 E0          movx a,[dptr]                                  ;
A415 44 10       or   a,10h     ;set bit4   ;<--- FLAG          ;
A417 F0          movx [dptr],a                                  ;/
A418 7F 1F       mov  r7,ID_event_1Fh_secret   ;<--- return key.code 1Fh = secret.key.combo
A41A 22          ret
                ;---
                @@_A41Bh:
A41B 90 00 C3    mov  dptr,xram_index_secret_key_combo_MenuDUUDD
A41E E0          movx a,[dptr]
A41F 04          inc  a              ;key.combo.index
A420 F0          movx [dptr],a
A421 80 0B       sjmp @@return_unchanged_normal_keycode
                ;---
                @@mismatch:
A423 90 00 C3    mov  dptr,xram_index_secret_key_combo_MenuDUUDD
A426 E0          movx a,[dptr]
A427 D3          set  c              ;key.combo.index
A428 94 00       sbc  a,00h
A42A 40 02       jc   @@return_unchanged_normal_keycode
A42C E4          clr  a
A42D F0          movx [dptr],a
                @@return_unchanged_normal_keycode:
A42E AF 05       mov  r7,r5(0)  ;<--- return key.code (unchanged incoming value)
A430 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_switch_screen_and_backlight_on
                .endif
                ;------------------
;:------------- ;:----------------- OSD code (window attr)
                ;------------------
                set_window_addr:
                 ;in: r7=window   (1..4)
                 ;in: r4=msb*80h  (00h or 80h)  ;BUG: incoming is 00h or 01h?
                 ;in: r5=lsb      (0..FFh)
A431 AB 07       mov  r3,r7(0)
                ;- - -
                ;window_0 isn't used here
                ;- - -
A433 EB          mov  a,r3      ;window
A434 64 01       xor  a,01h
A436 70 11       jnz  a,@@not_window_1
A438 ED          mov  a,r5      ;addr.lsb
A439 90 FB 17    mov  dptr,IO_OSD_window_1_vramaddr_lsb
A43C F0          movx [dptr],a
A43D 90 FB 14    mov  dptr,IO_OSD_window_1_xyloc_msb
A440 E0          movx a,[dptr]
A441 54 7F       and  a,7Fh
A443 F0          movx [dptr],a
A444 E0          movx a,[dptr]
A445 FA          mov  r2,a
A446 EA          mov  a,r2
A447 4C          or   a,r4      ;addr.msb*80h
A448 F0          movx [dptr],a
                @@not_window_1:
A449 EB          mov  a,r3
A44A 64 02       xor  a,02h
A44C 70 11       jnz  a,@@not_window_2
A44E ED          mov  a,r5      ;addr.lsb
A44F 90 FB 1D    mov  dptr,IO_OSD_window_2_vramaddr_lsb
A452 F0          movx [dptr],a
A453 90 FB 1A    mov  dptr,IO_OSD_window_2_xyloc_msb
A456 E0          movx a,[dptr]
A457 54 7F       and  a,7Fh
A459 F0          movx [dptr],a
A45A E0          movx a,[dptr]
A45B FA          mov  r2,a
A45C EA          mov  a,r2
A45D 4C          or   a,r4      ;addr.msb*80h
A45E F0          movx [dptr],a
                @@not_window_2:
A45F EB          mov  a,r3
A460 64 03       xor  a,03h
A462 70 11       jnz  a,@@not_window_3
A464 ED          mov  a,r5      ;addr.lsb
A465 90 FB 23    mov  dptr,IO_OSD_window_3_vramaddr_lsb
A468 F0          movx [dptr],a
A469 90 FB 20    mov  dptr,IO_OSD_window_3_xyloc_msb
A46C E0          movx a,[dptr]
A46D 54 7F       and  a,7Fh
A46F F0          movx [dptr],a
A470 E0          movx a,[dptr]
A471 FA          mov  r2,a
A472 EA          mov  a,r2
A473 4C          or   a,r4      ;addr.msb*80h
A474 F0          movx [dptr],a
                @@not_window_3:
A475 EB          mov  a,r3
A476 64 04       xor  a,04h
A478 70 11       jnz  a,@@not_window_4
A47A ED          mov  a,r5      ;addr.lsb
A47B 90 FB 29    mov  dptr,IO_OSD_window_4_vramaddr_lsb
A47E F0          movx [dptr],a
A47F 90 FB 26    mov  dptr,IO_OSD_window_4_xyloc_msb
A482 E0          movx a,[dptr]
A483 54 7F       and  a,7Fh
A485 F0          movx [dptr],a
A486 E0          movx a,[dptr]
A487 FB          mov  r3,a
A488 EB          mov  a,r3
A489 4C          or   a,r4      ;addr.msb*80h
A48A F0          movx [dptr],a
                @@not_window_4:
A48B AE 04       mov  r6,r4(0)
A48D AF 05       mov  r7,r5(0)
A48F 22          ret
                ;------------------
;:------------- ;:----------------- init code, no signal
                ;------------------
                output_initial_data_from_extra_fixed_io_list:   ;used TWICE
A490 E4          clr  a                         ;\
A491 90 00 7E    mov  dptr,xram_tmp__7Eh        ;
A494 F0          movx [dptr],a                  ; index=0
A495 A3          inc  dptr ;=xram_tmp__7Fh      ;
A496 F0          movx [dptr],a                  ;/
                @@lop:
A497 90 00 7E    mov  dptr,xram_tmp__7Eh
A49A E0          movx a,[dptr]
A49B FE          mov  r6,a
A49C A3          inc  dptr ;=xram_tmp__7Fh
A49D E0          movx a,[dptr]
A49E FF          mov  r7,a
A49F 90 61 BF    mov  dptr,extra_fixed_io_list+2
A4A2 75 F0 03    mov  b,03h
A4A5 12 4C E0    call add_a_mul_b_to_dptr
A4A8 EE          mov  a,r6
A4A9 75 F0 03    mov  b,03h
A4AC A4          mul  a,b
A4AD 25 83       add  a,dph
A4AF F5 83       mov  dph,a
A4B1 E4          clr  a
A4B2 93          movc a,[a+dptr]
A4B3 FD          mov  r5,a
A4B4 90 61 BD    mov  dptr,extra_fixed_io_list+0     ;... initial data for 25 ports (FD32h and up)
A4B7 75 F0 03    mov  b,03h
A4BA EF          mov  a,r7
A4BB 12 4C E0    call add_a_mul_b_to_dptr
A4BE EE          mov  a,r6
A4BF 75 F0 03    mov  b,03h
A4C2 A4          mul  a,b
A4C3 25 83       add  a,dph
A4C5 F5 83       mov  dph,a
A4C7 E4          clr  a
A4C8 93          movc a,[a+dptr]
A4C9 FE          mov  r6,a
A4CA 74 01       mov  a,01h
A4CC 93          movc a,[a+dptr]
A4CD F5 82       mov  dpl,a
A4CF 8E 83       mov  dph,r6
A4D1 ED          mov  a,r5
A4D2 F0          movx [dptr],a       ;<--- OUT
A4D3 90 00 7F    mov  dptr,xram_tmp__7Fh                ;\
A4D6 E0          movx a,[dptr]                          ;
A4D7 04          inc  a          ;index.lsb             ;
A4D8 F0          movx [dptr],a                          ;
A4D9 70 06       jnz  a,@@keep_msb                      ; raise index
A4DB 90 00 7E    mov  dptr,xram_tmp__7Eh                ;
A4DE E0          movx a,[dptr]                          ;
A4DF 04          inc  a          ;index.msb             ;
A4E0 F0          movx [dptr],a                          ;
                @@keep_msb:                             ;/
A4E1 90 00 7E    mov  dptr,xram_tmp__7Eh                ;\
A4E4 E0          movx a,[dptr]   ;index.msb             ;
A4E5 70 04       jnz  a,@@next                          ;
A4E7 A3          inc  dptr ;=xram_tmp__7Fh              ; lop next
A4E8 E0          movx a,[dptr]   ;index.lsb             ;
A4E9 64 19       xor  a,extra_fixed_io_list_num_entries ;
                @@next:                                 ;
A4EB 70 AA       jnz  a,@@lop                           ;/
A4ED 22          ret
                ;------------------
                xxx_A4EEh:            ;... NoSignal? ... Root & Save Settings
A4EE 90 00 46    mov  dptr,xram_keypad_flags_msb
A4F1 E0          movx a,[dptr]
A4F2 FC          mov  r4,a
A4F3 A3          inc  dptr ;=xram_keypad_flags_lsb
A4F4 E0          movx a,[dptr]
A4F5 FD          mov  r5,a
A4F6 AE 04       mov  r6,r4(0)
A4F8 78 03       mov  r0,03h  ;shift amount     ;\
                @@shift_lop:                    ;
A4FA CE          xchg a,r6                      ;
A4FB C3          clr  c                         ;
A4FC 13          rcr  a                         ;
A4FD CE          xchg a,r6                      ;
A4FE 13          rcr  a                         ;
A4FF D8 F9       djnz r0,@@shift_lop            ;/
A501 30 E0 0C    jz   a.0,@@_A510h                      ;-blah, skip clearing bit3 if bit3 is already zero
A504 ED          mov  a,r5                              ;\
A505 54 F7       and  a,0F7h  ;clear bit3               ;
A507 FF          mov  r7,a                              ;
A508 90 00 46    mov  dptr,xram_keypad_flags_msb        ;
A50B EC          mov  a,r4                              ; clear bit3
A50C F0          movx [dptr],a                          ;
A50D A3          inc  dptr ;=xram_keypad_flags_lsb      ;
A50E EF          mov  a,r7                              ;
A50F F0          movx [dptr],a                          ;
                @@_A510h:                               ;/
A510 12 BF 26    call osd_disable_all_windows_and_whatever      ;--------->
A513 90 00 2C    mov  dptr,xram_sett_no_signal
A516 E0          movx a,[dptr]
A517 FF          mov  r7,a
A518 64 02       xor  a,02h
A51A 60 27       jz   a,@@is_2_black
A51C 90 FE 26    mov  dptr,IO_AV_stat_detect_0  ;\
A51F E0          movx a,[dptr]                  ;
A520 54 06       and  a,06h                     ;
A522 FE          mov  r6,a                      ;/
A523 BE 06 03    jne  r6,06h,@@clear_cy         ;\
A526 D3          set  c                         ;
A527 80 01       sjmp @@this_cy                 ;
                ;---                            ;
                @@clear_cy:                     ;
A529 C3          clr  c                         ;
                @@this_cy:                      ;/
A52A 40 17       jc   @@finish
A52C 90 00 0E    mov  dptr,xram_sett___0Eh              ;\
A52F E0          movx a,[dptr]                          ;
A530 B4 11 10    jne  a,11h,@@finish                    ;/
A533 EF          mov  a,r7  ;=[xram_sett_no_signal]
A534 B4 01 05    jne  a,01h,@@not_1_snow
A537 12 BF 26    call osd_disable_all_windows_and_whatever      ;SNOW
A53A 80 07       sjmp @@finish
                ;---
                @@not_1_snow:                                   ;BLUE
A53C 7D 02       mov  r5,02h ;txt.scale (2=double size!!!)
A53E 7F 20       mov  r7,MenuID_20h_NoSignal
A540 12 A6 02    call do_select_menu_r7_and_scale_r5
                @@is_2_black:
                @@finish:
A543 12 BD 53    call select_Root_menu          ;-switch to Root menu
A546 02 A6 A8    jmp  do_save_settings          ;-and save settings
                ;------------------
;:------------- ;:----------------- GUI code
                ;------------------
                check_secret_key_combo_MenuUDDUU:  ;for key.code 20h (aka ID_func_2Dh_fMenuSource)
A549 AD 07       mov  r5,r7(0)          ;key.code               ;-
A54B 90 00 46    mov  dptr,xram_keypad_flags_msb                ;\
A54E E0          movx a,[dptr]                                  ;
A54F FA          mov  r2,a                                      ;
A550 A3          inc  dptr ;=xram_keypad_flags_lsb              ;
A551 E0          movx a,[dptr]                                  ;
A552 FB          mov  r3,a                                      ;
A553 EA          mov  a,r2                                      ; bizarre way to
A554 C4          swap a         ;bit8-11 to bit4-7              ; test bit4
A555 F8          mov  r0,a                                      ;
A556 54 F0       and  a,0F0h    ;bit8-11 in bit4-7              ;
A558 C8          xchg a,r0                                      ;
A559 EB          mov  a,r3                                      ;
A55A C4          swap a         ;bit4-7 to bit0-3               ;
A55B 54 0F       and  a,0Fh     ;bit4-7 in bit0-3               ;
A55D 48          or   a,r0      ;bit8-11 in bit4-7              ;
A55E 20 E0 3F    jnz  a.0,@@return_unchanged_normal_keycode     ;/
A561 EB          mov  a,r3      ;flags.lsb                      ;\test bit0
A562 20 E0 06    jnz  a.0,@@display_is_on                       ;/
A565 E4          clr  a                                         ;\
A566 90 00 BA    mov  dptr,xram_index_secret_key_combo_MenuUDDUU;
A569 F0          movx [dptr],a       ;key.combo.index           ;/
A56A 22          ret
                ;---
                @@display_is_on:
A56B 90 00 BA    mov  dptr,xram_index_secret_key_combo_MenuUDDUU
A56E E0          movx a,[dptr]       ;key.combo.index
A56F FF          mov  r7,a           ;key.combo.index
A570 90 BF A2    mov  dptr,secret_key_combo_data_MenuUDDUU
A573 93          movc a,[a+dptr]
A574 B5 05 1E    jne  a,r5(0),@@mismatch    ;key.code
A577 EF          mov  a,r7           ;key.combo.index
A578 B4 05 12    jne  a,05h,@@_A58Dh
                ;- - - okay, secret key combo completed...
A57B 90 00 46    mov  dptr,xram_keypad_flags_msb                ;\
A57E E0          movx a,[dptr]  ;blah                           ;
A57F F0          movx [dptr],a  ;blah                           ;
A580 A3          inc  dptr ;=xram_keypad_flags_lsb              ; set bit3
A581 E0          movx a,[dptr]                                  ;
A582 44 08       or   a,08h     ;set bit3 ;<--- flag            ;
A584 F0          movx [dptr],a                                  ;/
A585 E4          clr  a                                         ;\
A586 90 00 BA    mov  dptr,xram_index_secret_key_combo_MenuUDDUU;
A589 F0          movx [dptr],a                                  ;/
A58A 7F 20       mov  r7,ID_event_20h_secret ;<--- key.code ;maybe "secret.key.whatever"?
A58C 22          ret
                ;---
                @@_A58Dh:
A58D 90 00 BA    mov  dptr,xram_index_secret_key_combo_MenuUDDUU
A590 E0          movx a,[dptr]
A591 04          inc  a              ;key.combo.index
A592 F0          movx [dptr],a
A593 80 0B       sjmp @@return_unchanged_normal_keycode
                ;---
                @@mismatch:
A595 90 00 BA    mov  dptr,xram_index_secret_key_combo_MenuUDDUU
A598 E0          movx a,[dptr]       ;key.combo.index
A599 D3          set  c
A59A 94 00       sbc  a,00h
A59C 40 02       jc   @@return_unchanged_normal_keycode
A59E E4          clr  a              ;key.combo.index
A59F F0          movx [dptr],a
                @@return_unchanged_normal_keycode:
A5A0 AF 05       mov  r7,r5(0)
A5A2 22          ret
                ;------------------
                gui_proc_Language_apply:
A5A3 75 3B 1E    mov  [iram_tmp__3Bh],1Eh               ;\
A5A6 7B 01       mov  r3,01h                            ;
A5A8 7D 08       mov  r5,08h                            ;
A5AA 7F 01       mov  r7,01h                            ;
A5AC 12 8B 22    call osd_clear_window_text             ;/
A5AF 75 3B 1D    mov  [iram_tmp__3Bh],1Dh               ;\
A5B2 7B 03       mov  r3,03h                            ;
A5B4 7D 03       mov  r5,03h                            ;
A5B6 7F 03       mov  r7,03h                            ;
A5B8 12 8B 22    call osd_clear_window_text             ;/
A5BB 90 00 B8    mov  dptr,xram_current_menu
A5BE E0          movx a,[dptr]
A5BF 75 F0 03    mov  b,03h
A5C2 A4          mul  a,b
A5C3 24 4C       add  a,gui_menu_list and 0ffh
A5C5 F5 82       mov  dpl,a
A5C7 E5 F0       mov  a,b
A5C9 34 2C       adc  a,gui_menu_list/100h
A5CB F5 83       mov  dph,a
A5CD E4          clr  a
A5CE 93          movc a,[a+dptr]
A5CF FB          mov  r3,a
A5D0 74 01       mov  a,01h
A5D2 93          movc a,[a+dptr]
A5D3 FA          mov  r2,a
A5D4 74 02       mov  a,02h
A5D6 93          movc a,[a+dptr]
A5D7 F9          mov  r1,a
A5D8 90 00 1B    mov  dptr,001Bh ;idxMenuPtrItem
A5DB 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
A5DE 90 00 B9    mov  dptr,xram_current_item
A5E1 E0          movx a,[dptr]
A5E2 75 F0 20    mov  b,20h
A5E5 A4          mul  a,b
A5E6 29          add  a,r1
A5E7 F9          mov  r1,a
A5E8 EA          mov  a,r2
A5E9 35 F0       adc  a,b
A5EB FA          mov  r2,a
A5EC 90 00 0E    mov  dptr,000Eh ;idxItemDataName
A5EF 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
A5F2 7D 80       mov  r5,80h
A5F4 7C 00       mov  r4,00h
A5F6 12 8C 9B    call osd_write_string_type_A
A5F9 D3          set  c
A5FA 22          ret
                ;------------------
                do_select_menu_SourceMenu_and_whatever:
A5FB 43 48 02    or   [iram_menu_flags],02h
A5FE 7D 01       mov  r5,01h ;txt.scale (1=normal)
A600 7F 10       mov  r7,MenuID_10h_SourceMenu
                ;- - - - - --------
                do_select_menu_r7_and_scale_r5:  ;in: r5=txt.scale, r7=MenuID_XXh_xxx
A602 8D 29       mov  [iram_tmp__29h],r5 ;txt.scale     ;-
A604 EF          mov  a,r7     ;MenuID_XXh_xxx          ;\
A605 C3          clr  c                                 ;
A606 94 25       sbc  a,MenuID_25h_MAX_or_so  ;max      ;
A608 50 09       jnc  @@refuse_ID                       ;
A60A EF          mov  a,r7                              ;
A60B C3          clr  c                                 ;
A60C 94 00       sbc  a,00h           ;uh???  ;min      ;
A60E 40 03       jc   @@refuse_ID                       ;
A610 12 BC 9D    call select_menu_r7                    ;
                @@refuse_ID:                            ;/
                ;- - -
A613 90 00 B8    mov  dptr,xram_current_menu
A616 E0          movx a,[dptr]
A617 75 F0 03    mov  b,03h
A61A A4          mul  a,b
A61B 24 4C       add  a,gui_menu_list and 0ffh
A61D F5 82       mov  dpl,a
A61F E4          clr  a
A620 34 2C       adc  a,gui_menu_list/100h
A622 F5 83       mov  dph,a
A624 E4          clr  a
A625 93          movc a,[a+dptr]
A626 FB          mov  r3,a
A627 74 01       mov  a,01h
A629 93          movc a,[a+dptr]
A62A FA          mov  r2,a
A62B 74 02       mov  a,02h
A62D 93          movc a,[a+dptr]
A62E F9          mov  r1,a
A62F 90 00 0B    mov  dptr,000Bh ;idxMenuWindowNo
A632 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
A635 FF          mov  r7,a
A636 12 BF 96    call set_current_window_to_r7
A639 E5 29       mov  a,[iram_tmp__29h]  ;txt.scale     ;\
A63B C3          clr  c                                 ;
A63C 94 01       sbc  a,01h                             ;
A63E 40 0B       jc   @@wrong_scale                     ;
A640 E5 29       mov  a,[iram_tmp__29h]  ;txt.scale     ;
A642 D3          set  c                                 ; apply text scaling
A643 94 04       sbc  a,04h                             ;
A645 50 04       jnc  @@wrong_scale                     ;
A647 AF 29       mov  r7,[iram_tmp__29h] ;txt.scale (1..4)
A649 80 02       sjmp @@this_scale                      ;
                ;---                                    ;
                @@wrong_scale:  ;force 1=normal         ;
A64B 7F 01       mov  r7,01h  ;txt.scale (1=normal)     ;
                @@this_scale:                           ;
A64D 12 8E 0C    call osd_set_text_scale_r7             ;/
A650 02 62 18    jmp  do_draw_menu_window  ;-------->   ;---> draw
                ;------------------
                gui_proc_FactoryPic_VCOM_AC_change:
A653 BF 0D 28    jne  r7,ID_func_0Dh_plus,@@not_increase
A656 90 62 12    mov  dptr,vcom_ac_table                      ;\
A659 E4          clr  a                                       ; get MED value?
A65A 93          movc a,[a+dptr]                              ;
A65B 24 20       add  a,20h       ;MAX=MED+20h                ;/
A65D FD          mov  r5,a
A65E E4          clr  a
A65F 33          rcl  a
A660 FC          mov  r4,a
A661 C3          clr  c
A662 ED          mov  a,r5
A663 94 FF       sbc  a,0FFh
A665 EC          mov  a,r4
A666 64 80       xor  a,80h
A668 94 80       sbc  a,80h
A66A 50 12       jnc  @@not_increase
A66C 90 00 0F    mov  dptr,xram_sett_vcom_ac
A66F E0          movx a,[dptr]
A670 C3          clr  c
A671 9D          sbc  a,r5       ;check MAX range...
A672 EC          mov  a,r4
A673 64 80       xor  a,80h
A675 F8          mov  r0,a
A676 74 80       mov  a,80h
A678 98          sbc  a,r0
A679 50 03       jnc  @@not_increase
A67B E0          movx a,[dptr]
A67C 04          inc  a                 ;increase
A67D F0          movx [dptr],a
                @@not_increase:
                ;- - - - -
A67E BF 0E 25    jne  r7,ID_func_0Eh_minus,@@not_decrease
A681 90 62 12    mov  dptr,vcom_ac_table                      ;\
A684 E4          clr  a                                       ; get MED value?
A685 93          movc a,[a+dptr]                              ;
A686 FF          mov  r7,a                                    ;/
A687 D3          set  c               ;\MED-21h (compare)
A688 94 20       sbc  a,20h           ;/
A68A 40 0E       jc   @@_A69Ah        ;------->
A68C EF          mov  a,r7            ;\
A68D 24 E0       add  a,0E0h          ; MIN=MED-20h
A68F FF          mov  r7,a            ;/
A690 90 00 0F    mov  dptr,xram_sett_vcom_ac
A693 E0          movx a,[dptr]
A694 D3          set  c
A695 9F          sbc  a,r7       ;check MIN range
A696 40 0E       jc   @@not_decrease
A698 80 09       sjmp @@do_decrease
                ;---
                @@_A69Ah:       ;... when MIN=negative or so?
A69A 90 00 0F    mov  dptr,xram_sett_vcom_ac
A69D E0          movx a,[dptr]
A69E D3          set  c
A69F 94 00       sbc  a,00h           ;sub (00h+1)
A6A1 40 03       jc   @@not_decrease
                @@do_decrease:
A6A3 E0          movx a,[dptr]
A6A4 14          dec  a                 ;decrease
A6A5 F0          movx [dptr],a
                @@not_decrease:
A6A6 D3          set  c
A6A7 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defdata_AV1_AV2_AV3
                .endif
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_do_save_settings
                  defdata_AV1_AV2_AV3
                  defdata_AV1_AV2_AV3_dupe
                .endif
                ;------------------
;:------------- ;:----------------- misc code
                ;------------------
                xlat_tint_to_hex_values:   ;xlat TINT 0..100 to HEX values
                 ;in: r7 = tint (0..100)
                 ;out: r7 = tint (hex)
                 ;- - -
A7A4 BF 32 03    jne  r7,32h,@@not_50_percent
A7A7 E4          clr  a                 ;\50% ---> 00h
A7A8 80 43       sjmp @@this            ;/
                ;---
                @@not_50_percent:
A7AA EF          mov  a,r7      ;percent
A7AB C3          clr  c
A7AC 94 32       sbc  a,32h
A7AE 50 1D       jnc  @@more_than_50_percent
A7B0 EF          mov  a,r7      ;percent
A7B1 C3          clr  c
A7B2 94 00       sbc  a,00h                  ;outch
A7B4 40 17       jc   @@less_than_0_percent  ;blah
                ;- - - 0%..49%
A7B6 EF          mov  a,r7      ;percent        ;\
A7B7 75 F0 14    mov  b,14h ;20 decimal         ;
A7BA A4          mul  a,b       ;mul            ;
A7BB FF          mov  r7,a                      ; N*20/50
A7BC AE F0       mov  r6,b                      ;
A7BE 7C 00       mov  r4,00h                    ;
A7C0 7D 32       mov  r5,32h ;50 decimal        ;
A7C2 12 4A A6    call divide_r6r7_by_r4r5       ;/
A7C5 C3          clr  c                         ;\20-(N*20/50), bit7=1
A7C6 74 14       mov  a,14h    ;+14h ;20 decimal;  ;0%  --> 20-0+80h = 94h
A7C8 9F          sbc  a,r7                      ;  ;49% --> 20-19.6+80h = 80h
A7C9 44 80       or   a,80h    ;bit7=1          ;/
A7CB 80 20       sjmp @@this
                ;---
                @@more_than_50_percent:
                @@less_than_0_percent:
A7CD EF          mov  a,r7      ;percent
A7CE D3          set  c      ;<--
A7CF 94 32       sbc  a,32h
A7D1 40 1E       jc   @@less_than_50_and_more_than_50_percent  ;blah/impossible
A7D3 EF          mov  a,r7
A7D4 D3          set  c      ;<--
A7D5 94 64       sbc  a,64h
A7D7 50 18       jnc  @@more_than_100_percent  ;refuse/bad (and return garbage)
                ;- - - 51%..100%
A7D9 EF          mov  a,r7      ;percent
A7DA 75 F0 1E    mov  b,1Eh ;30 decimal         ;\
A7DD A4          mul  a,b       ;mul            ;
A7DE FF          mov  r7,a                      ;
A7DF AE F0       mov  r6,b                      ;  N*30/50
A7E1 7C 00       mov  r4,00h                    ;
A7E3 7D 32       mov  r5,32h ;50 decimal        ;
A7E5 12 4A A6    call divide_r6r7_by_r4r5       ;/
A7E8 EF          mov  a,r7                      ;\(N*30/50)-30, bit7=0
A7E9 24 E2       add  a,0E2h   ;-1Eh            ;  ;51%  --> 30.6-30 = 00h
A7EB 54 7F       and  a,7Fh    ;bit7=0          ;/ ;5x%  --> 29.xx-30 = 7Fh
                @@this:                            ;100% --> 0.066-30 = 62h
A7ED 90 00 90    mov  dptr,xram_tmp__90h                ;\apply temp
A7F0 F0          movx [dptr],a                          ;/
                @@less_than_50_and_more_than_50_percent:
                @@more_than_100_percent:
A7F1 90 00 90    mov  dptr,xram_tmp__90h                ;\return result
A7F4 E0          movx a,[dptr]                          ; (or garbage if >100%)
A7F5 FF          mov  r7,a                              ;/
A7F6 22          ret
                ;------------------
                xlat_r7_to_forced_blank_color:
                 ;in: r7 = 00h or 06h or [xram_sett_blankcolor]
                 ;- - -
A7F7 EF          mov  a,r7
A7F8 B4 07 00    jne  a,07h,$+3   ;aka CMP      ;\accept 0..6 only
A7FB 50 4C       jnc  @@ignore_invalid          ;/
A7FD 90 A8 04    mov  dptr,@@jumplist
A800 F8          mov  r0,a   ;mul1
A801 28          add  a,r0   ;mul2
A802 28          add  a,r0   ;mul3
A803 73          jmp  a+dptr
                ;---
                @@jumplist:
A804 02 A8 43    ljmp @@xlat_0h_to_4Fh_av_video_on
A807 02 A8 19    ljmp @@xlat_1h_to_50h_force_screen_red
A80A 02 A8 20    ljmp @@xlat_2h_to_51h_force_screen_green
A80D 02 A8 27    ljmp @@xlat_3h_to_52h_force_screen_blue
A810 02 A8 2E    ljmp @@xlat_4h_to_53h_force_screen_dgray
A813 02 A8 3C    ljmp @@xlat_5h_to_55h_force_screen_lgray ;\xlat swapped here
A816 02 A8 35    ljmp @@xlat_6h_to_54h_force_screen_black ;/
                ;---
                @@xlat_1h_to_50h_force_screen_red:
A819 90 FF D2    mov  dptr,IO_LCD_forced_blank_color
A81C 74 50       mov  a,50h
A81E F0          movx [dptr],a
A81F 22          ret
                ;---
                @@xlat_2h_to_51h_force_screen_green:
A820 90 FF D2    mov  dptr,IO_LCD_forced_blank_color
A823 74 51       mov  a,51h
A825 F0          movx [dptr],a
A826 22          ret
                ;---
                @@xlat_3h_to_52h_force_screen_blue:
A827 90 FF D2    mov  dptr,IO_LCD_forced_blank_color
A82A 74 52       mov  a,52h
A82C F0          movx [dptr],a
A82D 22          ret
                ;---
                @@xlat_4h_to_53h_force_screen_dgray:
A82E 90 FF D2    mov  dptr,IO_LCD_forced_blank_color
A831 74 53       mov  a,53h
A833 F0          movx [dptr],a
A834 22          ret
                ;---
                @@xlat_6h_to_54h_force_screen_black:
A835 90 FF D2    mov  dptr,IO_LCD_forced_blank_color
A838 74 54       mov  a,54h
A83A F0          movx [dptr],a
A83B 22          ret
                ;---
                @@xlat_5h_to_55h_force_screen_lgray:
A83C 90 FF D2    mov  dptr,IO_LCD_forced_blank_color
A83F 74 55       mov  a,55h
A841 F0          movx [dptr],a
A842 22          ret
                ;---
                @@xlat_0h_to_4Fh_av_video_on:
A843 90 FF D2    mov  dptr,IO_LCD_forced_blank_color
A846 74 4F       mov  a,4Fh
A848 F0          movx [dptr],a
                @@ignore_invalid:
A849 22          ret
                ;------------------
                xxx_A84Ah:
A84A 8B 26       mov  [iram_tmp__26h],r3  ;\
A84C 8A 27       mov  [iram_tmp__27h],r2  ; dst (XRAM xram_keybuf_7byte_A or xram_keybuf_7byte_B)
A84E 89 28       mov  [iram_tmp__28h],r1  ;/
A850 C2 07       clr  [iram_req_event_flags].7                  ;-
A852 E9          mov  a,r1      ;\
A853 4A          or   a,r2      ; dst
A854 4B          or   a,r3      ;/
A855 60 42       jz   a,@@skip
A857 E5 2B       mov  a,[iram_tmp__2Bh]   ;\
A859 45 2A       or   a,[iram_tmp__2Ah]   ; src
A85B 45 29       or   a,[iram_tmp__29h]   ;/
A85D 60 3A       jz   a,@@skip
A85F AB 29       mov  r3,[iram_tmp__29h]  ;\
A861 AA 2A       mov  r2,[iram_tmp__2Ah]  ; src (XRAM xram_keybuf_8byte_A or xram_keybuf_8byte_B)
A863 A9 2B       mov  r1,[iram_tmp__2Bh]  ;/
A865 C0 03       push r3(0)  ;\params     ;\                            ;\
A867 C0 02       push r2(0)  ; for below  ; src                         ;
A869 C0 01       push r1(0)  ;/call       ;/                            ;
A86B AB 26       mov  r3,[iram_tmp__26h]  ;\                            ;
A86D AA 27       mov  r2,[iram_tmp__27h]  ; dst (XRAM xram_keybuf_7byte_A or xram_keybuf_7byte_B)
A86F A9 28       mov  r1,[iram_tmp__28h]  ;/                            ;
A871 12 4D 0C    call anymem_store_24bit_pushed_values_to_mem_r3r2r1    ;/
A874 AB 26       mov  r3,[iram_tmp__26h]  ;\
A876 AA 27       mov  r2,[iram_tmp__27h]  ; dst (XRAM xram_keybuf_7byte_A or xram_keybuf_7byte_B)
A878 A9 28       mov  r1,[iram_tmp__28h]  ;/
A87A 90 00 03    mov  dptr,0003h ;idx...                        ;\
A87D E5 2C       mov  a,[iram_tmp__2Ch]   ;-                    ;
A87F 12 4A 72    call anymem_store_8bit_a_to_mem_r3r2r1dptr     ;/
A882 90 00 04    mov  dptr,0004h ;idx...                        ;\
A885 E4          clr  a         ;=00h                           ;
A886 12 4A 72    call anymem_store_8bit_a_to_mem_r3r2r1dptr     ;/
A889 90 00 05    mov  dptr,0005h ;idx...                        ;\
A88C E4          clr  a         ;=00h                           ;
A88D 12 4A 72    call anymem_store_8bit_a_to_mem_r3r2r1dptr     ;/
A890 90 00 06    mov  dptr,0006h ;idx...                        ;\
A893 E4          clr  a         ;=00h                           ;
A894 12 4A 72    call anymem_store_8bit_a_to_mem_r3r2r1dptr     ;/
A897 D2 07       set  [iram_req_event_flags].7                  ;-
                @@skip:
A899 A2 07       mov  c,[iram_req_event_flags].7                ;-
A89B 22          ret
                ;------------------
                calc_xor_checksum:
A89C 8B 38       mov  [iram_tmp__38h],r3  ;src.area
A89E 8A 39       mov  [iram_tmp__39h],r2  ;src.msb
A8A0 89 3A       mov  [iram_tmp__3Ah],r1  ;src.lsb
A8A2 8C 3B       mov  [iram_tmp__3Bh],r4  ;len.msb
A8A4 8D 3C       mov  [iram_tmp__3Ch],r5  ;len.lsb
A8A6 E4          clr  a
A8A7 90 00 90    mov  dptr,xram_tmp__90h        ;\chksum=00h
A8AA F0          movx [dptr],a                  ;/
A8AB 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
A8AE F0          movx [dptr],a                  ; index=0000h
A8AF A3          inc  dptr ;=xram_tmp__8Fh      ;
A8B0 F0          movx [dptr],a                  ;/
                @@chksum_lop:
A8B1 90 00 8E    mov  dptr,xram_tmp__8Eh
A8B4 E0          movx a,[dptr]
A8B5 FE          mov  r6,a
A8B6 A3          inc  dptr ;=xram_tmp__8Fh
A8B7 E0          movx a,[dptr]
A8B8 FF          mov  r7,a
A8B9 C3          clr  c
A8BA 95 3C       sbc  a,[iram_tmp__3Ch]   ;len.lsb
A8BC EE          mov  a,r6
A8BD 95 3B       sbc  a,[iram_tmp__3Bh]   ;len.msb
A8BF 50 27       jnc  @@chksum_done
A8C1 A3          inc  dptr ;=xram_tmp__90h
A8C2 E0          movx a,[dptr]
A8C3 FD          mov  r5,a      ;old.chksum
A8C4 AB 38       mov  r3,[iram_tmp__38h]
A8C6 AA 39       mov  r2,[iram_tmp__39h]
A8C8 A9 3A       mov  r1,[iram_tmp__3Ah]
A8CA 8F 82       mov  dpl,r7
A8CC 8E 83       mov  dph,r6
A8CE 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
A8D1 FF          mov  r7,a      ;new.byte
A8D2 ED          mov  a,r5      ;old.chksum
A8D3 6F          xor  a,r7      ;old.chksum xor new.byte
A8D4 90 00 90    mov  dptr,xram_tmp__90h
A8D7 F0          movx [dptr],a
A8D8 90 00 8F    mov  dptr,xram_tmp__8Fh        ;\
A8DB E0          movx a,[dptr]                  ;
A8DC 04          inc  a          ;index.lsb     ;
A8DD F0          movx [dptr],a                  ; raise index
A8DE 70 D1       jnz  a,@@chksum_lop            ; and lop next
A8E0 90 00 8E    mov  dptr,xram_tmp__8Eh        ;
A8E3 E0          movx a,[dptr]                  ;
A8E4 04          inc  a          ;index.msb     ;
A8E5 F0          movx [dptr],a                  ;
A8E6 80 C9       sjmp @@chksum_lop              ;/
                ;---
                @@chksum_done:
A8E8 90 00 90    mov  dptr,xram_tmp__90h
A8EB E0          movx a,[dptr]
A8EC FF          mov  r7,a              ;chksum
A8ED 22          ret
                ;------------------
                xxx_A8EEh:
A8EE C2 0B       clr  [iram_misc_flags].miscflg_3
A8F0 12 06 1A    call check_if_signal
A8F3 50 25       jnc  @@no_signal
                ;- - -
A8F5 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
A8F8 E0          movx a,[dptr]                          ;
A8F9 54 EF       and  a,0EFh                            ;
A8FB F0          movx [dptr],a                          ;/
A8FC 90 00 4D    mov  dptr,xram_whatever_pwr_input
A8FF E0          movx a,[dptr]
A900 B4 03 0B    jne  a,03h,@@force_AV2
                ;- - -
A903 12 AF 5F    call lcd_apply_xram_sett_input_and_ratio_and_detect_video
A906 90 00 4D    mov  dptr,xram_whatever_pwr_input
A909 74 02       mov  a,02h
A90B F0          movx [dptr],a
A90C 80 2A       sjmp @@switch_video_on                 ;<---
                ;---
                @@force_AV2:
A90E 7F 02       mov  r7,02h                                        ;AV2 ?
A910 12 AF 64    call lcd_apply_input_r7_and_ratio_and_detect_video ;apply AV2 ?
A913 90 00 4D    mov  dptr,xram_whatever_pwr_input
A916 74 04       mov  a,04h
A918 F0          movx [dptr],a
A919 22          ret
                ;--- --- ---
                @@no_signal:
A91A E4          clr  a                                 ;\
A91B 90 00 4D    mov  dptr,xram_whatever_pwr_input      ;
A91E F0          movx [dptr],a                          ;/
A91F 12 AF 5F    call lcd_apply_xram_sett_input_and_ratio_and_detect_video
A922 90 00 2C    mov  dptr,xram_sett_no_signal
A925 E0          movx a,[dptr]
A926 B4 02 0F    jne  a,02h,@@not_2_black
A929 90 FE 26    mov  dptr,IO_AV_stat_detect_0          ;\
A92C E0          movx a,[dptr]                          ;
A92D 54 06       and  a,06h                             ;
A92F FF          mov  r7,a      ;<-- ?                  ;
A930 BF 06 02    jne  r7,06h,@@switch_video_off         ;/
A933 80 03       sjmp @@switch_video_on
                ;---
                @@switch_video_off:
A935 02 BA FD    jmp  switch_lcd_screen_off
                ;---
                @@not_2_black:
                @@switch_video_on:
A938 12 A0 F5    call switch_screen_and_backlight_on
A93B 22          ret
                ;------------------
                gui_proc_PowerOff_apply:
A93C 12 AF 27    call switch_screen_and_backlight_off
A93F 12 A6 A8    call do_save_settings
A942 90 00 0C    mov  dptr,xram_sett_input
A945 E0          movx a,[dptr]
A946 FF          mov  r7,a
A947 12 BF D7    call dummy_ret3
A94A 12 AF 5F    call lcd_apply_xram_sett_input_and_ratio_and_detect_video
A94D 90 FE 26    mov  dptr,IO_AV_stat_detect_0          ;\
A950 E0          movx a,[dptr]                          ;
A951 54 06       and  a,06h                             ;
A953 FF          mov  r7,a      ;<-- ?                  ;
A954 BF 06 07    jne  r7,06h,@@_A95Eh                   ;/
A957 90 FF D8    mov  dptr,IO_LCD_whatever_FFD8h        ;\
A95A E0          movx a,[dptr]                          ;
A95B 54 7F       and  a,7Fh                             ;
A95D F0          movx [dptr],a                          ;/
                @@_A95Eh:
A95E 12 BA FD    call switch_lcd_screen_off             ;-
A961 90 00 4D    mov  dptr,xram_whatever_pwr_input
A964 E0          movx a,[dptr]
A965 C3          clr  c
A966 94 02       sbc  a,02h
A968 40 05       jc   @@_A96Fh
A96A 74 03       mov  a,03h
A96C F0          movx [dptr],a
A96D 80 06       sjmp @@_A975h
                ;---
                @@_A96Fh:
A96F 90 00 4D    mov  dptr,xram_whatever_pwr_input
A972 74 01       mov  a,01h
A974 F0          movx [dptr],a
                @@_A975h:
A975 90 00 4D    mov  dptr,xram_whatever_pwr_input
A978 E0          movx a,[dptr]
A979 B4 03 04    jne  a,03h,@@_A980h
A97C D2 0B       set  [iram_misc_flags].miscflg_3
A97E 80 02       sjmp @@_A982h
                ;---
                @@_A980h:
A980 C2 0B       clr  [iram_misc_flags].miscflg_3
                @@_A982h:
A982 74 FF       mov  a,0FFh                    ;\
A984 F5 1C       mov  [iram_ir_msb_device],a    ;
A986 F5 1D       mov  [iram_ir_lsb_cmd],a       ;/
A988 D3          set  c
A989 22          ret
                ;------------------
                gui_call_PowerOn:
A98A 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
A98C 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
A98E 7D 01       mov  r5,01h           ;area    ;/
A990 7B FF       mov  r3,0FFh                           ;\
A992 7A A7       mov  r2,gui_null_PowerOn/100h          ; gui_null_PowerOn
A994 79 4B       mov  r1,gui_null_PowerOn and 0ffh      ;/
A996 7E 00       mov  r6,00h  ;\len 5
A998 7F 05       mov  r7,05h  ;/
A99A 12 49 C1    call anymem_generic_memcopy
A99D E5 48       mov  a,[iram_menu_flags]
A99F 90 00 8E    mov  dptr,xram_tmp__8Eh
A9A2 30 E1 06    jz   a.1,@@flag_or_01h
A9A5 E0          movx a,[dptr]                  ;\
A9A6 44 02       or   a,02h                     ; menu enabled
A9A8 F0          movx [dptr],a                  ;/
A9A9 80 04       sjmp @@flag_this
                ;---
                @@flag_or_01h:
A9AB E0          movx a,[dptr]                  ;\
A9AC 44 01       or   a,01h                     ; menu disabled
A9AE F0          movx [dptr],a                  ;/
                @@flag_this:
A9AF 53 48 FD    and  [iram_menu_flags],0FDh
A9B2 43 48 01    or   [iram_menu_flags],01h
A9B5 43 48 04    or   [iram_menu_flags],04h
                ;- - -
A9B8 90 00 25    mov  dptr,xram_sett_mode               ;\
A9BB E0          movx a,[dptr]                          ;
A9BC B4 01 0B    jne  a,01h,@@mode_not_1                ;/
A9BF 90 00 8F    mov  dptr,xram_tmp__8Fh                ;\
A9C2 E4          clr  a                                 ;
A9C3 F0          movx [dptr],a                          ;
A9C4 A3          inc  dptr ;=xram_tmp__90h              ;
A9C5 74 3C       mov  a,3Ch                             ;
A9C7 F0          movx [dptr],a                          ;
A9C8 80 07       sjmp @@mode_this                       ;/
                ;---
                @@mode_not_1:                           ;\
A9CA E4          clr  a                                 ;
A9CB 90 00 8F    mov  dptr,xram_tmp__8Fh                ;
A9CE F0          movx [dptr],a                          ;
A9CF A3          inc  dptr ;=xram_tmp__90h              ;
A9D0 F0          movx [dptr],a                          ;/
                @@mode_this:
A9D1 7B 01       mov  r3,01h           ;area    ;\
A9D3 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
A9D5 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
A9D7 22          ret
                ;------------------
                gui_call_SourceMenu:
A9D8 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
A9DA 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
A9DC 7D 01       mov  r5,01h           ;area    ;/
A9DE 7B FF       mov  r3,0FFh                           ;\
A9E0 7A A7       mov  r2,gui_null_SourceMenu/100h       ; gui_null_SourceMenu
A9E2 79 9F       mov  r1,gui_null_SourceMenu and 0ffh   ;/
A9E4 7E 00       mov  r6,00h  ;\len 5
A9E6 7F 05       mov  r7,05h  ;/
A9E8 12 49 C1    call anymem_generic_memcopy
A9EB E5 48       mov  a,[iram_menu_flags]
A9ED 90 00 8E    mov  dptr,xram_tmp__8Eh
A9F0 30 E1 06    jz   a.1,@@flag_or_01h
A9F3 E0          movx a,[dptr]                  ;\
A9F4 44 02       or   a,02h                     ; menu enabled
A9F6 F0          movx [dptr],a                  ;/
A9F7 80 04       sjmp @@flag_this
                ;---
                @@flag_or_01h:
A9F9 E0          movx a,[dptr]                  ;\
A9FA 44 01       or   a,01h                     ; menu disabled
A9FC F0          movx [dptr],a                  ;/
                @@flag_this:
A9FD 53 48 FD    and  [iram_menu_flags],0FDh
AA00 43 48 01    or   [iram_menu_flags],01h
AA03 43 48 04    or   [iram_menu_flags],04h
                ;- - -
AA06 90 00 25    mov  dptr,xram_sett_mode               ;\
AA09 E0          movx a,[dptr]                          ;
AA0A B4 01 0B    jne  a,01h,@@mode_not_1                ;/
AA0D 90 00 8F    mov  dptr,xram_tmp__8Fh                ;\
AA10 E4          clr  a                                 ;
AA11 F0          movx [dptr],a                          ;
AA12 A3          inc  dptr ;=xram_tmp__90h              ;
AA13 74 3C       mov  a,3Ch                             ;
AA15 F0          movx [dptr],a                          ;
AA16 80 07       sjmp @@mode_this                       ;/
                ;---
                @@mode_not_1:                           ;\
AA18 E4          clr  a                                 ;
AA19 90 00 8F    mov  dptr,xram_tmp__8Fh                ;
AA1C F0          movx [dptr],a                          ;
AA1D A3          inc  dptr ;=xram_tmp__90h              ;
AA1E F0          movx [dptr],a                          ;/
                @@mode_this:
AA1F 7B 01       mov  r3,01h           ;area    ;\
AA21 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
AA23 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
AA25 22          ret
                ;------------------
                .if lcd_spi_version<ver11sep2017
                lcd_spi_send_byte:   ;in: r7=databyte
                   ;XXX below is STATIC output (not PWM)
                   ;    ie. "pwm2"=CLK  and  "pwm1"=DATA  and  "pwm3"=/CS
                   ;    ie. some sort of manual SPI transfer
AA26 8F 27       mov  [iram_tmp__27h],r7 ;databyte
AA28 7F 14       mov  r7,14h                                    ;\
AA2A 7E 00       mov  r6,00h                                    ; delay 20
AA2C 12 BE 8C    call fast_other_delay_r6r7                     ;/
AA2F 7F 00       mov  r7,00h                                    ;\PWM3 off
AA31 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
AA34 E4          clr  a
AA35 F5 26       mov  [iram_tmp__26h],a  ;index
                @@lop:
AA37 7F 00       mov  r7,00h                                    ;\PWM2 off
AA39 12 B3 0C    call pwm_switch_pwm2_on_port37                 ;/
AA3C E5 27       mov  a,[iram_tmp__27h]  ;databyte              ;\
AA3E 30 E7 04    jz   a.7,@@bit_zero                            ;
AA41 7F 01       mov  r7,01h                                    ;
AA43 80 02       sjmp @@this_bit                                ; PWM1 on/off
                ;---                                            ; by data bit
                @@bit_zero:                                     ; (MSB first)
AA45 7F 00       mov  r7,00h                                    ;
                @@this_bit:                                     ;
AA47 12 B3 5E    call pwm_switch_pwm1_on_port36                 ;/
AA4A 7F 05       mov  r7,05h                                    ;\
AA4C 7E 00       mov  r6,00h                                    ; delay 5
AA4E 12 BE 8C    call fast_other_delay_r6r7                     ;/
AA51 7F 01       mov  r7,01h                                    ;\PWM2 on
AA53 12 B3 0C    call pwm_switch_pwm2_on_port37                 ;/
AA56 E5 27       mov  a,[iram_tmp__27h]  ;databyte              ;\
AA58 25 E0       add  a,a                                       ; shift data
AA5A F5 27       mov  [iram_tmp__27h],a  ;databyte              ;/
AA5C 7F 05       mov  r7,05h                                    ;\
AA5E 7E 00       mov  r6,00h                                    ; delay 5
AA60 12 BE 8C    call fast_other_delay_r6r7                     ;/
AA63 05 26       inc  [iram_tmp__26h]    ;index                 ;\
AA65 E5 26       mov  a,[iram_tmp__26h]  ;index                 ;
AA67 C3          clr  c                                         ; lop next
AA68 94 08       sbc  a,08h                                     ;
AA6A 40 CB       jc   @@lop                                     ;/
AA6C 7F 14       mov  r7,14h                                    ;\
AA6E 7E 00       mov  r6,00h                                    ; delay 20
AA70 02 BE 8C    jmp  fast_other_delay_r6r7                     ;/
                .endif
                ;------------------
;:------------- ;:----------------- OSD code (xyflip)
                ;------------------
                ;(unused?)   ;OSD stuff   ;in: r5=xyflip(0..3), r7=flag (1=set, other=clear)
AA73 90 FB 05    mov  dptr,IO_OSD_window_enable_bits    ;\
AA76 E0          movx a,[dptr]                          ;
AA77 54 BF       and  a,0BFh    ;-clear bit6            ;     ???
AA79 F0          movx [dptr],a                          ;/
                ;- - -
AA7A BF 01 06    jne  r7,01h,@@clear  ;<-- flag         ;\
                ;@@set:                                 ;
                ;dptr=IO_OSD_window_enable_bits         ;
AA7D E0          movx a,[dptr]  ;\                      ;
AA7E 44 80       or   a,80h     ; set bit7              ;     bitmap ?
AA80 F0          movx [dptr],a  ;/                      ;
AA81 80 07       sjmp @@set_clear_done                  ;
                ;---                                    ;
                @@clear:                                ;
AA83 90 FB 05    mov  dptr,IO_OSD_window_enable_bits    ;
AA86 E0          movx a,[dptr]  ;\                      ;
AA87 54 7F       and  a,7Fh     ; clear bit7            ;
AA89 F0          movx [dptr],a  ;/                      ;
                @@set_clear_done:                       ;/
                ;- - -
AA8A ED          mov  a,r5
AA8B 14          dec  a
AA8C 60 12       jz   a,@@param_1_xflip    ;aka mirror view
AA8E 14          dec  a
AA8F 60 1B       jz   a,@@param_2_yflip    ;
AA91 14          dec  a
AA92 60 24       jz   a,@@param_3_xyflip   ;aka rotate 180'
AA94 24 03       add  a,03h
AA96 70 27       jnz  a,@@param_bad        ;aka no change
                ;- - -  @@param_0_no_flip  ;aka normal
AA98 90 FB 78    mov  dptr,IO_OSD_xyflip
AA9B E0          movx a,[dptr]
AA9C 54 0F       and  a,0Fh             ;0000xxxxb
AA9E F0          movx [dptr],a
AA9F 22          ret
                ;---
                @@param_1_xflip:
AAA0 90 FB 78    mov  dptr,IO_OSD_xyflip
AAA3 E0          movx a,[dptr]
AAA4 54 3F       and  a,3Fh
AAA6 F0          movx [dptr],a
AAA7 E0          movx a,[dptr]
AAA8 44 30       or   a,30h             ;0011xxxxb
AAAA F0          movx [dptr],a
AAAB 22          ret
                ;---
                @@param_2_yflip:
AAAC 90 FB 78    mov  dptr,IO_OSD_xyflip
AAAF E0          movx a,[dptr]
AAB0 54 CF       and  a,0CFh
AAB2 F0          movx [dptr],a
AAB3 E0          movx a,[dptr]
AAB4 44 C0       or   a,0C0h            ;1100xxxxb
AAB6 F0          movx [dptr],a
AAB7 22          ret
                ;---
                @@param_3_xyflip:  ;aka rotate 180'
AAB8 90 FB 78    mov  dptr,IO_OSD_xyflip
AABB E0          movx a,[dptr]
AABC 44 F0       or   a,0F0h            ;1111xxxxb
AABE F0          movx [dptr],a
                @@param_bad:
AABF 22          ret
                ;------------------
;:------------- ;:----------------- init code
                ;------------------
                init_part_4_subfunc:    ;init I/O ...
AAC0 12 94 1F    call init_part_4_subsubfunc                            ;-
AAC3 12 A4 90    call output_initial_data_from_extra_fixed_io_list      ;-
AAC6 90 00 0C    mov  dptr,xram_sett_input                      ;\
AAC9 E0          movx a,[dptr]                                  ; huge I/O init
AACA FF          mov  r7,a                                      ;
AACB 12 90 DE    call init_io_via_huge_fixed_io_list            ;/
AACE 90 00 0C    mov  dptr,xram_sett_input                      ;\
AAD1 E0          movx a,[dptr]                                  ;
AAD2 FF          mov  r7,a                                      ;
AAD3 12 9C D6    call apply_av_input_r7                         ;/
AAD6 E4          clr  a   ;fixed (instead of [xram_sett_mode])  ;\
AAD7 FF          mov  r7,a                                      ;
AAD8 12 95 F8    call apply_mode_ratio_r7                       ;/
AADB E4          clr  a                                 ;\
AADC FF          mov  r7,a                              ;
AADD 12 96 8B    call lcd_apply_detected_video_r7       ;/
AAE0 12 BF D5    call dummy_ret1                        ;-blah
                ;- - -
AAE3 90 FD 0E    mov  dptr,IO_PLL_0Eh_used              ;\
AAE6 74 2C       mov  a,2Ch                             ;
AAE8 F0          movx [dptr],a                          ;/
AAE9 7F 64       mov  r7,64h                            ;\
AAEB 7E 00       mov  r6,00h                            ; delay 100
AAED 12 BB 5D    call slow_delay_r6r7                   ;/
AAF0 90 FE A0    mov  dptr,IO_AV_force_resync           ;\
AAF3 E0          movx a,[dptr]                          ;
AAF4 44 01       or   a,01h                             ;
AAF6 F0          movx [dptr],a                          ;/
AAF7 7F 0A       mov  r7,0Ah                            ;\
AAF9 7E 00       mov  r6,00h                            ; delay 10
AAFB 12 BB 5D    call slow_delay_r6r7                   ;/
AAFE 90 FE A0    mov  dptr,IO_AV_force_resync           ;\
AB01 E0          movx a,[dptr]                          ;
AB02 54 FE       and  a,0FEh                            ;
AB04 F0          movx [dptr],a                          ;/
AB05 7F 32       mov  r7,32h                            ;\
AB07 7E 00       mov  r6,00h                            ; delay 50
AB09 02 BB 5D    jmp  slow_delay_r6r7                   ;/
                ;------------------
;:------------- ;:----------------- GUI code
                ;------------------
                xxx_AB0Ch:                  ;in: r7=ID_func_XXh_xxx
AB0C 90 00 09    mov  dptr,xram_sett_curr_power         ;\
AB0F E0          movx a,[dptr]                          ;
AB10 70 14       jnz  a,@@cont                          ;/
                ;- - -
AB12 90 00 4D    mov  dptr,xram_whatever_pwr_input      ;\
AB15 E0          movx a,[dptr]                          ;
AB16 64 03       xor  a,03h                             ; <-- check if allow any func ?
AB18 60 0C       jz   a,@@cont                          ;/
                ;- - -
AB1A EF          mov  a,r7       ;func                  ;\
AB1B 64 1B       xor  a,ID_func_1Bh_PowerOnOff          ;
AB1D 60 07       jz   a,@@cont                          ;/
AB1F EF          mov  a,r7       ;func                  ;\
AB20 64 1A       xor  a,ID_func_1Ah_InitialPowerUpInit  ;
AB22 60 02       jz   a,@@cont                          ;/
                ;- - -
AB24 E4          clr  a
AB25 FF          mov  r7,a  ;=00h  ;ID_func_00h_nul      ;<-- NOT EXIST
                @@cont:
AB26 12 2C 8E    call execute_func_r7       ;in: r7=func
AB29 50 2C       jnc  @@exit
                ;- - -
AB2B 90 00 B8    mov  dptr,xram_current_menu
AB2E E0          movx a,[dptr]
AB2F 75 F0 03    mov  b,03h
AB32 A4          mul  a,b
AB33 24 4C       add  a,gui_menu_list and 0ffh
AB35 F5 82       mov  dpl,a
AB37 E4          clr  a
AB38 34 2C       adc  a,gui_menu_list/100h
AB3A F5 83       mov  dph,a
AB3C E4          clr  a
AB3D 93          movc a,[a+dptr]
AB3E FB          mov  r3,a
AB3F 74 01       mov  a,01h
AB41 93          movc a,[a+dptr]
AB42 FA          mov  r2,a
AB43 74 02       mov  a,02h
AB45 93          movc a,[a+dptr]
AB46 F9          mov  r1,a
AB47 90 00 22    mov  dptr,0022h ;idxMenu___22h
AB4A 12 4B 3C    call anymem_read_16bit_ba_from_mem_r3r2r1dptr
AB4D FF          mov  r7,a
AB4E 90 00 3A    mov  dptr,xram_backtoroot_offhold_msb
AB51 E5 F0       mov  a,b
AB53 F0          movx [dptr],a
AB54 A3          inc  dptr ;=xram_backtoroot_offhold_lsb
AB55 EF          mov  a,r7
AB56 F0          movx [dptr],a
                @@exit:
AB57 22          ret
                ;------------------
;:------------- ;:----------------- ADC code (init analog hardware)
                ;------------------
                init_ADC_analog_hardware:
AB58 90 FD 17    mov  dptr,IO_PLL_adc_clk_divider       ;\
AB5B 74 18       mov  a,18h                             ; PLL clk
AB5D F0          movx [dptr],a                          ;/
                ;- - -
AB5E 90 FD B2    mov  dptr,IO_ADC_config_1              ;\
AB61 74 20       mov  a,20h                             ;
AB63 F0          movx [dptr],a                          ;/
AB64 90 FD B1    mov  dptr,IO_ADC_ctrl_msb              ;\
AB67 74 0F       mov  a,0Fh                             ;
AB69 F0          movx [dptr],a                          ;
AB6A 90 FD B0    mov  dptr,IO_ADC_ctrl_lsb              ;
AB6D E4          clr  a                                 ;
AB6E F0          movx [dptr],a                          ;/
AB6F 90 FD B4    mov  dptr,IO_ADC_config_2              ;\
AB72 74 22       mov  a,22h                             ;
AB74 F0          movx [dptr],a                          ;
AB75 A3          inc  dptr ;=IO_ADC_config_3            ;
AB76 74 37       mov  a,37h                             ;
AB78 F0          movx [dptr],a                          ;/
                ;- - -
AB79 90 FD C8    mov  dptr,IO_ADC_config_6              ;\
AB7C 74 FF       mov  a,0FFh                            ;
AB7E F0          movx [dptr],a                          ;/
AB7F A3          inc  dptr ;=IO_ADC_config_7            ;\
AB80 74 0F       mov  a,0Fh                             ;
AB82 F0          movx [dptr],a                          ;/
AB83 A3          inc  dptr ;=IO_ADC_config_8            ;\
AB84 E4          clr  a                                 ;
AB85 F0          movx [dptr],a                          ;/
AB86 90 FD CC    mov  dptr,IO_ADC_speed_lsb             ;\
AB89 74 FF       mov  a,0FFh                            ;
AB8B F0          movx [dptr],a                          ;/
AB8C A3          inc  dptr ;=IO_ADC_speed_msb           ;\
AB8D 74 0F       mov  a,0Fh                             ;
AB8F F0          movx [dptr],a                          ;/
                ;- - -
AB90 90 FD B8    mov  dptr,IO_ADC_status_lsb            ;\
AB93 E4          clr  a                                 ;
AB94 F0          movx [dptr],a                          ;
AB95 A3          inc  dptr ;=IO_ADC_status_msb          ;
AB96 F0          movx [dptr],a                          ;/
AB97 90 FD B6    mov  dptr,IO_ADC_config_4              ;\
AB9A 74 FF       mov  a,0FFh                            ;
AB9C F0          movx [dptr],a                          ;
AB9D A3          inc  dptr ;=IO_ADC_config_5            ;
AB9E F0          movx [dptr],a                          ;/
AB9F 22          ret
                ;------------------
;:------------- ;:----------------- misc code
                ;------------------
                xxx_ABA0h:     ;...close/destroy menu window? and switch to root
ABA0 90 00 46    mov  dptr,xram_keypad_flags_msb
ABA3 E0          movx a,[dptr]
ABA4 FE          mov  r6,a
ABA5 A3          inc  dptr ;=xram_keypad_flags_lsb
ABA6 E0          movx a,[dptr]
ABA7 78 03       mov  r0,03h  ;shift amount     ;\
                @@shift_lop:                    ;
ABA9 CE          xchg a,r6                      ;
ABAA C3          clr  c                         ;
ABAB 13          rcr  a                         ;
ABAC CE          xchg a,r6                      ;
ABAD 13          rcr  a                         ;
ABAE D8 F9       djnz r0,@@shift_lop            ;/
ABB0 30 E0 03    jz   a.0,@@clear_cy            ;\
ABB3 D3          set  c                         ;
ABB4 80 01       sjmp @@this_cy                 ;
                ;---                            ;
                @@clear_cy:                     ;
ABB6 C3          clr  c                         ;
                @@this_cy:                      ;/
ABB7 40 2E       jc   @@exit
                ;- - -
ABB9 7F 20       mov  r7,MenuID_20h_NoSignal                    ;\
ABBB 12 BC 9D    call select_menu_r7                            ;/
ABBE 90 00 B8    mov  dptr,xram_current_menu
ABC1 E0          movx a,[dptr]
ABC2 75 F0 03    mov  b,03h
ABC5 A4          mul  a,b
ABC6 24 4C       add  a,gui_menu_list and 0ffh
ABC8 F5 82       mov  dpl,a
ABCA E4          clr  a
ABCB 34 2C       adc  a,gui_menu_list/100h
ABCD F5 83       mov  dph,a
ABCF E4          clr  a
ABD0 93          movc a,[a+dptr]
ABD1 FB          mov  r3,a
ABD2 74 01       mov  a,01h
ABD4 93          movc a,[a+dptr]
ABD5 FA          mov  r2,a
ABD6 74 02       mov  a,02h
ABD8 93          movc a,[a+dptr]
ABD9 F9          mov  r1,a
ABDA 90 00 0B    mov  dptr,000Bh ;idxMenuWindowNo
ABDD 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
ABE0 FF          mov  r7,a                                      ;\disable window
ABE1 12 BC 2D    call osd_disable_window_r7                     ;/
                .if tech_version<ver11sep2017
ABE4 12 BD 53      call select_Root_menu                        ;-root
                .endif
                @@exit:
ABE7 22          ret
                ;------------------
                osd_init_six_colors:
ABE8 90 FB 57    mov  dptr,IO_OSD_color_1_lsb   ;\     ;\
ABEB 74 0F       mov  a,0Fh                     ;      ;
ABED F0          movx [dptr],a                  ;/     ; color1: 000Fh red
ABEE 90 FB 56    mov  dptr,IO_OSD_color_1_msb   ;\     ;
ABF1 E4          clr  a                         ;      ;
ABF2 F0          movx [dptr],a                  ;/     ;/
ABF3 90 FB 59    mov  dptr,IO_OSD_color_2_lsb   ;\     ;\
ABF6 74 F0       mov  a,0F0h                    ;      ;
ABF8 F0          movx [dptr],a                  ;/     ; color2: 00F0h green
ABF9 90 FB 58    mov  dptr,IO_OSD_color_2_msb   ;\     ;
ABFC E4          clr  a                         ;      ;
ABFD F0          movx [dptr],a                  ;/     ;/
ABFE 90 FB 5B    mov  dptr,IO_OSD_color_3_lsb   ;\     ;\
AC01 F0          movx [dptr],a    ;=00h         ;/     ; color3: 0F00h blue
AC02 90 FB 5A    mov  dptr,IO_OSD_color_3_msb   ;\     ;
AC05 74 0F       mov  a,0Fh                     ;      ;
AC07 F0          movx [dptr],a                  ;/     ;/
AC08 90 FB 5D    mov  dptr,IO_OSD_color_4_lsb   ;\     ;\
AC0B 74 FF       mov  a,0FFh                    ;      ;
AC0D F0          movx [dptr],a                  ;/     ; color4: 00FFh yellow
AC0E 90 FB 5C    mov  dptr,IO_OSD_color_4_msb   ;\     ;
AC11 E4          clr  a                         ;      ;
AC12 F0          movx [dptr],a                  ;/     ;/
AC13 90 FB 5F    mov  dptr,IO_OSD_color_5_lsb   ;\     ;\
AC16 74 F0       mov  a,0F0h                    ;      ;
AC18 F0          movx [dptr],a                  ;/     ; color5: 0FF0h cyan
AC19 90 FB 5E    mov  dptr,IO_OSD_color_5_msb   ;\     ;
AC1C 74 0F       mov  a,0Fh                     ;      ;
AC1E F0          movx [dptr],a                  ;/     ;/
AC1F 90 FB 61    mov  dptr,IO_OSD_color_6_lsb   ;\     ;\
AC22 74 FF       mov  a,0FFh                    ;      ;
AC24 F0          movx [dptr],a                  ;/     ; color6: 0FFFh white
AC25 90 FB 60    mov  dptr,IO_OSD_color_6_msb   ;\     ;
AC28 74 0F       mov  a,0Fh                     ;      ;
AC2A F0          movx [dptr],a                  ;/     ;/
AC2B 22          ret
                ;------------------
                gui_call_QuicklySys:
AC2C 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
AC2E 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
AC30 7D 01       mov  r5,01h           ;area    ;/
AC32 7B FF       mov  r3,0FFh                           ;\
AC34 7A B2       mov  r2,gui_null_QuicklySys/100h       ; gui_null_QuicklySys
AC36 79 90       mov  r1,gui_null_QuicklySys and 0ffh   ;/
AC38 7E 00       mov  r6,00h  ;\len 5
AC3A 7F 05       mov  r7,05h  ;/
AC3C 12 49 C1    call anymem_generic_memcopy
AC3F 90 00 29    mov  dptr,xram_sett_quicklysys         ;\
AC42 E0          movx a,[dptr]                          ;
AC43 60 1D       jz   a,@@flag_or_01h                   ;/
                ;- - - -
AC45 E5 48       mov  a,[iram_menu_flags]
AC47 90 00 8E    mov  dptr,xram_tmp__8Eh
AC4A 30 E0 06    jz   a.0,@@flag_or_01h_and_stuff
AC4D E0          movx a,[dptr]                  ;\
AC4E 44 02       or   a,02h                     ; menu enabled
AC50 F0          movx [dptr],a                  ;/
AC51 80 04       sjmp @@flag_this_part1
                ;---
                @@flag_or_01h_and_stuff:
AC53 E0          movx a,[dptr]                  ;\
AC54 44 01       or   a,01h                     ; menu disabled
AC56 F0          movx [dptr],a                  ;/
                @@flag_this_part1:
AC57 53 48 FE    and  [iram_menu_flags],0FEh
AC5A 43 48 02    or   [iram_menu_flags],02h
AC5D 43 48 04    or   [iram_menu_flags],04h
AC60 80 07       sjmp @@flag_this
                ;--- --- ---
                @@flag_or_01h:
AC62 90 00 8E    mov  dptr,xram_tmp__8Eh
AC65 E0          movx a,[dptr]
AC66 44 01       or   a,01h
AC68 F0          movx [dptr],a
                @@flag_this:
AC69 7B 01       mov  r3,01h           ;area    ;\
AC6B 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
AC6D 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
AC6F 22          ret
                ;------------------
                get_window_width:
                 ;in: r6r7    = vram.addr
                 ;in: dptr    = dst.for.addr
                 ;in: [xram_current_window] = window number
                 ;out: r6 = 00h
                 ;out: r7 = window width
                 ;---
AC70 EE          mov  a,r6                      ;\
AC71 F0          movx [dptr],a                  ;
AC72 A3          inc  dptr                      ; [dptr]=r6r7  ;apply vram addr?
AC73 EF          mov  a,r7                      ;
AC74 F0          movx [dptr],a                  ;/
                ;- - - - -
AC75 90 00 98    mov  dptr,xram_current_window
AC78 E0          movx a,[dptr]                      ;window number(0..4)
AC79 FD          mov  r5,a
AC7A 70 05       jnz  a,@@not_window_0                          ;\
AC7C 90 FB 07    mov  dptr,IO_OSD_window_0_size_x               ;
AC7F 80 29       sjmp @@this                                    ;
                ;---                                            ;
                @@not_window_0:                                 ;/
AC81 ED          mov  a,r5       ;blah/already
AC82 B4 01 05    jne  a,01h,@@not_window_1                      ;\
AC85 90 FB 12    mov  dptr,IO_OSD_window_1_size_x               ;
AC88 80 20       sjmp @@this                                    ;
                ;---                                            ;
                @@not_window_1:                                 ;/
                ;- - - - -
AC8A 90 00 98    mov  dptr,xram_current_window  ;blah/already
AC8D E0          movx a,[dptr]                  ;blah/already
AC8E FD          mov  r5,a                      ;blah/already
AC8F B4 02 05    jne  a,02h,@@not_window_2                      ;\
AC92 90 FB 18    mov  dptr,IO_OSD_window_2_size_x               ;
AC95 80 13       sjmp @@this                                    ;
                ;---                                            ;
                @@not_window_2:                                 ;/
                ;- - - - -
AC97 ED          mov  a,r5       ;blah/already
AC98 B4 03 05    jne  a,03h,@@not_window_3                      ;\
AC9B 90 FB 1E    mov  dptr,IO_OSD_window_3_size_x               ;
AC9E 80 0A       sjmp @@this                                    ;
                ;---                                            ;
                @@not_window_3:                                 ;/
                ;- - - - -
ACA0 90 00 98    mov  dptr,xram_current_window  ;blah/already
ACA3 E0          movx a,[dptr]                  ;blah/already
ACA4 B4 04 08    jne  a,04h,@@not_window_4                      ;\
ACA7 90 FB 24    mov  dptr,IO_OSD_window_4_size_x               ;/
                @@this:           ;<-------
ACAA E0          movx a,[dptr]          ;\
ACAB FF          mov  r7,a              ; get width
ACAC 7E 00       mov  r6,00h            ;/
ACAE 22          ret
                ;---
                @@not_window_4:
ACAF E4          clr  a                 ;\
ACB0 FE          mov  r6,a              ; oops, invalid window, return zero
ACB1 FF          mov  r7,a              ;/
ACB2 22          ret
                ;------------------
                xxx_ACB3h:
ACB3 E4          clr  a
ACB4 FE          mov  r6,a
                @@lop:                         ;lop...
ACB5 90 00 36    mov  dptr,xram_sett_keypadtype
ACB8 E0          movx a,[dptr]
ACB9 75 F0 03    mov  b,03h
ACBC A4          mul  a,b
ACBD 24 DB       add  a,typekey_list and 0ffh
ACBF F5 82       mov  dpl,a
ACC1 E5 F0       mov  a,b
ACC3 34 52       adc  a,typekey_list/100h
ACC5 F5 83       mov  dph,a
ACC7 E4          clr  a
ACC8 93          movc a,[a+dptr]
ACC9 FB          mov  r3,a
ACCA 74 01       mov  a,01h
ACCC 93          movc a,[a+dptr]
ACCD FA          mov  r2,a
ACCE 74 02       mov  a,02h
ACD0 93          movc a,[a+dptr]
ACD1 F9          mov  r1,a
ACD2 90 00 0E    mov  dptr,000Eh ;idxKeypad_blah2 (BLAH, ALWAYS 01h)
ACD5 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
ACD8 FD          mov  r5,a
ACD9 EE          mov  a,r6
ACDA C3          clr  c
ACDB 9D          sbc  a,r5
ACDC 50 16       jnc  @@return_cy_cleared
ACDE 90 00 0B    mov  dptr,000Bh ;idxKeypad_blah1 (BLAH, POINTER TO 00h)
ACE1 12 4D 5B    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1dptr
ACE4 8E 82       mov  dpl,r6
ACE6 75 83 00    mov  dph,00h
ACE9 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
ACEC B5 07 02    jne  a,r7(0),@@lop_next
                ;- - -
ACEF D3          set  c         ;out: cy=1
ACF0 22          ret
                ;---
                @@lop_next:
ACF1 0E          inc  r6
ACF2 80 C1       sjmp @@lop
                ;---
                @@return_cy_cleared:
ACF4 C3          clr  c         ;out: cy=0
ACF5 22          ret
                ;------------------
                xlat_MenuID_to_MenuIndex:
                       ;in: r7=MenuID - out: r7=MenuIndex
                 ;(translate "logical MenuID" to "index in gui_menu_list")
                 ;- - -
ACF6 E4          clr  a
ACF7 90 00 80    mov  dptr,xram_tmp__80h
ACFA F0          movx [dptr],a  ;index=0
ACFB F0          movx [dptr],a  ;index=0, again, blah
                @@lop:                         ;lop...
ACFC 90 00 80    mov  dptr,xram_tmp__80h
ACFF E0          movx a,[dptr]  ;index
AD00 FE          mov  r6,a      ;index
AD01 C3          clr  c
AD02 94 16       sbc  a,gui_menu_list_num_entries    ;index,max
AD04 50 30       jnc  @@not_found       ;... end of menu list
AD06 EE          mov  a,r6      ;index
AD07 75 F0 03    mov  b,03h
AD0A A4          mul  a,b       ;index*3
AD0B 24 4C       add  a,gui_menu_list and 0ffh
AD0D F5 82       mov  dpl,a
AD0F E4          clr  a
AD10 34 2C       adc  a,gui_menu_list/100h
AD12 F5 83       mov  dph,a
AD14 E4          clr  a
AD15 93          movc a,[a+dptr]
AD16 FB          mov  r3,a
AD17 74 01       mov  a,01h
AD19 93          movc a,[a+dptr]
AD1A FA          mov  r2,a
AD1B 74 02       mov  a,02h
AD1D 93          movc a,[a+dptr]
AD1E F9          mov  r1,a
AD1F 90 00 0D    mov  dptr,000Dh ;idxMenuCurrMenu
AD22 12 4A 00    call anymem_read_8bit_a_from_mem_r3r2r1dptr
AD25 B5 07 06    jne  a,r7(0),@@lop_next    ;MenuID_XXh_Xxx
                ;- - -
AD28 90 00 80    mov  dptr,xram_tmp__80h
AD2B E0          movx a,[dptr]  ;index
AD2C FF          mov  r7,a      ;found, out: r7=index
AD2D 22          ret
                ;---
                @@lop_next:
AD2E 90 00 80    mov  dptr,xram_tmp__80h
AD31 E0          movx a,[dptr]
AD32 04          inc  a
AD33 F0          movx [dptr],a
AD34 80 C6       sjmp @@lop
                ;---
                @@not_found:
AD36 7F 00       mov  r7,00h    ;not found, out: r7=00h
AD38 22          ret
                ;------------------
                switch_lcd_screen_on:
AD39 90 FD 13    mov  dptr,IO_PLL_13h_used              ;\
AD3C E0          movx a,[dptr]                          ; check if already?
AD3D 70 3B       jnz  a,@@exit                          ;/
                ;- - -
AD3F 90 FD 11    mov  dptr,IO_PLL_11h_used              ;\
AD42 E0          movx a,[dptr]                          ;
AD43 44 E0       or   a,0E0h                            ;
AD45 F0          movx [dptr],a                          ;/
AD46 A3          inc  dptr ;=IO_PLL_12h_used            ;\
AD47 E0          movx a,[dptr]                          ;
AD48 44 EF       or   a,0EFh                            ;
AD4A F0          movx [dptr],a                          ;/
AD4B A3          inc  dptr ;=IO_PLL_13h_used            ;\
AD4C E0          movx a,[dptr]  ;blah/overwritten       ;
AD4D 74 FF       mov  a,0FFh    ;set to FFh             ;
AD4F F0          movx [dptr],a                          ;/
AD50 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
AD53 E0          movx a,[dptr]                          ;
AD54 44 03       or   a,03h                             ;
AD56 F0          movx [dptr],a                          ;/
                ;- - -
AD57 7F 32       mov  r7,32h                            ;\
AD59 7E 00       mov  r6,00h                            ; delay 50
AD5B 12 BB 5D    call slow_delay_r6r7                   ;/
AD5E 90 FE A0    mov  dptr,IO_AV_force_resync           ;\
AD61 E0          movx a,[dptr]                          ;
AD62 44 01       or   a,01h                             ;
AD64 F0          movx [dptr],a                          ;/
AD65 7F 0A       mov  r7,0Ah                            ;\
AD67 7E 00       mov  r6,00h                            ; delay 10
AD69 12 BB 5D    call slow_delay_r6r7                   ;/
AD6C 90 FE A0    mov  dptr,IO_AV_force_resync           ;\
AD6F E0          movx a,[dptr]                          ;
AD70 54 FE       and  a,0FEh                            ;
AD72 F0          movx [dptr],a                          ;/
AD73 7F 32       mov  r7,32h                            ;\
AD75 7E 00       mov  r6,00h                            ; delay 50
AD77 12 BB 5D    call slow_delay_r6r7                   ;/
                @@exit:
AD7A 22          ret
                ;------------------
                .macro defcode_load_flash_settings
                load_flash_settings:
AD7B 8F 29       mov  [iram_tmp__29h],r7       ;flash.addr.lsb
AD7D 8E 28       mov  [iram_tmp__28h],r6       ;flash.addr.msb
AD7F 8D 27       mov  [iram_tmp__27h],r5
AD81 8C 26       mov  [iram_tmp__26h],r4
AD83 E4          clr  a
AD84 90 00 7E    mov  dptr,xram_tmp__7Eh
AD87 F0          movx [dptr],a  ;retry.index
                @@retry_lop:
AD88 AF 29       mov  r7,[iram_tmp__29h]       ;flash.addr.lsb
AD8A AE 28       mov  r6,[iram_tmp__28h]       ;flash.addr.msb
AD8C AD 27       mov  r5,[iram_tmp__27h]
AD8E AC 26       mov  r4,[iram_tmp__26h]
                .if flash_version<ver11sep2017
AD90 7B 01         mov  r3,01h            ;memtype?=01h ;ram.addr.area
AD92 7A 00         mov  r2,xram_settings_start/100h     ;ram.addr.msb
AD94 79 08         mov  r1,xram_settings_start and 0ffh ;ram.addr.lsb
AD96 75 31 00      mov  [iram_tmp__31h],xram_settings_size/100h
AD99 75 32 31      mov  [iram_tmp__32h],xram_settings_size and 0ffh
                .endif
AD9C 12 92 DC    call read_flash     ;--------> READ FLASH !!!
AD9F 90 00 08    mov  dptr,xram_sett_id_AAh             ;\
ADA2 E0          movx a,[dptr]                          ;
ADA3 B4 AA 09    jne  a,0AAh,@@fail_retry               ;/
ADA6 90 00 37    mov  dptr,xram_sett_id_55h             ;\
ADA9 E0          movx a,[dptr]                          ;
ADAA B4 55 02    jne  a,55h,@@fail_retry                ;/
ADAD D3          set  c                 ;cy=1 (okay)
ADAE 22          ret
                ;---
                @@fail_retry:
ADAF 90 00 7E    mov  dptr,xram_tmp__7Eh
ADB2 E0          movx a,[dptr]
ADB3 04          inc  a         ;retry.index
ADB4 F0          movx [dptr],a
ADB5 E0          movx a,[dptr]
ADB6 C3          clr  c
                .if flash_version<ver11sep2017
ADB7 94 03         sbc  a,03h     ;retry.index
                .else
                   sbc  a,02h     ;retry.index
                .endif
ADB9 40 CD       jc   @@retry_lop
ADBB C3          clr  c                 ;cy=0 (error)
ADBC 22          ret
                .endm ;defcode_load_flash_settings
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_load_flash_settings
                .endif
                ;------------------
                set_window_size_x_y:
                 ;in: r7 = 1st 8bit value    size_x
                 ;in: r5 = 2nd 8bit value    size_y
                 ;in: [xram_current_window]
                 ;- - - -
ADBD 90 00 98    mov  dptr,xram_current_window
ADC0 E0          movx a,[dptr]
                ;- - -
ADC1 FE          mov  r6,a                                      ;\
ADC2 70 08       jnz  a,@@not_window_0                          ;
ADC4 90 FB 07    mov  dptr,IO_OSD_window_0_size_x               ;
ADC7 EF          mov  a,r7                                      ;
ADC8 F0          movx [dptr],a                                  ;
ADC9 A3          inc  dptr ;=IO_OSD_window_0_size_y             ;
ADCA ED          mov  a,r5                                      ;
ADCB F0          movx [dptr],a                                  ;
                @@not_window_0:                                 ;/
                ;- - -
ADCC EE          mov  a,r6                                      ;\
ADCD B4 01 08    jne  a,01h,@@not_window_1                      ;
ADD0 90 FB 12    mov  dptr,IO_OSD_window_1_size_x               ;
ADD3 EF          mov  a,r7                                      ;
ADD4 F0          movx [dptr],a                                  ;
ADD5 A3          inc  dptr ;=IO_OSD_window_1_size_y             ;
ADD6 ED          mov  a,r5                                      ;
ADD7 F0          movx [dptr],a                                  ;
                @@not_window_1:                                 ;/
                ;- - -
ADD8 EE          mov  a,r6                                      ;\
ADD9 B4 02 08    jne  a,02h,@@not_window_2                      ;
ADDC 90 FB 18    mov  dptr,IO_OSD_window_2_size_x               ;
ADDF EF          mov  a,r7                                      ;
ADE0 F0          movx [dptr],a                                  ;
ADE1 A3          inc  dptr ;=IO_OSD_window_2_size_y             ;
ADE2 ED          mov  a,r5                                      ;
ADE3 F0          movx [dptr],a                                  ;
                @@not_window_2:                                 ;/
                ;- - -
ADE4 EE          mov  a,r6                                      ;\
ADE5 B4 03 08    jne  a,03h,@@not_window_3                      ;
ADE8 90 FB 1E    mov  dptr,IO_OSD_window_3_size_x               ;
ADEB EF          mov  a,r7                                      ;
ADEC F0          movx [dptr],a                                  ;
ADED A3          inc  dptr ;=IO_OSD_window_3_size_y             ;
ADEE ED          mov  a,r5                                      ;
ADEF F0          movx [dptr],a                                  ;
                @@not_window_3:                                 ;/
                ;- - -
ADF0 EE          mov  a,r6                                      ;\
ADF1 B4 04 08    jne  a,04h,@@not_window_4                      ;
ADF4 90 FB 24    mov  dptr,IO_OSD_window_4_size_x               ;
ADF7 EF          mov  a,r7                                      ;
ADF8 F0          movx [dptr],a                                  ;
ADF9 A3          inc  dptr ;=IO_OSD_window_4_size_y             ;
ADFA ED          mov  a,r5                                      ;
ADFB F0          movx [dptr],a                                  ;
                @@not_window_4:                                 ;/
ADFC 22          ret
                ;------------------
                .macro defdata_VERSION
                ;------------------
                txt_VERSION:
                .if tech_version<ver11sep2017
ADFD 58 44 44 5F  db   'XDD_MT_630A_35D_LD035H3_DX_3KEY_151022_LOGO',00h
                  ;---
                  ;XDD_                  <--
                  ;MT_                   <--
                  ;630A_                 <-- chip AMT630A
                  ;35D_                  <-- 3.5" maybe?
                  ;LD035H3_              <-- LCD screen name (...LD035H3-54NM-A1 3.5" 320*240 LCD screen with "HX8238-D" chip)  (XXX but actually, I have a "Tianma TM035KDH03" in there)
                  ;DX_                   <--
                  ;3KEY_                 <-- three buttons as default (can be changed in factor menu though)
                  ;151022_               <-- YY.MM.DD (BUG: elsewhere it says 2016)
                  ;LOGO                  <--
                .else ;------------
A9E5 47 4B 5F 53  db   'GK_SK_630A_43D_DX_3KEY_170911',00h
                .endif
                ;------------------
                indirect_txt_VERSION:
AE29 FF AD FD    db   0FFh // dw txt_VERSION
                ;------------------
                gui_null_Version:
AE2C 00          nop
AE2D 00          nop
AE2E 00          nop
AE2F 00          nop
AE30 00          nop
                ;--- --- ---
                gui_xtra_Version_version_string:
AE31 00          nop
AE32 00          nop
AE33 01          db   01h
AE34 00          nop
AE35 01          db   01h
AE36 00          nop
AE37 01          db   01h
AE38 FF BD 62    db   0FFh // dw get_txt_VERSION
AE3B 00 08       dw   0008h
                .endm ;defdata_VERSION
                ;------------------
                .if shuffle_version<ver11sep2017
                  defdata_VERSION
                .endif
                ;------------------
                osd_zerofill_vram_200h_words:  ;(clear screen?)
AE3D E4          clr  a
AE3E 90 00 8E    mov  dptr,xram_tmp__8Eh
AE41 F0          movx [dptr],a     ;index.msb=0
AE42 A3          inc  dptr ;=xram_tmp__8Fh
AE43 F0          movx [dptr],a     ;index.lsb=0
                @@lop:
AE44 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
AE47 E0          movx a,[dptr]                  ; get index.msb
AE48 FC          mov  r4,a                      ;/
AE49 A3          inc  dptr ;=xram_tmp__8Fh      ;\
AE4A E0          movx a,[dptr]                  ; get index.lsb
AE4B FD          mov  r5,a                      ;/
AE4C EC          mov  a,r4  ;index.msb                  ;\
AE4D 90 FB 0D    mov  dptr,IO_OSD_bgmap_addr_msb        ; apply index.msb
AE50 F0          movx [dptr],a                          ;/
AE51 ED          mov  a,r5  ;index.lsb                  ;\
AE52 90 FB 00    mov  dptr,IO_OSD_bgmap_addr_lsb        ; apply index.lsb
AE55 F0          movx [dptr],a                          ;/
AE56 90 FB 0E    mov  dptr,IO_OSD_bgmap_data_msb        ;\
AE59 E4          clr  a                                 ;
AE5A F0          movx [dptr],a  ;=00h                   ; output data=0000h
AE5B 90 FB 01    mov  dptr,IO_OSD_bgmap_data_lsb        ;
AE5E F0          movx [dptr],a  ;=00h                   ;/
AE5F 90 00 8F    mov  dptr,xram_tmp__8Fh        ;\
AE62 E0          movx a,[dptr]                  ; raise index.lsb
AE63 04          inc  a                         ;
AE64 F0          movx [dptr],a                  ;/
AE65 70 06       jnz  a,@@keep_msb
AE67 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
AE6A E0          movx a,[dptr]                  ; raise index.msb
AE6B 04          inc  a                         ;
AE6C F0          movx [dptr],a                  ;/
                @@keep_msb:
AE6D 90 00 8E    mov  dptr,xram_tmp__8Eh
AE70 E0          movx a,[dptr]                ;index.msb<>02h
AE71 B4 02 D0    jne  a,02h,@@lop
AE74 A3          inc  dptr ;=xram_tmp__8Fh    ;index.lsb<>00h
AE75 E0          movx a,[dptr]
AE76 B4 00 CB    jne  a,00h,@@lop
AE79 22          ret
                ;------------------
                lcd_apply_input_and_ratio_and_detect_video:   ;in: r7
                 ;in: r7=[xram_sett_input]
                 ;- - -
AE7A 12 9C D6    call apply_av_input_r7                 ;---> INPUT r7
AE7D D2 03       set  [iram_req_event_flags].3
AE7F 90 00 16    mov  dptr,xram_sett___16h              ;\
AE82 E0          movx a,[dptr]                          ; ??
AE83 24 FF       add  a,0FFh        ;--> cy             ;
AE85 92 09       mov  [iram_misc_flags].miscflg_1less,c   ;<-- cy   ;
AE87 12 00 06    call blah_read_and_writeback_bit       ;/
AE8A 90 00 17    mov  dptr,xram_sett_blankcolor         ;\optionally force blank
AE8D E0          movx a,[dptr]                          ; (usually 0=show AV video)
AE8E FF          mov  r7,a                              ; (alternatey 1..6=force blank screen with color 1..6)
AE8F 12 A7 F7    lcall xlat_r7_to_forced_blank_color    ;/
AE92 90 00 25    mov  dptr,xram_sett_mode               ;\
AE95 E0          movx a,[dptr]                          ; apply ratio
AE96 FF          mov  r7,a                              ;
AE97 12 95 F8    call apply_mode_ratio_r7               ;/
AE9A 12 BF D6    call dummy_ret2                        ;-blah
AE9D 12 B3 D7    call try_detect_video                  ;\try detect
AEA0 50 0C       jnc  @@finish                          ;/
                ;- - -
AEA2 90 00 BD    mov  dptr,xram_new_detected_video      ;\
AEA5 E0          movx a,[dptr]         ;get             ;
AEA6 FF          mov  r7,a                              ; DETECTED VIDEO
AEA7 90 00 BC    mov  dptr,xram_old_detected_video      ;
AEAA F0          movx [dptr],a         ;save copy       ;
AEAB 12 96 8B    call lcd_apply_detected_video_r7       ;/
                @@finish:
AEAE 7F C8       mov  r7,0C8h                           ;\
AEB0 7E 00       mov  r6,00h                            ; delay 200
AEB2 02 BB 5D    jmp  slow_delay_r6r7                   ;/
                ;------------------
                txt_volume_symbol:   ;?
AEB5 99 00       db   99h,00h   ;chr(99h)
                ;---
                indirect_txt_volume_symbol:
AEB7 FF AE B5    db   0FFh // dw txt_volume_symbol
                ;---
                gui_null_QuicklyVolume:
AEBA 00          nop
AEBB 00          nop
AEBC 00          nop
AEBD 00          nop
AEBE 00          nop
                ;---
                gui_data_QuicklyVolume_show_decimal:
AEBF 00          nop                    ;-yloc                  ;idxNumeric
AEC0 0F          db   0Fh               ;-xloc
AEC1 01          db   01h               ;\attr1 lsb,msb
AEC2 00          nop                    ;/
AEC3 01          db   01h               ;\attr2 lsb,msb
AEC4 00          nop                    ;/
AEC5 FF BF 5E    db   0FFh // dw get_settings_volume
AEC6 00 18       dw   0018h   ;<--!     ;-flags
                ;---
                gui_data_QuicklyVolume_show_bar:
AECA 00          nop                    ;-yloc                  ;idxBar
AECB 01          db   01h               ;-xloc
AECC 05          db   05h               ;\attr1 lsb,msb ?
AECD 00          nop                    ;/
AECE 05          db   05h               ;\attr2 lsb,msb ?
AECF 00          nop                    ;/
AED0 64          db   64h               ;-width/range
AED1 FF BF 5E    db   0FFh // dw get_settings_volume
AED4 00 08       dw   0008h
                ;---
                gui_data_QuicklyVolume_show_symbol:
AED6 00          nop                    ;-yloc                  ;idxText
AED7 00          nop                    ;-xloc
AED8 01          db   01h               ;\attr1 lsb,msb ?
AED9 00          nop                    ;/
AEDA 01          db   01h               ;\attr2 lsb,msb ?
AEDB 00          nop                    ;/
AEDC 00          nop                    ;\
AEDD 00          nop                    ;
AEDE 00          nop                    ;/
AEDF FF BD 71    db   0FFh // dw get_txt_volume_symbol
AEE2 00 08       dw   0008h
                ;---
                gui_data_QuicklyVolume_show:
AEE4 FF AE BF    db   0FFh // dw gui_data_QuicklyVolume_show_decimal
AEE7 FF AE CA    db   0FFh // dw gui_data_QuicklyVolume_show_bar
AEEA FF AE D6    db   0FFh // dw gui_data_QuicklyVolume_show_symbol  ;aka name
AEED 00 08       dw   0008h
                ;------------------
                .macro defcode_handle_event_source_menu
                handle_event_source_menu:    ;... if power ... SourceMenu
B12F 8F 26       mov  [iram_tmp__26h],r7                ;-
B131 E5 1E       mov  a,[iram_like_xram_sett___0Eh]  ;old (equivalent to ;xram_sett___0Eh)
B133 65 26       xor  a,[iram_tmp__26h]
B135 60 25       jz   a,@@exit
B137 85 26 1E    mov  [iram_like_xram_sett___0Eh],[iram_tmp__26h] ;-
B13A E5 26       mov  a,[iram_tmp__26h]                 ;\
B13C B4 10 0C    jne  a,ID_event_10h,@@_B14Bh           ;
B13F 90 00 09    mov  dptr,xram_sett_curr_power         ;
B142 E0          movx a,[dptr]                          ;
B143 B4 01 05    jne  a,01h,@@_B14Bh                    ;
B146 7F 19       mov  r7,ID_func_19h_SourceMenu         ;
B148 12 AB 0C    call xxx_AB0Ch                         ;
                @@_B14Bh:                               ;/
B14B E5 26       mov  a,[iram_tmp__26h]                 ;\
B14D B4 11 0C    jne  a,ID_event_11h,@@_B15Ch           ;
                .if tech_version>=ver11sep2017
A823 90 00 30      mov  dptr,xram_sett_no_signal
A826 E0            movx a,[dptr]
A827 70 05         jnz  a,@@_A82Eh
A829 7F 2D         mov  r7,ID_func_2Fh_xxx
A82B 12 20 3C      call execute_func_r7
                  @@_A82Eh:
                .endif
B150 90 00 09    mov  dptr,xram_sett_curr_power         ;
B153 E0          movx a,[dptr]                          ;
B154 B4 01 05    jne  a,01h,@@_B15Ch                    ;
B157 7F 19       mov  r7,ID_func_19h_SourceMenu         ;
B159 12 AB 0C    call xxx_AB0Ch                         ;
                @@_B15Ch:                               ;/
                @@exit:
B15C 22          ret
                .endm ;defcode_handle_event_source_menu
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_handle_event_source_menu
                .endif
                ;------------------
                xlat_xram_sett_input_to_index_r7:   ;out: r7
                ;get "family" or whatever (there's only one)
AEEF 90 00 0C    mov  dptr,xram_sett_input
AEF2 E0          movx a,[dptr]
AEF3 FF          mov  r7,a
                ;- - - - - - ------
                xlat_input_r7_to_index_r7:  ;in: r7=[xram_sett_input], out: r7
AEF4 E4          clr  a
AEF5 90 00 92    mov  dptr,xram_tmp__92h
AEF8 F0          movx [dptr],a   ;index
                @@lop:
AEF9 90 00 92    mov  dptr,xram_tmp__92h
AEFC E0          movx a,[dptr]   ;index
AEFD FE          mov  r6,a       ;index
AEFE C3          clr  c
AEFF 94 01       sbc  a,01h     ;only one entry in table
AF01 50 21       jnc  @@not_found
AF03 EE          mov  a,r6       ;index
AF04 75 F0 0A    mov  b,0Ah      ;index*0Ah
AF07 A4          mul  a,b
AF08 24 08       add  a,xxx_6208h and 0ffh
AF0A F5 82       mov  dpl,a
AF0C E4          clr  a
AF0D 34 62       adc  a,xxx_6208h/100h
AF0F F5 83       mov  dph,a
AF11 E4          clr  a
AF12 93          movc a,[a+dptr]        ;const=00h (only one entry in table)
AF13 B5 07 06    jne  a,r7(0),@@lop_next   ;[xram_sett_input]
AF16 90 00 92    mov  dptr,xram_tmp__92h
AF19 E0          movx a,[dptr]   ;index
AF1A FF          mov  r7,a         ;<--- found
AF1B 22          ret
                ;---
                @@lop_next:
AF1C 90 00 92    mov  dptr,xram_tmp__92h
AF1F E0          movx a,[dptr]
AF20 04          inc  a          ;index+1
AF21 F0          movx [dptr],a
AF22 80 D5       sjmp @@lop
                ;---
                @@not_found:
AF24 7F 00       mov  r7,00h
AF26 22          ret
                ;------------------
                .macro defcode_switch_screen_and_backlight_off
                switch_screen_and_backlight_off:
AF27 90 00 46    mov  dptr,xram_keypad_flags_msb
AF2A E0          movx a,[dptr]
AF2B FE          mov  r6,a
AF2C A3          inc  dptr ;=xram_keypad_flags_lsb
AF2D E0          movx a,[dptr]
AF2E 30 E0 2D    jz   a.0,@@exit        ;-----> already off
                ;- - -
AF31 54 FE       and  a,0FEh  ;clear bit0                       ;\
AF33 FF          mov  r7,a                                      ;
AF34 90 00 46    mov  dptr,xram_keypad_flags_msb                ; clear bit0
AF37 EE          mov  a,r6                                      ; mark OFF
AF38 F0          movx [dptr],a                                  ;
AF39 A3          inc  dptr ;=xram_keypad_flags_lsb              ;
AF3A EF          mov  a,r7                                      ;
AF3B F0          movx [dptr],a                                  ;/
AF3C 7F 00       mov  r7,00h                                    ;\PWM0 off
AF3E 12 B3 35    call pwm_switch_pwm0_on_port35                 ;/
AF41 7F 64       mov  r7,64h                                    ;\
AF43 7E 00       mov  r6,00h                                    ; delay 100
AF45 12 BB 5D    call slow_delay_r6r7                           ;/
AF48 7F 06       mov  r7,06h   ;<--fixed (instead sett)         ;\force black
AF4A 12 A7 F7    call xlat_r7_to_forced_blank_color             ;/
AF4D 90 00 2C    mov  dptr,xram_sett_no_signal
AF50 E0          movx a,[dptr]
AF51 B4 02 0A    jne  a,02h,@@not_2_black
                ;- - -
                .if tech_version<ver11sep2017
AF54 7F 32         mov  r7,32h                                  ;\
AF56 7E 00         mov  r6,00h                                  ; delay 50
AF58 12 BB 5D      call slow_delay_r6r7                         ;/
                .endif
AF5B 12 BA FD    call switch_lcd_screen_off                     ;-LCD off, BLACK
                @@not_2_black:
                @@exit:
AF5E 22          ret
                .endm ;defcode_switch_screen_and_backlight_off
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_switch_screen_and_backlight_off
                .endif
                ;------------------
                lcd_apply_xram_sett_input_and_ratio_and_detect_video:
AF5F 90 00 0C    mov  dptr,xram_sett_input
AF62 E0          movx a,[dptr]
AF63 FF          mov  r7,a
                ;- - - - - --------
                lcd_apply_input_r7_and_ratio_and_detect_video:    ;in: r7
                 ;same as "lcd_apply_input_and_ratio_and_detect_video"
                 ;(but with fixed value instead "xram_sett_blankcolor")
                 ;(and without ending delay 200)
                 ;- - -
AF64 12 9C D6    call apply_av_input_r7                 ;---> input r7
AF67 D2 03       set  [iram_req_event_flags].3
AF69 90 00 16    mov  dptr,xram_sett___16h              ;\
AF6C E0          movx a,[dptr]                          ;
AF6D 24 FF       add  a,0FFh                 ;--> cy    ;
AF6F 92 09       mov  [iram_misc_flags].miscflg_1less,c  ;<-- cy    ;
AF71 12 00 06    call blah_read_and_writeback_bit       ;/
N/A             ;mov  dptr,xram_sett_blankcolor         ;\
N/A             ;movx a,[dptr]                          ; force black here
AF74 7F 06       mov  r7,06h   ;<--fixed (instead sett) ;
AF76 12 A7 F7    call xlat_r7_to_forced_blank_color     ;/
AF79 90 00 25    mov  dptr,xram_sett_mode               ;\
AF7C E0          movx a,[dptr]                          ; apply ratio
AF7D FF          mov  r7,a                              ;
AF7E 12 95 F8    call apply_mode_ratio_r7               ;/
AF81 12 BF D6    call dummy_ret2                        ;-blah
AF84 12 B3 D7    call try_detect_video                  ;\try detect
AF87 50 0C       jnc  @@exit                            ;/
                ;- - -
AF89 90 00 BD    mov  dptr,xram_new_detected_video      ;\
AF8C E0          movx a,[dptr]         ;get             ;
AF8D FF          mov  r7,a                              ; detected...
AF8E 90 00 BC    mov  dptr,xram_old_detected_video      ;
AF91 F0          movx [dptr],a         ;save copy       ;
AF92 12 96 8B    call lcd_apply_detected_video_r7       ;/
                @@exit:
AF95 22          ret
                ;------------------
                .if lcd_spi_version<ver11sep2017
                ;(unused?)
                ;- - -
                ;seems to be intended to set an LCD/SPI register
                ;using this subfunction would greatly improve the messy
                ;"display_spi_init" function
                ;- - -
                ;BUG: below seems to have swapped data/index
                ;(should send "70h,00h,index" and then "72h,dat,dat")
                ;- - -
AF96 8E 14       mov  [iram_tmp_lcdspi_dta_msb],r6  ;\data?
AF98 8F 15       mov  [iram_tmp_lcdspi_dta_lsb],r7  ;/
AF9A 8D 16       mov  [iram_tmp_lcdspi_index],r5    ;-index?
AF9C 7F 00       mov  r7,00h                                    ;\PWM3 off
AF9E 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
AFA1 7F 70       mov  r7,70h
AFA3 12 AA 26    lcall lcd_spi_send_byte
AFA6 E5 14       mov  a,[iram_tmp_lcdspi_dta_msb]   ;dat?
AFA8 FF          mov  r7,a
AFA9 12 AA 26    lcall lcd_spi_send_byte
AFAC AF 15       mov  r7,[iram_tmp_lcdspi_dta_lsb]  ;dat?
AFAE 12 AA 26    lcall lcd_spi_send_byte
AFB1 7F 01       mov  r7,01h                                    ;\PWM3 on
AFB3 12 B2 BA    call pwm_switch_pwm3_on_port07                 ;/
AFB6 7F 72       mov  r7,72h
AFB8 12 AA 26    lcall lcd_spi_send_byte
AFBB 7F 00       mov  r7,00h    ;00h
AFBD 12 AA 26    lcall lcd_spi_send_byte
AFC0 E5 16       mov  a,[iram_tmp_lcdspi_index]     ;index?
AFC2 FF          mov  r7,a
AFC3 12 AA 26    lcall lcd_spi_send_byte
AFC6 7F 01       mov  r7,01h                                    ;\PWM3 on
AFC8 02 B2 BA    jmp  pwm_switch_pwm3_on_port07                 ;/
                .endif
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_load_flash_settings
                .endif
                ;------------------
                gui_call_Brightness:
AFCB 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
AFCD 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
AFCF 7D 01       mov  r5,01h           ;area    ;/
AFD1 7B FF       mov  r3,0FFh                           ;\
AFD3 7A 82       mov  r2,gui_null_Brightness/100h       ; gui_null_Brightness
AFD5 79 62       mov  r1,gui_null_Brightness and 0ffh   ;/
AFD7 7E 00       mov  r6,00h  ;\len 5
AFD9 7F 05       mov  r7,05h  ;/
AFDB 12 49 C1    call anymem_generic_memcopy
AFDE E5 48       mov  a,[iram_menu_flags]
AFE0 90 00 8E    mov  dptr,xram_tmp__8Eh
AFE3 30 E0 06    jz   a.0,@@flag_or_01h
AFE6 E0          movx a,[dptr]                  ;\
AFE7 44 02       or   a,02h                     ; menu enabled
AFE9 F0          movx [dptr],a                  ;/
AFEA 80 04       sjmp @@flag_this
                ;---
                @@flag_or_01h:
AFEC E0          movx a,[dptr]                  ;\
AFED 44 01       or   a,01h                     ; menu disabled     why??
AFEF F0          movx [dptr],a                  ;/
                @@flag_this:
AFF0 53 48 FE    and  [iram_menu_flags],0FEh
AFF3 43 48 02    or   [iram_menu_flags],02h
AFF6 43 48 04    or   [iram_menu_flags],04h
AFF9 7B 01       mov  r3,01h           ;area    ;\
AFFB 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
AFFD 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
AFFF 22          ret
                ;------------------
                gui_call_QuicklyMode:
B000 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B002 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B004 7D 01       mov  r5,01h           ;area    ;/
B006 7B FF       mov  r3,0FFh                           ;\
B008 7A B2       mov  r2,gui_null_QuicklyMode/100h      ; gui_null_QuicklyMode
B00A 79 66       mov  r1,gui_null_QuicklyMode and 0ffh  ;/
B00C 7E 00       mov  r6,00h  ;\len 5
B00E 7F 05       mov  r7,05h  ;/
B010 12 49 C1    call anymem_generic_memcopy
B013 E5 48       mov  a,[iram_menu_flags]
B015 90 00 8E    mov  dptr,xram_tmp__8Eh
B018 30 E0 06    jz   a.0,@@flag_or_01h
B01B E0          movx a,[dptr]                  ;\
B01C 44 02       or   a,02h                     ; menu enabled
B01E F0          movx [dptr],a                  ;/
B01F 80 04       sjmp @@flag_this
                ;---
                @@flag_or_01h:
B021 E0          movx a,[dptr]                  ;\
B022 44 01       or   a,01h                     ; menu disabled
B024 F0          movx [dptr],a                  ;/
                @@flag_this:
B025 53 48 FE    and  [iram_menu_flags],0FEh
B028 43 48 02    or   [iram_menu_flags],02h
B02B 43 48 04    or   [iram_menu_flags],04h
B02E 7B 01       mov  r3,01h           ;area    ;\
B030 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B032 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B034 22          ret
                ;------------------
                gui_call_QuicklyVolume:
B035 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B037 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B039 7D 01       mov  r5,01h           ;area    ;/
B03B 7B FF       mov  r3,0FFh                           ;\
B03D 7A AE       mov  r2,gui_null_QuicklyVolume/100h    ; gui_null_QuicklyVolume
B03F 79 BA       mov  r1,gui_null_QuicklyVolume and 0ffh;/
B041 7E 00       mov  r6,00h  ;\len 5
B043 7F 05       mov  r7,05h  ;/
B045 12 49 C1    call anymem_generic_memcopy
B048 E5 48       mov  a,[iram_menu_flags]
B04A 90 00 8E    mov  dptr,xram_tmp__8Eh
B04D 30 E2 06    jz   a.2,@@flag_or_01h
B050 E0          movx a,[dptr]                  ;\
B051 44 02       or   a,02h                     ; menu enabled
B053 F0          movx [dptr],a                  ;/
B054 80 04       sjmp @@flag_this
                ;---
                @@flag_or_01h:
B056 E0          movx a,[dptr]                  ;\
B057 44 01       or   a,01h                     ; menu disabled
B059 F0          movx [dptr],a                  ;/
                @@flag_this:
B05A 53 48 FB    and  [iram_menu_flags],0FBh
B05D 43 48 02    or   [iram_menu_flags],02h
B060 43 48 01    or   [iram_menu_flags],01h
B063 7B 01       mov  r3,01h           ;area    ;\
B065 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B067 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B069 22          ret
                ;------------------
                .if flash_version>=ver11sep2017
                  xxx_A97Fh:
A97F 12 AB 38      call flash_write_enable              ;-
A982 90 00 3E      mov  dptr,xram_curr_lock_some        ;\
A985 E0            movx a,[dptr]                        ;
A986 54 7F         and  a,7Fh                           ; lock_some
A988 FF            mov  r7,a                            ;
A989 12 AF F5      call flash_set_wprot_to_r7           ;/
A98C 90 00 AE      mov  dptr,xram_settings_1_addr               ;\
A98F E0            movx a,[dptr]                                ;
A990 FC            mov  r4,a                                    ;
A991 A3            inc  dptr                                    ;
A992 E0            movx a,[dptr]                                ;
A993 FD            mov  r5,a                                    ; settings_1
A994 A3            inc  dptr                                    ;
A995 E0            movx a,[dptr]                                ;
A996 FE            mov  r6,a                                    ;
A997 A3            inc  dptr                                    ;
A998 E0            movx a,[dptr]                                ;
A999 FF            mov  r7,a                                    ;/
A99A 75 3C 00      mov  [iram_tmp__3Ch],xram_settings_start/100h     ;ram.addr.msb
A99D 75 3D 08      mov  [iram_tmp__3Dh],xram_settings_start and 0ffh ;ram.addr.lsb
A9A0 75 3E 00      mov  [iram_tmp__3Eh],xram_settings_size/100h
A9A3 75 3F 36      mov  [iram_tmp__3Fh],xram_settings_size and 0ffh
A9A6 12 6E D8      call write_flash                     ;------> WRITE
A9A9 90 00 40      mov  dptr,xram_curr_lock_all         ;\
A9AC E0            movx a,[dptr]                        ;
A9AD 54 7F         and  a,7Fh                           ; lock_all
A9AF FF            mov  r7,a                            ;
A9B0 02 AF F5      jmp  flash_set_wprot_to_r7           ;/
                .endif
                ;------------------
                init_AV_stuff:
B06A 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
B06D E0          movx a,[dptr]                          ;
B06E 44 1C       or   a,1Ch   ;bit2,3,4 = set           ;
B070 F0          movx [dptr],a                          ;/
B071 A3          inc  dptr ;=IO_AV_input_select_reg_0   ;\
B072 E0          movx a,[dptr]                          ;
B073 44 1B       or   a,1Bh   ;bit0,1,3,4 = set         ;
B075 F0          movx [dptr],a                          ;
B076 E0          movx a,[dptr]                          ;
B077 54 DB       and  a,0DBh  ;bit2,5 = clear           ;
B079 F0          movx [dptr],a                          ;/
B07A A3          inc  dptr ;=IO_AV_config_FED9h_bits    ;\
B07B E0          movx a,[dptr]                          ;
B07C 54 CF       and  a,0CFh    ;bit4-5=00b             ;
B07E F0          movx [dptr],a                          ;
B07F E0          movx a,[dptr]                          ;
B080 44 40       or   a,40h     ;bit6=1                 ;
B082 F0          movx [dptr],a                          ;/
B083 90 FE DB    mov  dptr,IO_AV_config_FEDBh_bit       ;\
B086 E0          movx a,[dptr]                          ;
B087 54 7F       and  a,7Fh     ;bit7=0                 ;
B089 F0          movx [dptr],a                          ;/
B08A 90 FE 01    mov  dptr,IO_AV_ctrl_whatever_1        ;\
B08D E0          movx a,[dptr]                          ;
B08E 44 10       or   a,10h     ;bit4=1                 ;
B090 F0          movx [dptr],a                          ;/
B091 90 FE 04    mov  dptr,IO_AV_config_FE04h           ;\
B094 74 30       mov  a,30h     ;value 30h              ;
B096 F0          movx [dptr],a                          ;/
B097 A3          inc  dptr ;=IO_AV_config_FE05h         ;\
B098 74 40       mov  a,40h     ;value 40h              ;
B09A F0          movx [dptr],a                          ;/
B09B 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defdata_VERSION
                  defcode_switch_screen_and_backlight_off
                .endif
                ;------------------
;:------------- ;:----------------- GUI code (misc)
                ;------------------
                gui_proc_FactoryPic_NOSIGNAL_change:
B09C BF 0D 15    jne  r7,ID_func_0Dh_plus,@@not_increase        ;\
B09F 90 00 2C    mov  dptr,xram_sett_no_signal                  ;
B0A2 E0          movx a,[dptr]                                  ;
B0A3 C3          clr  c                                         ;
B0A4 94 02       sbc  a,02h                                     ;
B0A6 50 05       jnc  @@decrease_wrap                           ;
B0A8 E0          movx a,[dptr]                                  ;
B0A9 04          inc  a                                         ;
B0AA F0          movx [dptr],a                                  ;
B0AB 80 1E       sjmp @@done                                    ;
                ;---                                            ;
                @@decrease_wrap:                                ;
B0AD E4          clr  a      ;min                               ;
B0AE 90 00 2C    mov  dptr,xram_sett_no_signal                  ;
B0B1 F0          movx [dptr],a                                  ;
B0B2 80 17       sjmp @@done                                    ;
                @@not_increase:                                 ;/
B0B4 BF 0E 14    jne  r7,ID_func_0Eh_minus,@@not_decrease       ;\
B0B7 90 00 2C    mov  dptr,xram_sett_no_signal                  ;
B0BA E0          movx a,[dptr]                                  ;
B0BB D3          set  c                                         ;
B0BC 94 00       sbc  a,00h                                     ;
B0BE 40 05       jc   @@increase_wrap                           ;
B0C0 E0          movx a,[dptr]                                  ;
B0C1 14          dec  a                                         ;
B0C2 F0          movx [dptr],a                                  ;
B0C3 80 06       sjmp @@done                                    ;
                ;---                                            ;
                @@increase_wrap:                                ;
B0C5 90 00 2C    mov  dptr,xram_sett_no_signal                  ;
B0C8 74 02       mov  a,02h  ;max                               ;
B0CA F0          movx [dptr],a                                  ;
                @@not_decrease:                                 ;/
                @@done:
B0CB D3          set  c
B0CC 22          ret
                ;------------------
                gui_proc_Language_change:
B0CD AD 07       mov  r5,r7(0)                          ;-
B0CF 90 00 1A    mov  dptr,xram_sett_language           ;\get xlat'ed language
B0D2 E0          movx a,[dptr]                          ;/
B0D3 FF          mov  r7,a                              ;\undo xlat
B0D4 12 BC 7B    call reverse_language_re_order         ;/
B0D7 BD 0D 0B    jne  r5,0Dh,@@not_increase             ;\
B0DA EF          mov  a,r7                              ;
B0DB C3          clr  c                                 ;
B0DC 94 0E       sbc  a,0Eh                             ;
B0DE 50 03       jnc  @@increase_wrap                   ;
B0E0 0F          inc  r7                                ;
B0E1 80 02       sjmp @@increase_done                   ;
                ;---                                    ;
                @@increase_wrap:                        ;
B0E3 E4          clr  a                                 ;
B0E4 FF          mov  r7,a                              ;
                @@increase_done:                        ;
                @@not_increase:                         ;/
B0E5 BD 0E 0B    jne  r5,0Eh,@@not_decrease             ;\
B0E8 EF          mov  a,r7                              ;
B0E9 D3          set  c                                 ;
B0EA 94 00       sbc  a,00h                             ;
B0EC 40 03       jc   @@decrease_wrap                   ;
B0EE 1F          dec  r7                                ;
B0EF 80 02       sjmp @@decrease_done                   ;
                ;---                                    ;
                @@decrease_wrap:                        ;
B0F1 7F 0E       mov  r7,0Eh                            ;
                @@decrease_done:                        ;
                @@not_decrease:                         ;/
B0F3 EF          mov  a,r7                              ;\
B0F4 90 70 DB    mov  dptr,language_re_order_list       ; xlat
B0F7 93          movc a,[a+dptr]                        ;/
B0F8 90 00 1A    mov  dptr,xram_sett_language
B0FB F0          movx [dptr],a
B0FC D3          set  c
B0FD 22          ret
                ;------------------
                gui_proc_Reset_apply:    ;soft_reset
B0FE 90 00 27    mov  dptr,xram_sett_req_reset          ;\check if SoftReset
B101 E0          movx a,[dptr]                          ; is requested
B102 B4 02 1D    jne  a,02h,@@skip_reset                ;/
                ;- - -
                 ;reset some basic stuff (unlike "hard_reset_all_settings")
B105 90 00 12    mov  dptr,xram_sett_brightness         ;\
B108 74 32       mov  a,32h  ;50 decimal                ;
B10A F0          movx [dptr],a   ;=32h                  ;/
B10B 90 00 14    mov  dptr,xram_sett_saturation         ;\
B10E F0          movx [dptr],a   ;=32h                  ;/
B10F 90 00 13    mov  dptr,xram_sett_contrast           ;\
B112 F0          movx [dptr],a   ;=32h                  ;/
B113 90 00 15    mov  dptr,xram_sett_tint               ;\
B116 F0          movx [dptr],a   ;=32h                  ;/
B117 E4          clr  a
B118 90 00 25    mov  dptr,xram_sett_mode               ;\
B11B F0          movx [dptr],a   ;=0                    ;/
B11C 90 00 27    mov  dptr,xram_sett_req_reset          ;\ack Reset request
B11F F0          movx [dptr],a   ;=0                    ;/
B120 A3          inc  dptr  ;=xram_sett_ir              ;\
B121 F0          movx [dptr],a   ;=0                    ;/
                @@skip_reset:
B122 90 00 25    mov  dptr,xram_sett_mode               ;\
B125 E0          movx a,[dptr]                          ;
B126 FF          mov  r7,a                              ;
B127 12 95 F8    call apply_mode_ratio_r7               ;/
B12A 12 76 20    call apply_settings_to_IO_ports        ;-apply to I/O ports
B12D D3          set  c
B12E 22          ret
                ;------------------
;:------------- ;:----------------- code
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_handle_event_source_menu
                .endif
                ;------------------
                .if tech_version>=ver11sep2017
                typekey_16h_name_U_3KEY      db '     U_3KEY',00h
                ;------------------
                typekey_16h_subinfo:         ;3KEY (default)
                 ;XXXXX below has 02h/03h swapped (other as in "tech_version<ver11sep2017)
52BC 00 AD 00 B9 dw   00ADh,00B9h // db 03h ;! ;4.7K ohm (button -)
                 dw   007Ah,0086h // db 04h    ;2.0K ohm (button menu)
                 dw   004Fh,005Bh // db 02h ;! ;1.0K ohm (button +)
                typekey_16h_nullbyte:
52CB 00          db   00h
                ;---
                typekey_16h_data:     ;see ";typekey_list/100h"
52CC FF 4F 02    db   0FFh // dw typekey_16h_name_U_3KEY ;00h-02h txt     ;idxKeypad_txt
52CF 00 4F 00 B9 dw   004Fh,00B9h                        ;03h     min,max ;idxKeypad_minmax
52D3 FF 52 BC    db   0FFh // dw typekey_16h_subinfo     ;07h-09h keys    ;idxKeypad_keys
52D6 03          db   03h                                ;0Ah     numkeys ;idxKeypad_numkeys
52D7 FF 52 CB    db   0FFh // dw typekey_16h_nullbyte    ;0Bh-0Dh blah?   ;idxKeypad_blah1
52DA 01          db   01h                                ;0Eh     blah?   ;idxKeypad_blah2
                ;------------------
                typekey_list:        ;used 4x
531D FF 52 CC    db   0FFh // dw typekey_16h_data  ;numkeys=3 ;U_3KEY      ;-default
                typekey_list_num_entries equ ($-typekey_list)/3
                ;------------------
                keypad_analog_channel:
5320 00          db   00h       ;analog channel 0
                .endif
                ;------------------
                .macro defcode_flash_write_disable
                flash_write_disable:
BB45 12 BE CE    call general_flash_wait                ;-wait
BB48 90 FD DE    mov  dptr,IO_SPI_kick_stop_reset       ;\
BB4B 74 80       mov  a,80h                             ;
BB4D F0          movx [dptr],a                          ;/
                .if flash_version>=ver11sep2017
AB13 90 FD DD      mov  dptr,IO_SPI_ready_flags         ;\
AB16 E4            clr  a                               ;
AB17 F0            movx [dptr],a                        ;/
AB18 90 FD D6      mov  dptr,IO_SPI_flash_addr_lsb      ;\
AB1B 74 FF         mov  a,0FFh                          ;
AB1D F0            movx [dptr],a                        ;
AB1E A3            inc  dptr ;=IO_SPI_flash_addr_mid    ; addr=FFFFFFh
AB1F F0            movx [dptr],a                        ;
AB20 A3            inc  dptr ;=IO_SPI_flash_addr_msb    ;
AB21 F0            movx [dptr],a                        ;/
                .endif
BB4E 90 FD E4    mov  dptr,IO_SPI_command_write         ;\
BB51 74 04       mov  a,04h                             ; WrDisable (WREN=0)
BB53 F0          movx [dptr],a                          ;/
BB54 90 FD D0    mov  dptr,IO_SPI_transfer_mode         ;\
BB57 74 08       mov  a,08h                             ; FlashCmd08h
BB59 F0          movx [dptr],a                          ;/
                .if flash_version>=ver11sep2017
                  @@wait_lop:                           ;\
AB2E 90 FD DD      mov  dptr,IO_SPI_ready_flags         ; wait
AB31 E0            movx a,[dptr]                        ;
AB32 30 E3 F9      jz   a.3,@@wait_lop                  ;/
                .endif
BB5A 02 BE CE    jmp  general_flash_wait                ;-wait
                .endm ;defcode_flash_write_disable
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_flash_write_disable
                  defcode_flash_write_enable
                .endif
                ;------------------
                gui_call_Tint:
B15D 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B15F 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B161 7D 01       mov  r5,01h           ;area    ;/
B163 7B FF       mov  r3,0FFh                           ;\
B165 7A 95       mov  r2,gui_null_Tint/100h             ; gui_null_Tint
B167 79 C5       mov  r1,gui_null_Tint and 0ffh         ;/
B169 7E 00       mov  r6,00h  ;\len 5
B16B 7F 05       mov  r7,05h  ;/
B16D 12 49 C1    call anymem_generic_memcopy
B170 90 FE 28    mov  dptr,IO_AV_stat_framerate_flag    ;\
B173 E0          movx a,[dptr]                          ; PAL/NTSC aka 50/60 Hz
B174 90 00 8E    mov  dptr,xram_tmp__8Eh                ;
B177 30 E2 06    jz   a.2,@@is_60hz_assume_ntsc  ;a.bit2;/
B17A E0          movx a,[dptr]                  ;\
B17B 44 01       or   a,01h                     ; menu disabled (PAL, 50Hz)
B17D F0          movx [dptr],a                  ;/
B17E 80 04       sjmp @@flag_this
                ;---
                @@is_60hz_assume_ntsc:
B180 E0          movx a,[dptr]                  ;\
B181 44 02       or   a,02h             ;<-- menu enabled (Tint for NTSC only?) (NTSC, and PAL60)
B183 F0          movx [dptr],a                  ;/
                @@flag_this:
B184 7B 01       mov  r3,01h           ;area    ;\
B186 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B188 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B18A 22          ret
                ;------------------
                osd_set_semi_transparency:
                 ;in: r3 = level                (always 00h/dummy)   (value for FB0Ch.bit0-2, only when r7=01h)
                 ;in: r5 = transp text enable   (always 00h/dummy)   (inverted value for IO_OSD_misc_transp_enable.bit7, only when r7=01h)
                 ;in: r7 = transp master enable (always 00h/disable) (inverted value for IO_OSD_misc_transp_enable.bit6)
                 ;- - -
B18B EF          mov  a,r7                      ;\
B18C 64 01       xor  a,01h                     ;
B18E 70 20       jnz  a,@@not_01h               ;/
                ;- -
B190 90 FB 06    mov  dptr,IO_OSD_misc_transp_enable    ;\enable semi-transparency
B193 E0          movx a,[dptr]                          ; (master enable, affects
B194 44 40       or   a,40h     ;bit6=1                 ; background, and OPTIONALLY
B196 F0          movx [dptr],a                          ;/also affects TEXT)
B197 ED          mov  a,r5                              ;\
B198 70 06       jnz  a,@@clear_bit7                    ;
                ;- - -                                  ; optionally, also enable
B19A E0          movx a,[dptr]                          ; semi-transparency for TEXT
B19B 44 80       or   a,80h     ;bit7=1                 ;
B19D F0          movx [dptr],a                          ;
B19E 80 07       sjmp @@this_bit7                       ;
                ;---                                    ;
                @@clear_bit7:                           ;
B1A0 90 FB 06    mov  dptr,IO_OSD_misc_transp_enable    ;
B1A3 E0          movx a,[dptr]                          ;
B1A4 54 7F       and  a,7Fh     ;bit7=0                 ;
B1A6 F0          movx [dptr],a                          ;
                @@this_bit7:                            ;/
B1A7 90 FB 0C    mov  dptr,IO_OSD_bright_transp_level   ;\
B1AA E0          movx a,[dptr]                          ; apply level
B1AB 54 F8       and  a,0F8h    ;clear ....             ; (0=invisible.. 7=near? solid)
B1AD 4B          or   a,r3      ;set ....               ;
B1AE F0          movx [dptr],a                          ;/
B1AF 22          ret
                ;--- --- ---
                @@not_01h:
B1B0 90 FB 06    mov  dptr,IO_OSD_misc_transp_enable    ;\
B1B3 E0          movx a,[dptr]                          ; disable semi-transparency
B1B4 54 BF       and  a,0BFh    ;bit6=0                 ;
B1B6 F0          movx [dptr],a                          ;/
B1B7 22          ret
                ;------------------
                toggle_to_next_input:    ;in: r7=old, out: r7=new
B1B8 E4          clr  a
B1B9 90 00 8E    mov  dptr,xram_tmp__8Eh
B1BC F0          movx [dptr],a
                @@lop:
B1BD 90 00 8E    mov  dptr,xram_tmp__8Eh
B1C0 E0          movx a,[dptr]
B1C1 FE          mov  r6,a
B1C2 C3          clr  c
B1C3 94 02       sbc  a,02h
B1C5 50 10       jnc  @@lop_done    ;--> oops, old not found
B1C7 EE          mov  a,r6
B1C8 90 BF CB    mov  dptr,supported_input_IDs
B1CB 93          movc a,[a+dptr]
B1CC 6F          xor  a,r7
B1CD 60 08       jz   a,@@lop_done  ;--> found old, toggle to new
B1CF 90 00 8E    mov  dptr,xram_tmp__8Eh
B1D2 E0          movx a,[dptr]
B1D3 04          inc  a
B1D4 F0          movx [dptr],a
B1D5 80 E6       sjmp @@lop
                ;---
                @@lop_done:
B1D7 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B1DA E0          movx a,[dptr]                  ; toggle to NEXT
B1DB 04          inc  a                         ;
B1DC F0          movx [dptr],a                  ;/
B1DD 54 01       and  a,01h                     ;-wrap NEXT
B1DF 90 BF CB    mov  dptr,supported_input_IDs  ;\
B1E2 93          movc a,[a+dptr]                ; return NEXT input
B1E3 FF          mov  r7,a                      ;/
B1E4 22          ret
                ;------------------
;:------------- ;:----------------- GUI code (stuff)
                ;------------------
                gui_proc_FactoryPic_POWER_change:
B1E5 EF          mov  a,r7
B1E6 64 0D       xor  a,ID_func_0Dh_plus
B1E8 60 03       jz   a,@@do_change
B1EA BF 0E 23    jne  r7,ID_func_0Eh_minus,@@do_not_change
                @@do_change:
B1ED 90 00 2B    mov  dptr,xram_sett_power_up ;(OFF,ON,SAVE)
B1F0 E0          movx a,[dptr]
B1F1 14          dec  a
B1F2 60 07       jz   a,@@is_1
B1F4 14          dec  a
B1F5 60 0C       jz   a,@@is_2
B1F7 24 02       add  a,02h     ;blah
B1F9 80 0F       sjmp @@is_0_or_other
                ;---
                @@is_1:
B1FB 90 00 2B    mov  dptr,xram_sett_power_up ;(OFF,ON,SAVE)
B1FE 74 02       mov  a,02h
B200 F0          movx [dptr],a
B201 80 0D       sjmp @@this
                ;---
                @@is_2:
B203 E4          clr  a
B204 90 00 2B    mov  dptr,xram_sett_power_up ;(OFF,ON,SAVE)
B207 F0          movx [dptr],a  ;=00h (wrap)
B208 80 06       sjmp @@this
                ;---
                @@is_0_or_other:
B20A 90 00 2B    mov  dptr,xram_sett_power_up ;(OFF,ON,SAVE)
B20D 74 01       mov  a,01h
B20F F0          movx [dptr],a
                @@this:
                @@do_not_change:
B210 D3          set  c
B211 22          ret
                ;------------------
                xxx_B212h:
B212 75 29 01    mov  [iram_tmp__29h],01h                           ;\
B215 75 2A 00    mov  [iram_tmp__2Ah],xram_keybuf_8byte_B/100h      ; src XRAM
B218 75 2B 68    mov  [iram_tmp__2Bh],xram_keybuf_8byte_B and 0ffh  ;/
B21B 75 2C 04    mov  [iram_tmp__2Ch],04h ;---?
B21E 7B 01       mov  r3,01h                   ;area    ;\
B220 7A 00       mov  r2,xram_keybuf_7byte_B/100h       ; dst XRAM
B222 79 77       mov  r1,xram_keybuf_7byte_B and 0ffh   ;/
B224 12 A8 4A    call xxx_A84Ah     ;------>
                ;- - - -
B227 75 29 01    mov  [iram_tmp__29h],01h                ;area      ;\
B22A 75 2A 00    mov  [iram_tmp__2Ah],xram_keybuf_8byte_A/100h      ; src XRAM
B22D 75 2B 60    mov  [iram_tmp__2Bh],xram_keybuf_8byte_A and 0ffh  ;/
B230 75 2C 04    mov  [iram_tmp__2Ch],04h ;---?
B233 7B 01       mov  r3,01h                            ;\
B235 7A 00       mov  r2,xram_keybuf_7byte_A/100h       ; dst XRAM
B237 79 70       mov  r1,xram_keybuf_7byte_A and 0ffh   ;/
B239 02 A8 4A    jmp  xxx_A84Ah     ;------>
                ;------------------
                gui_proc_IR_A_B_change:
B23C EF          mov  a,r7
B23D 64 0D       xor  a,ID_func_0Dh_plus
B23F 60 03       jz   a,@@do_change
B241 BF 0E 20    jne  r7,ID_func_0Eh_minus,@@do_not_change
                @@do_change:
B244 90 00 28    mov  dptr,xram_sett_ir
B247 E0          movx a,[dptr]
B248 FF          mov  r7,a       ;<--           ;\
B249 70 04       jnz  a,@@not_00h               ;
B24B 04          inc  a   ;=01h                 ;
B24C F0          movx [dptr],a                  ; when 00h --> 01h
B24D 80 15       sjmp @@done                    ;
                ;---                            ;
                @@not_00h:                      ;/
B24F EF          mov  a,r7                      ;\
B250 B4 01 08    jne  a,01h,@@not_01h           ;
B253 90 00 28    mov  dptr,xram_sett_ir         ;
B256 74 02       mov  a,02h                     ; when 01h --> 02h
B258 F0          movx [dptr],a                  ;
B259 80 09       sjmp @@done                    ;
                ;---                            ;/
                @@not_01h:                      ;\
B25B EF          mov  a,r7                      ;
B25C B4 02 05    jne  a,02h,@@not_02h           ;
B25F E4          clr  a   ;=00h                 ; when 02h --> 00h (wrap)
B260 90 00 28    mov  dptr,xram_sett_ir         ;
B263 F0          movx [dptr],a                  ;
                @@not_02h:                      ;/
                @@done:
                @@do_not_change:
B264 D3          set  c
B265 22          ret
                ;------------------
                gui_null_QuicklyMode:
B266 00          nop
B267 00          nop
B268 00          nop
B269 00          nop
B26A 00          nop
                ;---
                gui_data_QuicklyMode_show_ratio:
B26B 01          db   01h
B26C 0B          db   0Bh
B26D 01          db   01h
B26E 00          nop
B26F 01          db   01h
B270 00          nop
B271 FF BF 36    db   0FFh // dw get_settings_mode       ;16:9 or 4:3
B274 FF B5 A4    db   0FFh // dw get_txt_settings_mode   ;16:9 or 4:3
B277 00 08       dw   0008h
                ;---
                gui_data_QuicklyMode_show:
B279 00 00 00    db   000h // dw 0000h
B27C 00 00 00    db   000h // dw 0000h
B27F FF B2 6B    db   0FFh // dw gui_data_QuicklyMode_show_ratio
B282 00 08       dw   0008h
                ;---
                gui_data_QuicklyMode_name:
B284 01          db   01h
B285 00          nop
B286 01          db   01h
B287 00          nop
B288 01          db   01h
B289 00          nop
B28A 01          db   01h
B28B FF B9 1A    db   0FFh // dw get_localized_txt_mode
B28E 00 08       dw   0008h
                ;------------------
                gui_null_QuicklySys:
B290 00          nop
B291 00          nop
B292 00          nop
B293 00          nop
B294 00          nop
                ;---
                gui_data_QuicklySysRotate_show_symbol:
B295 01          db   01h
B296 0D          db   0Dh
B297 01          db   01h
B298 00          nop
B299 01          db   01h
B29A 00          nop
B29B FF BF 4E    db   0FFh // dw get_settings_rotate
B29E FF B5 E8    db   0FFh // dw get_settings_rotate_symbol
B2A1 00 08       dw   0008h
                ;---
                gui_data_QuicklySysRotate_show:
B2A3 00 00 00    db   000h // dw 0000h
B2A6 00 00 00    db   000h // dw 0000h
B2A9 FF B2 95    db   0FFh // dw gui_data_QuicklySysRotate_show_symbol
B2AC 00 08       dw   0008h
                ;---
                gui_data_QuicklySysRotate_name:
B2AE 01          db   01h
B2AF 00          nop
B2B0 01          db   01h
B2B1 00          nop
B2B2 01          db   01h
B2B3 00          nop
B2B4 01          db   01h
B2B5 FF B9 38    db   0FFh // dw get_localized_txt_rotate
B2B8 00 08       dw   0008h
                ;------------------
;:------------- ;:----------------- GPIO code (non-pwm-mode)
                ;------------------
                ;below stuff outputs FIXED (non-PWM) levels on the "PWM" pins...
                ;---
                ;pin55  Port3.5    DC_PWM0
                ;pin56  Port3.6    DC_PWM1   TXD''
                ;pin57  Port3.7    DC_PWM2   RXD''
                ;pin58  Port0.7    DC_PWM3   RXD'
                ;pin59  Port0.6    DC_PWM2'  TXD'
                ;------------------
                .if lcd_spi_version<ver11sep2017
                pwm_switch_pwm3_on_port07:  ;1st variant PWM on Port0.7 SPI.CS
B2BA 15 49       dec  [iram_heap_ptr]
B2BC A8 49       mov  r0,[iram_heap_ptr]
B2BE A6 07       mov  [r0],r7(0)     ;<-- [WHAT] = param ?
B2C0 90 FD 31    mov  dptr,IO_PIN_P06_P07_pwm
B2C3 E0          movx a,[dptr]
B2C4 54 EF       and  a,0EFh   ;bit4=0
B2C6 F0          movx [dptr],a
B2C7 E0          movx a,[dptr]
B2C8 54 DF       and  a,0DFh   ;bit5=0
B2CA F0          movx [dptr],a
B2CB E0          movx a,[dptr]
B2CC 54 BF       and  a,0BFh   ;bit6=0
B2CE F0          movx [dptr],a
B2CF 53 E9 7F    and  [SFR_IO_PORT0_MODE_A],7Fh ;\
B2D2 43 ED 80    or   [SFR_IO_PORT0_MODE_B],80h ;/
B2D5 A8 49       mov  r0,[iram_heap_ptr]          ;<-- param
B2D7 E6          mov  a,[r0]
B2D8 60 04       jz   a,@@clear
B2DA D2 87       set  [SFR_IO_PORT0_DATA].7
B2DC 80 02       sjmp @@finish
                ;---
                @@clear:
B2DE C2 87       clr  [SFR_IO_PORT0_DATA].7
                @@finish:
B2E0 05 49       inc  [iram_heap_ptr]
B2E2 22          ret
                ;------------------
                pwm_switch_pwm2_on_port06: ;2nd variant PWM on Port0.6 ;SPI.RESET
B2E3 15 49       dec  [iram_heap_ptr]
B2E5 A8 49       mov  r0,[iram_heap_ptr]
B2E7 A6 07       mov  [r0],r7(0)     ;<-- [WHAT] = param ?
B2E9 90 FD 31    mov  dptr,IO_PIN_P06_P07_pwm
B2EC E0          movx a,[dptr]
B2ED 54 FE       and  a,0FEh   ;bit0=0
B2EF F0          movx [dptr],a
B2F0 E0          movx a,[dptr]
B2F1 54 FD       and  a,0FDh   ;bit1=0
B2F3 F0          movx [dptr],a
B2F4 E0          movx a,[dptr]
B2F5 54 FB       and  a,0FBh   ;bit2=0
B2F7 F0          movx [dptr],a
B2F8 53 E9 BF    and  [SFR_IO_PORT0_MODE_A],0BFh
B2FB 43 ED 40    or   [SFR_IO_PORT0_MODE_B],40h
B2FE A8 49       mov  r0,[iram_heap_ptr]          ;<-- param
B300 E6          mov  a,[r0]
B301 60 04       jz   a,@@clear
B303 D2 86       set  [SFR_IO_PORT0_DATA].6
B305 80 02       sjmp @@finish
                ;---
                @@clear:
B307 C2 86       clr  [SFR_IO_PORT0_DATA].6
                @@finish:
B309 05 49       inc  [iram_heap_ptr]
B30B 22          ret
                ;------------------
                pwm_switch_pwm2_on_port37: ;3rd variant PWM on Port3.7 ;SPI.CLK
B30C 15 49       dec  [iram_heap_ptr]
B30E A8 49       mov  r0,[iram_heap_ptr]
B310 A6 07       mov  [r0],r7(0)
B312 90 FD 43    mov  dptr,IO_PIN_P37_xxx_pwm
B315 E0          movx a,[dptr]
B316 54 FE       and  a,0FEh
B318 F0          movx [dptr],a
B319 E0          movx a,[dptr]
B31A 54 FD       and  a,0FDh
B31C F0          movx [dptr],a
B31D E0          movx a,[dptr]
B31E 54 FB       and  a,0FBh
B320 F0          movx [dptr],a
B321 53 EC 7F    and  [SFR_IO_PORT3_MODE_A],7Fh
B324 43 F4 80    or   [SFR_IO_PORT3_MODE_B],80h
B327 A8 49       mov  r0,[iram_heap_ptr]
B329 E6          mov  a,[r0]
B32A 60 04       jz   a,@@clear
B32C D2 B7       set  [SFR_IO_PORT3_DATA].7
B32E 80 02       sjmp @@finish
                ;---
                @@clear:
B330 C2 B7       clr  [SFR_IO_PORT3_DATA].7
                @@finish:
B332 05 49       inc  [iram_heap_ptr]
B334 22          ret
                .endif
                ;------------------
                pwm_switch_pwm0_on_port35:  ;4th variant PWM on Port3.5 ;BACKLIGHT
B335 15 49       dec  [iram_heap_ptr]
B337 A8 49       mov  r0,[iram_heap_ptr]
B339 A6 07       mov  [r0],r7(0)
B33B 90 FD 42    mov  dptr,IO_PIN_P35_P36_pwm
B33E E0          movx a,[dptr]
B33F 54 FE       and  a,0FEh
B341 F0          movx [dptr],a
B342 E0          movx a,[dptr]
B343 54 FD       and  a,0FDh
B345 F0          movx [dptr],a
B346 E0          movx a,[dptr]
B347 54 FB       and  a,0FBh
B349 F0          movx [dptr],a
B34A 53 EC DF    and  [SFR_IO_PORT3_MODE_A],0DFh
B34D 43 F4 20    or   [SFR_IO_PORT3_MODE_B],20h
B350 A8 49       mov  r0,[iram_heap_ptr]
B352 E6          mov  a,[r0]
B353 60 04       jz   a,@@clear
B355 D2 B5       set  [SFR_IO_PORT3_DATA].5
                .if patchme
                   call osd_backlight_duty_50_percent
                .endif
B357 80 02       sjmp @@finish
                ;---
                @@clear:
B359 C2 B5       clr  [SFR_IO_PORT3_DATA].5
                @@finish:
B35B 05 49       inc  [iram_heap_ptr]
B35D 22          ret
                ;------------------
                .if patchme
                  unlock_C64_video:
                   mov  dptr,0FE42h
                   mov  a,00h     ;change from 20h to 00h (clear bit5)
                   movx [dptr],a
                   ret
                  ;------------------
                  osd_backlight_duty_50_percent:
                   mov  a,0    // mov dptr,IO_PWM0_duty_total_lsb // movx [dptr],a  ;lsb ;\total
                   mov  a,16   // mov dptr,IO_PWM0_duty_total_msb // movx [dptr],a  ;msb ;/  (fails when 00FFh, backlight goes off)
                   mov  a,0    // mov dptr,IO_PWM0_duty_high_lsb  // movx [dptr],a  ;lsb ;\high
                   mov  a,8    // mov dptr,IO_PWM0_duty_high_msb  // movx [dptr],a  ;msb ;/

                   mov  dptr,IO_PIN_P35_P36_pwm       ;BACKLIGHT
                   movx a,[dptr]
                   or   a,3
                   movx [dptr],a

                   mov  dptr,IO_PWM_enable_flags
                   movx a,[dptr]
                   or   a,1
                   movx [dptr],a
                   ret
                .endif
                ;------------------
                .if lcd_spi_version<ver11sep2017
                pwm_switch_pwm1_on_port36:  ;5th variant PWM on Port3.6 ;SPI.DTA
B35E 15 49       dec  [iram_heap_ptr]
B360 A8 49       mov  r0,[iram_heap_ptr]
B362 A6 07       mov  [r0],r7(0)
B364 90 FD 42    mov  dptr,IO_PIN_P35_P36_pwm
B367 E0          movx a,[dptr]
B368 54 EF       and  a,0EFh
B36A F0          movx [dptr],a
B36B E0          movx a,[dptr]
B36C 54 DF       and  a,0DFh
B36E F0          movx [dptr],a
B36F E0          movx a,[dptr]
B370 54 BF       and  a,0BFh
B372 F0          movx [dptr],a
B373 53 EC BF    and  [SFR_IO_PORT3_MODE_A],0BFh
B376 43 F4 40    or   [SFR_IO_PORT3_MODE_B],40h
B379 A8 49       mov  r0,[iram_heap_ptr]
B37B E6          mov  a,[r0]
B37C 60 04       jz   a,@@clear
B37E D2 B6       set  [SFR_IO_PORT3_DATA].6
B380 80 02       sjmp @@finish
                ;---
                @@clear:
B382 C2 B6       clr  [SFR_IO_PORT3_DATA].6
                @@finish:
B384 05 49       inc  [iram_heap_ptr]
B386 22          ret
                .endif
                ;------------------
;:------------- ;:----------------- code
                ;------------------
                init_ack_irqs:
B387 E4          clr  a
B388 F5 B8       mov  [SFR_IO_ipc],a  ;XXXsfr   ;Interrupt Priority Register
B38A D2 88       set  it0         ;XXXsfr  ;External Interrupt 0 Type (0=Low)
B38C C2 89       clr  ie0         ;XXXsfr  ;External Interrupt 0 Flag (0=Ack)
B38E 53 91 EF    and  [SFR_IO_xxx91h],0EFh  ;not 10h  ;bit4=0  ;ack extra irq's
B391 53 91 DF    and  [SFR_IO_xxx91h],0DFh  ;not 20h  ;bit5=0
B394 53 91 BF    and  [SFR_IO_xxx91h],0BFh  ;not 40h  ;bit6=0
B397 53 91 7F    and  [SFR_IO_xxx91h],7Fh   ;not 80h  ;bit7=0
B39A C2 F8       clr  [SFR_IO_xxxF8h].0         ;\
B39C D2 F9       set  [SFR_IO_xxxF8h].1 ;<--set ;
B39E C2 FA       clr  [SFR_IO_xxxF8h].2         ;
B3A0 C2 FB       clr  [SFR_IO_xxxF8h].3         ;/
                .if infrared_version<ver11sep2017
B3A2 C2 A8         clr  ex0     ;XXXsfr  ;External Interrupt 0 Enable (0=Off)
                .else
                   set  ex0     ;XXXsfr  ;External Interrupt 0 Enable (1=On) (infrared)
                .endif
B3A4 C2 E8       clr  [SFR_IO_IEC2].0           ;\
B3A6 C2 E9       clr  [SFR_IO_IEC2].1           ; interrupt enable flags
B3A8 C2 EA       clr  [SFR_IO_IEC2].2           ;
B3AA C2 EB       clr  [SFR_IO_IEC2].3           ;/
B3AC C2 AF       clr  ea          ;XXXsfr  ;Global Interrupt Enable (0=Off)
B3AE 22          ret
                ;------------------
                .macro defcode_gui_proc_FactoryPic_KEY_change
                gui_proc_FactoryPic_KEY_change:
B3AF BF 0D 0F    jne  r7,ID_func_0Dh_plus,@@not_increase        ;\
B3B2 90 00 4E    mov  dptr,xram_curr_keypadtype                 ;
B3B5 E0          movx a,[dptr]                                  ;
B3B6 04          inc  a        ;increase                        ;
B3B7 F0          movx [dptr],a                                  ;
B3B8 C3          clr  c                                         ;
B3B9 94 17       sbc  a,typekey_list_num_entries                ;
B3BB 40 18       jc   @@done                                    ;
B3BD E4          clr  a        ;wrap                            ;
B3BE F0          movx [dptr],a                                  ;
B3BF 80 14       sjmp @@done                                    ;
                ;---                                            ;
                @@not_increase:                                 ;/
B3C1 BF 0E 11    jne  r7,ID_func_0Eh_minus,@@not_decrease       ;\
B3C4 90 00 4E    mov  dptr,xram_curr_keypadtype                 ;
B3C7 E0          movx a,[dptr]                                  ;
B3C8 70 05       jnz  a,@@decrease_no_wrap                      ;
                .if typekey_list_num_entries<>1                 ;
B3CA 74 16         mov  a,typekey_list_num_entries-1            ;
                .else                                           ;
                   ;keep a=00h (aka "wrap from 0 to 0")         ;
                .endif                                          ;
B3CC F0          movx [dptr],a                                  ;
B3CD 80 06       sjmp @@done                                    ;
                ;---                                            ;
                @@decrease_no_wrap:                             ;
B3CF 90 00 4E    mov  dptr,xram_curr_keypadtype                 ;
B3D2 E0          movx a,[dptr]                                  ;
B3D3 14          dec  a        ;decrease                        ;
B3D4 F0          movx [dptr],a                                  ;
                @@not_decrease:                                 ;/
                @@done:
B3D5 D3          set  c
B3D6 22          ret
                .endm ;defcode_gui_proc_FactoryPic_KEY_change
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_gui_proc_FactoryPic_KEY_change
                .endif
                ;------------------
                try_detect_video:    ;.... try_detect_video ?
                               ;... wait/timeout for stuff from IRQ handler ?
B3D7 E4          clr  a                                 ;\
B3D8 90 00 39    mov  dptr,xram_palntsc_same_counter    ; reset num SAME counter
B3DB F0          movx [dptr],a   ;=00h                  ;/
B3DC 90 00 8E    mov  dptr,xram_tmp__8Eh ;retry.count   ;\
B3DF F0          movx [dptr],a   ;=00h                  ;/
                @@retry_lop:
B3E0 7F 1E       mov  r7,1Eh                            ;\
B3E2 7E 00       mov  r6,00h                            ; delay 30
B3E4 12 BB 5D    call slow_delay_r6r7                   ;/
B3E7 90 00 BD    mov  dptr,xram_new_detected_video      ;\
B3EA E0          movx a,[dptr]                          ;   detected video?
B3EB F4          cpl  a                                 ;
B3EC 60 02       jz   a,@@nothing_detected_retry        ;/
B3EE D3          set  c                ;cy=1=ready?
B3EF 22          ret
                ;---
                @@nothing_detected_retry:
B3F0 90 00 8E    mov  dptr,xram_tmp__8Eh ;retry.count   ;\
B3F3 E0          movx a,[dptr]                          ;
B3F4 04          inc  a                                 ;
B3F5 F0          movx [dptr],a                          ; retry max 50 times
B3F6 E0          movx a,[dptr]                          ;
B3F7 C3          clr  c                                 ;
B3F8 94 32       sbc  a,32h  ;50 decimal                ;
B3FA 40 E4       jc   @@retry_lop      ;... again       ;/
B3FC C3          clr  c                ;cy=0=timeout?
B3FD 22          ret
                ;------------------
                gui_proc_QuicklyVolume_change:
B3FE EF          mov  a,r7
B3FF 64 03       xor  a,ID_nonfunc_03h_XXXXX   ;????
B401 60 20       jz   a,@@done
                ;- - -
                ;blah, above rejects r7=28h/29h when r7=03h,
                ;ie. when r7 is NOT having that values 28h/29h anyways
                ;- - -
B403 BF 28 0E    jne  r7,ID_func_28h_volume_plus,@@not_increase ;\
B406 90 00 18    mov  dptr,xram_sett_volume                     ;
B409 E0          movx a,[dptr]                                  ;
B40A C3          clr  c                                         ;
B40B 94 64       sbc  a,64h                                     ;
B40D 50 14       jnc  @@done     ;reject/max                    ;
B40F E0          movx a,[dptr]                                  ;
B410 04          inc  a          ;increase                      ;
B411 F0          movx [dptr],a                                  ;
B412 80 0F       sjmp @@done                                    ;
                ;---                                            ;
                @@not_increase:                                 ;/
B414 BF 29 0C    jne  r7,ID_func_29h_volume_minus,@@not_decrease;\
B417 90 00 18    mov  dptr,xram_sett_volume                     ;
B41A E0          movx a,[dptr]                                  ;
B41B D3          set  c                                         ;
B41C 94 00       sbc  a,00h                                     ;
B41E 40 03       jc   @@done     ;reject/min                    ;
B420 E0          movx a,[dptr]                                  ;
B421 14          dec  a          ;decrease                      ;
B422 F0          movx [dptr],a                                  ;
                @@not_decrease:                                 ;/
                @@done:
B423 D3          set  c
B424 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_gui_proc_FactoryPic_KEY_change
                .endif
                ;------------------
                gui_call_Reset:
B425 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B427 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B429 7D 01       mov  r5,01h           ;area    ;/
B42B 7B FF       mov  r3,0FFh                           ;\
B42D 7A 9B       mov  r2,gui_null_Reset/100h            ; gui_null_Reset
B42F 79 C5       mov  r1,gui_null_Reset and 0ffh        ;/
B431 7E 00       mov  r6,00h  ;\len 5
B433 7F 05       mov  r7,05h  ;/
B435 12 49 C1    call anymem_generic_memcopy
B438 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B43B E0          movx a,[dptr]                  ; menu enabled
B43C 44 02       or   a,02h                     ;
B43E F0          movx [dptr],a                  ;/
B43F E4          clr  a                         ;\initially don't
B440 90 00 27    mov  dptr,xram_sett_req_reset  ; request SoftReset
B443 F0          movx [dptr],a                  ;/
B444 7B 01       mov  r3,01h           ;area    ;\
B446 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B448 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B44A 22          ret
                ;------------------
                .if lcd_spi_version<ver11sep2017
                display_spi_reset:    ;display RESET
                 ;BUG: below has three insane 200ms delays here (600ms total)
                 ;1st delay (before reset) shouldn't exist, ie. 0us (not 200000us)
                 ;2nd delay (during reset) needs to be only 40us (not 200000us)
                 ;3rd delay (after reset) needs to be only 10us (not 200000us)
                 ;maybe the programmer confused millisec's with mircosec's?
                 ;- - -
                 ;BUG: below should also set SPI./CS and SPI.CLK to HIGH
                 ;(else the first SPI command after reset may get wrong)
                 ;- - -
B44B 7F 01       mov  r7,01h                                    ;\SPI.RESET=HIGH
B44D 12 B2 E3    lcall pwm_switch_pwm2_on_port06                ;/
B450 7F C8       mov  r7,0C8h                                   ;\
B452 7E 00       mov  r6,00h                                    ; delay 200
B454 12 BB 5D    call slow_delay_r6r7                           ;/
B457 7F 00       mov  r7,00h                                    ;\SPI.RESET=LOW
B459 12 B2 E3    lcall pwm_switch_pwm2_on_port06                ;/
B45C 7F C8       mov  r7,0C8h                                   ;\
B45E 7E 00       mov  r6,00h                                    ; delay 200
B460 12 BB 5D    call slow_delay_r6r7                           ;/
B463 7F 01       mov  r7,01h                                    ;\SPI.RESET=HIGH
B465 12 B2 E3    lcall pwm_switch_pwm2_on_port06                ;/
B468 7F C8       mov  r7,0C8h                                   ;\
B46A 7E 00       mov  r6,00h                                    ; delay 200
B46C 02 BB 5D    jmp  slow_delay_r6r7                           ;/
                .endif
                ;------------------
                lcd_display_snow:         ;display SNOW
B46F 90 FF B0    mov  dptr,IO_LCD_snow_enable_and_misc  ;\
B472 E0          movx a,[dptr]                          ;
B473 54 7F       and  a,7Fh      ;bit7=0 (snow off)     ; <-- blah/changed below
B475 F0          movx [dptr],a                          ;
B476 E0          movx a,[dptr]   ;re-read?              ;
B477 44 20       or   a,20h      ;bit5=1                ; ;<-- backdrop on (AV off)?
B479 F0          movx [dptr],a                          ;/
B47A 90 FF CE    mov  dptr,IO_LCD_backdrop_color_Y      ;\
B47D E4          clr  a                                 ;
B47E F0          movx [dptr],a                          ;
B47F A3          inc  dptr ;=IO_LCD_backdrop_color_Cb   ; backdrop black
B480 74 80       mov  a,80h                             ;
B482 F0          movx [dptr],a                          ;
B483 A3          inc  dptr ;=IO_LCD_backdrop_color_Cr   ;
B484 F0          movx [dptr],a                          ;/
B485 90 FF B0    mov  dptr,IO_LCD_snow_enable_and_misc  ;\
B488 E0          movx a,[dptr]                          ; enable snow
B489 44 80       or   a,80h     ;bit7=1 (SNOW)          ;
B48B F0          movx [dptr],a                          ;/
B48C 90 FF DA    mov  dptr,IO_backdrop_snow_level       ;\
B48F 74 6C       mov  a,6Ch                             ; amount of snow pixels
B491 F0          movx [dptr],a                          ;/
B492 22          ret
                ;------------------
                .if infrared_version>=ver11sep2017
                  infrared_code_list:    ;3-byte groups (8bit+16bit values)
ADD2 07 6B 04      db   07h, 06Bh,04h    ;\      Plus
ADD5 08 6B 06      db   08h, 06Bh,06h    ;       Minus
ADD8 0E 6B 12      db   0Eh, 06Bh,12h    ;       PowerOnOff
ADDB 09 6B 05      db   09h, 06Bh,05h    ;       Next_menu
ADDE 0C 6B 1B      db   0Ch, 06Bh,1Bh    ;       QuicklySourceMenu
ADE1 0A 6B 1A      db   0Ah, 06Bh,1Ah    ;/      QuicklyMode
ADE4 07 FF 08      db   07h, 0FFh,08h    ;\
ADE7 08 FF 0A      db   08h, 0FFh,0Ah    ;
ADEA 0E FF 02      db   0Eh, 0FFh,02h    ;
ADED 09 FF 09      db   09h, 0FFh,09h    ;
ADF0 0C FF 05      db   0Ch, 0FFh,05h    ;
ADF3 0A FF 0D      db   0Ah, 0FFh,0Dh    ;/
                  num_infrared_code_list_entries equ ($-infrared_code_list)/3
                .endif
                ;------------------
                test_if_func_ID_is_00h:     ;in: r7=ID_func_XXh_xxx - out: cy
                 ;(test if ID is in a list)
                 ;(which, the list has only one entry, for ID=00h)
                 ;- - -
B493 E4          clr  a
B494 90 00 7E    mov  dptr,xram_tmp__7Eh
B497 F0          movx [dptr],a   ;index=0
                @@lop:
B498 90 00 7E    mov  dptr,xram_tmp__7Eh
B49B E0          movx a,[dptr]   ;index
B49C FE          mov  r6,a       ;index
B49D C3          clr  c
B49E 94 01       sbc  a,xxx_BFD9h_num_entries  ;num entries in list (=only ONE)
B4A0 50 12       jnc  @@list_end
B4A2 EE          mov  a,r6       ;index
B4A3 90 BF D9    mov  dptr,xxx_BFD9h       ;... list of ID_func's
B4A6 93          movc a,[a+dptr]
B4A7 B5 07 02    jne  a,r7(0),@@lop_next
                ;- - -
B4AA D3          set  c      ;out: cy=1 (ID was INCLUDED in the list)
B4AB 22          ret
                ;---
                @@lop_next:
B4AC 90 00 7E    mov  dptr,xram_tmp__7Eh
B4AF E0          movx a,[dptr]   ;index
B4B0 04          inc  a          ;index+1
B4B1 F0          movx [dptr],a   ;index
B4B2 80 E4       sjmp @@lop
                ;---
                @@list_end:
B4B4 C3          clr  c      ;out: cy=0 (ID was NOT in the list)
B4B5 22          ret
                ;------------------
                .if flash_version>=ver11sep2017
                 flash_read_write_protect_status:
                  ;(unused?)
AE19 12 B8 2F     call general_flash_wait               ;-wait
AE1C 90 FD DD     mov  dptr,IO_SPI_ready_flags          ;\
AE1F E4           clr  a                                ;
AE20 F0           movx [dptr],a                         ;/
AE21 A3           inc  dptr ;=IO_SPI_kick_stop_reset    ;\
AE22 74 80        mov  a,80h                            ;
AE24 F0           movx [dptr],a                         ;/
AE25 90 FD D0     mov  dptr,IO_SPI_transfer_mode        ;\
AE28 74 02        mov  a,02h                            ; FlashCmd02h
AE2A F0           movx [dptr],a                         ;/
                 @@wait_lop:                            ;\
AE2B 90 FD DD     mov  dptr,IO_SPI_ready_flags          ; wait
AE2E E0           movx a,[dptr]                         ;
AE2F 30 E1 F9     jz   a.1,@@wait_lop                   ;/
AE32 90 FD D2     mov  dptr,IO_SPI_manual_data_read     ;\
AE35 E0           movx a,[dptr]                         ; MANUAL READ !!!!!
AE36 FF           mov  r7,a                             ;/
AE37 12 B8 2F     call general_flash_wait               ;-wait
AE3A 22           ret
                .endif
                ;------------------
                get_txt_power_OFF_ON_SAVE:     ;(OFF,ON,SAVE)
B4B6 12 BE F6    call get_settings_power  ;(OFF,ON,SAVE)
B4B9 90 6A 27    mov  dptr,txt_list_OFF_ON_SAVE
B4BC 75 F0 03    mov  b,03h
B4BF EF          mov  a,r7
B4C0 12 4C E0    call add_a_mul_b_to_dptr
B4C3 EE          mov  a,r6
B4C4 75 F0 03    mov  b,03h
B4C7 A4          mul  a,b
B4C8 25 83       add  a,dph
B4CA F5 83       mov  dph,a
B4CC E4          clr  a
B4CD 93          movc a,[a+dptr]
B4CE FB          mov  r3,a
B4CF 74 01       mov  a,01h
B4D1 93          movc a,[a+dptr]
B4D2 FA          mov  r2,a
B4D3 74 02       mov  a,02h
B4D5 93          movc a,[a+dptr]
B4D6 F9          mov  r1,a
B4D7 22          ret
                ;------------------
                get_txt_no_signal_BLUE_SNOW_BLACK:
B4D8 12 BF 06    call get_settings_no_signal
B4DB 90 6A 7A    mov  dptr,txt_list_BLUE_SNOW_BLACK
B4DE 75 F0 03    mov  b,03h
B4E1 EF          mov  a,r7
B4E2 12 4C E0    call add_a_mul_b_to_dptr
B4E5 EE          mov  a,r6
B4E6 75 F0 03    mov  b,03h
B4E9 A4          mul  a,b
B4EA 25 83       add  a,dph
B4EC F5 83       mov  dph,a
B4EE E4          clr  a
B4EF 93          movc a,[a+dptr]
B4F0 FB          mov  r3,a
B4F1 74 01       mov  a,01h
B4F3 93          movc a,[a+dptr]
B4F4 FA          mov  r2,a
B4F5 74 02       mov  a,02h
B4F7 93          movc a,[a+dptr]
B4F8 F9          mov  r1,a
B4F9 22          ret
                ;------------------
                get_txt_settings_ir:
B4FA 12 BF 0E    call get_settings_ir   ;get [xram_sett_ir]
B4FD 90 A1 9C    mov  dptr,txt_list_infrared_OFF_A_B
B500 75 F0 03    mov  b,03h
B503 EF          mov  a,r7
B504 12 4C E0    call add_a_mul_b_to_dptr
B507 EE          mov  a,r6
B508 75 F0 03    mov  b,03h
B50B A4          mul  a,b
B50C 25 83       add  a,dph
B50E F5 83       mov  dph,a
B510 E4          clr  a
B511 93          movc a,[a+dptr]
B512 FB          mov  r3,a
B513 74 01       mov  a,01h
B515 93          movc a,[a+dptr]
B516 FA          mov  r2,a
B517 74 02       mov  a,02h
B519 93          movc a,[a+dptr]
B51A F9          mov  r1,a
B51B 22          ret
                ;------------------
                get_localized_txt_language:
B51C 12 BF 16    call get_settings_language
B51F 90 70 EA    mov  dptr,localized_txtlist_language
B522 75 F0 03    mov  b,03h
B525 EF          mov  a,r7
B526 12 4C E0    call add_a_mul_b_to_dptr
B529 EE          mov  a,r6
B52A 75 F0 03    mov  b,03h
B52D A4          mul  a,b
B52E 25 83       add  a,dph
B530 F5 83       mov  dph,a
B532 E4          clr  a
B533 93          movc a,[a+dptr]
B534 FB          mov  r3,a
B535 74 01       mov  a,01h
B537 93          movc a,[a+dptr]
B538 FA          mov  r2,a
B539 74 02       mov  a,02h
B53B 93          movc a,[a+dptr]
B53C F9          mov  r1,a
B53D 22          ret
                ;------------------
                get_localized_txt_language_name:
B53E 12 BF 16    call get_settings_language
B541 90 71 17    mov  dptr,localized_txtlist_language_name
B544 75 F0 03    mov  b,03h
B547 EF          mov  a,r7
B548 12 4C E0    call add_a_mul_b_to_dptr
B54B EE          mov  a,r6
B54C 75 F0 03    mov  b,03h
B54F A4          mul  a,b
B550 25 83       add  a,dph
B552 F5 83       mov  dph,a
B554 E4          clr  a
B555 93          movc a,[a+dptr]
B556 FB          mov  r3,a
B557 74 01       mov  a,01h
B559 93          movc a,[a+dptr]
B55A FA          mov  r2,a
B55B 74 02       mov  a,02h
B55D 93          movc a,[a+dptr]
B55E F9          mov  r1,a
B55F 22          ret
                ;------------------
                get_txt_settings_mode_dupe:     ;16:9 or 4:3
B560 12 BF 2E    call get_settings_mode_dupe
B563 90 92 AC    mov  dptr,txt_list_ratio_16_9_and_4_3
B566 75 F0 03    mov  b,03h
B569 EF          mov  a,r7
B56A 12 4C E0    call add_a_mul_b_to_dptr
B56D EE          mov  a,r6
B56E 75 F0 03    mov  b,03h
B571 A4          mul  a,b
B572 25 83       add  a,dph
B574 F5 83       mov  dph,a
B576 E4          clr  a
B577 93          movc a,[a+dptr]
B578 FB          mov  r3,a
B579 74 01       mov  a,01h
B57B 93          movc a,[a+dptr]
B57C FA          mov  r2,a
B57D 74 02       mov  a,02h
B57F 93          movc a,[a+dptr]
B580 F9          mov  r1,a
B581 22          ret
                ;------------------
                get_txt_input_AV_cropped_1:
B582 12 BB D4    call get_settings_input_cropped_1
B585 90 A7 17    mov  dptr,txt_list_AV1_AV2_AV3
B588 75 F0 03    mov  b,03h
B58B EF          mov  a,r7
B58C 12 4C E0    call add_a_mul_b_to_dptr
B58F EE          mov  a,r6
B590 75 F0 03    mov  b,03h
B593 A4          mul  a,b
B594 25 83       add  a,dph
B596 F5 83       mov  dph,a
B598 E4          clr  a
B599 93          movc a,[a+dptr]
B59A FB          mov  r3,a
B59B 74 01       mov  a,01h
B59D 93          movc a,[a+dptr]
B59E FA          mov  r2,a
B59F 74 02       mov  a,02h
B5A1 93          movc a,[a+dptr]
B5A2 F9          mov  r1,a
B5A3 22          ret
                ;------------------
                get_txt_settings_mode:      ;16:9 or 4:3
B5A4 12 BF 36    call get_settings_mode
B5A7 90 92 AC    mov  dptr,txt_list_ratio_16_9_and_4_3
B5AA 75 F0 03    mov  b,03h
B5AD EF          mov  a,r7
B5AE 12 4C E0    call add_a_mul_b_to_dptr
B5B1 EE          mov  a,r6
B5B2 75 F0 03    mov  b,03h
B5B5 A4          mul  a,b
B5B6 25 83       add  a,dph
B5B8 F5 83       mov  dph,a
B5BA E4          clr  a
B5BB 93          movc a,[a+dptr]
B5BC FB          mov  r3,a
B5BD 74 01       mov  a,01h
B5BF 93          movc a,[a+dptr]
B5C0 FA          mov  r2,a
B5C1 74 02       mov  a,02h
B5C3 93          movc a,[a+dptr]
B5C4 F9          mov  r1,a
B5C5 22          ret
                ;------------------
                get_txt_input_AV_cropped_2:
B5C6 12 BB EB    call get_settings_input_cropped_2
B5C9 90 A7 6B    mov  dptr,txt_list_AV1_AV2_AV3_dupe
B5CC 75 F0 03    mov  b,03h
B5CF EF          mov  a,r7
B5D0 12 4C E0    call add_a_mul_b_to_dptr
B5D3 EE          mov  a,r6
B5D4 75 F0 03    mov  b,03h
B5D7 A4          mul  a,b
B5D8 25 83       add  a,dph
B5DA F5 83       mov  dph,a
B5DC E4          clr  a
B5DD 93          movc a,[a+dptr]
B5DE FB          mov  r3,a
B5DF 74 01       mov  a,01h
B5E1 93          movc a,[a+dptr]
B5E2 FA          mov  r2,a
B5E3 74 02       mov  a,02h
B5E5 93          movc a,[a+dptr]
B5E6 F9          mov  r1,a
B5E7 22          ret
                ;------------------
                .if tech_version>=ver11sep2017   ;NEW version ONLY
                  get_txt_input_F_F_F:
                   call get_settings_input_cropped_2
                   mov  dptr,txt_list_F_F_F
                   mov  b,03h
                   mov  a,r7
                   call add_a_mul_b_to_dptr
                   mov  a,r6
                   mov  b,03h
                   mul  a,b
                   add  a,dph
                   mov  dph,a
                   clr  a
                   movc a,[a+dptr]
                   mov  r3,a
                   mov  a,01h
                   movc a,[a+dptr]
                   mov  r2,a
                   mov  a,02h
                   movc a,[a+dptr]
                   mov  r1,a
                   ret
                .endif
                ;------------------
                get_settings_rotate_symbol:
B5E8 12 BF 4E    call get_settings_rotate
B5EB 90 9A 2F    mov  dptr,txt_list_rotate_symbols
B5EE 75 F0 03    mov  b,03h
B5F1 EF          mov  a,r7
B5F2 12 4C E0    call add_a_mul_b_to_dptr
B5F5 EE          mov  a,r6
B5F6 75 F0 03    mov  b,03h
B5F9 A4          mul  a,b
B5FA 25 83       add  a,dph
B5FC F5 83       mov  dph,a
B5FE E4          clr  a
B5FF 93          movc a,[a+dptr]
B600 FB          mov  r3,a
B601 74 01       mov  a,01h
B603 93          movc a,[a+dptr]
B604 FA          mov  r2,a
B605 74 02       mov  a,02h
B607 93          movc a,[a+dptr]
B608 F9          mov  r1,a
B609 22          ret
                ;------------------
                get_settings_rotate_symbol_dupe:
B60A 12 BF 56    call get_settings_rotate_dupe
B60D 90 9A 2F    mov  dptr,txt_list_rotate_symbols
B610 75 F0 03    mov  b,03h
B613 EF          mov  a,r7
B614 12 4C E0    call add_a_mul_b_to_dptr
B617 EE          mov  a,r6
B618 75 F0 03    mov  b,03h
B61B A4          mul  a,b
B61C 25 83       add  a,dph
B61E F5 83       mov  dph,a
B620 E4          clr  a
B621 93          movc a,[a+dptr]
B622 FB          mov  r3,a
B623 74 01       mov  a,01h
B625 93          movc a,[a+dptr]
B626 FA          mov  r2,a
B627 74 02       mov  a,02h
B629 93          movc a,[a+dptr]
B62A F9          mov  r1,a
B62B 22          ret
                ;------------------
                get_txt_input_AV1_AV2:
B62C 12 BD 9C    call get_settings_input
B62F 90 A2 0A    mov  dptr,txt_list_AV1_AV2    ;uh, here without AV3/cropping?
B632 75 F0 03    mov  b,03h
B635 EF          mov  a,r7
B636 12 4C E0    call add_a_mul_b_to_dptr
B639 EE          mov  a,r6
B63A 75 F0 03    mov  b,03h
B63D A4          mul  a,b
B63E 25 83       add  a,dph
B640 F5 83       mov  dph,a
B642 E4          clr  a
B643 93          movc a,[a+dptr]
B644 FB          mov  r3,a
B645 74 01       mov  a,01h
B647 93          movc a,[a+dptr]
B648 FA          mov  r2,a
B649 74 02       mov  a,02h
B64B 93          movc a,[a+dptr]
B64C F9          mov  r1,a
B64D 22          ret
                ;------------------
;:------------- ;:----------------- FLASH code (set wprot)
                ;------------------
                .if flash_version<ver11sep2017
                   flash_set_wprot_to_bugged_protected:
                     ;same as "flash_set_wprot_to_unprotected"
                     ;(except, different FDD1h=IO_SPI_wprot_stat_write value)
                .else ;- - - - - - -
                   flash_set_wprot_to_r7:   ;in: r7
                .endif
B64E 12 BE CE    call general_flash_wait                ;-wait
B651 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;\
B654 E4          clr  a                                 ; [FDDDh]=00h
B655 F0          movx [dptr],a                          ;/
B656 A3          inc  dptr ;=IO_SPI_kick_stop_reset     ;\
B657 74 80       mov  a,80h                             ; [FDDEh]=80h
B659 F0          movx [dptr],a                          ;/
B65A 90 FD D1    mov  dptr,IO_SPI_wprot_stat_write      ;\
                .if flash_version<ver11sep2017          ;
B65D 74 0C         mov  a,0Ch    ;<-- FIXED and BUGGED  ;
                   ;BUG: above works on 25D10/25D20 (=protect ALL blocks)
                   ;but, on 25D40, it does protect the UPPER some blocks
                   ;(leaving the firmware in LOWER 64Kbyte block unprotected)
                   ;(whereas, my board IS fitted with 25D40)
                .else                                   ;
                   mov  a,r7     ;<-- INCOMING PARAM    ;
                .endif                                  ;
B65F F0          movx [dptr],a                          ;/
B660 90 FD D0    mov  dptr,IO_SPI_transfer_mode         ;\
B663 74 04       mov  a,04h                             ; FlashCmd04h
B665 F0          movx [dptr],a                          ;/
                @@wait_lop:                             ;\
B666 90 FD DD    mov  dptr,IO_SPI_ready_flags           ; wait
B669 E0          movx a,[dptr]                          ;
                .if flash_version<ver11sep2017          ;
B66A 60 FA         jz   a,@@wait_lop                    ;
                .else                                   ;
                   jz   a.2,@@wait_lop                  ;
                .endif                                  ;/
B66C 02 BE CE    jmp  general_flash_wait                ;-wait
                ;------------------
;:------------- ;:----------------- GUI code (stuff)
                ;------------------
                gui_call_Contrast:
B66F 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B671 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B673 7D 01       mov  r5,01h           ;area    ;/
B675 7B FF       mov  r3,0FFh                           ;\
B677 7A 8A       mov  r2,gui_null_Contrast/100h         ; gui_null_Contrast
B679 79 2E       mov  r1,gui_null_Contrast and 0ffh     ;/
B67B 7E 00       mov  r6,00h  ;\len 5
B67D 7F 05       mov  r7,05h  ;/
B67F 12 49 C1    call anymem_generic_memcopy
B682 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B685 E0          movx a,[dptr]                  ; menu enabled
B686 44 02       or   a,02h                     ;
B688 F0          movx [dptr],a                  ;/
B689 7B 01       mov  r3,01h           ;area    ;\
B68B 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B68D 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B68F 22          ret
                ;------------------
                .macro defcode_gui_call_fMenuSource
                gui_call_fMenuSource:
B690 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B692 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B694 7D 01       mov  r5,01h           ;area    ;/
B696 7B FF       mov  r3,0FFh                           ;\
B698 7A 6A       mov  r2,gui_null_fMenuSource/100h      ; gui_null_fMenuSource
B69A 79 09       mov  r1,gui_null_fMenuSource and 0ffh  ;/
B69C 7E 00       mov  r6,00h  ;\len 5
B69E 7F 05       mov  r7,05h  ;/
B6A0 12 49 C1    call anymem_generic_memcopy
B6A3 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B6A6 E0          movx a,[dptr]                  ; menu enabled
B6A7 44 02       or   a,02h                     ;
B6A9 F0          movx [dptr],a                  ;/
B6AA 7B 01       mov  r3,01h           ;area    ;\
B6AC 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B6AE 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B6B0 22          ret
                .endm ;defcode_gui_call_fMenuSource
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_gui_call_fMenuSource
                .endif
                ;------------------
                gui_call_FactoryMenu:
B6B1 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B6B3 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B6B5 7D 01       mov  r5,01h           ;area    ;/
B6B7 7B FF       mov  r3,0FFh                           ;\
B6B9 7A 6A       mov  r2,gui_null_FactoryMenu/100h      ; gui_null_FactoryMenu
B6BB 79 91       mov  r1,gui_null_FactoryMenu and 0ffh  ;/
B6BD 7E 00       mov  r6,00h  ;\len 5
B6BF 7F 05       mov  r7,05h  ;/
B6C1 12 49 C1    call anymem_generic_memcopy
B6C4 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B6C7 E0          movx a,[dptr]                  ; menu enabled
B6C8 44 02       or   a,02h                     ;
B6CA F0          movx [dptr],a                  ;/
B6CB 7B 01       mov  r3,01h           ;area    ;\
B6CD 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B6CF 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B6D1 22          ret
                ;------------------
                gui_call_FactoryPic:     ;(this has MANY items)
B6D2 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B6D4 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B6D6 7D 01       mov  r5,01h           ;area    ;/
B6D8 7B FF       mov  r3,0FFh                           ;\
B6DA 7A 8E       mov  r2,gui_null_FactoryPic/100h       ; gui_null_FactoryPic
B6DC 79 07       mov  r1,gui_null_FactoryPic and 0ffh   ;/
B6DE 7E 00       mov  r6,00h  ;\len 5
B6E0 7F 05       mov  r7,05h  ;/
B6E2 12 49 C1    call anymem_generic_memcopy
B6E5 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B6E8 E0          movx a,[dptr]                  ; menu enabled
B6E9 44 02       or   a,02h                     ;
B6EB F0          movx [dptr],a                  ;/
B6EC 7B 01       mov  r3,01h           ;area    ;\
B6EE 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B6F0 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B6F2 22          ret
                ;------------------
                gui_call_IR_A_B:
B6F3 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B6F5 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B6F7 7D 01       mov  r5,01h           ;area    ;/
B6F9 7B FF       mov  r3,0FFh                           ;\
B6FB 7A A1       mov  r2,gui_null_IR_A_B/100h           ; gui_null_IR_A_B
B6FD 79 A5       mov  r1,gui_null_IR_A_B and 0ffh       ;/
B6FF 7E 00       mov  r6,00h  ;len.msb ;\len 5
B701 7F 05       mov  r7,05h  ;len.lsb ;/
B703 12 49 C1    call anymem_generic_memcopy
B706 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B709 E0          movx a,[dptr]                  ; menu disabled
B70A 44 01       or   a,01h                     ;
B70C F0          movx [dptr],a                  ;/
B70D 7B 01       mov  r3,01h           ;area    ;\
B70F 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B711 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B713 22          ret
                ;------------------
                gui_call_Language:
B714 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B716 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B718 7D 01       mov  r5,01h           ;area    ;/
B71A 7B FF       mov  r3,0FFh                           ;\
B71C 7A 71       mov  r2,gui_null_Language/100h         ; gui_null_Language
B71E 79 44       mov  r1,gui_null_Language and 0ffh     ;/
B720 7E 00       mov  r6,00h  ;\len 5
B722 7F 05       mov  r7,05h  ;/
B724 12 49 C1    call anymem_generic_memcopy
B727 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B72A E0          movx a,[dptr]                  ; menu enabled
B72B 44 02       or   a,02h                     ;
B72D F0          movx [dptr],a                  ;/
B72E 7B 01       mov  r3,01h           ;area    ;\
B730 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B732 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B734 22          ret
                ;------------------
                gui_call_ModeMenu:
B735 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B737 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B739 7D 01       mov  r5,01h           ;area    ;/
B73B 7B FF       mov  r3,0FFh                           ;\
B73D 7A 92       mov  r2,gui_null_ModeMenu/100h         ; gui_null_ModeMenu
B73F 79 B2       mov  r1,gui_null_ModeMenu and 0ffh     ;/
B741 7E 00       mov  r6,00h  ;\len 5
B743 7F 05       mov  r7,05h  ;/
B745 12 49 C1    call anymem_generic_memcopy
B748 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B74B E0          movx a,[dptr]                  ; menu disabled or emabled
                .if wide_screen=0               ;
B74C 44 01         or   a,01h     ;DISABLED     ;  ;<-- 4:3 fixed
                .else                           ;
B74C 44 01         or   a,02h     ;ENABLED      ;  ;<-- 4:3 or 16:9 selectable
                .endif                          ;
B74E F0          movx [dptr],a                  ;/
B74F 7B 01       mov  r3,01h           ;area    ;\
B751 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B753 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B755 22          ret
                ;------------------
                gui_call_NoSignal:
B756 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B758 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B75A 7D 01       mov  r5,01h           ;area    ;/
B75C 7B FF       mov  r3,0FFh                           ;\
B75E 7A 9D       mov  r2,gui_null_NoSignal/100h         ; gui_null_NoSignal
B760 79 B7       mov  r1,gui_null_NoSignal and 0ffh     ;/
B762 7E 00       mov  r6,00h  ;\len 5
B764 7F 05       mov  r7,05h  ;/
B766 12 49 C1    call anymem_generic_memcopy
B769 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B76C E0          movx a,[dptr]                  ; menu enabled
B76D 44 02       or   a,02h                     ;
B76F F0          movx [dptr],a                  ;/
B770 7B 01       mov  r3,01h           ;area    ;\
B772 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B774 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B776 22          ret
                ;------------------
                gui_call_Saturation:
B777 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B779 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B77B 7D 01       mov  r5,01h           ;area    ;/
B77D 7B FF       mov  r3,0FFh                           ;\
B77F 7A 84       mov  r2,gui_null_Saturation/100h       ; gui_null_Saturation
B781 79 CB       mov  r1,gui_null_Saturation and 0ffh   ;/
B783 7E 00       mov  r6,00h  ;\len 5
B785 7F 05       mov  r7,05h  ;/
B787 12 49 C1    call anymem_generic_memcopy
B78A 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B78D E0          movx a,[dptr]                  ; menu enabled
B78E 44 02       or   a,02h                     ;
B790 F0          movx [dptr],a                  ;/
B791 7B 01       mov  r3,01h           ;area    ;\
B793 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B795 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B797 22          ret
                ;------------------
                gui_proc_SourceMenu_change:
                gui_proc_fMenuSource_change:
                 ;(same as "gui_proc_SelSource_change")
B798 90 00 4D    mov  dptr,xram_whatever_pwr_input      ;\
B79B E0          movx a,[dptr]                          ;
B79C C3          clr  c                                 ;
B79D 94 02       sbc  a,02h                             ;
B79F 40 05       jc   @@_B7A6h                       ;? ;
B7A1 90 00 0C    mov  dptr,xram_sett_input              ;
B7A4 80 03       sjmp @@this                         ;? ;
                ;---                                    ;
                @@_B7A6h:                               ;
B7A6 90 00 2D    mov  dptr,xram_sett___2Dh              ;
                @@this:                                 ;
B7A9 E0          movx a,[dptr]                          ;/
B7AA FF          mov  r7,a                              ;\
B7AB 12 B1 B8    lcall toggle_to_next_input             ;/
B7AE 90 00 0C    mov  dptr,xram_sett_input              ;\
B7B1 EF          mov  a,r7         ;<--                 ;
B7B2 F0          movx [dptr],a                          ; apply (to both)
B7B3 90 00 2D    mov  dptr,xram_sett___2Dh              ;
B7B6 F0          movx [dptr],a                          ;/
B7B7 D3          set  c            ;out: cy=1, r7="input"
B7B8 22          ret
                ;------------------
                .if shuffle_version>=ver11sep2017
                  defcode_gui_call_fMenuSource
                .endif
                ;------------------
                gui_call_SysMenuXflip:
B7B9 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B7BB 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B7BD 7D 01       mov  r5,01h           ;area    ;/
B7BF 7B FF       mov  r3,0FFh                           ;\
B7C1 7A 9A       mov  r2,gui_null_SysMenuXflip/100h     ; gui_null_SysMenuXflip
B7C3 79 3B       mov  r1,gui_null_SysMenuXflip and 0ffh ;/
B7C5 7E 00       mov  r6,00h  ;\len 5
B7C7 7F 05       mov  r7,05h  ;/
B7C9 12 49 C1    call anymem_generic_memcopy
B7CC 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B7CF E0          movx a,[dptr]                  ; menu disabled
B7D0 44 01       or   a,01h                     ;
B7D2 F0          movx [dptr],a                  ;/
B7D3 7B 01       mov  r3,01h           ;area    ;\
B7D5 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B7D7 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B7D9 22          ret
                ;------------------
                gui_call_SelSource:
B7DA 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B7DC 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B7DE 7D 01       mov  r5,01h           ;area    ;/
B7E0 7B FF       mov  r3,0FFh                           ;\
B7E2 7A A2       mov  r2,gui_null_SelSource/100h        ; gui_null_SelSource
B7E4 79 10       mov  r1,gui_null_SelSource and 0ffh    ;/
B7E6 7E 00       mov  r6,00h  ;\len 5
B7E8 7F 05       mov  r7,05h  ;/
B7EA 12 49 C1    call anymem_generic_memcopy
B7ED 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B7F0 E0          movx a,[dptr]                  ; menu disabled
B7F1 44 01       or   a,01h                     ;
B7F3 F0          movx [dptr],a                  ;/
B7F4 7B 01       mov  r3,01h           ;area    ;\
B7F6 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B7F8 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B7FA 22          ret
                ;------------------
                gui_proc_SelSource_change: ;aka Input:
B7FB 90 00 4D    mov  dptr,xram_whatever_pwr_input      ;\
B7FE E0          movx a,[dptr]                          ;
B7FF C3          clr  c                                 ;
B800 94 02       sbc  a,02h                             ;
B802 40 05       jc   @@_B809h                       ;? ;
B804 90 00 0C    mov  dptr,xram_sett_input              ;
B807 80 03       sjmp @@this                         ;? ;
                ;---                                    ;
                @@_B809h:                               ;
B809 90 00 2D    mov  dptr,xram_sett___2Dh              ;
                @@this:                                 ;
B80C E0          movx a,[dptr]                          ;/
B80D FF          mov  r7,a                              ;\
B80E 12 B1 B8    call toggle_to_next_input              ;/
B811 90 00 0C    mov  dptr,xram_sett_input              ;\
B814 EF          mov  a,r7         ;<--                 ;
B815 F0          movx [dptr],a                          ; apply (to both)
B816 90 00 2D    mov  dptr,xram_sett___2Dh              ;
B819 F0          movx [dptr],a                          ;/
B81A D3          set  c            ;out: cy=1, r7="input"
B81B 22          ret
                ;------------------
                gui_call_Version:
B81C 78 8E       mov  r0,xram_tmp__8Eh and 0ffh ;\
B81E 7C 00       mov  r4,xram_tmp__8Eh/100h     ; dst
B820 7D 01       mov  r5,01h           ;area    ;/
B822 7B FF       mov  r3,0FFh                           ;\
B824 7A AE       mov  r2,gui_null_Version/100h          ; gui_null_Version
B826 79 2C       mov  r1,gui_null_Version and 0ffh      ;/
B828 7E 00       mov  r6,00h  ;\len 5
B82A 7F 05       mov  r7,05h  ;/
B82C 12 49 C1    call anymem_generic_memcopy
B82F 90 00 8E    mov  dptr,xram_tmp__8Eh        ;\
B832 E0          movx a,[dptr]                  ; menu enabled
B833 44 02       or   a,02h                     ;
B835 F0          movx [dptr],a                  ;/
B836 7B 01       mov  r3,01h           ;area    ;\
B838 7A 00       mov  r2,xram_tmp__8Eh/100h     ;
B83A 79 8E       mov  r1,xram_tmp__8Eh and 0ffh ;/
B83C 22          ret
                ;------------------
;:------------- ;:----------------- FLASH code (set wprot off)
                ;------------------
                .if flash_version<ver11sep2017
                flash_set_wprot_to_unprotected:  ;UNPROTECT ALL BLOCKS
                 ;same as "flash_set_wprot_to_bugged_protected"
                 ;(except, different FDD1h=IO_SPI_wprot_stat_write value)
B83D 12 BE CE    call general_flash_wait                ;-wait
B840 90 FD DD    mov  dptr,IO_SPI_ready_flags           ;\
B843 E4          clr  a                                 ; [FDDDh]=00h
B844 F0          movx [dptr],a                          ;/
B845 A3          inc  dptr ;=IO_SPI_kick_stop_reset     ;\
B846 74 80       mov  a,80h                             ; [FDDEh]=80h
B848 F0          movx [dptr],a                          ;/
B849 90 FD D1    mov  dptr,IO_SPI_wprot_stat_write      ;\
B84C E4          clr  a                                 ; [FDD1h]=00h (wprot=none)
B84D F0          movx [dptr],a                          ;/
B84E 90 FD D0    mov  dptr,IO_SPI_transfer_mode         ;\
B851 74 04       mov  a,04h                             ; FlashCmd04h
B853 F0          movx [dptr],a                          ;/
                @@wait_lop:                             ;\
B854 90 FD DD    mov  dptr,IO_SPI_ready_flags           ; wait
B857 E0          movx a,[dptr]                          ;
B858 60 FA       jz   a,@@wait_lop                      ;/
B85A 02 BE CE    jmp  general_flash_wait                ;-wait
                .endif
                ;------------------
;:------------- ;:----------------- GUI code (stuff and keyboard event)
                ;------------------
                gui_proc_Brightness_change:
B85D BF 0D 0C    jne  r7,ID_func_0Dh_plus,@@not_increase        ;\
B860 90 00 12    mov  dptr,xram_sett_brightness                 ;
B863 E0          movx a,[dptr]                                  ;
B864 C3          clr  c                                         ;
B865 94 64       sbc  a,64h                                     ;
B867 50 03       jnc  @@not_increase  ;reject/max               ;
B869 E0          movx a,[dptr]                                  ;
B86A 04          inc  a               ;increase                 ;
B86B F0          movx [dptr],a                                  ;
                @@not_increase:                                 ;/
B86C BF 0E 0C    jne  r7,ID_func_0Eh_minus,@@not_decrease       ;\
B86F 90 00 12    mov  dptr,xram_sett_brightness                 ;
B872 E0          movx a,[dptr]                                  ;
B873 D3          set  c                                         ;
B874 94 00       sbc  a,00h                                     ;
B876 40 03       jc   @@not_decrease  ;reject/min               ;
B878 E0          movx a,[dptr]                                  ;
B879 14          dec  a               ;decrease                 ;
B87A F0          movx [dptr],a                                  ;
                @@not_decrease:                                 ;/
B87B D3          set  c
B87C 22          ret
                ;------------------
                gui_proc_Contrast_change:
B87D BF 0D 0C    jne  r7,ID_func_0Dh_plus,@@not_increase        ;\
B880 90 00 13    mov  dptr,xram_sett_contrast                   ;
B883 E0          movx a,[dptr]                                  ;
B884 C3          clr  c                                         ;
B885 94 64       sbc  a,64h                                     ;
B887 50 03       jnc  @@not_increase  ;reject/max               ;
B889 E0          movx a,[dptr]                                  ;
B88A 04          inc  a               ;increase                 ;
B88B F0          movx [dptr],a                                  ;
                @@not_increase:                                 ;/
B88C BF 0E 0C    jne  r7,ID_func_0Eh_minus,@@not_decrease       ;\
B88F 90 00 13    mov  dptr,xram_sett_contrast                   ;
B892 E0          movx a,[dptr]                                  ;
B893 D3          set  c                                         ;
B894 94 00       sbc  a,00h                                     ;
B896 40 03       jc   @@not_decrease  ;reject/min               ;
B898 E0          movx a,[dptr]                                  ;
B899 14          dec  a               ;decrease                 ;
B89A F0          movx [dptr],a                                  ;
                @@not_decrease:                                 ;/
B89B D3          set  c
B89C 22          ret
                ;------------------
                gui_proc_Saturation_change:
B89D BF 0D 0C    jne  r7,ID_func_0Dh_plus,@@not_increase        ;\
B8A0 90 00 14    mov  dptr,xram_sett_saturation                 ;
B8A3 E0          movx a,[dptr]                                  ;
B8A4 C3          clr  c                                         ;
B8A5 94 64       sbc  a,64h                                     ;
B8A7 50 03       jnc  @@not_increase  ;reject/max               ;
B8A9 E0          movx a,[dptr]                                  ;
B8AA 04          inc  a               ;increase                 ;
B8AB F0          movx [dptr],a                                  ;
                @@not_increase:                                 ;/
B8AC BF 0E 0C    jne  r7,ID_func_0Eh_minus,@@not_decrease       ;\
B8AF 90 00 14    mov  dptr,xram_sett_saturation                 ;
B8B2 E0          movx a,[dptr]                                  ;
B8B3 D3          set  c                                         ;
B8B4 94 00       sbc  a,00h                                     ;
B8B6 40 03       jc   @@not_decrease  ;reject/min               ;
B8B8 E0          movx a,[dptr]                                  ;
B8B9 14          dec  a               ;decrease                 ;
B8BA F0          movx [dptr],a                                  ;
                @@not_decrease:                                 ;/
B8BB D3          set  c
B8BC 22          ret
                ;------------------
                gui_proc_Tint_change:
B8BD BF 0D 0C    jne  r7,ID_func_0Dh_plus,@@not_increase        ;\
B8C0 90 00 15    mov  dptr,xram_sett_tint                       ;
B8C3 E0          movx a,[dptr]                                  ;
B8C4 C3          clr  c                                         ;
B8C5 94 64       sbc  a,64h                                     ;
B8C7 50 03       jnc  @@not_increase  ;reject/max               ;
B8C9 E0          movx a,[dptr]                                  ;
B8CA 04          inc  a               ;increase                 ;
B8CB F0          movx [dptr],a                                  ;
                @@not_increase:                                 ;/
B8CC BF 0E 0C    jne  r7,ID_func_0Eh_minus,@@not_decrease       ;\
B8CF 90 00 15    mov  dptr,xram_sett_tint                       ;
B8D2 E0          movx a,[dptr]                                  ;
B8D3 D3          set  c                                         ;
B8D4 94 00       sbc  a,00h                                     ;
B8D6 40 03       jc   @@not_decrease  ;reject/min               ;
B8D8 E0          movx a,[dptr]                                  ;
B8D9 14          dec  a               ;decrease                 ;
B8DA F0          movx [dptr],a                                  ;
                @@not_decrease:                                 ;/
B8DB D3          set  c
B8DC 22          ret
                ;------------------
                handle_event_keyboard:  ;in: r7
B8DD E4          clr  a
B8DE FD          mov  r5,a
B8DF 12 80 1F    call xxx_801Fh     ;in: r7      ;ID_event_(keycode)
B8E2 AD 07       mov  r5,r7(0) ;ID_func_XXh_xxx
B8E4 ED          mov  a,r5     ;ID_func_XXh_xxx
B8E5 60 07       jz   a,@@cont
B8E7 E4          clr  a                                     ;\
B8E8 90 00 3C    mov  dptr,xram_save_settings_offhold_msb   ; reset save settings
B8EB F0          movx [dptr],a                              ; offhold upon keystroke
B8EC A3          inc  dptr ;=xram_save_settings_offhold_lsb ;
B8ED F0          movx [dptr],a                              ;/
                @@cont:
B8EE AF 05       mov  r7,r5(0) ;ID_func_XXh_xxx
B8F0 12 B4 93    call test_if_func_ID_is_00h
B8F3 50 02       jnc  @@this   ;--> ID was 00h, so accept that  ;\uh, either way
B8F5 E4          clr  a        ;--> ID was other, so force 00h  ;/make it 00h
B8F6 FD          mov  r5,a  ;=00h ;ID_func_00h_nul      ;<-- NOT EXIST
                @@this:
B8F7 AF 05       mov  r7,r5(0) ;ID_func_XXh_xxx   ;<-- always ID=00h here?!!
B8F9 02 AB 0C    jmp  xxx_AB0Ch
                ;------------------
                get_txt_keyboard_type:     ;in: r7=[xram_curr_keypadtype]
B8FC 75 F0 03    mov  b,03h
B8FF EF          mov  a,r7
B900 A4          mul  a,b
B901 24 DB       add  a,typekey_list and 0ffh
B903 F5 82       mov  dpl,a
B905 E5 F0       mov  a,b
B907 34 52       adc  a,typekey_list/100h
B909 F5 83       mov  dph,a
B90B E4          clr  a
B90C 93          movc a,[a+dptr]
B90D FB          mov  r3,a
B90E 74 01       mov  a,01h
B910 93          movc a,[a+dptr]
B911 FA          mov  r2,a
B912 74 02       mov  a,02h
B914 93          movc a,[a+dptr]
B915 F9          mov  r1,a
                ;below done with index 0 ;idxKeypad_txt (TEXT, ie. KEYPAD NAME)
B916 12 4C EC    call anymem_read_24bit_r3r2r1_from_mem_r3r2r1
B919 22          ret
                ;------------------
                get_localized_txt_mode:
B91A 90 00 1A    mov  dptr,xram_sett_language
B91D E0          movx a,[dptr]
B91E 75 F0 03    mov  b,03h
B921 A4          mul  a,b
B922 24 7F       add  a,localized_txtlist_mode and 0ffh
B924 F5 82       mov  dpl,a
B926 E5 F0       mov  a,b
B928 34 92       adc  a,localized_txtlist_mode/100h
B92A F5 83       mov  dph,a
B92C E4          clr  a
B92D 93          movc a,[a+dptr]
B92E FB          mov  r3,a
B92F 74 01       mov  a,01h
B931 93          movc a,[a+dptr]
B932 FA          mov  r2,a
B933 74 02       mov  a,02h
B935 93          movc a,[a+dptr]
B936 F9          mov  r1,a
B937 22          ret
                ;------------------
                get_localized_txt_rotate:
B938 90 00 1A    mov  dptr,xram_sett_language
B93B E0          movx a,[dptr]
B93C 75 F0 03    mov  b,03h
B93F A4          mul  a,b
B940 24 02       add  a,localized_txtlist_rotate and 0ffh
B942 F5 82       mov  dpl,a
B944 E5 F0       mov  a,b
B946 34 9A       adc  a,localized_txtlist_rotate/100h
B948 F5 83       mov  dph,a
B94A E4          clr  a
B94B 93          movc a,[a+dptr]
B94C FB          mov  r3,a
B94D 74 01       mov  a,01h
B94F 93          movc a,[a+dptr]
B950 FA          mov  r2,a
B951 74 02       mov  a,02h
B953 93          movc a,[a+dptr]
B954 F9          mov  r1,a
B955 22          ret
                ;------------------
;:------------- ;:----------------- code (init part 3)
                ;------------------
                main_init_part_3:   ;select root & load settings
B956 12 9C 5C    call init_variables_and_select_Root_menu       ;-
B959 12 BF 9C    call detect_flash_chiptype                     ;-
B95C 12 A3 09    call init_load_settings                ;\
B95F 50 09       jnc  @@load_failed                     ;/
B961 90 00 2D    mov  dptr,xram_sett___2Dh              ;\
B964 E0          movx a,[dptr]                          ; copy !!!
B965 90 00 0C    mov  dptr,xram_sett_input              ;
B968 F0          movx [dptr],a                          ;/
B969 22          ret
                ;---
                @@load_failed:
                ;blah, below should contain "reset" state upon load fail anyways
B96A 90 00 0C    mov  dptr,xram_sett_input              ;\
B96D E0          movx a,[dptr]                          ; copy other way !!!
B96E 90 00 2D    mov  dptr,xram_sett___2Dh              ;
B971 F0          movx [dptr],a                          ;/
B972 22          ret
                ;------------------
;:------------- ;:----------------- GUI code (stuff and keyboard)
                ;------------------
                get_localized_txt_brightness:
B973 90 00 1A    mov  dptr,xram_sett_language
B976 E0          movx a,[dptr]
B977 75 F0 03    mov  b,03h
B97A A4          mul  a,b
B97B 24 35       add  a,localized_txtlist_brightness and 0ffh
B97D F5 82       mov  dpl,a
B97F E4          clr  a
B980 34 82       adc  a,localized_txtlist_brightness/100h
B982 F5 83       mov  dph,a
B984 E4          clr  a
B985 93          movc a,[a+dptr]
B986 FB          mov  r3,a
B987 74 01       mov  a,01h
B989 93          movc a,[a+dptr]
B98A FA          mov  r2,a
B98B 74 02       mov  a,02h
B98D 93          movc a,[a+dptr]
B98E F9          mov  r1,a
B98F 22          ret
                ;------------------
                get_localized_txt_contrast:
B990 90 00 1A    mov  dptr,xram_sett_language
B993 E0          movx a,[dptr]
B994 75 F0 03    mov  b,03h
B997 A4          mul  a,b
B998 24 01       add  a,localized_txtlist_contrast and 0ffh
B99A F5 82       mov  dpl,a
B99C E4          clr  a
B99D 34 8A       adc  a,localized_txtlist_contrast/100h
B99F F5 83       mov  dph,a
B9A1 E4          clr  a
B9A2 93          movc a,[a+dptr]
B9A3 FB          mov  r3,a
B9A4 74 01       mov  a,01h
B9A6 93          movc a,[a+dptr]
B9A7 FA          mov  r2,a
B9A8 74 02       mov  a,02h
B9AA 93          movc a,[a+dptr]
B9AB F9          mov  r1,a
B9AC 22          ret
                ;------------------
                get_localized_txt_ir:
B9AD 90 00 1A    mov  dptr,xram_sett_language
B9B0 E0          movx a,[dptr]
B9B1 75 F0 03    mov  b,03h
B9B4 A4          mul  a,b
B9B5 24 75       add  a,localized_txtlist_ir and 0ffh
B9B7 F5 82       mov  dpl,a
B9B9 E4          clr  a
B9BA 34 A1       adc  a,localized_txtlist_ir/100h
B9BC F5 83       mov  dph,a
B9BE E4          clr  a
B9BF 93          movc a,[a+dptr]
B9C0 FB          mov  r3,a
B9C1 74 01       mov  a,01h
B9C3 93          movc a,[a+dptr]
B9C4 FA          mov  r2,a
B9C5 74 02       mov  a,02h
B9C7 93          movc a,[a+dptr]
B9C8 F9          mov  r1,a
B9C9 22          ret
                ;------------------
                get_localized_txt_mode_dupe:
B9CA 90 00 1A    mov  dptr,xram_sett_language
B9CD E0          movx a,[dptr]
B9CE 75 F0 03    mov  b,03h
B9D1 A4          mul  a,b
B9D2 24 7F       add  a,localized_txtlist_mode and 0ffh
B9D4 F5 82       mov  dpl,a
B9D6 E4          clr  a
B9D7 34 92       adc  a,localized_txtlist_mode/100h
B9D9 F5 83       mov  dph,a
B9DB E4          clr  a
B9DC 93          movc a,[a+dptr]
B9DD FB          mov  r3,a
B9DE 74 01       mov  a,01h
B9E0 93          movc a,[a+dptr]
B9E1 FA          mov  r2,a
B9E2 74 02       mov  a,02h
B9E4 93          movc a,[a+dptr]
B9E5 F9          mov  r1,a
B9E6 22          ret
                ;------------------
                get_localized_txt_no_signal:
B9E7 90 00 1A    mov  dptr,xram_sett_language
B9EA E0          movx a,[dptr]
B9EB 75 F0 03    mov  b,03h
B9EE A4          mul  a,b
B9EF 24 8A       add  a,localized_txtlist_no_signal and 0ffh
B9F1 F5 82       mov  dpl,a
B9F3 E4          clr  a
B9F4 34 9D       adc  a,localized_txtlist_no_signal/100h
B9F6 F5 83       mov  dph,a
B9F8 E4          clr  a
B9F9 93          movc a,[a+dptr]
B9FA FB          mov  r3,a
B9FB 74 01       mov  a,01h
B9FD 93          movc a,[a+dptr]
B9FE FA          mov  r2,a
B9FF 74 02       mov  a,02h
BA01 93          movc a,[a+dptr]
BA02 F9          mov  r1,a
BA03 22          ret
                ;------------------
                get_localized_txt_reset:
BA04 90 00 1A    mov  dptr,xram_sett_language
BA07 E0          movx a,[dptr]
BA08 75 F0 03    mov  b,03h
BA0B A4          mul  a,b
BA0C 24 98       add  a,localized_txtlist_reset and 0ffh
BA0E F5 82       mov  dpl,a
BA10 E4          clr  a
BA11 34 9B       adc  a,localized_txtlist_reset/100h
BA13 F5 83       mov  dph,a
BA15 E4          clr  a
BA16 93          movc a,[a+dptr]
BA17 FB          mov  r3,a
BA18 74 01       mov  a,01h
BA1A 93          movc a,[a+dptr]
BA1B FA          mov  r2,a
BA1C 74 02       mov  a,02h
BA1E 93          movc a,[a+dptr]
BA1F F9          mov  r1,a
BA20 22          ret
                ;------------------
                get_localized_txt_saturation:
BA21 90 00 1A    mov  dptr,xram_sett_language
BA24 E0          movx a,[dptr]
BA25 75 F0 03    mov  b,03h
BA28 A4          mul  a,b
BA29 24 A1       add  a,localized_txtlist_saturation and 0ffh
BA2B F5 82       mov  dpl,a
BA2D E4          clr  a
BA2E 34 84       adc  a,localized_txtlist_saturation/100h
BA30 F5 83       mov  dph,a
BA32 E4          clr  a
BA33 93          movc a,[a+dptr]
BA34 FB          mov  r3,a
BA35 74 01       mov  a,01h
BA37 93          movc a,[a+dptr]
BA38 FA          mov  r2,a
BA39 74 02       mov  a,02h
BA3B 93          movc a,[a+dptr]
BA3C F9          mov  r1,a
BA3D 22          ret
                ;------------------
                get_localized_txt_tint:
BA3E 90 00 1A    mov  dptr,xram_sett_language
BA41 E0          movx a,[dptr]
BA42 75 F0 03    mov  b,03h
BA45 A4          mul  a,b
BA46 24 98       add  a,localized_txtlist_tint and 0ffh
BA48 F5 82       mov  dpl,a
BA4A E4          clr  a
BA4B 34 95       adc  a,localized_txtlist_tint/100h
BA4D F5 83       mov  dph,a
BA4F E4          clr  a
BA50 93          movc a,[a+dptr]
BA51 FB          mov  r3,a
BA52 74 01       mov  a,01h
BA54 93          movc a,[a+dptr]
BA55 FA          mov  r2,a
BA56 74 02       mov  a,02h
BA58 93          movc a,[a+dptr]
BA59 F9          mov  r1,a
BA5A 22          ret
                ;------------------
                get_localized_txt_rotate_dupe:
BA5B 90 00 1A    mov  dptr,xram_sett_language
BA5E E0          movx a,[dptr]
BA5F 75 F0 03    mov  b,03h
BA62 A4          mul  a,b
BA63 24 02       add  a,localized_txtlist_rotate and 0ffh
BA65 F5 82       mov  dpl,a
BA67 E4          clr  a
BA68 34 9A       adc  a,localized_txtlist_rotate/100h
BA6A F5 83       mov  dph,a
BA6C E4          clr  a
BA6D 93          movc a,[a+dptr]
BA6E FB          mov  r3,a
BA6F 74 01       mov  a,01h
BA71 93          movc a,[a+dptr]
BA72 FA          mov  r2,a
BA73 74 02       mov  a,02h
BA75 93          movc a,[a+dptr]
BA76 F9          mov  r1,a
BA77 22          ret
                ;------------------
                get_localized_txt_input:
BA78 90 00 1A    mov  dptr,xram_sett_language
BA7B E0          movx a,[dptr]
BA7C 75 F0 03    mov  b,03h
BA7F A4          mul  a,b
BA80 24 E0       add  a,localized_txtlist_input and 0ffh
BA82 F5 82       mov  dpl,a
BA84 E4          clr  a
BA85 34 A1       adc  a,localized_txtlist_input/100h
BA87 F5 83       mov  dph,a
BA89 E4          clr  a
BA8A 93          movc a,[a+dptr]
BA8B FB          mov  r3,a
BA8C 74 01       mov  a,01h
BA8E 93          movc a,[a+dptr]
BA8F FA          mov  r2,a
BA90 74 02       mov  a,02h
BA92 93          movc a,[a+dptr]
BA93 F9          mov  r1,a
BA94 22          ret
                ;------------------
                enter_secret_fMenuSource:
BA95 90 00 46    mov  dptr,xram_keypad_flags_msb
BA98 E0          movx a,[dptr]
BA99 FE          mov  r6,a
BA9A A3          inc  dptr ;=xram_keypad_flags_lsb
BA9B E0          movx a,[dptr]
BA9C 78 03       mov  r0,03h  ;shift amount     ;\
                @@shift_lop:                    ;
BA9E CE          xchg a,r6                      ;
BA9F C3          clr  c                         ;
BAA0 13          rcr  a                         ;
BAA1 CE          xchg a,r6                      ;
BAA2 13          rcr  a                         ;
BAA3 D8 F9       djnz r0,@@shift_lop            ;/
BAA5 30 E0 07    jz   a.0,@@exit
                ;- - -
BAA8 7D 01       mov  r5,01h ;txt.scale (1=normal)      ;\
BAAA 7F 12       mov  r7,MenuID_12h_fMenuSource         ;
BAAC 12 A6 02    call do_select_menu_r7_and_scale_r5    ;/
                @@exit:
BAAF 22          ret
                ;------------------
                keyboard_xlat_list:  ;(eg. 02h --> 07h)
                       ;                        (-) (+) (MENU)
                       ;... keynumbers          02h,03h,04h
                       ;... translated to       07h,08h,09h
                       ;(which are then further translated
                       ;to func_XXh numbers via quad's,
                       ;... key_quad_Brightness 0Eh 0Dh 04h

BAB0 07 02       db   07h,02h   ;(button -)
BAB2 08 03       db   08h,03h   ;(button +)
BAB4 0E 01       db   0Eh,01h   ;(POWER)
BAB6 09 04       db   09h,04h   ;(MENU)
BAB8 0D 05       db   0Dh,05h   ;(SOURCE)
BABA 0A 06       db   0Ah,06h   ;(MODE)
BABC 0B 07       db   0Bh,07h   ;(ROTATE)
BABE 03 09       db   03h,09h   ;???  ;\not used in quad's, and also
BAC0 02 08       db   02h,08h   ;???  ;/not used in typekey_NNh_subinfo's
                ;------------------
                secret_key_combo_data_MenuDUUDD:
                ;(to be used in Brightness menu) (aka: 09h=ENTER BRIGHTNESS, and then enter the +/- codes in there)
                ;--- MENU  -   +   +   -   -
BAC2 09 07 08..  db   09h,07h,08h,08h,07h,07h
                ;------------------
                xxx_BAC8h:    ;initial variables for some function
BAC8 00          db   00h
BAC9 08          db   08h
                ;------------------
                xxx_BACAh:                      ;... keypad related
BACA 8B 2A       mov  [iram_tmp__2Ah],r3  ;\
BACC 8A 2B       mov  [iram_tmp__2Bh],r2  ;
BACE 89 2C       mov  [iram_tmp__2Ch],r1  ;/
BAD0 8B 30       mov  [iram_tmp__30h],r3  ;\
BAD2 8A 31       mov  [iram_tmp__31h],r2  ;
BAD4 89 32       mov  [iram_tmp__32h],r1  ;/
BAD6 7B 01       mov  r3,01h                            ;\
BAD8 7A 00       mov  r2,xram_keybuf_7byte_A/100h       ; xram addr
BADA 79 70       mov  r1,xram_keybuf_7byte_A and 0ffh   ;/
BADC 12 05 A0    call xxx_05A0h           ;-------->
BADF 92 08       mov  [iram_misc_flags].miscflg_0,c   ;<-- cy
BAE1 A2 08       mov  c,[iram_misc_flags].miscflg_0   ;--> cy
BAE3 22          ret
                ;------------------
                gui_proc_ModeMenu_change:
BAE4 EF          mov  a,r7
BAE5 64 0D       xor  a,ID_func_0Dh_plus
BAE7 60 03       jz   a,@@do_change
BAE9 BF 0E 0F    jne  r7,ID_func_0Eh_minus,@@do_not_change
                @@do_change:
BAEC 90 00 25    mov  dptr,xram_sett_mode
BAEF E0          movx a,[dptr]
BAF0 70 04       jnz  a,@@clear
BAF2 04          inc  a         ;=01h
BAF3 F0          movx [dptr],a
BAF4 80 05       sjmp @@this
                @@clear:
BAF6 E4          clr  a         ;=00h
BAF7 90 00 25    mov  dptr,xram_sett_mode
BAFA F0          movx [dptr],a
                @@this:
                @@do_not_change:
BAFB D3          set  c
BAFC 22          ret
                ;------------------
;:------------- ;:----------------- code
                ;------------------
                switch_lcd_screen_off:
BAFD 90 FD 11    mov  dptr,IO_PLL_11h_used              ;\
BB00 E0          movx a,[dptr]                          ;
BB01 54 1F       and  a,1Fh                             ;
BB03 F0          movx [dptr],a                          ;/
BB04 A3          inc  dptr ;=IO_PLL_12h_used            ;\
BB05 E0          movx a,[dptr]                          ;
BB06 54 38       and  a,38h                             ;
BB08 F0          movx [dptr],a                          ;/
BB09 A3          inc  dptr ;=IO_PLL_13h_used            ;\
BB0A E0          movx a,[dptr]  ;blah/overwritten       ;
BB0B E4          clr  a         ;set to 00h             ;
BB0C F0          movx [dptr],a                          ;/
BB0D 90 FE D7    mov  dptr,IO_AV_video_on_off           ;\
BB10 E0          movx a,[dptr]                          ;
BB11 54 FC       and  a,0FCh                            ;
BB13 F0          movx [dptr],a                          ;/
BB14 22          ret
                ;------------------
                init_lcd_pins_and_force_display_off:
BB15 12 A4 90    call output_initial_data_from_extra_fixed_io_list      ;-PIN's
BB18 7F 06       mov  r7,06h  ;<--fixed (instead sett)  ;\force black
BB1A 12 A7 F7    call xlat_r7_to_forced_blank_color     ;/
BB1D 7F 00       mov  r7,00h                            ;\PWM0 off (backlight)
BB1F 12 B3 35    call pwm_switch_pwm0_on_port35         ;/
BB22 90 00 46    mov  dptr,xram_keypad_flags_msb        ;\
BB25 E0          movx a,[dptr]  ;blah                   ;
BB26 F0          movx [dptr],a  ;blah, no bit changed   ; clear bit0
BB27 A3          inc  dptr ;=xram_keypad_flags_lsb      ; mark display OFF
BB28 E0          movx a,[dptr]                          ;
BB29 54 FE       and  a,0FEh    ;clear bit0             ;
BB2B F0          movx [dptr],a                          ;/
BB2C 22          ret
                ;------------------
                set_baudrate_57600bps:   ;init 80C52-style Timer2 for baudrate
BB2D C2 CA       clr  [SFR_IO_baudrate_control].2
BB2F 7F 00       mov  r7,00h    ;\
BB31 7E E1       mov  r6,0E1h   ; 0000E100h (57600 baud)
BB33 7D 00       mov  r5,00h    ;
BB35 7C 00       mov  r4,00h    ;/
BB37 12 9F A1    call set_baudrate_r4r5r6r7
BB3A D2 CA       set  [SFR_IO_baudrate_control].2
BB3C D2 AD       set  es1         ;XXXsfr  ;iec.5  ;TMR2 irq enable?  (1=On) (uh, but IRQ vector 002Bh doesn't exist?!)
BB3E C2 99       clr  ti          ;XXXsfr  ;scon.1 ;UART Tx IRQ flag  (0=ack)
BB40 C2 98       clr  ri          ;XXXsfr  ;scon.0 ;UART Rx IRQ flag  (0=ack)
BB42 C2 AC       clr  es0         ;XXXsfr  ;iec.4  ;UART irq enable   (0=Off)
BB44 22          ret
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_flash_write_disable
                .endif
                ;------------------
                slow_delay_r6r7:
BB5D AB 07       mov  r3,r7(0)  ;lsb
BB5F AA 06       mov  r2,r6(0)  ;msb
                @@lop:
BB61 EB          mov  a,r3      ;old.lsb
BB62 1B          dec  r3        ;lsb
BB63 AE 02       mov  r6,r2(0)  ;old.msb
BB65 70 01       jnz  a,@@keep_msb
BB67 1A          dec  r2        ;msb
                @@keep_msb:
BB68 4E          or   a,r6      ;old.lsb OR old.msb
BB69 60 09       jz   a,@@done
BB6B 7F 90       mov  r7,90h  ;\0190h (400 decimal)     ;\
BB6D 7E 01       mov  r6,01h  ;/                        ;
BB6F 12 BD 80    call fast_delay_r6r7                   ;/
BB72 80 ED       sjmp @@lop
                ;---
                @@done:
BB74 22          ret
                ;------------------
                lcd_apply_input_ratio_etc_and_switch_screen_on:
BB75 12 BF 26    call osd_disable_all_windows_and_whatever      ;-
BB78 12 AD 39    call switch_lcd_screen_on                      ;-LCD ON
BB7B 90 00 0C    mov  dptr,xram_sett_input                      ;\
BB7E E0          movx a,[dptr]                                  ;
BB7F FF          mov  r7,a                                      ;
BB80 12 AE 7A    call lcd_apply_input_and_ratio_and_detect_video;/
BB83 7F C8       mov  r7,0C8h  ;200 decimal                     ;\
BB85 7E 00       mov  r6,00h                                    ; delay 200
BB87 12 BB 5D    lcall slow_delay_r6r7                          ;/
BB8A 02 A0 F5    jmp  switch_screen_and_backlight_on            ;-
                ;------------------
                gui_proc_SysMenuXflip_change:
BB8D EF          mov  a,r7
BB8E 64 0D       xor  a,ID_func_0Dh_plus
BB90 60 03       jz   a,@@do_change
BB92 BF 0E 0E    jne  r7,ID_func_0Eh_minus,@@do_not_change
                @@do_change:
BB95 90 00 26    mov  dptr,xram_sett_rotate
BB98 E0          movx a,[dptr]
BB99 04          inc  a         ;increase
BB9A F0          movx [dptr],a
BB9B E0          movx a,[dptr]
BB9C C3          clr  c
BB9D 94 04       sbc  a,04h
BB9F 40 02       jc   @@this
BBA1 E4          clr  a         ;wrap
BBA2 F0          movx [dptr],a
                @@this:
                @@do_not_change:
BBA3 D3          set  c
BBA4 22          ret
                ;------------------
                slow_weird_delay_r6r7:  ;similar as "slow_delay_r6r7"
BBA5 AB 07       mov  r3,r7(0)  ;lsb
BBA7 AA 06       mov  r2,r6(0)  ;msb
                @@lop:
BBA9 EB          mov  a,r3      ;old.lsb
BBAA 1B          dec  r3        ;lsb
BBAB AE 02       mov  r6,r2(0)  ;old.msb
BBAD 70 01       jnz  a,@@keep_msb
BBAF 1A          dec  r2        ;msb
                @@keep_msb:
BBB0 4E          or   a,r6      ;old.lsb OR old.msb
BBB1 60 09       jz   a,@@done
BBB3 7F 90       mov  r7,90h  ;\0190h (400 decimal)     ;\
BBB5 7E 01       mov  r6,01h  ;/                        ;
BBB7 12 BD AA    call fast_weird_delay_r6r7             ;/
BBBA 80 ED       sjmp @@lop
                ;---
                @@done:
BBBC 22          ret
                ;------------------
                handle_event_close_or_save:  ;CloseMenu or SaveSettings
BBBD 8F 26       mov  [iram_tmp__26h],r7                        ;-
BBBF E5 26       mov  a,[iram_tmp__26h]                         ;\
BBC1 B4 13 05    jne  a,ID_event_13h_close_menu,@@_BBC9h        ;
BBC4 7F 0B       mov  r7,ID_func_0Bh_xxx_NoSignal               ; ...Root & Save Settings
BBC6 12 AB 0C    call xxx_AB0Ch                                 ;
                @@_BBC9h:                                       ;/
BBC9 E5 26       mov  a,[iram_tmp__26h]                         ;\
BBCB B4 14 05    jne  a,ID_event_14h_save_settings,@@_BBD3h     ;
BBCE 7F 0C       mov  r7,ID_func_0Ch_save_settings              ;
BBD0 12 AB 0C    call xxx_AB0Ch                                 ;
                @@_BBD3h:                                       ;/
BBD3 22          ret
                ;------------------
                get_settings_input_cropped_1:
BBD4 90 00 0C    mov  dptr,xram_sett_input
BBD7 E0          movx a,[dptr]
BBD8 14          dec  a
BBD9 60 07       jz   a,@@return_1   ;(when 1)
BBDB 14          dec  a
BBDC 60 04       jz   a,@@return_1   ;(when 2)
BBDE 24 02       add  a,02h    ;blah
BBE0 80 05       sjmp @@return_0     ;(when 0 or other)
                ;---
                @@return_1:
BBE2 7E 00       mov  r6,00h
BBE4 7F 01       mov  r7,01h
BBE6 22          ret
                ;---
                @@return_0:
BBE7 E4          clr  a
BBE8 FE          mov  r6,a
BBE9 FF          mov  r7,a
BBEA 22          ret
                ;------------------
                get_settings_input_cropped_2:
BBEB 90 00 0C    mov  dptr,xram_sett_input
BBEE E0          movx a,[dptr]
BBEF 14          dec  a
BBF0 60 07       jz   a,@@return_1   ;(when 1)
BBF2 14          dec  a
BBF3 60 04       jz   a,@@return_1   ;(when 2)
BBF5 24 02       add  a,02h    ;blah
BBF7 80 05       sjmp @@return_0     ;(when 0 or other)
                ;---
                @@return_1:       ;AV2
BBF9 7E 00       mov  r6,00h
BBFB 7F 01       mov  r7,01h
BBFD 22          ret
                ;---
                @@return_0:       ;AV1
BBFE E4          clr  a
BBFF FE          mov  r6,a
BC00 FF          mov  r7,a
BC01 22          ret
                ;------------------
                get_absolute_difference_r4r5_r6r7:
                ;(unused)
BC02 C3          clr  c         ;\
BC03 EF          mov  a,r7      ;
BC04 9D          sbc  a,r5      ; compare r6r7-r4r5
BC05 EE          mov  a,r6      ;
BC06 9C          sbc  a,r4      ;/
BC07 40 07       jc   @@r6r7_is_smaller
BC09 EF          mov  a,r7      ;\
BC0A 9D          sbc  a,r5      ;
BC0B FF          mov  r7,a      ; subtract r6r7=r6r7-r4r5
BC0C EE          mov  a,r6      ;
BC0D 9C          sbc  a,r4      ;
BC0E FE          mov  r6,a      ;/
BC0F 22          ret
                ;---
                @@r6r7_is_smaller:
BC10 C3          clr  c         ;\
BC11 ED          mov  a,r5      ;
BC12 9F          sbc  a,r7      ;
BC13 FF          mov  r7,a      ; subtract r6r7=r4r5-r6r7
BC14 EC          mov  a,r4      ;
BC15 9E          sbc  a,r6      ;
BC16 FE          mov  r6,a      ;/
BC17 22          ret
                ;------------------
                main_init:
BC18 12 BE 46    call main_init_part_1          ;-init ...
BC1B 12 00 5E    call main_init_part_2          ;-init timers
BC1E 12 B9 56    lcall main_init_part_3         ;-select root & load settings
BC21 12 7E 74    call main_init_part_4          ;-init VARIOUS stuff
BC24 12 BF BD    call main_init_part_5          ;-display spi reset/init
BC27 12 BF DA    call dummy_ret5                ;-blah
BC2A D2 AF       set  ea         ;XXXsfr
BC2C 22          ret
                ;------------------
                osd_disable_window_r7:    ;in: r7=window (0..4)
                 ;(also works as general clear FB05h bit, in: r7=bitno(0..7))
BC2D 90 FB 05    mov  dptr,IO_OSD_window_enable_bits
BC30 E0          movx a,[dptr]
BC31 FE          mov  r6,a
BC32 74 01       mov  a,01h
BC34 A8 07       mov  r0,r7(0)     ;bit number
BC36 08          inc  r0
BC37 80 02       sjmp @@lop_injump
                ;---
                @@lop:
BC39 C3          clr  c
BC3A 33          rcl  a            ;"1 shl N"
                @@lop_injump:
BC3B D8 FC       djnz r0,@@lop
BC3D F4          cpl  a                 ;invert
BC3E 5E          and  a,r6              ;<-- CLEAR bit
BC3F F0          movx [dptr],a
BC40 22          ret
                ;------------------
                gui_proc_QuicklyMode_change:
BC41 BF 20 0F    jne  r7,ID_func_20h_QuicklyMode,@@do_not_change     ;hotkey
BC44 90 00 25    mov  dptr,xram_sett_mode
BC47 E0          movx a,[dptr]
BC48 70 04       jnz  a,@@clear
BC4A 04          inc  a         ;=01h
BC4B F0          movx [dptr],a
BC4C 80 05       sjmp @@this
                ;---
                @@clear:
BC4E E4          clr  a         ;=00h
BC4F 90 00 25    mov  dptr,xram_sett_mode
BC52 F0          movx [dptr],a
                @@this:
                @@do_not_change:
BC53 D3          set  c
BC54 22          ret
                ;------------------
                osd_enable_window_r7:     ;in: r7=window (0..4)
                 ;(also works as general set FB05h bit, in: r7=bitno(0..7))
BC55 90 FB 05    mov  dptr,IO_OSD_window_enable_bits
BC58 E0          movx a,[dptr]
BC59 FE          mov  r6,a
BC5A 74 01       mov  a,01h
BC5C A8 07       mov  r0,r7(0)     ;bit number
BC5E 08          inc  r0
BC5F 80 02       sjmp @@lop_injump
                ;---
                @@lop:
BC61 C3          clr  c
BC62 33          rcl  a            ;"1 shl N"
                @@lop_injump:
BC63 D8 FC       djnz r0,@@lop
BC65 4E          or   a,r6              ;<--- SET bit
BC66 F0          movx [dptr],a
BC67 22          ret
                ;------------------
                watchdog_enable:
BC68 75 BE 55    mov  [SFR_IO_watchdog_unlock],55h              ;-unlock
BC6B 75 B9 03    mov  [SFR_IO_watchdog_config1],03h             ;\
BC6E 75 BD 8F    mov  [SFR_IO_watchdog_config3],8Fh             ; init
BC71 75 BC FF    mov  [SFR_IO_watchdog_config2],0FFh            ;/
BC74 75 BA 01    mov  [SFR_IO_watchdog_enable],01h              ;-enable
BC77 75 BE AA    mov  [SFR_IO_watchdog_unlock],0AAh             ;-lock
BC7A 22          ret
                ;------------------
;:------------- ;:----------------- CRAP code (gui, delay, osd)
                ;------------------
                reverse_language_re_order:   ;undoes re-ordering
BC7B E4          clr  a
BC7C FE          mov  r6,a         ;index
                @@lop:      ;search re-ordered value---
BC7D EE          mov  a,r6         ;index               ;\
BC7E 90 70 DB    mov  dptr,language_re_order_list       ; xlat
BC81 93          movc a,[a+dptr]                        ;/
BC82 6F          xor  a,r7
BC83 60 04       jz   a,@@found       ;-----> found
BC85 0E          inc  r6           ;index
BC86 BE 0F F4    jne  r6,0Fh,@@lop
                @@found:
BC89 AF 06       mov  r7,r6(0)     ;index
BC8B 22          ret
                ;------------------
                gui_proc_QuicklySysRotate_change:
BC8C BF 11 0C    jne  r7,ID_func_11h_QuicklyRotate,@@do_not_change    ;hotkey
BC8F 90 00 26    mov  dptr,xram_sett_rotate
BC92 E0          movx a,[dptr]
BC93 04          inc  a            ;increase
BC94 F0          movx [dptr],a
BC95 E0          movx a,[dptr]
BC96 B4 04 02    jne  a,04h,@@this
BC99 E4          clr  a            ;wrap
BC9A F0          movx [dptr],a
                @@this:
                @@do_not_change:
BC9B D3          set  c
BC9C 22          ret
                ;------------------
                select_menu_r7:        ;in: r7=MenuID
BC9D 12 AC F6    call xlat_MenuID_to_MenuIndex          ;-xlat
BCA0 90 00 B8    mov  dptr,xram_current_menu
BCA3 E0          movx a,[dptr]
BCA4 6F          xor  a,r7
BCA5 60 05       jz   a,@@already_same      ;---> already/same
                ;- - -
BCA7 EF          mov  a,r7
BCA8 F0          movx [dptr],a  ;apply [xram_current_menu]=nn
BCA9 E4          clr  a                                 ;\
BCAA A3          inc  dptr ;=xram_current_item          ;
BCAB F0          movx [dptr],a                          ;/
                @@already_same:
BCAC 22          ret
                ;------------------
                gui_proc_Reset_change:
BCAD EF          mov  a,r7
BCAE 64 0D       xor  a,ID_func_0Dh_plus                      ;<-- either this
BCB0 60 03       jz   a,@@do_change
BCB2 BF 0E 06    jne  r7,ID_func_0Eh_minus,@@do_not_change    ;<-- or this
                @@do_change:
BCB5 90 00 27    mov  dptr,xram_sett_req_reset          ;\
BCB8 74 02       mov  a,02h                             ; request SoftReset
BCBA F0          movx [dptr],a                          ;/
                @@do_not_change:
BCBB D3          set  c
BCBC 22          ret
                ;------------------
                osd_set_brightness:  ;in: r7 (always 07h) (0=black, 4=normal, 7=toomuch)
BCBD EF          mov  a,r7              ;07h  ;\
BCBE C4          swap a                 ;70h  ;
BCBF 33          rcl  a                 ;Exh  ; move to upper 3bit
BCC0 54 E0       and  a,0E0h            ;E0h  ;
BCC2 FF          mov  r7,a              ;E0h  ;/
BCC3 90 FB 0C    mov  dptr,IO_OSD_bright_transp_level
BCC6 E0          movx a,[dptr]
BCC7 54 1F       and  a,1Fh         ;old bits
BCC9 4F          or   a,r7          ;new bits
BCCA F0          movx [dptr],a
BCCB 22          ret
                ;------------------
                .if tech_version<ver11sep2017
                  get_txt_F:
BCCC 90 6A 06      mov  dptr,indirect_txt_F
BCCF E4            clr  a
BCD0 93            movc a,[a+dptr]
BCD1 FB            mov  r3,a
BCD2 74 01         mov  a,01h
BCD4 93            movc a,[a+dptr]
BCD5 FA            mov  r2,a
BCD6 74 02         mov  a,02h
BCD8 93            movc a,[a+dptr]
BCD9 F9            mov  r1,a
BCDA 22            ret
                .endif
                ;------------------
                get_txt_31xSPACE:
BCDB 90 6A 36    mov  dptr,indirect_txt_31xSPACE
BCDE E4          clr  a
BCDF 93          movc a,[a+dptr]
BCE0 FB          mov  r3,a
BCE1 74 01       mov  a,01h
BCE3 93          movc a,[a+dptr]
BCE4 FA          mov  r2,a
BCE5 74 02       mov  a,02h
BCE7 93          movc a,[a+dptr]
BCE8 F9          mov  r1,a
BCE9 22          ret
                ;------------------
                get_txt_CUSTOMER:
BCEA 90 6A 30    mov  dptr,indirect_txt_CUSTOMER
BCED E4          clr  a
BCEE 93          movc a,[a+dptr]
BCEF FB          mov  r3,a
BCF0 74 01       mov  a,01h
BCF2 93          movc a,[a+dptr]
BCF3 FA          mov  r2,a
BCF4 74 02       mov  a,02h
BCF6 93          movc a,[a+dptr]
BCF7 F9          mov  r1,a
BCF8 22          ret
                ;------------------
                get_txt_Time_DATE:
BCF9 90 6A 33    mov  dptr,indirect_txt_Time_DATE
BCFC E4          clr  a
BCFD 93          movc a,[a+dptr]
BCFE FB          mov  r3,a
BCFF 74 01       mov  a,01h
BD01 93          movc a,[a+dptr]
BD02 FA          mov  r2,a
BD03 74 02       mov  a,02h
BD05 93          movc a,[a+dptr]
BD06 F9          mov  r1,a
BD07 22          ret
                ;------------------
                get_txt_VCOM_AC:
BD08 90 6A 39    mov  dptr,indirect_txt_VCOM_AC
BD0B E4          clr  a
BD0C 93          movc a,[a+dptr]
BD0D FB          mov  r3,a
BD0E 74 01       mov  a,01h
BD10 93          movc a,[a+dptr]
BD11 FA          mov  r2,a
BD12 74 02       mov  a,02h
BD14 93          movc a,[a+dptr]
BD15 F9          mov  r1,a
BD16 22          ret
                ;------------------
                get_txt_VCOM_DC:
BD17 90 6A 47    mov  dptr,indirect_txt_VCOM_DC
BD1A E4          clr  a
BD1B 93          movc a,[a+dptr]
BD1C FB          mov  r3,a
BD1D 74 01       mov  a,01h
BD1F 93          movc a,[a+dptr]
BD20 FA          mov  r2,a
BD21 74 02       mov  a,02h
BD23 93          movc a,[a+dptr]
BD24 F9          mov  r1,a
BD25 22          ret
                ;------------------
                get_txt_POWER:
BD26 90 6A 55    mov  dptr,indirect_txt_POWER
BD29 E4          clr  a
BD2A 93          movc a,[a+dptr]
BD2B FB          mov  r3,a
BD2C 74 01       mov  a,01h
BD2E 93          movc a,[a+dptr]
BD2F FA          mov  r2,a
BD30 74 02       mov  a,02h
BD32 93          movc a,[a+dptr]
BD33 F9          mov  r1,a
BD34 22          ret
                ;------------------
                get_txt_KEY:
BD35 90 6A 66    mov  dptr,indirect_txt_KEY
BD38 E4          clr  a
BD39 93          movc a,[a+dptr]
BD3A FB          mov  r3,a
BD3B 74 01       mov  a,01h
BD3D 93          movc a,[a+dptr]
BD3E FA          mov  r2,a
BD3F 74 02       mov  a,02h
BD41 93          movc a,[a+dptr]
BD42 F9          mov  r1,a
BD43 22          ret
                ;------------------
                get_txt_NOSIGNAL:
BD44 90 6A 77    mov  dptr,indirect_txt_NOSIGNAL
BD47 E4          clr  a
BD48 93          movc a,[a+dptr]
BD49 FB          mov  r3,a
BD4A 74 01       mov  a,01h
BD4C 93          movc a,[a+dptr]
BD4D FA          mov  r2,a
BD4E 74 02       mov  a,02h
BD50 93          movc a,[a+dptr]
BD51 F9          mov  r1,a
BD52 22          ret
                ;------------------
                select_Root_menu:
BD53 7F 02       mov  r7,MenuID_02h_Root        ;\
BD55 12 BC 9D    lcall select_menu_r7           ;/
BD58 90 00 B8    mov  dptr,xram_current_menu    ;\
BD5B 74 02       mov  a,MenuID_02h_Root         ;
BD5D F0          movx [dptr],a                  ;/
                .if tech_version<ver11sep2017
BD5E 43 48 07      or   [iram_menu_flags],07h   ;-ORed
                .else
                   mov  [iram_menu_flags],07h   ;-MOVed
                .endif
BD61 22          ret
                ;------------------
                get_txt_VERSION:
BD62 90 AE 29    mov  dptr,indirect_txt_VERSION
BD65 E4          clr  a
BD66 93          movc a,[a+dptr]
BD67 FB          mov  r3,a
BD68 74 01       mov  a,01h
BD6A 93          movc a,[a+dptr]
BD6B FA          mov  r2,a
BD6C 74 02       mov  a,02h
BD6E 93          movc a,[a+dptr]
BD6F F9          mov  r1,a
BD70 22          ret
                ;------------------
                get_txt_volume_symbol:
BD71 90 AE B7    mov  dptr,indirect_txt_volume_symbol
BD74 E4          clr  a
BD75 93          movc a,[a+dptr]
BD76 FB          mov  r3,a
BD77 74 01       mov  a,01h
BD79 93          movc a,[a+dptr]
BD7A FA          mov  r2,a
BD7B 74 02       mov  a,02h
BD7D 93          movc a,[a+dptr]
BD7E F9          mov  r1,a
BD7F 22          ret
                ;------------------
                fast_delay_r6r7:  ;in: r6r7=0190h (400 decimal)
                ;param=400 decimal produces 888us delay
                ;(presumably intended to be 1ms)
                ;(BUG: matched to older 24MHz crystals, instead 27MHz)
                @@lop:
BD80 EF          mov  a,r7      ;old.lsb
BD81 1F          dec  r7        ;lsb
BD82 AC 06       mov  r4,r6(0)  ;old.msb
BD84 70 01       jnz  a,@@keep_msb
BD86 1E          dec  r6        ;msb
                @@keep_msb:
BD87 4C          or   a,r4      ;old.lsb OR old.msb
BD88 60 03       jz   a,@@done
BD8A 00          nop
BD8B 80 F3       sjmp @@lop
                ;---
                @@done:
BD8D 22          ret
                ;------------------
                gui_proc_Power_On_apply:
BD8E 12 AD 39    call switch_lcd_screen_on      ;-LCD ON
BD91 12 A8 EE    call xxx_A8EEh                 ;-
BD94 74 FF       mov  a,0FFh                    ;\
BD96 F5 1C       mov  [iram_ir_msb_device],a    ;
BD98 F5 1D       mov  [iram_ir_lsb_cmd],a       ;/
BD9A D3          set  c
BD9B 22          ret
                ;------------------
                get_settings_input:    ;aka SelSource (flag 0/1 ?)
BD9C 90 00 0C    mov  dptr,xram_sett_input
BD9F E0          movx a,[dptr]
BDA0 70 03       jnz  a,@@return_0001h
BDA2 FE          mov  r6,a   ;=0
BDA3 FF          mov  r7,a   ;=0
BDA4 22          ret
                ;---
                @@return_0001h:
BDA5 7E 00       mov  r6,00h
BDA7 7F 01       mov  r7,01h
BDA9 22          ret
                ;------------------
                fast_weird_delay_r6r7:  ;in: r6r7=0190h (400 decimal) (mul 12 = 4800 clks for 4.8MHz CPU?) (but CPU is 27MHz/4=6.75MHz?)
                @@lop:
BDAA EF          mov  a,r7      ;old.lsb              ;1
BDAB 1F          dec  r7        ;lsb                  ;1
BDAC AC 06       mov  r4,r6(0)  ;old.msb              ;2
BDAE 70 01       jnz  a,@@keep_msb                    ;2
BDB0 1E          dec  r6        ;msb                  ;-
                @@keep_msb:
BDB1 4C          or   a,r4      ;old.lsb OR old.msb   ;1
BDB2 60 03       jz   a,@@done                        ;2  ;?
BDB4 00          nop                                  ;1
BDB5 80 F3       sjmp @@lop                           ;2    ;total=12 clks ?
                ;---                                        ;total=12 op.bytes?
                @@done:
BDB7 22          ret
                ;------------------
                gui_proc_Brightness_clear:
BDB8 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BDBB 7B 01       mov  r3,01h
BDBD E4          clr  a
BDBE FD          mov  r5,a ;=00h
BDBF FF          mov  r7,a ;=00h
BDC0 12 8B 22    call osd_clear_window_text
BDC3 C3          clr  c
BDC4 22          ret
                ;---
                gui_proc_IR_A_B_clear:
BDC5 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BDC8 7B 01       mov  r3,01h
BDCA E4          clr  a
BDCB FD          mov  r5,a ;=00h
BDCC FF          mov  r7,a ;=00h
BDCD 12 8B 22    call osd_clear_window_text
BDD0 C3          clr  c
BDD1 22          ret
                ;---
                gui_proc_Language_clear:
BDD2 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BDD5 7B 01       mov  r3,01h
BDD7 E4          clr  a
BDD8 FD          mov  r5,a ;=00h
BDD9 FF          mov  r7,a ;=00h
BDDA 12 8B 22    call osd_clear_window_text
BDDD C3          clr  c
BDDE 22          ret
                ;---
                gui_proc_ModeMenu_clear:
BDDF 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BDE2 7B 01       mov  r3,01h
BDE4 E4          clr  a
BDE5 FD          mov  r5,a ;=00h
BDE6 FF          mov  r7,a ;=00h
BDE7 12 8B 22    call osd_clear_window_text
BDEA C3          clr  c
BDEB 22          ret
                ;---
                gui_proc_QuicklyMode_clear:
BDEC 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BDEF 7B 01       mov  r3,01h
BDF1 E4          clr  a
BDF2 FD          mov  r5,a ;=00h
BDF3 FF          mov  r7,a ;=00h
BDF4 12 8B 22    call osd_clear_window_text
BDF7 C3          clr  c
BDF8 22          ret
                ;---
                gui_proc_Reset_clear:
BDF9 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BDFC 7B 01       mov  r3,01h
BDFE E4          clr  a
BDFF FD          mov  r5,a ;=00h
BE00 FF          mov  r7,a ;=00h
BE01 12 8B 22    call osd_clear_window_text
BE04 C3          clr  c
BE05 22          ret
                ;---
                gui_proc_QuicklySysRotate_clear:
BE06 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BE09 7B 01       mov  r3,01h
BE0B E4          clr  a
BE0C FD          mov  r5,a ;=00h
BE0D FF          mov  r7,a ;=00h
BE0E 12 8B 22    call osd_clear_window_text
BE11 C3          clr  c
BE12 22          ret
                ;---
                gui_proc_SysMenuXflip_clear:
BE13 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BE16 7B 01       mov  r3,01h
BE18 E4          clr  a
BE19 FD          mov  r5,a ;=00h
BE1A FF          mov  r7,a ;=00h
BE1B 12 8B 22    call osd_clear_window_text
BE1E C3          clr  c
BE1F 22          ret
                ;---
                gui_proc_SelSource_clear:
BE20 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BE23 7B 01       mov  r3,01h
BE25 E4          clr  a
BE26 FD          mov  r5,a ;=00h
BE27 FF          mov  r7,a ;=00h
BE28 12 8B 22    call osd_clear_window_text
BE2B C3          clr  c
BE2C 22          ret
                ;---
                gui_proc_QuicklyVolume_clear:
BE2D 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BE30 7B 01       mov  r3,01h
BE32 E4          clr  a
BE33 FD          mov  r5,a ;=00h
BE34 FF          mov  r7,a ;=00h
BE35 12 8B 22    call osd_clear_window_text
BE38 C3          clr  c
BE39 22          ret
                ;------------------
;:------------- ;:----------------- code
                ;------------------
                handle_event_detected_video:    ;in: r7   ... apply detected_v
BE3A BF 0F 08    jne  r7,ID_event_0Fh_pal_ntsc,@@exit   ;-
BE3D 90 00 0D    mov  dptr,xram_sett_detected_v         ;\
BE40 E0          movx a,[dptr]                          ;
BE41 FF          mov  r7,a                              ;
BE42 12 96 8B    call lcd_apply_detected_video_r7       ;/
                @@exit:
BE45 22          ret
                ;------------------
                main_init_part_1:
BE46 E4          clr  a                                 ;\
BE47 FF          mov  r7,a   ;00h --> set bit7          ;
BE48 12 00 0E    call init_SFR_IO_memory_system         ;/
BE4B 90 FD 0E    mov  dptr,IO_PLL_0Eh_used              ;\
BE4E 74 20       mov  a,20h                             ;
BE50 F0          movx [dptr],a                          ;/
BE51 22          ret
                ;------------------
                gui_proc_Contrast_clear:
BE52 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BE55 E4          clr  a
BE56 FB          mov  r3,a ;=00h
BE57 FD          mov  r5,a ;=00h
BE58 FF          mov  r7,a ;=00h
BE59 12 8B 22    call osd_clear_window_text
BE5C C3          clr  c
BE5D 22          ret
                ;---
                gui_proc_Saturation_clear:
BE5E 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BE61 E4          clr  a
BE62 FB          mov  r3,a ;=00h
BE63 FD          mov  r5,a ;=00h
BE64 FF          mov  r7,a ;=00h
BE65 12 8B 22    call osd_clear_window_text
BE68 C3          clr  c
BE69 22          ret
                ;---
                gui_proc_Tint_clear:
BE6A 75 3B 0F    mov  [iram_tmp__3Bh],0Fh
BE6D E4          clr  a
BE6E FB          mov  r3,a ;=00h
BE6F FD          mov  r5,a ;=00h
BE70 FF          mov  r7,a ;=00h
BE71 12 8B 22    call osd_clear_window_text
BE74 C3          clr  c
BE75 22          ret
                ;------------------
                osd_set_bitmap_start:
                 ;in: r7=first bitmap character (originated at char 1C0h) (always 28h)
                 ;- - -
BE76 EF          mov  a,r7                              ;\
BE77 90 FB 11    mov  dptr,IO_OSD_bitmap_start_lsb      ; lsb
BE7A F0          movx [dptr],a                          ;/
BE7B 90 FB 70    mov  dptr,IO_OSD_bitmap_start_msb      ;\
BE7E E4          clr  a                                 ; msb (fixed, 00h)
BE7F F0          movx [dptr],a                          ;/
BE80 22          ret
                ;------------------
                set_IO_OSD_whatever_FB62h_bit0_to_r7: ;in: r7 (0 or 1) (always 00h)
BE81 90 FB 62    mov  dptr,IO_OSD_whatever_FB62h
BE84 E0          movx a,[dptr]
BE85 54 FE       and  a,0FEh         ;clear.bit0
BE87 F0          movx [dptr],a
BE88 E0          movx a,[dptr]
BE89 4F          or   a,r7           ;set new bit
BE8A F0          movx [dptr],a
BE8B 22          ret
                ;------------------
                .if lcd_spi_version<ver11sep2017
                fast_other_delay_r6r7:   ;similar as "fast_delay_r6r7" and "fast_weird_delay_r6r7"
                @@lop:
BE8C EF          mov  a,r7      ;old.lsb        ;1
BE8D 1F          dec  r7        ;lsb            ;1
BE8E 70 01       jnz  a,@@keep_msb              ;2
BE90 1E          dec  r6        ;msb            ;-
                @@keep_msb:
BE91 14          dec  a                         ;1  ;<-- using PREV lsb here
BE92 4E          or   a,r6      ;old.lsb OR msb ;1  ;<-- using NEW msb here
BE93 70 F7       jnz  a,@@lop                   ;2     ;total=8 ?
BE95 22          ret
                .endif
                ;------------------
                .if tech_version>=ver11sep2017
                 conditionally_switch_screen_and_backlight_off:
B7EC 90 00 4E     mov  dptr,xram_keypad_flags_lsb
B7EF E0           movx a,[dptr]
B7F0 30 E0 03     jz   a.0,@@already_off
B7F3 12 AA 17     call switch_screen_and_backlight_off
                 @@already_off:
B7F6 22           ret
                .endif
                ;------------------
                watchdog_disable:
BE96 75 BE 55    mov  [SFR_IO_watchdog_unlock],55h              ;-unlock
BE99 E4          clr  a                                         ;\disable
BE9A F5 BA       mov  [SFR_IO_watchdog_enable],a     ;=00h      ;/
BE9C 75 BE AA    mov  [SFR_IO_watchdog_unlock],0AAh             ;-lock
BE9F 22          ret
                ;------------------
                gui_proc_ModeMenu_apply:
BEA0 90 00 25    mov  dptr,xram_sett_mode               ;\
BEA3 E0          movx a,[dptr]                          ;
BEA4 FF          mov  r7,a                              ;
BEA5 12 95 F8    call apply_mode_ratio_r7               ;/
BEA8 D3          set  c
BEA9 22          ret
                ;---
                gui_proc_QuicklyMode_apply:
BEAA 90 00 25    mov  dptr,xram_sett_mode               ;\
BEAD E0          movx a,[dptr]                          ;
BEAE FF          mov  r7,a                              ;
BEAF 12 95 F8    call apply_mode_ratio_r7               ;/
BEB2 D3          set  c
BEB3 22          ret
                ;------------------
                osd_set_character_xysiz:   ;in: r5=ysiz=10h, r7=xsiz=0Ch
BEB4 90 FB 76    mov  dptr,IO_OSD_char_xsiz             ;\
BEB7 EF          mov  a,r7           ;=0Ch              ; xsiz
BEB8 F0          movx [dptr],a                          ;/
BEB9 A3          inc  dptr ;=IO_OSD_char_ysiz           ;\
BEBA ED          mov  a,r5           ;=10h              ; ysiz
BEBB F0          movx [dptr],a                          ;/
BEBC 22          ret
                ;------------------
                get_settings_VCOM_DC_16bit:
BEBD 90 00 10    mov  dptr,xram_sett_vcom_dc_hi
BEC0 E0          movx a,[dptr]
BEC1 FE          mov  r6,a     ;msb
BEC2 A3          inc  dptr ;=xram_sett_vcom_dc_lo
BEC3 E0          movx a,[dptr]
BEC4 FF          mov  r7,a     ;lsb
BEC5 22          ret
                ;------------------
                osd_disable_all_five_windows:
BEC6 90 FB 05    mov  dptr,IO_OSD_window_enable_bits
BEC9 E0          movx a,[dptr]
BECA 54 E0       and  a,0E0h    ;clear bit0..4
BECC F0          movx [dptr],a
BECD 22          ret
                ;------------------
                general_flash_wait:
                @@wait_lop:                     ;\
BECE 90 FD DF    mov  dptr,IO_SPI_status_ready  ; wait
BED1 E0          movx a,[dptr]                  ;
BED2 30 E7 F9    jz   a.7,@@wait_lop            ;/
BED5 22          ret
                ;------------------
                .if shuffle_version<ver11sep2017
                  defdata_flash_chiptype_list
                .endif
                ;------------------
                get_settings_brightness:
BEDE 90 00 12    mov  dptr,xram_sett_brightness
BEE1 E0          movx a,[dptr]
BEE2 FF          mov  r7,a     ;lsb?
BEE3 7E 00       mov  r6,00h   ;msb?
BEE5 22          ret
                ;---
                get_settings_contrast:
BEE6 90 00 13    mov  dptr,xram_sett_contrast
BEE9 E0          movx a,[dptr]
BEEA FF          mov  r7,a
BEEB 7E 00       mov  r6,00h
BEED 22          ret
                ;---
                get_settings_VCOM_AC:
BEEE 90 00 0F    mov  dptr,xram_sett_vcom_ac
BEF1 E0          movx a,[dptr]
BEF2 FF          mov  r7,a
BEF3 7E 00       mov  r6,00h
BEF5 22          ret
                ;---
                get_settings_power:  ;(OFF,ON,SAVE)
BEF6 90 00 2B    mov  dptr,xram_sett_power_up ;(OFF,ON,SAVE)
BEF9 E0          movx a,[dptr]
BEFA FF          mov  r7,a
BEFB 7E 00       mov  r6,00h
BEFD 22          ret
                ;---
                get_curr_sett_keypadtype:  ;copy of "xram_sett_keypadtype"
BEFE 90 00 4E    mov  dptr,xram_curr_keypadtype
BF01 E0          movx a,[dptr]
BF02 FF          mov  r7,a
BF03 7E 00       mov  r6,00h
BF05 22          ret
                ;---
                get_settings_no_signal:
BF06 90 00 2C    mov  dptr,xram_sett_no_signal
BF09 E0          movx a,[dptr]
BF0A FF          mov  r7,a
BF0B 7E 00       mov  r6,00h
BF0D 22          ret
                ;---
                get_settings_ir:
BF0E 90 00 28    mov  dptr,xram_sett_ir
BF11 E0          movx a,[dptr]
BF12 FF          mov  r7,a
BF13 7E 00       mov  r6,00h
BF15 22          ret
                ;---
                get_settings_language:
BF16 90 00 1A    mov  dptr,xram_sett_language
BF19 E0          movx a,[dptr]
BF1A FF          mov  r7,a
BF1B 7E 00       mov  r6,00h
BF1D 22          ret
                ;------------------
                ;(unused)
BF1E 00          nop
BF1F 00          nop
BF20 00          nop
                .if blah_version<ver11sep2017
BF21 90            db   90h  ;144 decimal ;?
                .else
                   db   6Ah  ;106 decimal ;???
                .endif
BF22 00          nop
BF23 00          nop
BF24 00          nop
BF25 00          nop
                ;------------------
                osd_disable_all_windows_and_whatever:  ;used OFTEN, disable OSD?
BF26 12 BE C6    lcall osd_disable_all_five_windows        ;-disable all windows
BF29 E4          clr  a                                    ;\
BF2A FF          mov  r7,a  ;=00h (=clear bit)             ; whatever ??
BF2B 02 BE 81    ljmp set_IO_OSD_whatever_FB62h_bit0_to_r7 ;/
                ;------------------
                get_settings_mode_dupe:         ;16:9 or 4:3
BF2E 90 00 25    mov  dptr,xram_sett_mode
BF31 E0          movx a,[dptr]
BF32 FF          mov  r7,a
BF33 7E 00       mov  r6,00h
BF35 22          ret
                ;------------------
                get_settings_mode:              ;16:9 or 4:3
BF36 90 00 25    mov  dptr,xram_sett_mode
BF39 E0          movx a,[dptr]
BF3A FF          mov  r7,a
BF3B 7E 00       mov  r6,00h
BF3D 22          ret
                ;------------------
                get_settings_saturation:
BF3E 90 00 14    mov  dptr,xram_sett_saturation
BF41 E0          movx a,[dptr]
BF42 FF          mov  r7,a
BF43 7E 00       mov  r6,00h
BF45 22          ret
                ;------------------
                get_settings_tint:
BF46 90 00 15    mov  dptr,xram_sett_tint
BF49 E0          movx a,[dptr]
BF4A FF          mov  r7,a
BF4B 7E 00       mov  r6,00h
BF4D 22          ret
                ;------------------
                get_settings_rotate:
BF4E 90 00 26    mov  dptr,xram_sett_rotate
BF51 E0          movx a,[dptr]
BF52 FF          mov  r7,a
BF53 7E 00       mov  r6,00h
BF55 22          ret
                ;------------------
                get_settings_rotate_dupe:
BF56 90 00 26    mov  dptr,xram_sett_rotate
BF59 E0          movx a,[dptr]
BF5A FF          mov  r7,a
BF5B 7E 00       mov  r6,00h
BF5D 22          ret
                ;------------------
                get_settings_volume:
BF5E 90 00 18    mov  dptr,xram_sett_volume
BF61 E0          movx a,[dptr]
BF62 FF          mov  r7,a
BF63 7E 00       mov  r6,00h
BF65 22          ret
                ;------------------
                get_curr_keypadtype_text:
BF66 12 BE FE    lcall get_curr_sett_keypadtype
BF69 12 B8 FC    lcall get_txt_keyboard_type   ;xlat above to txt
BF6C 22          ret
                ;------------------
                get_ptr_to_whatever_unused_tile_numbers:
                 ;unused? (except by unused data structure)
BF6D 7B FF       mov  r3,0FFh
BF6F 7A 23       mov  r2,whatever_unused_tile_numbers/100h
BF71 79 F9       mov  r1,whatever_unused_tile_numbers and 0ffh
BF73 22          ret
                ;------------------
                get_self_ptr_to_blah_selfptr_1:
BF74 7B FF       mov  r3,0FFh
BF76 7A 25       mov  r2,blah_selfptr_1/100h
BF78 79 94       mov  r1,blah_selfptr_1 and 0ffh
BF7A 22          ret
                ;---
                get_self_ptr_to_blah_selfptr_2:
BF7B 7B FF       mov  r3,0FFh
BF7D 7A 25       mov  r2,blah_selfptr_2/100h
BF7F 79 A1       mov  r1,blah_selfptr_2 and 0ffh
BF81 22          ret
                ;---
                get_self_ptr_to_blah_selfptr_3:
BF82 7B FF       mov  r3,0FFh
BF84 7A 25       mov  r2,blah_selfptr_3/100h
BF86 79 AE       mov  r1,blah_selfptr_3 and 0ffh
BF88 22          ret
                ;---
                get_self_ptr_to_blah_selfptr_4:
BF89 7B FF       mov  r3,0FFh
BF8B 7A 25       mov  r2,blah_selfptr_4/100h
BF8D 79 BB       mov  r1,blah_selfptr_4 and 0ffh
BF8F 22          ret
                ;------------------
                .if lcd_spi_version<ver11sep2017
                main_init_part_5_core:
BF90 12 B4 4B    call display_spi_reset   ;PWM2 on-off-on with delays    RESET
BF93 02 53 21    jmp  display_spi_init    ;display SPI init
                .endif
                ;------------------
                set_current_window_to_r7:  ;in: r7=window(0..4) (whereas, 0 works special in some caeses)
BF96 90 00 98    mov  dptr,xram_current_window
BF99 EF          mov  a,r7
BF9A F0          movx [dptr],a
BF9B 22          ret
                ;------------------
                .if shuffle_version<ver11sep2017
                  defcode_detect_flash_chiptype
                .endif
                ;------------------
                secret_key_combo_data_MenuUDDUU:
                ;(to be used in Brightness menu) (aka: 09h=ENTER BRIGHTNESS, and then enter the +/- codes in there)
                ;--- MENU  +   -   -   +   +
BFA2 09 08 07..  db   09h,08h,07h,07h,08h,08h
                ;------------------
                do_level2key_and_level3key_stuff:
BFA8 12 8F 79    call do_level2key_stuff
BFAB 02 6B 38    jmp  do_level3key_stuff
                ;------------------
                gui_proc_Tint_apply:
BFAE 12 76 20    call apply_settings_to_IO_ports
BFB1 D3          set  c
BFB2 22          ret
                ;------------------
                gui_proc_QuicklySysRotate_apply:  ;dummy/ret ;\
BFB3 12 BF D6    call dummy_ret2                             ;
BFB6 D3          set  c                                      ; xflip
BFB7 22          ret                                         ; (not implemented)
                ;---                                         ;
                gui_proc_SysMenuXflip_apply:      ;dummy/ret ;
BFB8 12 BF D6    call dummy_ret2                             ;
BFBB D3          set  c                                      ;
BFBC 22          ret                                         ;/
                ;------------------
                .if lcd_spi_version<ver11sep2017
                  main_init_part_5:
BFBD 02 BF 90      ljmp main_init_part_5_core  ;display spi reset/init
                .endif
                ;---
                to_init_io_via_huge_fixed_io_list:  ;unused?
BFC0 02 90 DE    jmp  init_io_via_huge_fixed_io_list
                ;---
                .if tech_version<ver11sep2017
                  to_switch_screen_and_backlight_off:
BFC3 02 AF 27      jmp  switch_screen_and_backlight_off
                .endif
                ;---
                to_init_OSD_window_vram_allocation:
BFC6 02 5B 88    jmp  init_OSD_window_vram_allocation
                ;------------------
                xxx_BFC9h:    ;initial variables for a keyboard function?
BFC9 00          db   00h
BFCA 08          db   08h
                ;------------------
                supported_input_IDs:
BFCB 00 02       db   00h,02h     ;supported inputs (CVBS1 and CVBS3 pins)
                ;------------------
                gui_proc_FactoryPic_VCOM_AC_apply:      ;dummy/ret
BFCD D3          set  c
BFCE 22          ret
                ;---
                gui_proc_FactoryPic_VCOM_DC_change:     ;dummy/ret
BFCF D3          set  c
BFD0 22          ret
                ;---
                gui_proc_IR_A_B_apply:                  ;dummy/ret
BFD1 D3          set  c
BFD2 22          ret
                ;---
                gui_proc_QuicklyVolume_apply:           ;dummy/ret
BFD3 D3          set  c
BFD4 22          ret
                ;------------------
BFD5 22         dummy_ret1: ret   ;used 1x
BFD6 22         dummy_ret2: ret   ;used 4x
BFD7 22         dummy_ret3: ret   ;used 1x
BFD8 22         dummy_ret4: ret   ;used 1x
                ;------------------
                xxx_BFD9h:
                 ;(this is a list of function ID's)
                 ;(there's only ONE value in the list)
BFD9 00          db   ID_func_00h_nul
                xxx_BFD9h_num_entries equ $-xxx_BFD9h
                ;------------------
BFDA 22         dummy_ret5: ret   ;used 1x
                ;------------------
                .if lcd_spi_version>=ver11sep2017
                  main_init_part_5: ret
                .endif
                ;------------------
BFDB 22         dummy_ret6: ret   ;used 2x
                ;------------------
;:------------- ;:----------------- Settings (and free memory)
                ;------------------
BFDC FF FF FF..  deff 0E000h-$   ;unused (FFh-filled)
                ;------------------
                .pack_crc32 rom_crc32     ;CRC32 for whole 56K ROM area (excluding settings in last 2x4K) (and excluding unused space above 64K)
                ;---
                .if tech_version<ver11sep2017
                   wanted_crc32 equ 87bbh   ;XXX lower 16bit only
                .else
                   wanted_crc32 equ 102ch   ;XXX lower 16bit only
                .endif
                ;---
                .if (patchme=0)
                .errif wanted_crc32<>rom_crc32  ;verify checksum for original rom
                .endif
                ;------------------
                .macro defdata_settings
                .pack_org $
E000             db 0AAh // .errif ($-1 and 0ffh)+8<>xram_sett_id_AAh
E001             db 001h // .errif ($-1 and 0ffh)+8<>xram_sett_curr_power
                 .if flash_version<ver11sep2017
E002               db 006h // .errif ($-1 and 0ffh)+8<>xram_sett_cmd_wren
E003               db 020h // .errif ($-1 and 0ffh)+8<>xram_sett_cmd_erase
                 .else
                   db 10h  // .errif ($-1 and 0ffh)+8<>xram_sett_flash_id
                   db 00h  // .errif ($-1 and 0ffh)+8<>xram_sett_lock_some
E002               db 004h // .errif ($-1 and 0ffh)+8<>xram_sett_lock_all
E003               db 020h // .errif ($-1 and 0ffh)+8<>xram_sett_cmd_erase
                   db 0FFh // .errif ($-1 and 0ffh)+8<>xram_sett_testburn
                 .endif
E004             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_input
E005             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_detected_v
E006             db 011h // .errif ($-1 and 0ffh)+8<>xram_sett___0Eh
E007             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_vcom_ac
E008             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_vcom_dc_hi
E009             db 04Fh // .errif ($-1 and 0ffh)+8<>xram_sett_vcom_dc_lo
E00A             db 032h // .errif ($-1 and 0ffh)+8<>xram_sett_brightness
E00B             db 032h // .errif ($-1 and 0ffh)+8<>xram_sett_contrast
E00C             db 032h // .errif ($-1 and 0ffh)+8<>xram_sett_saturation
E00D             db 032h // .errif ($-1 and 0ffh)+8<>xram_sett_tint
E00E             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett___16h
E00F             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_blankcolor
E010             db 032h // .errif ($-1 and 0ffh)+8<>xram_sett_volume
E011             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_blah1
E012             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_language
E013             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_0
E014             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_1
E015             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_2
E016             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_3
E017             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_4
E018             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_5
E019             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_6
E01A             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_7
E01B             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_8
E01C             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_zero_9
                .if wide_screen=0               ;
E01D               db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_mode
                .else
E01D               db 001h // .errif ($-1 and 0ffh)+8<>xram_sett_mode
                .endif
E01E             db 003h // .errif ($-1 and 0ffh)+8<>xram_sett_rotate
                .if tech_version>=ver11sep2017
                   db 0  // .errif ($-1 and 0ffh)+8<>xram_sett_zero_A
                 .endif
E01F             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_req_reset
E020             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_ir
E021             db 001h // .errif ($-1 and 0ffh)+8<>xram_sett_quicklysys
E022             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_blah2
E023             db 002h // .errif ($-1 and 0ffh)+8<>xram_sett_power_up
                .if tech_version<ver11sep2017
E024               db (002h-patchme*2) // .errif ($-1 and 0ffh)+8<>xram_sett_no_signal
                .else
E024               db 000h           // .errif ($-1 and 0ffh)+8<>xram_sett_no_signal
                .endif
E025             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett___2Dh
E026             db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_blah3
E027             db 0FFh // .errif ($-1 and 0ffh)+8<>xram_sett_unused1
E028             db 0FFh // .errif ($-1 and 0ffh)+8<>xram_sett_unused2
E029             db 0FFh // .errif ($-1 and 0ffh)+8<>xram_sett_unused3
E02A             db 0FFh // .errif ($-1 and 0ffh)+8<>xram_sett_unused4
E02B             db 0FFh // .errif ($-1 and 0ffh)+8<>xram_sett_unused5
E02C             db 0FFh // .errif ($-1 and 0ffh)+8<>xram_sett_unused6
E02D             db 0FFh // .errif ($-1 and 0ffh)+8<>xram_sett_unused7
                .if tech_version<ver11sep2017
E02E               db 016h // .errif ($-1 and 0ffh)+8<>xram_sett_keypadtype
                .else
                   db 000h // .errif ($-1 and 0ffh)+8<>xram_sett_keypadtype
                   db 0FFh // .errif ($-1 and 0ffh)+8<>xram_sett_unused8
                .endif
E02F            db 055h // .errif ($-1 and 0ffh)+8<> xram_sett_id_55h
                .pack_chksum_xor8bit @@chksum
E030            db @@chksum // .errif ($-1 and 0ffh)+8<> xram_sett_chksum
                .errif ($ and 0fffh)<>xram_settings_size
                ;---
E031 FF FF FF .. deff 1000h-xram_settings_size ;unused (FFh-filled) (probably ERASED upon save settings?)
                .endm
                ;------------------
                settings_1:
E000 AA .. ..    defdata_settings
                ;---
                settings_2:
F000 AA .. ..    defdata_settings
                ;------------------
10000..3FFFF .. ;deff 30000h     ;unused (FFh-filled)
                ;------------------
40000           end
                ;------------------
;:------------- ;:----------------- End of disassembly
                ;------------------
